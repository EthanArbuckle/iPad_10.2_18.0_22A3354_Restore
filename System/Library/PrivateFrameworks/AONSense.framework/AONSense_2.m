void *CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionStateObserver.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t result;

  v9 = v5;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v9, a1, a2, a3, a4);
  if (!v6)
  {
    if ((*(_BYTE *)(v9 + *(int *)(a4(0) + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    a5(v9, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_MotionStateObserver.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Int CLP_LogEntry_PrivateData_MotionStateObserver.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionStateObserver@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(int *a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v6 = a3 + a1[5];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[7];
  v9 = a3 + a1[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a3 + v8;
  v11 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionStateObserver()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionStateObserver@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionStateObserver()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionStateObserver()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3 = (int *)result;
  if (*(_QWORD *)(v0 + *(int *)(result + 20) + 8))
    result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_QWORD *)(v0 + v3[6] + 8))
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[7]) != 67)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v0 + v3[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v0 + v3[9]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutSettings.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutSettings@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 67;
  *(_BYTE *)(a2 + v8) = 5;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutEvent.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          goto LABEL_6;
        case 2:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
LABEL_6:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, 4);
    closure #5 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutEvent.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutEvent@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(a2 + a1[6], 1, 1, v5);
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 19;
  v6(a2 + v7, 1, 1, v5);
  v8 = a2 + a1[9];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionStateMediator.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v7 & 1) != 0)
        return swift_release();
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
        v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent;
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent;
        v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent;
        goto LABEL_7;
      }
      if (v6 == 2)
        break;
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
LABEL_7:
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
        v12 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        v2 = v12;
        swift_endAccess();
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    v12 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:));
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionStateMediator.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v30;
  int *v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v50 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutEvent?, CLP_LogEntry_PrivateData_WorkoutEvent?));
  MEMORY[0x24BDAC7A8](v48);
  v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v47 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v47 - v19;
  v21 = a1;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v23 = v55;
  v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v27 = v21;
    if (v26(v25, 1, v9) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  v27 = v21;
  v28 = v54;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  v30 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v30 & 1) == 0)
    goto LABEL_7;
LABEL_11:
  v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v32 = *v31;
  v33 = *((_BYTE *)v31 + 4);
  v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v33 & 1) == 0)
  {
    v35 = (uint64_t)v53;
    v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34)
      goto LABEL_16;
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  v35 = (uint64_t)v53;
  v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0)
    goto LABEL_7;
LABEL_16:
  v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  v39 = v51;
  v40 = v51 + *(int *)(v48 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v41 = v38;
  v42 = v39;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v44 = v50;
  if (v43(v42, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
    if (v43(v40, 1, v44) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
      return 1;
    }
    goto LABEL_21;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if (v43(v40, 1, v44) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutEvent?, CLP_LogEntry_PrivateData_WorkoutEvent?));
    return 0;
  }
  v45 = v47;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  v46 = specialized static CLP_LogEntry_PrivateData_WorkoutEvent.== infix(_:_:)(v35, v45);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  return (v46 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_MotionStateMediator.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionStateMediator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionStateMediator@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionStateMediator()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionStateMediator()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BodyMetrics.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
          goto LABEL_7;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
LABEL_7:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    closure #9 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    closure #11 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 56)) != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #11 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 60) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BodyMetrics.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BodyMetrics@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  v14 = a2 + a1[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + v13;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1[14];
  v17 = a2 + a1[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(a2 + v16) = 8;
  v18 = a2 + a1[15];
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BodyMetrics()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BodyMetrics()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_Natalimetry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Natalimetry.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Natalimetry.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_Natalimetry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Int CLP_LogEntry_PrivateData_Natalimetry.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Natalimetry@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Natalimetry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Natalimetry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Natalimetry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Natalimetry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Timer.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Timer.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Timer.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Timer._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Timer) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Timer.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Timer, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer(a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Timer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Timer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Timer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DigitalElevationModel.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
    if ((*(_BYTE *)(v5 + v10[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DigitalElevationModel.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DigitalElevationModel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[11];
  v14 = a2 + a1[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + v13;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DigitalElevationModel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DirectionOfTravel.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 11:
        case 12:
        case 13:
        case 14:
          type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
    if ((*(_BYTE *)(v5 + v10[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
    closure #9 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #11 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #12 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #13 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    closure #14 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 56) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #11 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 60)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #12 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 64)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #13 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 68)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #14 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 72)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DirectionOfTravel.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DirectionOfTravel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v10;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1[11];
  v14 = a2 + a1[10];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a2 + v13;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a1[13];
  v17 = a2 + a1[12];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a2 + v16;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = a1[15];
  v20 = a2 + a1[14];
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(a2 + v19) = 2;
  v21 = a1[17];
  *(_BYTE *)(a2 + a1[16]) = 2;
  *(_BYTE *)(a2 + v21) = 2;
  *(_BYTE *)(a2 + a1[18]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DirectionOfTravel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MapVector.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapVector.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapVector.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v15 = (int *)(a1
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  swift_beginAccess();
  *(_DWORD *)v11 = v16;
  *(_BYTE *)(v11 + 4) = (_BYTE)v15;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MapVector._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v7 & 1) != 0)
        return swift_release();
      if (v6 == 3)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
        v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel;
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel;
        goto LABEL_7;
      }
      if (v6 == 2)
        break;
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
        v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
        v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
LABEL_7:
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
        v12 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
        v2 = v12;
        swift_endAccess();
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    v12 = v2;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v12 = v7;
  v16 = *(_QWORD *)(v12 + *(int *)(a4(0) + 20));
  v17 = swift_retain();
  a5(v17, a1, a2, a3);
  if (v8)
    return swift_release();
  v18 = v16 + *a6;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  a7(v16, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MapVector.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MapVector.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v30;
  int *v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a2;
  v50 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v47 = (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DirectionOfTravel?, CLP_LogEntry_PrivateData_DirectionOfTravel?));
  MEMORY[0x24BDAC7A8](v48);
  v51 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v47 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v54 = (uint64_t)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v47 - v19;
  v21 = a1;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v23 = v55;
  v24 = v55
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v26((uint64_t)v15, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v27 = v21;
    if (v26(v25, 1, v9) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  v27 = v21;
  v28 = v54;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v26(v25, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v25, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  v30 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v28, (uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v30 & 1) == 0)
    goto LABEL_7;
LABEL_11:
  v31 = (int *)(v27
              + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v32 = *v31;
  v33 = *((_BYTE *)v31 + 4);
  v34 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v33 & 1) == 0)
  {
    v35 = (uint64_t)v53;
    v36 = (uint64_t)v52;
    if ((*(_BYTE *)(v34 + 4) & 1) == 0 && v32 == *(_DWORD *)v34)
      goto LABEL_16;
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  v35 = (uint64_t)v53;
  v36 = (uint64_t)v52;
  if ((*(_BYTE *)(v34 + 4) & 1) == 0)
    goto LABEL_7;
LABEL_16:
  v37 = v27
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v38 = v23
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  v39 = v51;
  v40 = v51 + *(int *)(v48 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v41 = v38;
  v42 = v39;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  v44 = v50;
  if (v43(v42, 1, v50) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
    if (v43(v40, 1, v44) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
      return 1;
    }
    goto LABEL_21;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if (v43(v40, 1, v44) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DirectionOfTravel?, CLP_LogEntry_PrivateData_DirectionOfTravel?));
    return 0;
  }
  v45 = v47;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v40, v47, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  v46 = specialized static CLP_LogEntry_PrivateData_DirectionOfTravel.== infix(_:_:)(v35, v45);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  return (v46 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_MapVector.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MapVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapVector()
{
  return CLP_LogEntry_PrivateData_MapVector.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapVector()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapVector@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapVector()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapVector()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    if ((*(_BYTE *)(v5 + v10[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 48)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[9];
  v11 = a2 + a1[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a2 + v10) = 2;
  v12 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v12) = 2;
  *(_BYTE *)(a2 + a1[12]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelBridgeNotification.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_TunnelBridgeNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Int CLP_LogEntry_PrivateData_TunnelBridgeNotification.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 12:
        case 13:
        case 14:
        case 15:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 11:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v17 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if ((*(_BYTE *)(v20 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v21 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  if (*v21 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v22 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if ((*(_BYTE *)(v23 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if ((*(_BYTE *)(v24 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  if ((*(_BYTE *)(v25 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  char v68;
  uint64_t v69;
  double v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v73 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v74 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v73 - v12;
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v75;
  v16 = v75
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  v17 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v8, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v19 = v18(v17, 1, v3);
    v20 = a1;
    if (v19 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_10;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  v21 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v18(v17, 1, v3) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v23 = v73;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v17, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v20 = a1;
  swift_retain();
  swift_retain();
  v24 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v21, v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v23, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v21, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v24 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v25 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  v26 = *(double *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 8);
  v27 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  if ((v25 & 1) != 0)
  {
    if ((*(_BYTE *)(v27 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v27 + 8) & 1) != 0 || v26 != *(double *)v27)
  {
    goto LABEL_7;
  }
  v28 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  v29 = *(double *)v28;
  LOBYTE(v28) = *(_BYTE *)(v28 + 8);
  v30 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  if ((v28 & 1) != 0)
  {
    if ((*(_BYTE *)(v30 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v30 + 8) & 1) != 0 || v29 != *(double *)v30)
  {
    goto LABEL_7;
  }
  v31 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  v32 = *(double *)v31;
  LOBYTE(v31) = *(_BYTE *)(v31 + 8);
  v33 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  if ((v31 & 1) != 0)
  {
    if ((*(_BYTE *)(v33 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v33 + 8) & 1) != 0 || v32 != *(double *)v33)
  {
    goto LABEL_7;
  }
  v34 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }
  v37 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  v38 = *(double *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  v39 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  if ((v37 & 1) != 0)
  {
    if ((*(_BYTE *)(v39 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v39 + 8) & 1) != 0 || v38 != *(double *)v39)
  {
    goto LABEL_7;
  }
  v40 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v41 = *v40;
  v42 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v43 = *v42;
  if (v41 == 3)
  {
    if (v43 != 3)
      goto LABEL_7;
  }
  else if (v43 == 3 || v41 != v43)
  {
    goto LABEL_7;
  }
  v44 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  v46 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_7;
  }
  v47 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  v49 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_7;
  }
  v50 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  v52 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) != 0)
      goto LABEL_55;
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
    goto LABEL_7;
LABEL_55:
  v53 = (unsigned __int8 *)(v20
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  v54 = *v53;
  v55 = (unsigned __int8 *)(v15
                          + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  v56 = *v55;
  if (v54 == 2)
  {
    if (v56 != 2)
      goto LABEL_7;
  }
  else if (v56 == 2 || ((((v56 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }
  v57 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  v58 = *(double *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 8);
  v59 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  if ((v57 & 1) != 0)
  {
    if ((*(_BYTE *)(v59 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v59 + 8) & 1) != 0 || v58 != *(double *)v59)
  {
    goto LABEL_7;
  }
  v60 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  v61 = *(double *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 8);
  v62 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v62 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v62 + 8) & 1) != 0 || v61 != *(double *)v62)
  {
    goto LABEL_7;
  }
  v63 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  v64 = *(double *)v63;
  LOBYTE(v63) = *(_BYTE *)(v63 + 8);
  v65 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  if ((v63 & 1) != 0)
  {
    if ((*(_BYTE *)(v65 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v65 + 8) & 1) != 0 || v64 != *(double *)v65)
  {
    goto LABEL_7;
  }
  v66 = v20
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  v67 = *(double *)v66;
  v68 = *(_BYTE *)(v66 + 8);
  swift_release();
  v69 = v15
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  v70 = *(double *)v69;
  v71 = *(unsigned __int8 *)(v69 + 8);
  swift_release();
  if ((v68 & 1) != 0)
  {
    if (!v71)
      return 0;
  }
  else
  {
    if (v67 == v70)
      v72 = v71;
    else
      v72 = 1;
    if ((v72 & 1) != 0)
      return 0;
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TunnelEndPoint.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_TunnelEndPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Int CLP_LogEntry_PrivateData_TunnelEndPoint.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TunnelEndPoint@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapsRouteHintData.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[9] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MapsRouteHintData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return CLP_LogEntry_PrivateData_MapsRouteHintData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapsRouteHintData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = closure #1 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(v3, a1, a2, a3);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
    v10 = v9;
    if (*(_BYTE *)(v3 + *(int *)(v9 + 32)) != 7)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v3 + *(int *)(v10 + 36)) != 7)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_MapMatchingRouteHint.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v8;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a2 + a1[7], 1, 1, v5);
  v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 7;
  *((_BYTE *)a2 + v8) = 7;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return CLP_LogEntry_PrivateData_MapMatchingRouteHint.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MapMatchingRouteHint.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.protoMessageName.getter()
{
  return 0xD00000000000003ALL;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_12;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
          goto LABEL_11;
        case 6:
        case 7:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          goto LABEL_12;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_12:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = closure #1 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, 2);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
    v10 = v9;
    if ((*((_BYTE *)v3 + *(int *)(v9 + 36) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (*((_BYTE *)v3 + *(int *)(v10 + 40)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    if (*(_QWORD *)(*v3 + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
    closure #7 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)((uint64_t)v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_WorkoutEvent.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v15 + 32), (uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_DigitalElevationModel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 2)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + a1[7];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v7)((char *)a2 + a1[8], 1, 1, v6);
  v9 = a1[10];
  v10 = (char *)a2 + a1[9];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  *((_BYTE *)a2 + v9) = 5;
  v11 = a1[12];
  v12 = (char *)a2 + a1[11];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  *((_BYTE *)a2 + v11) = 2;
  *((_BYTE *)a2 + a1[13]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReachabilityState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + v3[6]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v0 + v3[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReachabilityState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReachabilityState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 5;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReachabilityState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReachabilityState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Battery.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Battery.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Battery.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_Battery._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Battery.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
    closure #6 in CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_Battery.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Battery@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + v5) = 2;
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v7) = 5;
  v8 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  v9 = a2 + v8;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Battery()
{
  return CLP_LogEntry_PrivateData_Battery.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Battery.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Battery()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Battery@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Battery()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Battery()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceStatus.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
        case 11:
        case 12:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_14;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState;
          goto LABEL_11;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_Battery;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_14;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_14:
          v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v13 != 20)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(v9, a1, a2, a3);
  v14 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  if (*v14 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  if (*v15 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  if (*v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  if (*v17 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v18 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  if (*v18 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if ((*(_BYTE *)(v20 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v21 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  if (*v21 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, closure #1 in static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DeviceStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  int *v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned __int8 *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  int v85;
  unsigned __int8 *v86;
  int v87;
  unsigned __int8 *v88;
  int v89;
  unsigned __int8 *v90;
  int v91;
  unsigned __int8 *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  int *v96;
  int v97;
  char v98;
  uint64_t v99;
  int *v100;
  int v101;
  char v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v124 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v111 = *(_QWORD *)(v3 - 8);
  v112 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v108 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Battery?, CLP_LogEntry_PrivateData_Battery?));
  MEMORY[0x24BDAC7A8](v110);
  v113 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v121 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v114 = (uint64_t)&v108 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v116 = *(_QWORD *)(v10 - 8);
  v117 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v109 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReachabilityState?, CLP_LogEntry_PrivateData_ReachabilityState?));
  MEMORY[0x24BDAC7A8](v115);
  v118 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v120 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v122 = (uint64_t)&v108 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v119 = (uint64_t)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v123 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v108 - v26;
  v28 = a1;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v30 = v124;
  v31 = v124
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1, v17) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = v33(v32, 1, v17);
    v35 = v30;
    v36 = v28;
    if (v34 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v38 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v39 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v38);
    goto LABEL_8;
  }
  v36 = v28;
  v37 = v123;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v123, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v33(v32, 1, v17) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v41 = v119;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  v35 = v30;
  swift_retain();
  v42 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v37, v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v42 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v43 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v44 = *v43;
  v45 = *((_BYTE *)v43 + 4);
  v46 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v45 & 1) != 0)
  {
    v48 = (uint64_t)v120;
    v47 = (uint64_t)v121;
    v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v48 = (uint64_t)v120;
    v47 = (uint64_t)v121;
    v49 = v122;
    if ((*(_BYTE *)(v46 + 4) & 1) != 0 || v44 != *(_DWORD *)v46)
      goto LABEL_8;
  }
  v50 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  v51 = *v50;
  v52 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  v53 = *v52;
  if (v51 == 20)
  {
    if (v53 != 20)
      goto LABEL_8;
  }
  else if (v53 == 20 || v51 != v53)
  {
    goto LABEL_8;
  }
  v54 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v55 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  v56 = v118;
  v57 = v118 + *(int *)(v115 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v58 = v55;
  v59 = v56;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v61 = v56;
  v62 = v117;
  if (v60(v61, 1, v117) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
    if (v60(v57, 1, v62) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
      goto LABEL_28;
    }
LABEL_26:
    v38 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReachabilityState?, CLP_LogEntry_PrivateData_ReachabilityState?);
LABEL_34:
    v39 = v59;
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if (v60(v57, 1, v62) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    goto LABEL_26;
  }
  v63 = v109;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, v109, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  v64 = specialized static CLP_LogEntry_PrivateData_ReachabilityState.== infix(_:_:)(v48, v63);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((v64 & 1) == 0)
    goto LABEL_8;
LABEL_28:
  v65 = v36
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  v66 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v67 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  v68 = v113;
  v69 = v113 + *(int *)(v110 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v70 = v67;
  v59 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  v72 = v68;
  v73 = v112;
  if (v71(v72, 1, v112) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
    if (v71(v69, 1, v73) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if (v71(v69, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
LABEL_33:
    v38 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Battery?, CLP_LogEntry_PrivateData_Battery?);
    goto LABEL_34;
  }
  v74 = v108;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, v108, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  v75 = specialized static CLP_LogEntry_PrivateData_Battery.== infix(_:_:)(v47, v74);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v74, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((v75 & 1) == 0)
    goto LABEL_8;
LABEL_36:
  v76 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  v77 = *v76;
  v78 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  v79 = *v78;
  if (v77 == 2)
  {
    if (v79 != 2)
      goto LABEL_8;
  }
  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v77) & 1) == 0)
  {
    goto LABEL_8;
  }
  v80 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  v81 = *v80;
  v82 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  v83 = *v82;
  if (v81 == 2)
  {
    if (v83 != 2)
      goto LABEL_8;
  }
  else if (v83 == 2 || ((((v83 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_8;
  }
  v84 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  v85 = *v84;
  v86 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  v87 = *v86;
  if (v85 == 2)
  {
    if (v87 != 2)
      goto LABEL_8;
  }
  else if (v87 == 2 || ((((v87 & 1) == 0) ^ v85) & 1) == 0)
  {
    goto LABEL_8;
  }
  v88 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  v89 = *v88;
  v90 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  v91 = *v90;
  if (v89 == 2)
  {
    if (v91 != 2)
      goto LABEL_8;
  }
  else if (v91 == 2 || ((((v91 & 1) == 0) ^ v89) & 1) == 0)
  {
    goto LABEL_8;
  }
  v92 = (unsigned __int8 *)(v36
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  v93 = *v92;
  v94 = (unsigned __int8 *)(v35
                          + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  v95 = *v94;
  if (v93 == 2)
  {
    if (v95 == 2)
      goto LABEL_61;
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v95 == 2 || ((((v95 & 1) == 0) ^ v93) & 1) == 0)
    goto LABEL_8;
LABEL_61:
  v96 = (int *)(v36
              + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
  swift_beginAccess();
  v97 = *v96;
  v98 = *((_BYTE *)v96 + 4);
  v99 = v35
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  if ((v98 & 1) != 0)
  {
    if ((*(_BYTE *)(v99 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v99 + 4) & 1) != 0 || v97 != *(_DWORD *)v99)
  {
    goto LABEL_8;
  }
  v100 = (int *)(v36
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
  swift_beginAccess();
  v101 = *v100;
  v102 = *((_BYTE *)v100 + 4);
  v103 = v35
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  if ((v102 & 1) != 0)
  {
    if ((*(_BYTE *)(v103 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v103 + 4) & 1) != 0 || v101 != *(_DWORD *)v103)
  {
    goto LABEL_8;
  }
  v104 = (unsigned __int8 *)(v36
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  v105 = *v104;
  swift_release();
  v106 = (unsigned __int8 *)(v35
                           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  v107 = *v106;
  swift_release();
  if (v105 == 2)
  {
    if (v107 != 2)
      return 0;
  }
  else if (v107 == 2 || ((((v107 & 1) == 0) ^ v105) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_DeviceStatus.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DeviceStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DeviceStatus()
{
  return CLP_LogEntry_PrivateData_DeviceStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalEnvironment.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int *v6;

  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
  if (!v4)
  {
    v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
    if (*(_BYTE *)(v3 + v6[6]) != 8)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v3 + v6[7]) != 8)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(_BYTE *)(v3 + v6[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SignalEnvironment.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalEnvironment@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 8;
  *(_BYTE *)(a2 + v7) = 8;
  v8 = a2 + a1[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return CLP_LogEntry_PrivateData_SignalEnvironment.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SignalEnvironment.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 8, 4, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MagSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MagSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MagSample.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          a4(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          a4(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MagSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MagSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MagSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MagSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MagSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MagSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Magnetometer.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Magnetometer.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Magnetometer.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_Magnetometer.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_MagSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Magnetometer.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Magnetometer.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Magnetometer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Magnetometer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Magnetometer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Magnetometer()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Reset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Reset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Reset.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Reset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Reset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t CLP_LogEntry_PrivateData_Timer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_Reset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Reset) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Reset.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Reset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1 + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Reset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Reset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Reset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Reset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccelerometerPace.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t static CLP_LogEntry_PrivateData_AccelerometerPace.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_AccelerometerPace.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccelerometerPace()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccelerometerPace@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccelerometerPace()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccelerometerPace()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FalseStepDetectorState.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v4)
  {
    if (*(_BYTE *)(v5 + v10[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FalseStepDetectorState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return CLP_LogEntry_PrivateData_FalseStepDetectorState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_FalseStepDetectorState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_StepCountEntry.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x24BDAC7A8](v3);
  v110 = (uint64_t)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x24BDAC7A8](v5);
  v108 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v89 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v90 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v12();
  v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  v12();
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  v92 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  v93 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  v94 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  v95 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  v96 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  v22 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  v97 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *v22 = 0;
  v22[1] = 0;
  v98 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  v23 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  *v23 = 2;
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v99 = v23;
  v100 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  v101 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)v26 = 0;
  *(_BYTE *)(v26 + 4) = 1;
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  v102 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)v27 = 0;
  *(_BYTE *)(v27 + 4) = 1;
  v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  v103 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)v28 = 0;
  *(_BYTE *)(v28 + 4) = 1;
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  v104 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)v29 = 0;
  *(_BYTE *)(v29 + 4) = 1;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  v105 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)v30 = 0;
  *(_BYTE *)(v30 + 4) = 1;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  v106 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)v31 = 0;
  *(_BYTE *)(v31 + 4) = 1;
  v107 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v109 = v1
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
  v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v35 = v89;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v37 = v90;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v39 = v91;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess();
  *(_DWORD *)v13 = v37;
  *(_BYTE *)(v13 + 4) = v40;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
  swift_beginAccess();
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess();
  *(_QWORD *)v14 = v42;
  *(_BYTE *)(v14 + 8) = (_BYTE)v41;
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
  swift_beginAccess();
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess();
  *(_QWORD *)v15 = v44;
  *(_BYTE *)(v15 + 8) = (_BYTE)v43;
  v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v45;
  LOBYTE(v45) = *(_BYTE *)(v45 + 4);
  swift_beginAccess();
  *(_DWORD *)v16 = v44;
  *(_BYTE *)(v16 + 4) = v45;
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)v46;
  LOBYTE(v46) = *(_BYTE *)(v46 + 4);
  v47 = v92;
  swift_beginAccess();
  *(_DWORD *)v47 = v44;
  *(_BYTE *)(v47 + 4) = v46;
  v48 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
  swift_beginAccess();
  v49 = *v48;
  LOBYTE(v48) = *((_BYTE *)v48 + 8);
  v50 = v93;
  swift_beginAccess();
  *(_QWORD *)v50 = v49;
  *(_BYTE *)(v50 + 8) = (_BYTE)v48;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
  swift_beginAccess();
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  v53 = v94;
  swift_beginAccess();
  *(_QWORD *)v53 = v52;
  *(_BYTE *)(v53 + 8) = (_BYTE)v51;
  v54 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
  swift_beginAccess();
  v55 = *v54;
  LOBYTE(v54) = *((_BYTE *)v54 + 8);
  v56 = v95;
  swift_beginAccess();
  *(_QWORD *)v56 = v55;
  *(_BYTE *)(v56 + 8) = (_BYTE)v54;
  v57 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  LODWORD(v55) = *(_DWORD *)v57;
  LOBYTE(v57) = *(_BYTE *)(v57 + 4);
  v58 = v96;
  swift_beginAccess();
  *(_DWORD *)v58 = v55;
  *(_BYTE *)(v58 + 4) = v57;
  v59 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  v61 = *v59;
  v60 = v59[1];
  v62 = v97;
  swift_beginAccess();
  *v62 = v61;
  v62[1] = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  v64 = v98;
  swift_beginAccess();
  *v64 = (_BYTE)v63;
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  v66 = v99;
  swift_beginAccess();
  *v66 = (_BYTE)v65;
  v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  v68 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v69 = v100;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  v70 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v70;
  LOBYTE(v70) = *(_BYTE *)(v70 + 4);
  v71 = v101;
  swift_beginAccess();
  *(_DWORD *)v71 = v68;
  *(_BYTE *)(v71 + 4) = v70;
  v72 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v72;
  LOBYTE(v72) = *(_BYTE *)(v72 + 4);
  v73 = v102;
  swift_beginAccess();
  *(_DWORD *)v73 = v68;
  *(_BYTE *)(v73 + 4) = v72;
  v74 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v74;
  LOBYTE(v74) = *(_BYTE *)(v74 + 4);
  v75 = v103;
  swift_beginAccess();
  *(_DWORD *)v75 = v68;
  *(_BYTE *)(v75 + 4) = v74;
  v76 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v76;
  LOBYTE(v76) = *(_BYTE *)(v76 + 4);
  v77 = v104;
  swift_beginAccess();
  *(_DWORD *)v77 = v68;
  *(_BYTE *)(v77 + 4) = v76;
  v78 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v78;
  LOBYTE(v78) = *(_BYTE *)(v78 + 4);
  v79 = v105;
  swift_beginAccess();
  *(_DWORD *)v79 = v68;
  *(_BYTE *)(v79 + 4) = v78;
  v80 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  LODWORD(v68) = *(_DWORD *)v80;
  LOBYTE(v80) = *(_BYTE *)(v80 + 4);
  v81 = v106;
  swift_beginAccess();
  *(_DWORD *)v81 = v68;
  *(_BYTE *)(v81 + 4) = v80;
  v82 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  LOBYTE(v82) = *v82;
  v83 = v107;
  swift_beginAccess();
  *v83 = (_BYTE)v82;
  v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  v85 = v110;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_release();
  v86 = v109;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v85, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v9 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_16;
        case 4:
        case 7:
        case 8:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_17;
        case 5:
        case 6:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 12:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_17;
        case 13:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_17;
        case 14:
        case 15:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_17;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace;
          goto LABEL_16;
        case 23:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_17;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState;
LABEL_16:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_17:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  if ((*(_BYTE *)(v20 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  if (*(_QWORD *)(v21 + 8))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  if (*v22 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v23 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  if (*v23 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #16 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  v24 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  if ((*(_BYTE *)(v24 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  if ((*(_BYTE *)(v25 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v26 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  if ((*(_BYTE *)(v26 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v27 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  if ((*(_BYTE *)(v27 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  if ((*(_BYTE *)(v28 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v29 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  if ((*(_BYTE *)(v29 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v30 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v30 != 6)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #24 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #16 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t closure #24 in closure #1 in CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  char v69;
  int *v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  char v80;
  uint64_t v81;
  int *v82;
  int v83;
  char v84;
  uint64_t v85;
  int *v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  int v104;
  char v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  unsigned __int8 *v116;
  int v117;
  unsigned __int8 *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  char v128;
  int *v129;
  int v130;
  char v131;
  uint64_t v132;
  int *v133;
  int v134;
  char v135;
  uint64_t v136;
  int *v137;
  int v138;
  char v139;
  uint64_t v140;
  int *v141;
  int v142;
  char v143;
  uint64_t v144;
  int *v145;
  int v146;
  char v147;
  uint64_t v148;
  int *v149;
  int v150;
  char v151;
  uint64_t v152;
  unsigned __int8 *v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char v165;
  unsigned int (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;

  v171 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v168 = *(_QWORD *)(v171 - 8);
  MEMORY[0x24BDAC7A8](v171);
  v172 = (uint64_t)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FalseStepDetectorState?, CLP_LogEntry_PrivateData_FalseStepDetectorState?));
  MEMORY[0x24BDAC7A8](v167);
  v173 = (uint64_t)&v166 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v170 = (uint64_t)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v169 = (uint64_t)&v166 - v9;
  v179 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v177 = *(_QWORD *)(v179 - 8);
  MEMORY[0x24BDAC7A8](v179);
  v174 = (uint64_t)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_AccelerometerPace?, CLP_LogEntry_PrivateData_AccelerometerPace?));
  MEMORY[0x24BDAC7A8](v176);
  v180 = (uint64_t)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v175 = (uint64_t)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v178 = (uint64_t)&v166 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v190 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v186 = (uint64_t)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v19 = MEMORY[0x24BDAC7A8](v18);
  v182 = (uint64_t)&v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v184 = (uint64_t)&v166 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v166 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v181 = (uint64_t)&v166 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v185 = (char *)&v166 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v183 = (uint64_t)&v166 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v189 = (uint64_t)&v166 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v187 = (uint64_t)&v166 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v166 - v36;
  v38 = a1;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  v188 = v18;
  v41 = (uint64_t)&v24[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48);
  if (v42((uint64_t)v24, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v43 = a2;
    if (v42(v41, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v46 = (uint64_t)v24;
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_22;
  }
  v44 = v38;
  v43 = a2;
  v45 = v187;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v190 = v16;
  if (v42(v41, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v47 = v186;
  v166 = v42;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v41, v186, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  v48 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v45, v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v42 = v166;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v38 = v44;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v16 = v190;
  if ((v48 & 1) == 0)
    goto LABEL_22;
LABEL_8:
  v49 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  v50 = v189;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v51 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  v52 = v184;
  v53 = v184 + *(int *)(v188 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v42(v52, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v54 = v42(v53, 1, v16);
    v55 = (uint64_t)v185;
    if (v54 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v56 = v183;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v57 = v42(v53, 1, v16);
  v55 = (uint64_t)v185;
  if (v57 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v46 = v52;
    goto LABEL_21;
  }
  v190 = v43;
  v58 = v52;
  v59 = v186;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v53, v186, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v60 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v56, v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v59, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v61 = v58;
  v43 = v190;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v60 & 1) == 0)
    goto LABEL_22;
LABEL_15:
  v62 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v63 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  v64 = v182;
  v65 = v182 + *(int *)(v188 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v182, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v42(v64, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v42(v65, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  v66 = v181;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v181, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v42(v65, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_20:
    v46 = v64;
    goto LABEL_21;
  }
  v68 = v186;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, v186, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v69 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v66, v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v68, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v69 & 1) == 0)
    goto LABEL_22;
LABEL_25:
  v70 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
  swift_beginAccess();
  v71 = *v70;
  v72 = *((_BYTE *)v70 + 4);
  v73 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  if ((v72 & 1) != 0)
  {
    if ((*(_BYTE *)(v73 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v73 + 4) & 1) != 0 || v71 != *(_DWORD *)v73)
  {
    goto LABEL_22;
  }
  v74 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  v75 = *(double *)v74;
  v76 = *(_BYTE *)(v74 + 8);
  v77 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  if ((v76 & 1) != 0)
  {
    if ((*(_BYTE *)(v77 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v77 + 8) & 1) != 0 || v75 != *(double *)v77)
  {
    goto LABEL_22;
  }
  v78 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  v79 = *(double *)v78;
  v80 = *(_BYTE *)(v78 + 8);
  v81 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  if ((v80 & 1) != 0)
  {
    if ((*(_BYTE *)(v81 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v81 + 8) & 1) != 0 || v79 != *(double *)v81)
  {
    goto LABEL_22;
  }
  v82 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
  swift_beginAccess();
  v83 = *v82;
  v84 = *((_BYTE *)v82 + 4);
  v85 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  if ((v84 & 1) != 0)
  {
    if ((*(_BYTE *)(v85 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v85 + 4) & 1) != 0 || v83 != *(_DWORD *)v85)
  {
    goto LABEL_22;
  }
  v86 = (int *)(v38
              + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
  swift_beginAccess();
  v87 = *v86;
  v88 = *((_BYTE *)v86 + 4);
  v89 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  if ((v88 & 1) != 0)
  {
    if ((*(_BYTE *)(v89 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v89 + 4) & 1) != 0 || v87 != *(_DWORD *)v89)
  {
    goto LABEL_22;
  }
  v90 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  v91 = *(double *)v90;
  v92 = *(_BYTE *)(v90 + 8);
  v93 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  if ((v92 & 1) != 0)
  {
    if ((*(_BYTE *)(v93 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v93 + 8) & 1) != 0 || v91 != *(double *)v93)
  {
    goto LABEL_22;
  }
  v94 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  v95 = *(double *)v94;
  v96 = *(_BYTE *)(v94 + 8);
  v97 = v43
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  if ((v96 & 1) != 0)
  {
    if ((*(_BYTE *)(v97 + 8) & 1) != 0)
      goto LABEL_60;
LABEL_22:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v97 + 8) & 1) != 0 || v95 != *(double *)v97)
    goto LABEL_22;
LABEL_60:
  v98 = v38
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  v99 = *(double *)v98;
  v100 = *(_BYTE *)(v98 + 8);
  v101 = v43;
  v102 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  if ((v100 & 1) != 0)
  {
    if ((*(_BYTE *)(v102 + 8) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v102 + 8) & 1) != 0 || v99 != *(double *)v102)
  {
    goto LABEL_22;
  }
  v103 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
  swift_beginAccess();
  v104 = *v103;
  v105 = *((_BYTE *)v103 + 4);
  v106 = v43
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  if ((v105 & 1) != 0)
  {
    if ((*(_BYTE *)(v106 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v106 + 4) & 1) != 0 || v104 != *(_DWORD *)v106)
  {
    goto LABEL_22;
  }
  v107 = (uint64_t *)(v38
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  v108 = *v107;
  v109 = v107[1];
  v110 = (_QWORD *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  v111 = v110[1];
  if (v109)
  {
    if (!v111 || (v108 != *v110 || v109 != v111) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      goto LABEL_22;
  }
  else if (v111)
  {
    goto LABEL_22;
  }
  v112 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  v113 = *v112;
  v114 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  v115 = *v114;
  if (v113 == 2)
  {
    if (v115 != 2)
      goto LABEL_22;
  }
  else if (v115 == 2 || ((((v115 & 1) == 0) ^ v113) & 1) == 0)
  {
    goto LABEL_22;
  }
  v116 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  v117 = *v116;
  v118 = (unsigned __int8 *)(v43
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  v119 = *v118;
  if (v117 == 2)
  {
    if (v119 != 2)
      goto LABEL_22;
  }
  else if (v119 == 2 || ((((v119 & 1) == 0) ^ v117) & 1) == 0)
  {
    goto LABEL_22;
  }
  v120 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  v121 = v178;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120, v178, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v122 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  v123 = v180;
  v124 = v180 + *(int *)(v176 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, v180, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v125 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
  if (v125(v123, 1, v179) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v178, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
    if (v125(v124, 1, v179) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v180, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
      goto LABEL_95;
    }
LABEL_92:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v180, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_AccelerometerPace?, CLP_LogEntry_PrivateData_AccelerometerPace?));
    goto LABEL_22;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v180, v175, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if (v125(v124, 1, v179) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v178, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v175, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    goto LABEL_92;
  }
  v126 = v174;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v124, v174, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  v127 = v175;
  v128 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v175, v126, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v126, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v178, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v127, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v180, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((v128 & 1) == 0)
    goto LABEL_22;
LABEL_95:
  v129 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
  swift_beginAccess();
  v130 = *v129;
  v131 = *((_BYTE *)v129 + 4);
  v132 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  if ((v131 & 1) != 0)
  {
    if ((*(_BYTE *)(v132 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v132 + 4) & 1) != 0 || v130 != *(_DWORD *)v132)
  {
    goto LABEL_22;
  }
  v133 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
  swift_beginAccess();
  v134 = *v133;
  v135 = *((_BYTE *)v133 + 4);
  v136 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  if ((v135 & 1) != 0)
  {
    if ((*(_BYTE *)(v136 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v136 + 4) & 1) != 0 || v134 != *(_DWORD *)v136)
  {
    goto LABEL_22;
  }
  v137 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
  swift_beginAccess();
  v138 = *v137;
  v139 = *((_BYTE *)v137 + 4);
  v140 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  if ((v139 & 1) != 0)
  {
    if ((*(_BYTE *)(v140 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v140 + 4) & 1) != 0 || v138 != *(_DWORD *)v140)
  {
    goto LABEL_22;
  }
  v141 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
  swift_beginAccess();
  v142 = *v141;
  v143 = *((_BYTE *)v141 + 4);
  v144 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  if ((v143 & 1) != 0)
  {
    if ((*(_BYTE *)(v144 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v144 + 4) & 1) != 0 || v142 != *(_DWORD *)v144)
  {
    goto LABEL_22;
  }
  v145 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
  swift_beginAccess();
  v146 = *v145;
  v147 = *((_BYTE *)v145 + 4);
  v148 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  if ((v147 & 1) != 0)
  {
    if ((*(_BYTE *)(v148 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v148 + 4) & 1) != 0 || v146 != *(_DWORD *)v148)
  {
    goto LABEL_22;
  }
  v149 = (int *)(v38
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
  swift_beginAccess();
  v150 = *v149;
  v151 = *((_BYTE *)v149 + 4);
  v152 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  if ((v151 & 1) != 0)
  {
    if ((*(_BYTE *)(v152 + 4) & 1) == 0)
      goto LABEL_22;
  }
  else if ((*(_BYTE *)(v152 + 4) & 1) != 0 || v150 != *(_DWORD *)v152)
  {
    goto LABEL_22;
  }
  v153 = (unsigned __int8 *)(v38
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  v154 = *v153;
  v155 = (unsigned __int8 *)(v101
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  v156 = *v155;
  if (v154 == 6)
  {
    if (v156 != 6)
      goto LABEL_22;
  }
  else if (v156 == 6 || v154 != v156)
  {
    goto LABEL_22;
  }
  v157 = v38
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  v158 = v169;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, v169, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v159 = v101
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  v160 = v173;
  v161 = v173 + *(int *)(v167 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v158, v173, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v159, v161, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48);
  if (v162(v160, 1, v171) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
    if (v162(v161, 1, v171) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v173, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
      return 1;
    }
LABEL_135:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v173, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FalseStepDetectorState?, CLP_LogEntry_PrivateData_FalseStepDetectorState?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v173, v170, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if (v162(v161, 1, v171) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v170, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
    goto LABEL_135;
  }
  v163 = v172;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v161, v172, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  v164 = v170;
  v165 = specialized static CLP_LogEntry_PrivateData_FalseStepDetectorState.== infix(_:_:)(v170, v163);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v163, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v164, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v173, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  return (v165 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_StepCountEntry.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_StepCountEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_StepCountEntry()
{
  return CLP_LogEntry_PrivateData_StepCountEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_StepCountEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_StepCountEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCountEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_StepCount.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_StepCount.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_StepCount.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v11;
  uint64_t v14;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    v14 = a7;
    while ((v11 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          a4(0);
          a5(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a6, a5, a7);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          a7 = v14;
          break;
        case 2:
          a4(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 1:
          a4(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          a7 = v14;
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_StepCount.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Int CLP_LogEntry_PrivateData_StepCount.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_StepCount@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_StepCount()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_StepCount@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_StepCount()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCount()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeVector3.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeVector3.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return CLP_LogEntry_PrivateData_MotionTypeVector3.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeVector3@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          a4(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v7;

  result = a4(0);
  v7 = (int *)result;
  if ((*(_BYTE *)(v4 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v5)
  {
    if ((*(_BYTE *)(v4 + v7[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v4 + v7[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v4 + v7[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  v10(v1+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v9);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v40 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  *v15 = 2;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  v41 = v15;
  v42 = v16;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v45 = v1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  LODWORD(v22) = *(_DWORD *)v23;
  LOBYTE(v23) = *(_BYTE *)(v23 + 4);
  swift_beginAccess();
  *(_DWORD *)v12 = v22;
  *(_BYTE *)(v12 + 4) = v23;
  v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  LODWORD(v23) = *(_DWORD *)v24;
  LOBYTE(v24) = *(_BYTE *)(v24 + 4);
  swift_beginAccess();
  *(_DWORD *)v13 = v23;
  *(_BYTE *)(v13 + 4) = v24;
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)v25;
  LOBYTE(v25) = *(_BYTE *)(v25 + 4);
  swift_beginAccess();
  *(_DWORD *)v14 = v13;
  *(_BYTE *)(v14 + 4) = v25;
  v26 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  LOBYTE(v26) = *v26;
  v27 = v40;
  swift_beginAccess();
  *v27 = (_BYTE)v26;
  v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  LOBYTE(v28) = *v28;
  v29 = v41;
  swift_beginAccess();
  *v29 = (_BYTE)v28;
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v30;
  LOBYTE(v30) = *(_BYTE *)(v30 + 4);
  v31 = v42;
  swift_beginAccess();
  *(_DWORD *)v31 = (_DWORD)v29;
  *(_BYTE *)(v31 + 4) = v30;
  v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  v33 = v43;
  swift_beginAccess();
  *(_DWORD *)v33 = (_DWORD)v29;
  *(_BYTE *)(v33 + 4) = v32;
  v34 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  LODWORD(v29) = *(_DWORD *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 4);
  v35 = v44;
  swift_beginAccess();
  *(_DWORD *)v35 = (_DWORD)v29;
  *(_BYTE *)(v35 + 4) = v34;
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  v37 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_release();
  v38 = v45;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v37, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          goto LABEL_12;
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 10:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_13;
        case 6:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 7:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
LABEL_12:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_13:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  if (*v15 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  if (*v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  float v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  char v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  float v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v90 = (uint64_t)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
  MEMORY[0x24BDAC7A8](v92);
  v96 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v91 = (uint64_t)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v95 = (uint64_t)&v89 - v10;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v103 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v98 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
  v14 = MEMORY[0x24BDAC7A8](v13);
  v100 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v89 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v97 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v102 = (uint64_t)&v89 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v101 = (uint64_t)&v89 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v89 - v25;
  v27 = a1;
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v29 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  v99 = v13;
  v30 = (uint64_t)&v17[*(int *)(v13 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v31 = v29;
  v32 = v11;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  if (v33((uint64_t)v17, 1, v11) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    v34 = v27;
    if (v33(v30, 1, v11) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v17, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_58;
  }
  v34 = v27;
  v35 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v17, v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v33(v30, 1, v11) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_6;
  }
  v36 = v98;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  swift_retain();
  swift_retain();
  v37 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v35, v36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v36, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v37 & 1) == 0)
    goto LABEL_58;
LABEL_8:
  v38 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  v39 = v102;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v40 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  v41 = v100;
  v42 = v100 + *(int *)(v99 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v33(v41, 1, v32) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    if (v33(v42, 1, v32) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_15;
    }
LABEL_13:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_58;
  }
  v43 = v97;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v97, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v33(v42, 1, v32) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  v44 = v98;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, v98, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v45 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v43, v44);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v45 & 1) == 0)
    goto LABEL_58;
LABEL_15:
  v46 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  v47 = *(float *)v46;
  v48 = *(_BYTE *)(v46 + 4);
  v49 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  if ((v48 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v49 + 4) & 1) != 0 || v47 != *(float *)v49)
  {
    goto LABEL_58;
  }
  v50 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  v51 = *(float *)v50;
  v52 = *(_BYTE *)(v50 + 4);
  v53 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  if ((v52 & 1) != 0)
  {
    if ((*(_BYTE *)(v53 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v53 + 4) & 1) != 0 || v51 != *(float *)v53)
  {
    goto LABEL_58;
  }
  v54 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  v55 = *(float *)v54;
  v56 = *(_BYTE *)(v54 + 4);
  v57 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v57 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v57 + 4) & 1) != 0 || v55 != *(float *)v57)
  {
    goto LABEL_58;
  }
  v58 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  v59 = *v58;
  v60 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  v61 = *v60;
  if (v59 == 8)
  {
    if (v61 != 8)
      goto LABEL_58;
  }
  else if (v61 == 8 || v59 != v61)
  {
    goto LABEL_58;
  }
  v62 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  v63 = *v62;
  v64 = (unsigned __int8 *)(a2
                          + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  v65 = *v64;
  if (v63 == 2)
  {
    if (v65 != 2)
      goto LABEL_58;
  }
  else if (v65 == 2 || ((((v65 & 1) == 0) ^ v63) & 1) == 0)
  {
    goto LABEL_58;
  }
  v66 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  v67 = *(float *)v66;
  v68 = *(_BYTE *)(v66 + 4);
  v69 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  if ((v68 & 1) != 0)
  {
    if ((*(_BYTE *)(v69 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v69 + 4) & 1) != 0 || v67 != *(float *)v69)
  {
    goto LABEL_58;
  }
  v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  v71 = *(float *)v70;
  v72 = *(_BYTE *)(v70 + 4);
  v73 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  if ((v72 & 1) != 0)
  {
    if ((*(_BYTE *)(v73 + 4) & 1) == 0)
      goto LABEL_58;
  }
  else if ((*(_BYTE *)(v73 + 4) & 1) != 0 || v71 != *(float *)v73)
  {
    goto LABEL_58;
  }
  v74 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  v75 = *(float *)v74;
  v76 = *(_BYTE *)(v74 + 4);
  v77 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  if ((v76 & 1) != 0)
  {
    if ((*(_BYTE *)(v77 + 4) & 1) != 0)
      goto LABEL_55;
LABEL_58:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v77 + 4) & 1) != 0 || v75 != *(float *)v77)
    goto LABEL_58;
LABEL_55:
  v78 = v34
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  v79 = v95;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v80 = a2
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  v81 = v96;
  v82 = v96 + *(int *)(v92 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v96, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v83 = v94;
  v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  if (v84(v81, 1, v94) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    if (v84(v82, 1, v83) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
      return 1;
    }
LABEL_62:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if (v84(v82, 1, v83) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v91, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_62;
  }
  v86 = v90;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v82, v90, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v87 = v91;
  v88 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(v91, v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v86, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v87, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  return (v88 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeCompass.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeCompass@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompass@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_CompassTypeSample.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t (*v6)(uint64_t);
  void *v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v5 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v7 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
          v5 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass;
          v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass;
          v7 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v5, v6, (uint64_t)v7);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
    v11 = v10;
    if ((*(_BYTE *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + *(int *)(v11 + 36)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Int CLP_LogEntry_PrivateData_CompassTypeSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_CompassTypeSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a1[8];
  v10 = a2 + a1[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return CLP_LogEntry_PrivateData_CompassTypeSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_CompassTypeSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_CompassTypeSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_CompassTypeSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_CompassTypeSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Compass.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Compass.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Compass.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_Compass._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_Compass.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_CompassTypeSample.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Compass.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Compass, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Compass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Compass.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Compass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Compass@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Compass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Compass()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4;
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 5:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 6:
        case 7:
        case 8:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_13;
        case 9:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_13:
          v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  if (*v12 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  if (*v13 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v14 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  if (*v14 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  if (*v15 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  float v98;
  char v99;
  uint64_t v100;
  float v101;
  int v102;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v121 = a2;
  v118 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v116 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v109 = (uint64_t)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
  v4 = MEMORY[0x24BDAC7A8](v120);
  v107 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v111 = (uint64_t)&v105 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v117 = (uint64_t)&v105 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v106 = (uint64_t)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v110 = (uint64_t)&v105 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v108 = (uint64_t)&v105 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v113 = (uint64_t)&v105 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v112 = (uint64_t)&v105 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v115 = (uint64_t)&v105 - v20;
  v21 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v114 = (uint64_t)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v119 = (uint64_t)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v105 - v30;
  v32 = a1;
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v34 = v121;
  v35 = v121
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  v36 = (uint64_t)&v26[*(int *)(v24 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v35, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v37((uint64_t)v26, 1, v21) == 1)
  {
    v38 = v32;
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    v39 = v37(v36, 1, v21);
    v40 = v34;
    if (v39 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?));
    goto LABEL_52;
  }
  v38 = v32;
  v41 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if (v37(v36, 1, v21) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    goto LABEL_6;
  }
  v42 = v114;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v36, v114, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  swift_retain();
  v40 = v34;
  swift_retain();
  v43 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(v41, v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v41, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((v43 & 1) == 0)
    goto LABEL_52;
LABEL_8:
  v44 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  v45 = v44;
  v46 = v115;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v47 = v46;
  v48 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  v49 = v117;
  v50 = v117 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v52 = v118;
  if (v51(v49, 1, v118) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    if (v51(v50, 1, v52) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_15;
    }
LABEL_13:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  v53 = v112;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v51(v50, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_13;
  }
  v54 = v40;
  v55 = v47;
  v56 = v109;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v50, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v57 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v53, v56);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v58 = v55;
  v40 = v54;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v53, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v57 & 1) == 0)
    goto LABEL_52;
LABEL_15:
  v59 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  v60 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v61 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  v62 = v111;
  v63 = v111 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v64 = v62;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v51(v62, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    v65 = v51(v63, 1, v52);
    v66 = v110;
    if (v65 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_22;
    }
LABEL_20:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  v67 = v108;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v68 = v51(v63, 1, v52);
  v66 = v110;
  if (v68 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_20;
  }
  v69 = v67;
  v70 = v109;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v71 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v69, v70);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v71 & 1) == 0)
    goto LABEL_52;
LABEL_22:
  v72 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v73 = v40
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  v74 = v66;
  v75 = v107;
  v76 = v107 + *(int *)(v120 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v107, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v51(v75, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    if (v51(v76, 1, v52) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
      goto LABEL_29;
    }
LABEL_27:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeVector3?, CLP_LogEntry_PrivateData_MotionTypeVector3?));
    goto LABEL_52;
  }
  v77 = v106;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if (v51(v76, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    goto LABEL_27;
  }
  v78 = v77;
  v79 = v109;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v76, v109, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v80 = specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(v78, v79);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v79, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v78, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((v80 & 1) == 0)
    goto LABEL_52;
LABEL_29:
  v81 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  v82 = *v81;
  v83 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  v84 = *v83;
  if (v82 == 8)
  {
    if (v84 != 8)
      goto LABEL_52;
  }
  else if (v84 == 8 || v82 != v84)
  {
    goto LABEL_52;
  }
  v85 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  v86 = *v85;
  v87 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  v88 = *v87;
  if (v86 == 2)
  {
    if (v88 != 2)
      goto LABEL_52;
  }
  else if (v88 == 2 || ((((v88 & 1) == 0) ^ v86) & 1) == 0)
  {
    goto LABEL_52;
  }
  v89 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  v90 = *v89;
  v91 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  v92 = *v91;
  if (v90 == 2)
  {
    if (v92 != 2)
      goto LABEL_52;
  }
  else if (v92 == 2 || ((((v92 & 1) == 0) ^ v90) & 1) == 0)
  {
    goto LABEL_52;
  }
  v93 = (unsigned __int8 *)(v38
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  v94 = *v93;
  v95 = (unsigned __int8 *)(v40
                          + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  v96 = *v95;
  if (v94 == 2)
  {
    if (v96 == 2)
      goto LABEL_49;
LABEL_52:
    swift_release();
    swift_release();
    return 0;
  }
  if (v96 == 2 || ((((v96 & 1) == 0) ^ v94) & 1) == 0)
    goto LABEL_52;
LABEL_49:
  v97 = v38
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  v98 = *(float *)v97;
  v99 = *(_BYTE *)(v97 + 4);
  swift_release();
  v100 = v40
       + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  v101 = *(float *)v100;
  v102 = *(unsigned __int8 *)(v100 + 4);
  swift_release();
  if ((v99 & 1) != 0)
  {
    if (!v102)
      return 0;
  }
  else
  {
    if (v98 == v101)
      v104 = v102;
    else
      v104 = 1;
    if ((v104 & 1) != 0)
      return 0;
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SensorFusionStatus.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v1)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SensorFusionStatus.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SensorFusionStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = UnknownStorage.init()();
  v5 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return CLP_LogEntry_PrivateData_SensorFusionStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return CLP_LogEntry_PrivateData_SensorFusionStatus.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SensorFusionStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceMotionSample.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_11;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion;
          goto LABEL_11;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus;
LABEL_11:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
    v11 = v10;
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + *(int *)(v11 + 32) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DeviceMotionSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DeviceMotionSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  v9 = a2 + v8;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 5;
  v11 = a2 + v10;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v14 = a1[12];
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a2 + v14;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceMotionSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DeviceMotion.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_DeviceMotion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_DeviceMotionSample.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_DeviceMotion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DeviceMotion.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DeviceMotion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceMotion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.protoMessageName.getter()
{
  return 0xD000000000000037;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
    closure #8 in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 48), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v10;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1[12];
  v14 = a2 + a1[11];
  *(_QWORD *)v14 = 0;
  v15 = a2 + v13;
  *(_BYTE *)(v14 + 8) = 1;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GeomagneticModelData.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_235BBD720;
  v14 = v13 + v12 + *(int *)(v10 + 48);
  *(_QWORD *)(v13 + v12) = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = a4;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *a5;
  v16 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_Timer.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v10;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v7 || (v10 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      a5(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a6, a5, a7);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    }
    v7 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Int CLP_LogEntry_PrivateData_GeomagneticModelData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GeomagneticModelData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Timer(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a2);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GeomagneticModelData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GeomagneticModelData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiAccessPoint.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFixed64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
          goto LABEL_12;
        case 5:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFixed64Field(value:fieldNumber:)();
  if (!v4)
  {
    if (*(_QWORD *)(v5 + v10[6] + 8))
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    closure #9 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    closure #10 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 56) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WifiAccessPoint.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiAccessPoint@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  v14 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 4;
  v15 = a2 + v14;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiAssociationState.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Int CLP_LogEntry_PrivateData_WifiAssociationState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiAssociationState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 24);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  v5 = a2 + v4;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return CLP_LogEntry_PrivateData_WifiAssociationState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiAssociationState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAssociationState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiAssociationState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAssociationState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiScanResult.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v13;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v13 & 1) == 0)
    {
      if (result == 2)
      {
        a5(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a6, a5, a7);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        a4(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_WifiScanResult.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiScanResult.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiScanResult()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiScanResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiScanResult()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiScanResult()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WifiNotification.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WifiNotification.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WifiNotification.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
          goto LABEL_11;
        case 4:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
LABEL_11:
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 5:
        case 8:
        case 9:
        case 10:
        case 11:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_16;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState;
          goto LABEL_14;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v13 != 15)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v14 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  if (*v14 != 15)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  if (*v15 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(v9, a1, a2, a3);
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  if (*v16 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  if (*v17 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v18 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  if (*v18 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v19 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  if (*v19 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_WifiNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  int *v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t *v77;
  char v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;

  v111 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v98 = *(_QWORD *)(v3 - 8);
  v99 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v95 = (uint64_t *)((char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiScanResult?, CLP_LogEntry_PrivateData_WifiScanResult?));
  MEMORY[0x24BDAC7A8](v97);
  v100 = (uint64_t)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v109 = (uint64_t *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v108 = (char *)&v95 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v102 = *(_QWORD *)(v10 - 8);
  v103 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v96 = (uint64_t)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAssociationState?, CLP_LogEntry_PrivateData_WifiAssociationState?));
  MEMORY[0x24BDAC7A8](v101);
  v104 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v107 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v105 = (uint64_t)&v95 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v106 = (uint64_t)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v110 = (uint64_t)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v95 - v26;
  v28 = a1;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v30 = v111;
  v31 = v111
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  v32 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v33((uint64_t)v22, 1, v17) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = v28;
    if (v33(v32, 1, v17) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v37 = (uint64_t)v22;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v36);
    goto LABEL_8;
  }
  v34 = v28;
  v35 = v110;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v33(v32, 1, v17) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v39 = v106;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, v106, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  v40 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v35, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v40 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v41 = (int *)(v34
              + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v42 = *v41;
  v43 = *((_BYTE *)v41 + 4);
  v44 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v43 & 1) != 0)
  {
    v46 = (uint64_t)v108;
    v45 = v109;
    v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v46 = (uint64_t)v108;
    v45 = v109;
    v47 = (uint64_t)v107;
    if ((*(_BYTE *)(v44 + 4) & 1) != 0 || v42 != *(_DWORD *)v44)
      goto LABEL_8;
  }
  v48 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v49 = *v48;
  v50 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v51 = *v50;
  if (v49 == 15)
  {
    v52 = v105;
    if (v51 != 15)
      goto LABEL_8;
  }
  else
  {
    v52 = v105;
    if (v51 == 15 || v49 != v51)
      goto LABEL_8;
  }
  v53 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  v54 = *v53;
  v55 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  v56 = *v55;
  if (v54 == 15)
  {
    if (v56 != 15)
      goto LABEL_8;
  }
  else if (v56 == 15 || v54 != v56)
  {
    goto LABEL_8;
  }
  v57 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  v58 = *v57;
  v59 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  v60 = *v59;
  if (v58 == 2)
  {
    if (v60 != 2)
      goto LABEL_8;
  }
  else if (v60 == 2 || ((((v60 & 1) == 0) ^ v58) & 1) == 0)
  {
    goto LABEL_8;
  }
  v61 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v62 = v52;
  v63 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  v64 = v104;
  v65 = v104 + *(int *)(v101 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v66 = v103;
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  if (v67(v64, 1, v103) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
    if (v67(v65, 1, v66) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
      goto LABEL_38;
    }
    goto LABEL_36;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if (v67(v65, 1, v66) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
LABEL_36:
    v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAssociationState?, CLP_LogEntry_PrivateData_WifiAssociationState?);
    v37 = v64;
    goto LABEL_7;
  }
  v68 = v96;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, v96, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  v69 = specialized static CLP_LogEntry_PrivateData_WifiAssociationState.== infix(_:_:)(v47, v68);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v68, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((v69 & 1) == 0)
    goto LABEL_8;
LABEL_38:
  v70 = v34
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v71 = v30
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  v72 = v100;
  v73 = v100 + *(int *)(v97 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v74 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v75 = v99;
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v76(v74, 1, v99) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
    if (v76(v73, 1, v75) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, (uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if (v76(v73, 1, v75) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
LABEL_43:
    v36 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiScanResult?, CLP_LogEntry_PrivateData_WifiScanResult?);
    v37 = v74;
    goto LABEL_7;
  }
  v77 = v95;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v73, (uint64_t)v95, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  v78 = specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(v45, v77, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v77, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((v78 & 1) == 0)
    goto LABEL_8;
LABEL_45:
  v79 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  v80 = *v79;
  v81 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  v82 = *v81;
  if (v80 == 2)
  {
    if (v82 != 2)
      goto LABEL_8;
  }
  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v80) & 1) == 0)
  {
    goto LABEL_8;
  }
  v83 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  v84 = *v83;
  v85 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  v86 = *v85;
  if (v84 == 2)
  {
    if (v86 != 2)
      goto LABEL_8;
  }
  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_8;
  }
  v87 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  v88 = *v87;
  v89 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  v90 = *v89;
  if (v88 == 2)
  {
    if (v90 == 2)
      goto LABEL_60;
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v90 == 2 || ((((v90 & 1) == 0) ^ v88) & 1) == 0)
    goto LABEL_8;
LABEL_60:
  v91 = (unsigned __int8 *)(v34
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  v92 = *v91;
  swift_release();
  v93 = (unsigned __int8 *)(v30
                          + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  v94 = *v93;
  swift_release();
  if (v92 != 2)
    return v94 != 2 && ((((v94 & 1) == 0) ^ v92) & 1) != 0;
  return v94 == 2;
}

Swift::Int CLP_LogEntry_PrivateData_WifiNotification.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WifiNotification@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WifiNotification()
{
  return CLP_LogEntry_PrivateData_WifiNotification.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WifiNotification.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WifiNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiNotification@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WifiNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiNotification()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
          goto LABEL_12;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
LABEL_12:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int *v6;

  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  if (!v4)
  {
    v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
    if (*(_BYTE *)(v3 + v6[6]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(_BYTE *)(v3 + v6[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + v6[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  v8 = a2 + v7;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a2 + a1[8]) = 4;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
    v10 = (int *)result;
    if ((*(_BYTE *)(v5 + *(int *)(result + 24) + 8) & 1) == 0)
      result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (!v4)
    {
      if ((*(_BYTE *)(v5 + v10[7] + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      if (*(_BYTE *)(v5 + v10[8]) != 2)
        dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if ((*(_BYTE *)(v5 + v10[9] + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
      closure #6 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      closure #7 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;

  result = a5(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = a1[7];
  v6 = (char *)a2 + a1[6];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  v9 = (char *)a2 + v8;
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = a1[11];
  v11 = (char *)a2 + a1[10];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = (char *)a2 + a1[12];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0),
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
    v3 = result;
    if ((*(_BYTE *)(v0 + *(int *)(result + 24) + 8) & 1) == 0)
      result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (!v1)
    {
      if ((*(_BYTE *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapBuildingData.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v4 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v6 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
          v7 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 3:
          v7 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          v4 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
          v6 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v4, v5, (uint64_t)v6);
          v7 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          v3 = v7;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v3[1] + 16))
      dispatch thunk of Visitor.visitRepeatedUInt64Field(value:fieldNumber:)();
    closure #2 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)((uint64_t)v3, a1, a2, a3);
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapBuildingData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (char *)a2 + *(int *)(a1 + 32);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.protoMessageName.getter()
{
  return 0xD00000000000003BLL;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0),
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
    v3 = (int *)result;
    if (*(_BYTE *)(v0 + *(int *)(result + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
      result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (!v1)
    {
      if ((*(_BYTE *)(v0 + v3[7] + 4) & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      if ((*(_BYTE *)(v0 + v3[8] + 4) & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      if ((*(_BYTE *)(v0 + v3[9] + 4) & 1) == 0)
        dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = a1[7];
  *((_BYTE *)a2 + a1[6]) = 4;
  v6 = (char *)a2 + v5;
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = a1[9];
  v8 = (char *)a2 + a1[8];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a2 + v7;
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.protoMessageName.getter()
{
  return 0xD000000000000040;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 24) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[9] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = a1[7];
  v6 = (char *)a2 + a1[6];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a2 + v5;
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = a1[9];
  v9 = (char *)a2 + a1[8];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a2 + v8;
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.protoMessageName.getter()
{
  return 0xD000000000000035;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox;
          goto LABEL_10;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
          v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures;
LABEL_10:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int *v9;

  result = closure #1 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
    if ((*(_BYTE *)(v3 + v9[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (*(_BYTE *)(v3 + v9[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(_BYTE *)(v3 + v9[9] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3, a1, a2, a3);
    closure #6 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + a1[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[8];
  v7 = (char *)a2 + a1[7];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *((_BYTE *)a2 + v6) = 4;
  v8 = a1[10];
  v9 = (char *)a2 + a1[9];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v13 = (char *)a2 + a1[11];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap, a1);
}

uint64_t *CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName;
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName.getter()
{
  return static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 2, 2, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(a1, a2, &one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.protoMessageName.getter()
{
  return 0xD000000000000032;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
        v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v3
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t result;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *((_BYTE *)a2 + *(int *)(a1 + 28)) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WatchOrientation.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WatchOrientation.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WatchOrientation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 4, 4, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X0>, char a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = UnknownStorage.init()();
  v9 = *(int *)(a1 + 24);
  *(_BYTE *)(a4 + *(int *)(a1 + 20)) = a2;
  *(_BYTE *)(a4 + v9) = a3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  return CLP_LogEntry_PrivateData_WatchOrientation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  return CLP_LogEntry_PrivateData_WatchOrientation.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchOrientation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WristState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WristState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WristState.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_WristState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
          goto LABEL_8;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WristState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  if (!v4)
  {
    v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    if (*(_BYTE *)(v5 + v10[6]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v5 + v10[7]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    closure #6 in CLP_LogEntry_PrivateData_TunnelBridgeAssistance.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_WristState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WristState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 4;
  *(_BYTE *)(a2 + v7) = 4;
  v8 = a1[9];
  *(_BYTE *)(a2 + a1[8]) = 4;
  *(_BYTE *)(a2 + v8) = 2;
  v9 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WristState()
{
  return CLP_LogEntry_PrivateData_WristState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WristState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WristState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WristState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_WatchState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WatchState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WatchState.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation;
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
          type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_WristState;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    closure #3 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[4];

  v16[3] = a4;
  v16[1] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v14 + 20), (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Int CLP_LogEntry_PrivateData_WatchState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WatchState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[7];
  v7 = a2 + a1[6];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + v6;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a2 + a1[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WatchState()
{
  return CLP_LogEntry_PrivateData_WatchState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WatchState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WatchState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WatchState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WatchState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_PlaceInference.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PlaceInference.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PlaceInference.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
LABEL_5:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + v3[6]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v0 + v3[7] + 8))
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (*(_QWORD *)(v0 + v3[8] + 8))
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PlaceInference.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PlaceInference@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  *(_BYTE *)(a2 + v5) = 3;
  v6 = a1[8];
  v7 = (_QWORD *)(a2 + a1[7]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (_QWORD *)(a2 + v6);
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  return CLP_LogEntry_PrivateData_PlaceInference.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  return CLP_LogEntry_PrivateData_PlaceInference.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RoutineVisit.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v10 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_10;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference;
          goto LABEL_10;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
LABEL_10:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 7:
          swift_beginAccess();
          v13 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_11:
          v2 = v13;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_RoutineVisit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  double v129;
  char v130;
  uint64_t v131;
  double v132;
  int v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;

  v162 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v140 = *(_QWORD *)(v3 - 8);
  v141 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v136 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  MEMORY[0x24BDAC7A8](v139);
  v142 = (uint64_t)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v137 = (uint64_t)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v144 = (uint64_t)&v135 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v146 = *(_QWORD *)(v10 - 8);
  v147 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v138 = (uint64_t)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PlaceInference?, CLP_LogEntry_PrivateData_PlaceInference?));
  MEMORY[0x24BDAC7A8](v145);
  v148 = (uint64_t)&v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v143 = (uint64_t)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v150 = (uint64_t)&v135 - v16;
  v163 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v161 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v160 = (uint64_t)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v19 = MEMORY[0x24BDAC7A8](v18);
  v151 = (uint64_t)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v153 = (uint64_t)&v135 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v158 = (uint64_t)&v135 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v135 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v149 = (uint64_t)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v154 = (uint64_t)&v135 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v152 = (uint64_t)&v135 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v156 = (uint64_t)&v135 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v155 = (uint64_t)&v135 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v157 = (uint64_t)&v135 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v135 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v44 = (char *)&v135 - v43;
  v45 = a1;
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, (uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v47 = v162;
  v48 = v162
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  v159 = v18;
  v49 = (uint64_t)&v26[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v50 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v161 + 6);
  v51 = v163;
  if (v50((uint64_t)v26, 1, v163) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v52 = v47;
    v53 = v45;
    if (v50(v49, 1, v51) == 1)
    {
      v54 = v51;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_37;
  }
  v53 = v45;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, (uint64_t)v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v50(v49, 1, v51) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v42, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v55 = v49;
  v56 = v160;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v55, v160, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  swift_retain();
  swift_retain();
  v57 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v42, v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v58 = (uint64_t)v42;
  v52 = v47;
  v54 = v163;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v58, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v57 & 1) == 0)
    goto LABEL_37;
LABEL_8:
  v162 = v53;
  v59 = v53
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  v60 = v157;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v157, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v61 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  v62 = v158;
  v63 = v159;
  v64 = v158 + *(int *)(v159 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v158, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v50(v62, 1, v54) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v50(v64, 1, v54) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_16;
    }
LABEL_14:
    v66 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v67 = v62;
LABEL_36:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v66);
    goto LABEL_37;
  }
  v65 = v155;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v155, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v50(v64, 1, v54) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_14;
  }
  v68 = v64;
  v69 = v63;
  v70 = v52;
  v71 = v60;
  v72 = v160;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v68, v160, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  LODWORD(v161) = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v65, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v73 = v71;
  v52 = v70;
  v63 = v69;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v161 & 1) == 0)
    goto LABEL_37;
LABEL_16:
  v74 = v162
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  v75 = v156;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v76 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  v77 = v153;
  v78 = v153 + *(int *)(v63 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v153, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v50(v77, 1, v54) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v79 = v50(v78, 1, v54);
    v80 = v154;
    if (v79 == 1)
    {
      v161 = v50;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v81 = v152;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v152, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v82 = v50(v78, 1, v54);
  v80 = v154;
  if (v82 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_21:
    v66 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v67 = v77;
    goto LABEL_36;
  }
  v161 = v50;
  v83 = v81;
  v84 = v160;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v78, v160, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v85 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v83, v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v85 & 1) == 0)
    goto LABEL_37;
LABEL_23:
  v86 = v162
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v87 = v52
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  v88 = *(int *)(v63 + 48);
  v89 = v80;
  v90 = v54;
  v91 = v151;
  v92 = v151 + v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, v151, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v93 = v87;
  v94 = v90;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v93, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v95 = v161;
  if (v161(v91, 1, v90) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v95(v92, 1, v90) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v96 = v149;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, v149, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v95(v92, 1, v94) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v154, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v96, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_28:
    v66 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v67 = v91;
    goto LABEL_36;
  }
  v97 = v160;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, v160, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v98 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v96, v97, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v97, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v154, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v96, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v98 & 1) == 0)
  {
LABEL_37:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_30:
  v99 = v162
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  v100 = v150;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99, v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v101 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  v102 = v148;
  v103 = v148 + *(int *)(v145 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, v148, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v104 = v101;
  v105 = v102;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
  v107 = v102;
  v108 = v147;
  if (v106(v107, 1, v147) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
    if (v106(v103, 1, v108) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
      goto LABEL_40;
    }
    goto LABEL_35;
  }
  v109 = v143;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if (v106(v103, 1, v108) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
LABEL_35:
    v66 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PlaceInference?, CLP_LogEntry_PrivateData_PlaceInference?);
    v67 = v105;
    goto LABEL_36;
  }
  v111 = v138;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v103, v138, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  v112 = specialized static CLP_LogEntry_PrivateData_PlaceInference.== infix(_:_:)(v109, v111);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v111, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((v112 & 1) == 0)
    goto LABEL_37;
LABEL_40:
  v113 = v162
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  v114 = v144;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v115 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  v116 = v142;
  v117 = v142 + *(int *)(v139 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v118 = v115;
  v119 = v116;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v120 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  v121 = v116;
  v122 = v141;
  if (v120(v121, 1, v141) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    v123 = v120(v117, 1, v122);
    v124 = v162;
    if (v123 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v125 = v137;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, v137, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v120(v117, 1, v122) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
LABEL_45:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_37;
  }
  v126 = v136;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v117, v136, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v127 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v125, v126, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v126, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v124 = v162;
  if ((v127 & 1) == 0)
    goto LABEL_37;
LABEL_47:
  v128 = v124
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  v129 = *(double *)v128;
  v130 = *(_BYTE *)(v128 + 8);
  swift_release();
  v131 = v52
       + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  v132 = *(double *)v131;
  v133 = *(unsigned __int8 *)(v131 + 8);
  swift_release();
  if ((v130 & 1) == 0)
  {
    if (v129 == v132)
      v134 = v133;
    else
      v134 = 1;
    return (v134 & 1) == 0;
  }
  return v133 != 0;
}

Swift::Int CLP_LogEntry_PrivateData_RoutineVisit.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RoutineVisit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RoutineVisit()
{
  return CLP_LogEntry_PrivateData_RoutineVisit.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_RoutineVisit.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RoutineVisit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RoutineVisit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RoutineVisit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RoutineVisit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_OutdoorUpdate.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
          goto LABEL_8;
        case 4:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
LABEL_8:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[7]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v5 + v10[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_PrivateData_DirectionOfTravel.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    closure #6 in CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(v5);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    closure #8 in CLP_LogEntry_PrivateData_BodyMetrics.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_OutdoorUpdate.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_OutdoorUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 3;
  *(_BYTE *)(a2 + v8) = 4;
  v9 = a1[10];
  v10 = a2 + a1[9];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9) = 4;
  v11 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  v12 = a2 + v11;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return CLP_LogEntry_PrivateData_OutdoorUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_OutdoorUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_OutdoorUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample.protoMessageName.getter()
{
  return 0xD00000000000002FLL;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v0 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_11;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_11;
        case 14:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 15:
        case 16:
        case 17:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  v2 = *(_BYTE **)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v2[24] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (v1)
    return swift_release();
  swift_beginAccess();
  if ((v2[40] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[48] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[56] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[64] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[72] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[80] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[88] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[96] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[104] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[112] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[120] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v2[128] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if (v2[129] != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v2[130] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_beginAccess();
  if (v2[131] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_beginAccess();
  if (v2[132] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

Swift::Int CLP_LogEntry_PrivateData_InertialOdometrySample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_InertialOdometrySample@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return CLP_LogEntry_PrivateData_InertialOdometrySample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return CLP_LogEntry_PrivateData_InertialOdometrySample.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap, a1);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;

  v6 = a3(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t (*)(_QWORD))((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v14, (uint64_t)v12, a3);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v14, (uint64_t)v9, a3);
        v17 = specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)((uint64_t)v12, v9, a3);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
        v19 = v16-- != 0;
        if ((v17 & 1) == 0)
          break;
        v14 += v15;
      }
      while (v19);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  int v26;
  char v27;
  BOOL v29;
  uint64_t v31;

  v6 = a3(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v31 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (v13 && a1 != a2)
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v14, (uint64_t)v12, a3);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v14, (uint64_t)v9, a3);
        v17 = *(int *)(v6 + 20);
        v18 = &v12[v17];
        v19 = v12[v17 + 4];
        v20 = &v9[v17];
        v21 = v9[v17 + 4];
        if ((v19 & 1) != 0)
        {
          if (!v21)
            goto LABEL_24;
        }
        else
        {
          if (*(_DWORD *)v18 != *(_DWORD *)v20)
            LOBYTE(v21) = 1;
          if ((v21 & 1) != 0)
          {
LABEL_24:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
            goto LABEL_25;
          }
        }
        v22 = *(int *)(v6 + 24);
        v23 = &v12[v22];
        v24 = v12[v22 + 4];
        v25 = &v9[v22];
        v26 = v9[v22 + 4];
        if ((v24 & 1) != 0)
        {
          if (!v26)
            goto LABEL_24;
        }
        else
        {
          if (*(_DWORD *)v23 != *(_DWORD *)v25)
            LOBYTE(v26) = 1;
          if ((v26 & 1) != 0)
            goto LABEL_24;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
        v29 = v16-- != 0;
        if ((v27 & 1) != 0)
        {
          v14 += v15;
          if (v29)
            continue;
        }
        return v27 & 1;
      }
    }
    v27 = 1;
  }
  else
  {
LABEL_25:
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v16, (uint64_t)v14, a3);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a3);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xE)
    return 14;
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(uint64_t a1)
{
  uint64_t result;

  if (a1 <= 11804)
  {
    if (a1 <= 2009)
    {
      result = 0;
      switch(a1)
      {
        case 0:
          return result;
        case 1:
          result = 1;
          break;
        case 2:
          result = 2;
          break;
        case 3:
          result = 3;
          break;
        case 4:
          result = 4;
          break;
        case 5:
          result = 5;
          break;
        case 6:
          result = 6;
          break;
        case 7:
          result = 7;
          break;
        case 8:
          result = 8;
          break;
        case 9:
          result = 9;
          break;
        case 10:
          result = 10;
          break;
        case 11:
          result = 11;
          break;
        case 41:
          result = 12;
          break;
        case 52:
          result = 13;
          break;
        case 56:
          result = 14;
          break;
        case 61:
          result = 15;
          break;
        case 62:
          result = 16;
          break;
        case 63:
          result = 39;
          break;
        case 64:
          result = 46;
          break;
        case 65:
          result = 47;
          break;
        case 66:
          result = 60;
          break;
        case 100:
          result = 17;
          break;
        default:
          return 72;
      }
      return result;
    }
    if (a1 <= 2149)
    {
      switch(a1)
      {
        case 2010:
          result = 18;
          break;
        case 2020:
          result = 19;
          break;
        case 2022:
          result = 35;
          break;
        case 2024:
          result = 37;
          break;
        case 2048:
          result = 20;
          break;
        case 2061:
          result = 21;
          break;
        case 2065:
          result = 22;
          break;
        case 2068:
          result = 69;
          break;
        case 2071:
          result = 23;
          break;
        case 2101:
          result = 36;
          break;
        case 2105:
          result = 24;
          break;
        default:
          return 72;
      }
      return result;
    }
    switch(a1)
    {
      case 2150:
        return 25;
      case 3015:
        return 26;
      case 3016:
        return 71;
    }
    return 72;
  }
  if (a1 <= 15651)
  {
    if (a1 > 15254)
    {
      if (a1 <= 15459)
      {
        if (a1 > 15349)
        {
          if (a1 == 15350)
            return 55;
          if (a1 == 15360)
            return 54;
        }
        else
        {
          if (a1 == 15255)
            return 29;
          if (a1 == 15330)
            return 63;
        }
      }
      else if (a1 <= 15591)
      {
        if (a1 == 15460)
          return 51;
        if (a1 == 15562)
          return 50;
      }
      else
      {
        switch(a1)
        {
          case 15592:
            return 52;
          case 15610:
            return 45;
          case 15620:
            return 65;
        }
      }
    }
    else if (a1 <= 15099)
    {
      if (a1 > 15029)
      {
        if (a1 == 15030)
          return 58;
        if (a1 == 15055)
          return 56;
      }
      else
      {
        if (a1 == 11805)
          return 27;
        if (a1 == 12150)
          return 28;
      }
    }
    else if (a1 <= 15149)
    {
      if (a1 == 15100)
        return 70;
      if (a1 == 15110)
        return 40;
    }
    else
    {
      switch(a1)
      {
        case 15150:
          return 67;
        case 15230:
          return 48;
        case 15240:
          return 49;
      }
    }
    return 72;
  }
  if (a1 > 18224)
  {
    if (a1 <= 19149)
    {
      if (a1 > 19029)
      {
        if (a1 == 19030)
          return 53;
        if (a1 == 19090)
          return 42;
      }
      else
      {
        if (a1 == 18225)
          return 44;
        if (a1 == 18240)
          return 32;
      }
    }
    else if (a1 <= 90602)
    {
      if (a1 == 19150)
        return 34;
      if (a1 == 19160)
        return 43;
    }
    else
    {
      switch(a1)
      {
        case 90603:
          return 33;
        case 515621:
          return 66;
        case 515652:
          return 59;
      }
    }
    return 72;
  }
  if (a1 > 15732)
  {
    if (a1 > 18069)
    {
      if (a1 == 18070)
        return 41;
      if (a1 == 18200)
        return 31;
    }
    else
    {
      if (a1 == 15733)
        return 64;
      if (a1 == 17150)
        return 30;
    }
    return 72;
  }
  switch(a1)
  {
    case 15652:
      result = 62;
      break;
    case 15653:
    case 15654:
    case 15655:
    case 15656:
    case 15657:
    case 15658:
    case 15659:
    case 15661:
    case 15662:
    case 15663:
    case 15664:
    case 15665:
    case 15666:
    case 15667:
    case 15668:
    case 15669:
    case 15671:
    case 15672:
    case 15673:
    case 15674:
      return 72;
    case 15660:
      result = 68;
      break;
    case 15670:
      result = 38;
      break;
    case 15675:
      result = 57;
      break;
    default:
      if (a1 != 15710)
        return 72;
      result = 61;
      break;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    default:
      if (a1 == 1001)
        result = 4;
      else
        result = 5;
      break;
  }
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xF)
    return 15;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Accel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Accel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Gyro(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Baro(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Baro);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v3);
  v76 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 4;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  v80 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  v83 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *v18 = 14;
  v84 = v18;
  v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  v7();
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  v86 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  v87 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  v92 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v91 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  swift_beginAccess();
  v22 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  v24 = v76;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v25 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
  swift_beginAccess();
  v27 = *v26;
  LOBYTE(v26) = *((_BYTE *)v26 + 8);
  swift_beginAccess();
  *(_QWORD *)v8 = v27;
  *(_BYTE *)(v8 + 8) = (_BYTE)v26;
  v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
  swift_beginAccess();
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  swift_beginAccess();
  *(_QWORD *)v9 = v29;
  *(_BYTE *)(v9 + 8) = (_BYTE)v28;
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
  swift_beginAccess();
  v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess();
  *(_QWORD *)v10 = v31;
  *(_BYTE *)(v10 + 8) = (_BYTE)v30;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
  swift_beginAccess();
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  v34 = v77;
  swift_beginAccess();
  *(_QWORD *)v34 = v33;
  *(_BYTE *)(v34 + 8) = (_BYTE)v32;
  v35 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
  swift_beginAccess();
  v36 = *v35;
  LOBYTE(v35) = *((_BYTE *)v35 + 8);
  v37 = v78;
  swift_beginAccess();
  *(_QWORD *)v37 = v36;
  *(_BYTE *)(v37 + 8) = (_BYTE)v35;
  v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
  swift_beginAccess();
  v39 = *v38;
  LOBYTE(v38) = *((_BYTE *)v38 + 8);
  v40 = v79;
  swift_beginAccess();
  *(_QWORD *)v40 = v39;
  *(_BYTE *)(v40 + 8) = (_BYTE)v38;
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
  swift_beginAccess();
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  v43 = v80;
  swift_beginAccess();
  *(_QWORD *)v43 = v42;
  *(_BYTE *)(v43 + 8) = (_BYTE)v41;
  v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
  swift_beginAccess();
  v45 = *v44;
  LOBYTE(v44) = *((_BYTE *)v44 + 8);
  v46 = v81;
  swift_beginAccess();
  *(_QWORD *)v46 = v45;
  *(_BYTE *)(v46 + 8) = (_BYTE)v44;
  v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  LODWORD(v45) = *(_DWORD *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 4);
  v48 = v82;
  swift_beginAccess();
  *(_DWORD *)v48 = v45;
  *(_BYTE *)(v48 + 4) = v47;
  v49 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
  swift_beginAccess();
  v50 = *v49;
  LOBYTE(v49) = *((_BYTE *)v49 + 8);
  v51 = v83;
  swift_beginAccess();
  *(_QWORD *)v51 = v50;
  *(_BYTE *)(v51 + 8) = (_BYTE)v49;
  v52 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  LOBYTE(v52) = *v52;
  v53 = v84;
  swift_beginAccess();
  *v53 = (_BYTE)v52;
  v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v55 = v85;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
  swift_beginAccess();
  v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  v58 = v86;
  swift_beginAccess();
  *(_QWORD *)v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v60 = v87;
  swift_beginAccess();
  *(_DWORD *)v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  LOBYTE(v61) = *v61;
  v62 = v88;
  swift_beginAccess();
  *v62 = (_BYTE)v61;
  v63 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  v64 = v89;
  swift_beginAccess();
  *v64 = (_BYTE)v63;
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  v66 = v90;
  swift_beginAccess();
  *v66 = (_BYTE)v65;
  v67 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  LOBYTE(v67) = *v67;
  v68 = v92;
  swift_beginAccess();
  *v68 = (_BYTE)v67;
  v69 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
  swift_beginAccess();
  v70 = *v69;
  LOBYTE(v69) = *((_BYTE *)v69 + 8);
  swift_beginAccess();
  *(_QWORD *)v21 = v70;
  *(_BYTE *)(v21 + 8) = (_BYTE)v69;
  v71 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  LOBYTE(v71) = *v71;
  v72 = v91;
  swift_beginAccess();
  *v72 = (_BYTE)v71;
  return v1;
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(uint64_t result)
{
  if (result <= 1)
  {
    if ((unint64_t)result <= 1)
      return result;
    return 4;
  }
  if (result != 2)
  {
    if (result == 0xFFFF)
      return 3;
    return 4;
  }
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(uint64_t a1)
{
  if (a1 <= 24)
  {
    if (a1 == -1)
      return 0;
    if (!a1)
      return 1;
  }
  else
  {
    switch(a1)
    {
      case 25:
        return 2;
      case 50:
        return 3;
      case 75:
        return 4;
    }
  }
  return 5;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  char v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _DWORD *v188;
  _DWORD *v189;
  _DWORD *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _BYTE *v232;
  uint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  _BYTE *v239;
  uint64_t v240;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v240 = (uint64_t)&v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x24BDAC7A8](v5);
  v218 = (uint64_t)&v184 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x24BDAC7A8](v7);
  v204 = (uint64_t)&v184 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v9);
  v195 = (uint64_t)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  v184 = (_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 48) = 0;
  v185 = (_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 40) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v186 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  v187 = (_QWORD *)(v1 + 80);
  *(_DWORD *)(v1 + 92) = 0;
  v188 = (_DWORD *)(v1 + 92);
  *(_BYTE *)(v1 + 88) = 1;
  *(_BYTE *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 0;
  v189 = (_DWORD *)(v1 + 100);
  *(_DWORD *)(v1 + 108) = 0;
  v190 = (_DWORD *)(v1 + 108);
  *(_WORD *)(v1 + 113) = 1026;
  *(_BYTE *)(v1 + 104) = 1;
  v191 = (_BYTE *)(v1 + 113);
  v192 = v1 + 114;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  v193 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v1 + 112) = 1;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  v194 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  v196 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  v197 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v198 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v199 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v200 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  v201 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v202 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  v13();
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  v203 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  v205 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v206 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  v207 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v208 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  v209 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  v210 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  v211 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  v212 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  v28 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  v213 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  v214 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  v215 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  v216 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  v217 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(_QWORD *)v31 = 0;
  *(_BYTE *)(v31 + 8) = 1;
  v219 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v220 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  v13();
  v32 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  v221 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 1;
  v222 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  v223 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  v224 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  v225 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  v226 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(_QWORD *)v36 = 0;
  *(_BYTE *)(v36 + 8) = 1;
  v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  v227 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  v228 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  v38 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  v229 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(_QWORD *)v38 = 0;
  *(_BYTE *)(v38 + 8) = 1;
  v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  v230 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(_QWORD *)v39 = 0;
  *(_BYTE *)(v39 + 8) = 1;
  v231 = (_QWORD *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = MEMORY[0x24BEE4AF8];
  v232 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  v40 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  v233 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v234 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  v235 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 1;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  v236 = v1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  v237 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  v238 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  v239 = (_BYTE *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  swift_beginAccess();
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v46;
  *(_BYTE *)(v1 + 24) = v47;
  swift_beginAccess();
  v48 = *(_QWORD *)(a1 + 32);
  v49 = *(_BYTE *)(a1 + 40);
  v50 = v184;
  swift_beginAccess();
  *v50 = v48;
  *(_BYTE *)(v1 + 40) = v49;
  swift_beginAccess();
  v51 = *(_QWORD *)(a1 + 48);
  v52 = *(_BYTE *)(a1 + 56);
  v53 = v185;
  swift_beginAccess();
  *v53 = v51;
  *(_BYTE *)(v1 + 56) = v52;
  swift_beginAccess();
  v54 = *(_QWORD *)(a1 + 64);
  v55 = *(_BYTE *)(a1 + 72);
  v56 = v186;
  swift_beginAccess();
  *v56 = v54;
  *(_BYTE *)(v1 + 72) = v55;
  swift_beginAccess();
  v57 = *(_QWORD *)(a1 + 80);
  v58 = *(_BYTE *)(a1 + 88);
  v59 = v187;
  swift_beginAccess();
  *v59 = v57;
  *(_BYTE *)(v1 + 88) = v58;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)(a1 + 92);
  v60 = *(_BYTE *)(a1 + 96);
  v61 = v188;
  swift_beginAccess();
  *v61 = v57;
  *(_BYTE *)(v1 + 96) = v60;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)(a1 + 100);
  v62 = *(_BYTE *)(a1 + 104);
  v63 = v189;
  swift_beginAccess();
  *v63 = v57;
  *(_BYTE *)(v1 + 104) = v62;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)(a1 + 108);
  v64 = *(_BYTE *)(a1 + 112);
  v65 = v190;
  swift_beginAccess();
  *v65 = v57;
  *(_BYTE *)(v1 + 112) = v64;
  swift_beginAccess();
  LOBYTE(v57) = *(_BYTE *)(a1 + 113);
  v66 = v191;
  swift_beginAccess();
  *v66 = v57;
  swift_beginAccess();
  LOBYTE(v57) = *(_BYTE *)(a1 + 114);
  swift_beginAccess();
  *(_BYTE *)(v1 + 114) = v57;
  v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  v68 = v195;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v195, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v69 = v193;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v70 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
  swift_beginAccess();
  v71 = *v70;
  LOBYTE(v70) = *((_BYTE *)v70 + 8);
  v72 = v194;
  swift_beginAccess();
  *(_QWORD *)v72 = v71;
  *(_BYTE *)(v72 + 8) = (_BYTE)v70;
  v73 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess();
  LODWORD(v71) = *(_DWORD *)v73;
  LOBYTE(v73) = *(_BYTE *)(v73 + 4);
  v74 = v196;
  swift_beginAccess();
  *(_DWORD *)v74 = v71;
  *(_BYTE *)(v74 + 4) = v73;
  v75 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess();
  LODWORD(v71) = *(_DWORD *)v75;
  LOBYTE(v75) = *(_BYTE *)(v75 + 4);
  v76 = v197;
  swift_beginAccess();
  *(_DWORD *)v76 = v71;
  *(_BYTE *)(v76 + 4) = v75;
  v77 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  LOBYTE(v77) = *v77;
  v78 = v198;
  swift_beginAccess();
  *v78 = (_BYTE)v77;
  v79 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  v80 = v204;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  v81 = v199;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v80, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  v82 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  LOBYTE(v82) = *v82;
  v83 = v200;
  swift_beginAccess();
  *v83 = (_BYTE)v82;
  v84 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess();
  LODWORD(v83) = *(_DWORD *)v84;
  LOBYTE(v84) = *(_BYTE *)(v84 + 4);
  v85 = v201;
  swift_beginAccess();
  *(_DWORD *)v85 = (_DWORD)v83;
  *(_BYTE *)(v85 + 4) = v84;
  v86 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v87 = v202;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v88 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
  swift_beginAccess();
  v89 = *v88;
  LOBYTE(v88) = *((_BYTE *)v88 + 8);
  v90 = v203;
  swift_beginAccess();
  *(_QWORD *)v90 = v89;
  *(_BYTE *)(v90 + 8) = (_BYTE)v88;
  v91 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
  swift_beginAccess();
  v92 = *v91;
  LOBYTE(v91) = *((_BYTE *)v91 + 8);
  v93 = v205;
  swift_beginAccess();
  *(_QWORD *)v93 = v92;
  *(_BYTE *)(v93 + 8) = (_BYTE)v91;
  v94 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  LOBYTE(v94) = *v94;
  v95 = v206;
  swift_beginAccess();
  *v95 = (_BYTE)v94;
  v96 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  LOBYTE(v96) = *v96;
  v97 = v207;
  swift_beginAccess();
  *v97 = (_BYTE)v96;
  v98 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  v99 = v218;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v100 = v208;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v99, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  v101 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
  swift_beginAccess();
  v102 = *v101;
  LOBYTE(v101) = *((_BYTE *)v101 + 8);
  v103 = v209;
  swift_beginAccess();
  *(_QWORD *)v103 = v102;
  *(_BYTE *)(v103 + 8) = (_BYTE)v101;
  v104 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
  swift_beginAccess();
  v105 = *v104;
  LOBYTE(v104) = *((_BYTE *)v104 + 8);
  v106 = v210;
  swift_beginAccess();
  *(_QWORD *)v106 = v105;
  *(_BYTE *)(v106 + 8) = (_BYTE)v104;
  v107 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
  swift_beginAccess();
  v108 = *v107;
  LOBYTE(v107) = *((_BYTE *)v107 + 8);
  v109 = v211;
  swift_beginAccess();
  *(_QWORD *)v109 = v108;
  *(_BYTE *)(v109 + 8) = (_BYTE)v107;
  v110 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
  swift_beginAccess();
  v111 = *v110;
  LOBYTE(v110) = *((_BYTE *)v110 + 8);
  v112 = v212;
  swift_beginAccess();
  *(_QWORD *)v112 = v111;
  *(_BYTE *)(v112 + 8) = (_BYTE)v110;
  v113 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
  swift_beginAccess();
  v114 = *v113;
  LOBYTE(v113) = *((_BYTE *)v113 + 8);
  v115 = v213;
  swift_beginAccess();
  *(_QWORD *)v115 = v114;
  *(_BYTE *)(v115 + 8) = (_BYTE)v113;
  v116 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
  swift_beginAccess();
  v117 = *v116;
  LOBYTE(v116) = *((_BYTE *)v116 + 8);
  v118 = v214;
  swift_beginAccess();
  *(_QWORD *)v118 = v117;
  *(_BYTE *)(v118 + 8) = (_BYTE)v116;
  v119 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  LOBYTE(v119) = *v119;
  v120 = v215;
  swift_beginAccess();
  *v120 = (_BYTE)v119;
  v121 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
  swift_beginAccess();
  v122 = *v121;
  LOBYTE(v121) = *((_BYTE *)v121 + 8);
  v123 = v216;
  swift_beginAccess();
  *(_QWORD *)v123 = v122;
  *(_BYTE *)(v123 + 8) = (_BYTE)v121;
  v124 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
  swift_beginAccess();
  v125 = *v124;
  LOBYTE(v124) = *((_BYTE *)v124 + 8);
  v126 = v217;
  swift_beginAccess();
  *(_QWORD *)v126 = v125;
  *(_BYTE *)(v126 + 8) = (_BYTE)v124;
  v127 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  LOBYTE(v127) = *v127;
  v128 = v219;
  swift_beginAccess();
  *v128 = (_BYTE)v127;
  v129 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v129, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v130 = v220;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v130, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v131 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
  swift_beginAccess();
  v132 = *v131;
  LOBYTE(v131) = *((_BYTE *)v131 + 8);
  v133 = v221;
  swift_beginAccess();
  *(_QWORD *)v133 = v132;
  *(_BYTE *)(v133 + 8) = (_BYTE)v131;
  v134 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  LOBYTE(v134) = *v134;
  v135 = v222;
  swift_beginAccess();
  *v135 = (_BYTE)v134;
  v136 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
  swift_beginAccess();
  v137 = *v136;
  LOBYTE(v136) = *((_BYTE *)v136 + 8);
  v138 = v223;
  swift_beginAccess();
  *(_QWORD *)v138 = v137;
  *(_BYTE *)(v138 + 8) = (_BYTE)v136;
  v139 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
  swift_beginAccess();
  v140 = *v139;
  LOBYTE(v139) = *((_BYTE *)v139 + 8);
  v141 = v224;
  swift_beginAccess();
  *(_QWORD *)v141 = v140;
  *(_BYTE *)(v141 + 8) = (_BYTE)v139;
  v142 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
  swift_beginAccess();
  v143 = *v142;
  LOBYTE(v142) = *((_BYTE *)v142 + 8);
  v144 = v225;
  swift_beginAccess();
  *(_QWORD *)v144 = v143;
  *(_BYTE *)(v144 + 8) = (_BYTE)v142;
  v145 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
  swift_beginAccess();
  v146 = *v145;
  LOBYTE(v145) = *((_BYTE *)v145 + 8);
  v147 = v226;
  swift_beginAccess();
  *(_QWORD *)v147 = v146;
  *(_BYTE *)(v147 + 8) = (_BYTE)v145;
  v148 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
  swift_beginAccess();
  v149 = *v148;
  LOBYTE(v148) = *((_BYTE *)v148 + 8);
  v150 = v227;
  swift_beginAccess();
  *(_QWORD *)v150 = v149;
  *(_BYTE *)(v150 + 8) = (_BYTE)v148;
  v151 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  LOBYTE(v151) = *v151;
  v152 = v228;
  swift_beginAccess();
  *v152 = (_BYTE)v151;
  v153 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
  swift_beginAccess();
  v154 = *v153;
  LOBYTE(v153) = *((_BYTE *)v153 + 8);
  v155 = v229;
  swift_beginAccess();
  *(_QWORD *)v155 = v154;
  *(_BYTE *)(v155 + 8) = (_BYTE)v153;
  v156 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
  swift_beginAccess();
  v157 = *v156;
  LOBYTE(v156) = *((_BYTE *)v156 + 8);
  v158 = v230;
  swift_beginAccess();
  *(_QWORD *)v158 = v157;
  *(_BYTE *)(v158 + 8) = (_BYTE)v156;
  v159 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  v160 = *v159;
  v161 = v231;
  swift_beginAccess();
  *v161 = v160;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v162 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  LOBYTE(v162) = *v162;
  v163 = v232;
  swift_beginAccess();
  *v163 = (_BYTE)v162;
  v164 = a1
       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  v165 = v240;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v164, v240, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v166 = v233;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v165, v166, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  v167 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  LOBYTE(v167) = *v167;
  v168 = v234;
  swift_beginAccess();
  *v168 = (_BYTE)v167;
  v169 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
  swift_beginAccess();
  v170 = *v169;
  LOBYTE(v169) = *((_BYTE *)v169 + 8);
  v171 = v235;
  swift_beginAccess();
  *(_QWORD *)v171 = v170;
  *(_BYTE *)(v171 + 8) = (_BYTE)v169;
  v172 = (uint64_t *)(a1
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
  swift_beginAccess();
  v173 = *v172;
  LOBYTE(v172) = *((_BYTE *)v172 + 8);
  v174 = v236;
  swift_beginAccess();
  *(_QWORD *)v174 = v173;
  *(_BYTE *)(v174 + 8) = (_BYTE)v172;
  v175 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  LOBYTE(v175) = *v175;
  v176 = v237;
  swift_beginAccess();
  *v176 = (_BYTE)v175;
  v177 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  LOBYTE(v177) = *v177;
  v178 = v238;
  swift_beginAccess();
  *v178 = (_BYTE)v177;
  v179 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  LOBYTE(v179) = *v179;
  v180 = v239;
  swift_beginAccess();
  *v180 = (_BYTE)v179;
  v181 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  LOBYTE(v181) = *v181;
  swift_beginAccess();
  *v44 = (_BYTE)v181;
  v182 = (_BYTE *)(a1
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  LOBYTE(v182) = *v182;
  swift_beginAccess();
  *v45 = (_BYTE)v182;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 4)
    return a1 + 1;
  else
    return 4;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Location);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Location._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionActivity._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutSettings);
}

unint64_t specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x43)
    return 67;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WorkoutEvent);
}

unint64_t specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x13)
    return 19;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BodyMetrics);
}

unint64_t specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(unint64_t result)
{
  if (result >= 8)
    return 8;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Timer(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Timer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapVector._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  *v13 = 3;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  v61 = v13;
  v62 = v14;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  v63 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  v64 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  *v17 = 2;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  v65 = v17;
  v66 = v18;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  v68 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(_BYTE *)(v21 + 8) = 1;
  *(_QWORD *)v21 = 0;
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v23 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
  swift_beginAccess();
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 8);
  swift_beginAccess();
  *(_QWORD *)v8 = v24;
  *(_BYTE *)(v8 + 8) = (_BYTE)v23;
  v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
  swift_beginAccess();
  v26 = *v25;
  LOBYTE(v25) = *((_BYTE *)v25 + 8);
  swift_beginAccess();
  *(_QWORD *)v9 = v26;
  *(_BYTE *)(v9 + 8) = (_BYTE)v25;
  v27 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
  swift_beginAccess();
  v28 = *v27;
  LOBYTE(v27) = *((_BYTE *)v27 + 8);
  swift_beginAccess();
  *(_QWORD *)v10 = v28;
  *(_BYTE *)(v10 + 8) = (_BYTE)v27;
  v29 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
  swift_beginAccess();
  v30 = *v29;
  LOBYTE(v29) = *((_BYTE *)v29 + 8);
  swift_beginAccess();
  *(_QWORD *)v11 = v30;
  *(_BYTE *)(v11 + 8) = (_BYTE)v29;
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
  swift_beginAccess();
  v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  v33 = v60;
  swift_beginAccess();
  *(_QWORD *)v33 = v32;
  *(_BYTE *)(v33 + 8) = (_BYTE)v31;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  LOBYTE(v34) = *v34;
  v35 = v61;
  swift_beginAccess();
  *v35 = (_BYTE)v34;
  v36 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
  swift_beginAccess();
  v37 = *v36;
  LOBYTE(v36) = *((_BYTE *)v36 + 8);
  v38 = v62;
  swift_beginAccess();
  *(_QWORD *)v38 = v37;
  *(_BYTE *)(v38 + 8) = (_BYTE)v36;
  v39 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
  swift_beginAccess();
  v40 = *v39;
  LOBYTE(v39) = *((_BYTE *)v39 + 8);
  v41 = v63;
  swift_beginAccess();
  *(_QWORD *)v41 = v40;
  *(_BYTE *)(v41 + 8) = (_BYTE)v39;
  v42 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
  swift_beginAccess();
  v43 = *v42;
  LOBYTE(v42) = *((_BYTE *)v42 + 8);
  v44 = v64;
  swift_beginAccess();
  *(_QWORD *)v44 = v43;
  *(_BYTE *)(v44 + 8) = (_BYTE)v42;
  v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  LOBYTE(v45) = *v45;
  v46 = v65;
  swift_beginAccess();
  *v46 = (_BYTE)v45;
  v47 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
  swift_beginAccess();
  v48 = *v47;
  LOBYTE(v47) = *((_BYTE *)v47 + 8);
  v49 = v66;
  swift_beginAccess();
  *(_QWORD *)v49 = v48;
  *(_BYTE *)(v49 + 8) = (_BYTE)v47;
  v50 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
  swift_beginAccess();
  v51 = *v50;
  LOBYTE(v50) = *((_BYTE *)v50 + 8);
  v52 = v67;
  swift_beginAccess();
  *(_QWORD *)v52 = v51;
  *(_BYTE *)(v52 + 8) = (_BYTE)v50;
  v53 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
  swift_beginAccess();
  v54 = *v53;
  LOBYTE(v53) = *((_BYTE *)v53 + 8);
  v55 = v68;
  swift_beginAccess();
  *(_QWORD *)v55 = v54;
  *(_BYTE *)(v55 + 8) = (_BYTE)v53;
  v56 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
  swift_beginAccess();
  v57 = *v56;
  LOBYTE(v56) = *((_BYTE *)v56 + 8);
  v58 = v69;
  swift_beginAccess();
  *(_QWORD *)v58 = v57;
  *(_BYTE *)(v58 + 8) = (_BYTE)v56;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Battery(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Battery);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x24BDAC7A8](v3);
  v51 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v44 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  v46 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  v49 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  v50 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  v52 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v53 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v20, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v9) = *(_DWORD *)v21;
  LOBYTE(v21) = *(_BYTE *)(v21 + 4);
  swift_beginAccess();
  *(_DWORD *)v12 = (_DWORD)v9;
  *(_BYTE *)(v12 + 4) = v21;
  v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  LOBYTE(v22) = *v22;
  swift_beginAccess();
  *v13 = (_BYTE)v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  v24 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  v26 = v51;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v27 = v44;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  v28 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  LOBYTE(v28) = *v28;
  v29 = v45;
  swift_beginAccess();
  *v29 = (_BYTE)v28;
  v30 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  LOBYTE(v30) = *v30;
  v31 = v46;
  swift_beginAccess();
  *v31 = (_BYTE)v30;
  v32 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  LOBYTE(v32) = *v32;
  v33 = v48;
  swift_beginAccess();
  *v33 = (_BYTE)v32;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  LOBYTE(v34) = *v34;
  v35 = v49;
  swift_beginAccess();
  *v35 = (_BYTE)v34;
  v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  LOBYTE(v36) = *v36;
  v37 = v50;
  swift_beginAccess();
  *v37 = (_BYTE)v36;
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  swift_beginAccess();
  *(_DWORD *)v18 = (_DWORD)v37;
  *(_BYTE *)(v18 + 4) = v38;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  v40 = v52;
  swift_beginAccess();
  *(_DWORD *)v40 = (_DWORD)v37;
  *(_BYTE *)(v40 + 4) = v39;
  v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  LOBYTE(v41) = *v41;
  v42 = v53;
  swift_beginAccess();
  *v42 = (_BYTE)v41;
  return v1;
}

unint64_t specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(unint64_t result)
{
  if (result >= 0x14)
    return 20;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 8)
    return a1 + 1;
  else
    return 8;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MagSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Reset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Reset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_StepCount(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Compass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Compass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v1+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v12);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v13();
  v32 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  v33 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  v34 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  v35 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v18, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v19, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v20 = v31;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  v22 = v32;
  swift_beginAccess();
  *v22 = (_BYTE)v21;
  v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  LOBYTE(v23) = *v23;
  v24 = v33;
  swift_beginAccess();
  *v24 = (_BYTE)v23;
  v25 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  LOBYTE(v25) = *v25;
  v26 = v34;
  swift_beginAccess();
  *v26 = (_BYTE)v25;
  v27 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  LOBYTE(v27) = *v27;
  v28 = v35;
  swift_beginAccess();
  *v28 = (_BYTE)v27;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  LODWORD(v27) = *(_DWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 4);
  swift_beginAccess();
  *(_DWORD *)v15 = (_DWORD)v27;
  *(_BYTE *)(v15 + 4) = v29;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WifiNotification._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x24BDAC7A8](v3);
  v49 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x24BDAC7A8](v5);
  v46 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  v14 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  v41 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v42 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v43 = v1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v44 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  v45 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  v47 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  v48 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v19, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v19) = *(_DWORD *)v20;
  LOBYTE(v20) = *(_BYTE *)(v20 + 4);
  swift_beginAccess();
  *(_DWORD *)v12 = v19;
  *(_BYTE *)(v12 + 4) = v20;
  v21 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  LOBYTE(v21) = *v21;
  swift_beginAccess();
  *v13 = (_BYTE)v21;
  v22 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  LOBYTE(v22) = *v22;
  swift_beginAccess();
  *v14 = (_BYTE)v22;
  v23 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  LOBYTE(v23) = *v23;
  v24 = v41;
  swift_beginAccess();
  *v24 = (_BYTE)v23;
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  v26 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v27 = v42;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  v29 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v30 = v43;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  v31 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  LOBYTE(v31) = *v31;
  v32 = v44;
  swift_beginAccess();
  *v32 = (_BYTE)v31;
  v33 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  LOBYTE(v33) = *v33;
  v34 = v45;
  swift_beginAccess();
  *v34 = (_BYTE)v33;
  v35 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  LOBYTE(v35) = *v35;
  v36 = v47;
  swift_beginAccess();
  *v36 = (_BYTE)v35;
  v37 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  LOBYTE(v37) = *v37;
  v38 = v48;
  swift_beginAccess();
  *v38 = (_BYTE)v37;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WristState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WristState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_WatchState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v3);
  v38 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x24BDAC7A8](v5);
  v37 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v11);
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v11);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  v12(v1+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v11);
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v36 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v22 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v22, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v24 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  v26 = v37;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v27 = v35;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v26, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  v29 = v38;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v30 = v36;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
  swift_beginAccess();
  v32 = *v31;
  LOBYTE(v31) = *((_BYTE *)v31 + 8);
  swift_beginAccess();
  *(_QWORD *)v20 = v32;
  *(_BYTE *)(v20 + 8) = (_BYTE)v31;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass()
{
  return objc_opt_self();
}

uint64_t specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_DWORD *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_BYTE *)(v1 + 56) = 1;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_DWORD *)(v1 + 68) = 0;
  *(_DWORD *)(v1 + 76) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_BYTE *)(v1 + 80) = 1;
  *(_DWORD *)(v1 + 84) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 92) = 0;
  *(_DWORD *)(v1 + 100) = 0;
  *(_BYTE *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_DWORD *)(v1 + 116) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
  *(_DWORD *)(v1 + 129) = 33686019;
  *(_DWORD *)(v1 + 124) = 0;
  swift_beginAccess();
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v4;
  swift_beginAccess();
  v5 = *(_QWORD *)(a1 + 32);
  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 40) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 44);
  LOBYTE(v3) = *(_BYTE *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 44) = v5;
  *(_BYTE *)(v1 + 48) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 52);
  LOBYTE(v3) = *(_BYTE *)(a1 + 56);
  swift_beginAccess();
  *(_DWORD *)(v1 + 52) = v5;
  *(_BYTE *)(v1 + 56) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 60);
  LOBYTE(v3) = *(_BYTE *)(a1 + 64);
  swift_beginAccess();
  *(_DWORD *)(v1 + 60) = v5;
  *(_BYTE *)(v1 + 64) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 68);
  LOBYTE(v3) = *(_BYTE *)(a1 + 72);
  swift_beginAccess();
  *(_DWORD *)(v1 + 68) = v5;
  *(_BYTE *)(v1 + 72) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 76);
  LOBYTE(v3) = *(_BYTE *)(a1 + 80);
  swift_beginAccess();
  *(_DWORD *)(v1 + 76) = v5;
  *(_BYTE *)(v1 + 80) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  LOBYTE(v3) = *(_BYTE *)(a1 + 88);
  swift_beginAccess();
  *(_DWORD *)(v1 + 84) = v5;
  *(_BYTE *)(v1 + 88) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 92);
  LOBYTE(v3) = *(_BYTE *)(a1 + 96);
  swift_beginAccess();
  *(_DWORD *)(v1 + 92) = v5;
  *(_BYTE *)(v1 + 96) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 100);
  LOBYTE(v3) = *(_BYTE *)(a1 + 104);
  swift_beginAccess();
  *(_DWORD *)(v1 + 100) = v5;
  *(_BYTE *)(v1 + 104) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 108);
  LOBYTE(v3) = *(_BYTE *)(a1 + 112);
  swift_beginAccess();
  *(_DWORD *)(v1 + 108) = v5;
  *(_BYTE *)(v1 + 112) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 116);
  LOBYTE(v3) = *(_BYTE *)(a1 + 120);
  swift_beginAccess();
  *(_DWORD *)(v1 + 116) = v5;
  *(_BYTE *)(v1 + 120) = v3;
  swift_beginAccess();
  LODWORD(v5) = *(_DWORD *)(a1 + 124);
  LOBYTE(v3) = *(_BYTE *)(a1 + 128);
  swift_beginAccess();
  *(_DWORD *)(v1 + 124) = v5;
  *(_BYTE *)(v1 + 128) = v3;
  swift_beginAccess();
  LOBYTE(v5) = *(_BYTE *)(a1 + 129);
  swift_beginAccess();
  *(_BYTE *)(v1 + 129) = v5;
  swift_beginAccess();
  LOBYTE(v5) = *(_BYTE *)(a1 + 130);
  swift_beginAccess();
  *(_BYTE *)(v1 + 130) = v5;
  swift_beginAccess();
  LOBYTE(v5) = *(_BYTE *)(a1 + 131);
  swift_beginAccess();
  *(_BYTE *)(v1 + 131) = v5;
  swift_beginAccess();
  LOBYTE(a1) = *(_BYTE *)(a1 + 132);
  swift_beginAccess();
  *(_BYTE *)(v1 + 132) = a1;
  return v1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  char v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  char v29;
  _DWORD *v30;
  int v31;
  char v32;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v37 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_24;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  v12 = v11;
  v13 = v11[6];
  v14 = *((unsigned __int8 *)a1 + v13);
  v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 4)
  {
    if (v15 != 4)
      goto LABEL_24;
  }
  else if (v15 == 4 || v14 != v15)
  {
    goto LABEL_24;
  }
  v17 = v11[7];
  v18 = (_DWORD *)((char *)a1 + v17);
  v19 = *((_BYTE *)a1 + v17 + 4);
  v20 = (_DWORD *)((char *)a2 + v17);
  v21 = *((unsigned __int8 *)a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[8];
  v23 = (_DWORD *)((char *)a1 + v22);
  v24 = *((_BYTE *)a1 + v22 + 4);
  v25 = (_DWORD *)((char *)a2 + v22);
  v26 = *((unsigned __int8 *)a2 + v22 + 4);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_24;
LABEL_22:
    v27 = v11[9];
    v28 = (_DWORD *)((char *)a1 + v27);
    v29 = *((_BYTE *)a1 + v27 + 4);
    v30 = (_DWORD *)((char *)a2 + v27);
    v31 = *((unsigned __int8 *)a2 + v27 + 4);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_24;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_24;
    }
    v34 = (char *)a1 + v11[5];
    v35 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v35(v10, v34, v4);
    v35(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    v36(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_22;
LABEL_24:
  v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  _BYTE *v42;
  uint64_t *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  _BYTE *v50;
  char v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  char v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_BYTE *, char *, uint64_t);
  _BYTE *v76;
  _BYTE *v77;
  void (*v78)(_BYTE *, uint64_t);
  _BYTE v79[4];
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t *v89;
  uint64_t *v90;
  _BYTE *v91;

  v4 = type metadata accessor for UnknownStorage();
  v83 = *(_QWORD *)(v4 - 8);
  v84 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v82 = &v79[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v81 = &v79[-v7];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v86 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v12 = MEMORY[0x24BDAC7A8](v11);
  v88 = &v79[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v15 = &v79[-v14];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v85 = &v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v91 = &v79[-v20];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v87 = &v79[-v22];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = &v79[-v24];
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = &v79[-v27];
  MEMORY[0x24BDAC7A8](v26);
  v30 = &v79[-v29];
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  v32 = *(int *)(v31 + 28);
  v89 = a1;
  v33 = (uint64_t)a1 + v32;
  v34 = (int *)v31;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v35 = v34[7];
  v90 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v35, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v36 = (uint64_t)&v15[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v37((uint64_t)v15, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v36, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v38 = (uint64_t)v15;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v36, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v39 = v36;
  v40 = v86;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, (uint64_t)v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v80 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v25, (uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v80 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v89;
  v42 = v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v89 + v34[8], (uint64_t)v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v43 = v90;
  v44 = v91;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v90 + v34[8], (uint64_t)v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v45 = v88;
  v46 = (uint64_t)&v88[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, (uint64_t)v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37((uint64_t)v45, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v37(v46, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  v47 = v85;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, (uint64_t)v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v37(v46, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v38 = (uint64_t)v45;
    goto LABEL_14;
  }
  v50 = v86;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, (uint64_t)v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v51 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v47, (uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v50, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v51 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v52 = v34[9];
  v53 = (_DWORD *)((char *)v41 + v52);
  v54 = *((_BYTE *)v41 + v52 + 4);
  v55 = (_DWORD *)((char *)v43 + v52);
  v56 = *((unsigned __int8 *)v43 + v52 + 4);
  if ((v54 & 1) != 0)
  {
    if (!v56)
      goto LABEL_15;
  }
  else
  {
    if (*v53 != *v55)
      LOBYTE(v56) = 1;
    if ((v56 & 1) != 0)
      goto LABEL_15;
  }
  v57 = v34;
  v58 = v34[10];
  v59 = *((unsigned __int8 *)v41 + v58);
  v60 = *((unsigned __int8 *)v43 + v58);
  if (v59 == 5)
  {
    if (v60 != 5)
      goto LABEL_15;
  }
  else
  {
    v48 = 0;
    if (v60 == 5 || v59 != v60)
      return v48 & 1;
  }
  v61 = v57[11];
  v62 = (_DWORD *)((char *)v41 + v61);
  v63 = *((_BYTE *)v41 + v61 + 4);
  v64 = (_DWORD *)((char *)v43 + v61);
  v65 = *((unsigned __int8 *)v43 + v61 + 4);
  if ((v63 & 1) != 0)
  {
    if (!v65)
      goto LABEL_15;
  }
  else
  {
    if (*v62 != *v64)
      LOBYTE(v65) = 1;
    if ((v65 & 1) != 0)
      goto LABEL_15;
  }
  if (!specialized static Array<A>.== infix(_:_:)(*v41, *v43)
    || !specialized static Array<A>.== infix(_:_:)(v41[1], v43[1]))
  {
    goto LABEL_15;
  }
  v66 = v57[12];
  v67 = *((unsigned __int8 *)v41 + v66);
  v68 = *((unsigned __int8 *)v43 + v66);
  if (v67 != 2)
  {
    if (v68 != 2 && ((((v68 & 1) == 0) ^ v67) & 1) != 0)
      goto LABEL_42;
LABEL_15:
    v48 = 0;
    return v48 & 1;
  }
  if (v68 != 2)
    goto LABEL_15;
LABEL_42:
  v69 = v57[13];
  v70 = *((unsigned __int8 *)v41 + v69);
  v71 = *((unsigned __int8 *)v43 + v69);
  if (v70 == 2)
  {
    if (v71 == 2)
    {
LABEL_47:
      v72 = (char *)v41 + v57[6];
      v74 = v83;
      v73 = v84;
      v75 = *(void (**)(_BYTE *, char *, uint64_t))(v83 + 16);
      v76 = v81;
      v75(v81, v72, v84);
      v77 = v82;
      v75(v82, (char *)v43 + v57[6], v73);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      v78 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
      v78(v77, v73);
      v78(v76, v73);
      return v48 & 1;
    }
    goto LABEL_15;
  }
  v48 = 0;
  if (v71 != 2 && ((v71 ^ v70) & 1) == 0)
    goto LABEL_47;
  return v48 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_12;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_12;
  }
  v15 = *(int *)(v11 + 24);
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
    {
LABEL_12:
      v19 = 0;
      return v19 & 1;
    }
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_12;
  }
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  double *v38;
  char v39;
  double *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v52 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v52 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v52 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  v24 = *(int *)(v23 + 20);
  v58 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v59 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_21:
    v36 = 0;
    return v36 & 1;
  }
  v30 = v57;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0)
    goto LABEL_21;
LABEL_8:
  v32 = v26[6];
  v33 = v59;
  v34 = *(unsigned __int8 *)(v58 + v32);
  v35 = *(unsigned __int8 *)(v59 + v32);
  if (v34 == 4)
  {
    if (v35 != 4)
      goto LABEL_21;
  }
  else
  {
    v36 = 0;
    if (v35 == 4 || v34 != v35)
      return v36 & 1;
  }
  v37 = v26[7];
  v38 = (double *)(v58 + v37);
  v39 = *(_BYTE *)(v58 + v37 + 8);
  v40 = (double *)(v59 + v37);
  v41 = *(unsigned __int8 *)(v59 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_21;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_21;
  }
  v42 = v26[8];
  v43 = *(unsigned __int8 *)(v58 + v42);
  v44 = *(unsigned __int8 *)(v59 + v42);
  if (v43 == 4)
  {
    if (v44 != 4)
      goto LABEL_21;
LABEL_25:
    v47 = v55;
    v46 = v56;
    v48 = *(void (**)(char *))(v55 + 16);
    v49 = v53;
    v48(v53);
    v50 = v54;
    ((void (*)(char *, uint64_t, uint64_t))v48)(v54, v33, v46);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v51 = *(void (**)(char *, uint64_t))(v47 + 8);
    v51(v50, v46);
    v51(v49, v46);
    return v36 & 1;
  }
  v36 = 0;
  if (v44 != 4 && v43 == v44)
    goto LABEL_25;
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelBridgeNotification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, CLP_LogEntry_PrivateData_TunnelBridgeAssistance?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  v53 = specialized static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.== infix(_:_:)(v51, v52);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_RhythmicStreamingControl.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  v12 = *(unsigned __int8 *)(a1 + v11);
  v13 = *(unsigned __int8 *)(a2 + v11);
  if (v12 == 2)
  {
    if (v13 != 2)
    {
LABEL_7:
      v15 = 0;
      return v15 & 1;
    }
  }
  else if (v13 == 2 || ((((v13 & 1) == 0) ^ v12) & 1) == 0)
  {
    goto LABEL_7;
  }
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1, v4);
  v14(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v35;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v35 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3)
      goto LABEL_34;
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_34;
  }
  v16 = v11[6];
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
      goto LABEL_34;
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_34;
  }
  v19 = v11[7];
  v20 = *(unsigned __int8 *)(a1 + v19);
  v21 = *(unsigned __int8 *)(a2 + v19);
  if (v20 == 5)
  {
    if (v21 != 5)
      goto LABEL_34;
  }
  else if (v21 == 5 || v20 != v21)
  {
    goto LABEL_34;
  }
  v23 = v11[8];
  v24 = (_DWORD *)(a1 + v23);
  v25 = *(_BYTE *)(a1 + v23 + 4);
  v26 = (_DWORD *)(a2 + v23);
  v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_34;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_34;
  }
  v28 = v11[9];
  v29 = *(unsigned __int8 *)(a1 + v28);
  v30 = *(unsigned __int8 *)(a2 + v28);
  if (v29 == 2)
  {
    if (v30 == 2)
      goto LABEL_33;
LABEL_34:
    v32 = 0;
    return v32 & 1;
  }
  if (v30 == 2 || ((((v30 & 1) == 0) ^ v29) & 1) == 0)
    goto LABEL_34;
LABEL_33:
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, a1, v4);
  v31(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  v33(v8, v4);
  v33(v10, v4);
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelBridgeAssistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for UnknownStorage();
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v70 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v69 = (char *)&v68 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v68 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v68 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v24 = *(int *)(v23 + 20);
  v74 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v75 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v73;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  v34 = v26[6];
  v35 = v75;
  v36 = (double *)(v74 + v34);
  v37 = *(_BYTE *)(v74 + v34 + 8);
  v38 = (double *)(v75 + v34);
  v39 = *(unsigned __int8 *)(v75 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (double *)(v74 + v40);
  v42 = *(_BYTE *)(v74 + v40 + 8);
  v43 = (double *)(v75 + v40);
  v44 = *(unsigned __int8 *)(v75 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_7;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_7;
  }
  v45 = v26[8];
  v46 = (double *)(v74 + v45);
  v47 = *(_BYTE *)(v74 + v45 + 8);
  v48 = (double *)(v75 + v45);
  v49 = *(unsigned __int8 *)(v75 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_7;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_7;
  }
  v50 = v26[9];
  v51 = *(unsigned __int8 *)(v74 + v50);
  v52 = *(unsigned __int8 *)(v75 + v50);
  if (v51 == 2)
  {
    if (v52 != 2)
      goto LABEL_7;
  }
  else if (v52 == 2 || ((((v52 & 1) == 0) ^ v51) & 1) == 0)
  {
    goto LABEL_7;
  }
  v53 = v26[10];
  v54 = *(unsigned __int8 *)(v74 + v53);
  v55 = *(unsigned __int8 *)(v75 + v53);
  if (v54 == 2)
  {
    if (v55 != 2)
      goto LABEL_7;
  }
  else if (v55 == 2 || ((((v55 & 1) == 0) ^ v54) & 1) == 0)
  {
    goto LABEL_7;
  }
  v56 = v26[11];
  v57 = *(unsigned __int8 *)(v74 + v56);
  v58 = *(unsigned __int8 *)(v75 + v56);
  if (v57 == 2)
  {
    if (v58 != 2)
      goto LABEL_7;
  }
  else if (v58 == 2 || ((((v58 & 1) == 0) ^ v57) & 1) == 0)
  {
    goto LABEL_7;
  }
  v59 = v26[12];
  v60 = *(unsigned __int8 *)(v74 + v59);
  v61 = *(unsigned __int8 *)(v75 + v59);
  if (v60 == 2)
  {
    if (v61 == 2)
    {
LABEL_48:
      v63 = v71;
      v62 = v72;
      v64 = *(void (**)(char *))(v71 + 16);
      v65 = v69;
      v64(v69);
      v66 = v70;
      ((void (*)(char *, uint64_t, uint64_t))v64)(v70, v35, v62);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v67 = *(void (**)(char *, uint64_t))(v63 + 8);
      v67(v66, v62);
      v67(v65, v62);
      return v30 & 1;
    }
  }
  else if (v61 != 2 && ((((v61 & 1) == 0) ^ v60) & 1) != 0)
  {
    goto LABEL_48;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_InertialOdometrySample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  char v16;
  double v17;
  char v18;
  char v19;
  float v20;
  char v21;
  char v22;
  float v23;
  char v24;
  char v25;
  float v26;
  char v27;
  char v28;
  float v29;
  char v30;
  char v31;
  float v32;
  char v33;
  char v34;
  float v35;
  char v36;
  char v37;
  float v38;
  char v39;
  char v40;
  float v41;
  char v42;
  char v43;
  float v44;
  char v45;
  char v46;
  float v47;
  char v48;
  char v49;
  float v50;
  char v51;
  char v52;
  int v53;
  int v54;
  char v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  void (*v63)(char *, uint64_t, uint64_t);
  void (*v64)(char *, uint64_t);
  _QWORD v66[85];

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v66 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13)
    goto LABEL_100;
  v66[0] = a2;
  swift_beginAccess();
  v14 = *(double *)(v12 + 16);
  v15 = *(_BYTE *)(v12 + 24);
  swift_beginAccess();
  v16 = *(_BYTE *)(v13 + 24);
  if ((v15 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 24))
      goto LABEL_101;
  }
  else
  {
    if (v14 != *(double *)(v13 + 16))
      v16 = 1;
    if ((v16 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v17 = *(double *)(v12 + 32);
  v18 = *(_BYTE *)(v12 + 40);
  swift_beginAccess();
  v19 = *(_BYTE *)(v13 + 40);
  if ((v18 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 40))
      goto LABEL_101;
  }
  else
  {
    if (v17 != *(double *)(v13 + 32))
      v19 = 1;
    if ((v19 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v20 = *(float *)(v12 + 44);
  v21 = *(_BYTE *)(v12 + 48);
  swift_beginAccess();
  v22 = *(_BYTE *)(v13 + 48);
  if ((v21 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 48))
      goto LABEL_101;
  }
  else
  {
    if (v20 != *(float *)(v13 + 44))
      v22 = 1;
    if ((v22 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v23 = *(float *)(v12 + 52);
  v24 = *(_BYTE *)(v12 + 56);
  swift_beginAccess();
  v25 = *(_BYTE *)(v13 + 56);
  if ((v24 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 56))
      goto LABEL_101;
  }
  else
  {
    if (v23 != *(float *)(v13 + 52))
      v25 = 1;
    if ((v25 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v26 = *(float *)(v12 + 60);
  v27 = *(_BYTE *)(v12 + 64);
  swift_beginAccess();
  v28 = *(_BYTE *)(v13 + 64);
  if ((v27 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 64))
      goto LABEL_101;
  }
  else
  {
    if (v26 != *(float *)(v13 + 60))
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v29 = *(float *)(v12 + 68);
  v30 = *(_BYTE *)(v12 + 72);
  swift_beginAccess();
  v31 = *(_BYTE *)(v13 + 72);
  if ((v30 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 72))
      goto LABEL_101;
  }
  else
  {
    if (v29 != *(float *)(v13 + 68))
      v31 = 1;
    if ((v31 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v32 = *(float *)(v12 + 76);
  v33 = *(_BYTE *)(v12 + 80);
  swift_beginAccess();
  v34 = *(_BYTE *)(v13 + 80);
  if ((v33 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 80))
      goto LABEL_101;
  }
  else
  {
    if (v32 != *(float *)(v13 + 76))
      v34 = 1;
    if ((v34 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v35 = *(float *)(v12 + 84);
  v36 = *(_BYTE *)(v12 + 88);
  swift_beginAccess();
  v37 = *(_BYTE *)(v13 + 88);
  if ((v36 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 88))
      goto LABEL_101;
  }
  else
  {
    if (v35 != *(float *)(v13 + 84))
      v37 = 1;
    if ((v37 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v38 = *(float *)(v12 + 92);
  v39 = *(_BYTE *)(v12 + 96);
  swift_beginAccess();
  v40 = *(_BYTE *)(v13 + 96);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 96))
      goto LABEL_101;
  }
  else
  {
    if (v38 != *(float *)(v13 + 92))
      v40 = 1;
    if ((v40 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v41 = *(float *)(v12 + 100);
  v42 = *(_BYTE *)(v12 + 104);
  swift_beginAccess();
  v43 = *(_BYTE *)(v13 + 104);
  if ((v42 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 104))
      goto LABEL_101;
  }
  else
  {
    if (v41 != *(float *)(v13 + 100))
      v43 = 1;
    if ((v43 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v44 = *(float *)(v12 + 108);
  v45 = *(_BYTE *)(v12 + 112);
  swift_beginAccess();
  v46 = *(_BYTE *)(v13 + 112);
  if ((v45 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 112))
      goto LABEL_101;
  }
  else
  {
    if (v44 != *(float *)(v13 + 108))
      v46 = 1;
    if ((v46 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v47 = *(float *)(v12 + 116);
  v48 = *(_BYTE *)(v12 + 120);
  swift_beginAccess();
  v49 = *(_BYTE *)(v13 + 120);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 120))
      goto LABEL_101;
  }
  else
  {
    if (v47 != *(float *)(v13 + 116))
      v49 = 1;
    if ((v49 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v50 = *(float *)(v12 + 124);
  v51 = *(_BYTE *)(v12 + 128);
  swift_beginAccess();
  v52 = *(_BYTE *)(v13 + 128);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v13 + 128))
      goto LABEL_101;
  }
  else
  {
    if (v50 != *(float *)(v13 + 124))
      v52 = 1;
    if ((v52 & 1) != 0)
      goto LABEL_101;
  }
  swift_beginAccess();
  v53 = *(unsigned __int8 *)(v12 + 129);
  swift_beginAccess();
  v54 = *(unsigned __int8 *)(v13 + 129);
  if (v53 == 3)
  {
    if (v54 != 3)
      goto LABEL_101;
    goto LABEL_85;
  }
  v55 = 0;
  if (v54 != 3 && v53 == v54)
  {
LABEL_85:
    swift_beginAccess();
    v56 = *(unsigned __int8 *)(v12 + 130);
    swift_beginAccess();
    v57 = *(unsigned __int8 *)(v13 + 130);
    if (v56 == 2)
    {
      if (v57 != 2)
        goto LABEL_101;
    }
    else if (v57 == 2 || ((v56 ^ ((v57 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess();
    v58 = *(unsigned __int8 *)(v12 + 131);
    swift_beginAccess();
    v59 = *(unsigned __int8 *)(v13 + 131);
    if (v58 == 2)
    {
      if (v59 != 2)
        goto LABEL_101;
    }
    else if (v59 == 2 || ((v58 ^ ((v59 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_101;
    }
    swift_beginAccess();
    v60 = *(unsigned __int8 *)(v12 + 132);
    swift_beginAccess();
    v61 = *(unsigned __int8 *)(v13 + 132);
    if (v60 == 2)
    {
      a2 = v66[0];
      if (v61 == 2)
      {
LABEL_100:
        v63 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v63(v10, a1, v4);
        v63(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v55 = dispatch thunk of static Equatable.== infix(_:_:)();
        v64 = *(void (**)(char *, uint64_t))(v5 + 8);
        v64(v8, v4);
        v64(v10, v4);
        return v55 & 1;
      }
    }
    else if (v61 != 2)
    {
      v62 = v60 ^ ((v61 & 1) == 0);
      a2 = v66[0];
      if ((v62 & 1) != 0)
        goto LABEL_100;
    }
LABEL_101:
    v55 = 0;
  }
  return v55 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FalseStepDetectorState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v40 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_42;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_42;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_42;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_42;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_42;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_42;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_42;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_42;
  }
  v24 = v11[9];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_42;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_42;
  }
  v27 = v11[10];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      goto LABEL_42;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_42;
  }
  v30 = v11[11];
  v31 = *(unsigned __int8 *)(a1 + v30);
  v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2)
      goto LABEL_42;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_42;
  }
  v33 = v11[12];
  v34 = *(unsigned __int8 *)(a1 + v33);
  v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 == 2)
      goto LABEL_41;
LABEL_42:
    v37 = 0;
    return v37 & 1;
  }
  if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
    goto LABEL_42;
LABEL_41:
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v36(v10, a1, v4);
  v36(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v5 + 8);
  v38(v8, v4);
  v38(v10, v4);
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalEnvironmentInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 8)
  {
    if (v14 != 8)
      goto LABEL_16;
  }
  else if (v14 == 8 || v13 != v14)
  {
    goto LABEL_16;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18)
      goto LABEL_11;
LABEL_16:
    v20 = 0;
    return v20 & 1;
  }
  if (v18 != 4)
    goto LABEL_16;
LABEL_11:
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  int v22;
  char v23;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.== infix(_:_:)) & 1) == 0)goto LABEL_10;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_10;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  v18 = v11[7];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (uint64_t *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) == 0)
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_10;
LABEL_15:
    v25 = (char *)a1 + v11[5];
    v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v26(v10, v25, v4);
    v26(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v27(v8, v4);
    v27(v10, v4);
    return v23 & 1;
  }
  if (v22)
    goto LABEL_15;
LABEL_10:
  v23 = 0;
  return v23 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DigitalElevationModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  float *v46;
  char v47;
  float *v48;
  int v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  char v57;
  float *v58;
  int v59;
  uint64_t v60;
  _DWORD *v61;
  char v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *);
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (char *)&v71 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v76 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v71 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v71 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  v24 = *(int *)(v23 + 20);
  v77 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v78 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v76;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v76, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  v34 = v26[6];
  v35 = v78;
  v36 = (double *)(v77 + v34);
  v37 = *(_BYTE *)(v77 + v34 + 8);
  v38 = (double *)(v78 + v34);
  v39 = *(unsigned __int8 *)(v78 + v34 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (double *)(v77 + v40);
  v42 = *(_BYTE *)(v77 + v40 + 8);
  v43 = (double *)(v78 + v40);
  v44 = *(unsigned __int8 *)(v78 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_7;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_7;
  }
  v45 = v26[8];
  v46 = (float *)(v77 + v45);
  v47 = *(_BYTE *)(v77 + v45 + 4);
  v48 = (float *)(v78 + v45);
  v49 = *(unsigned __int8 *)(v78 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_7;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_7;
  }
  v50 = v26[9];
  v51 = (float *)(v77 + v50);
  v52 = *(_BYTE *)(v77 + v50 + 4);
  v53 = (float *)(v78 + v50);
  v54 = *(unsigned __int8 *)(v78 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_7;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_7;
  }
  v55 = v26[10];
  v56 = (float *)(v77 + v55);
  v57 = *(_BYTE *)(v77 + v55 + 4);
  v58 = (float *)(v78 + v55);
  v59 = *(unsigned __int8 *)(v78 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_7;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_7;
  }
  v60 = v26[11];
  v61 = (_DWORD *)(v77 + v60);
  v62 = *(_BYTE *)(v77 + v60 + 4);
  v63 = (_DWORD *)(v78 + v60);
  v64 = *(unsigned __int8 *)(v78 + v60 + 4);
  if ((v62 & 1) != 0)
  {
    if (v64)
    {
LABEL_46:
      v66 = v74;
      v65 = v75;
      v67 = *(void (**)(char *))(v74 + 16);
      v68 = v72;
      v67(v72);
      v69 = v73;
      ((void (*)(char *, uint64_t, uint64_t))v67)(v73, v35, v65);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70 = *(void (**)(char *, uint64_t))(v66 + 8);
      v70(v69, v65);
      v70(v68, v65);
      return v30 & 1;
    }
  }
  else
  {
    if (*v61 != *v63)
      LOBYTE(v64) = 1;
    if ((v64 & 1) == 0)
      goto LABEL_46;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapMatchingRouteHint.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;

  v78 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v69 = *(_QWORD *)(v3 - 8);
  v70 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v68 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v67 = (char *)&v67 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v72 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v11 = MEMORY[0x24BDAC7A8](v10);
  v75 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v67 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v71 = (uint64_t)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v74 = (uint64_t)&v67 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v77 = (uint64_t)&v67 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v67 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v67 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v67 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  v31 = *(int *)(v30 + 24);
  v76 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a1 + v31, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = (int *)v30;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v78 + *(int *)(v30 + 24), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v73 = v10;
  v33 = *(int *)(v10 + 48);
  v34 = v7;
  v35 = (uint64_t)&v14[v33];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v36((uint64_t)v14, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v36(v35, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v37 = (uint64_t)v14;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v36(v35, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v38 = v35;
  v39 = v72;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v38, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v40 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v40 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v32;
  v42 = v76;
  v43 = v77;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76 + v32[7], v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v44 = v78;
  v45 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v78 + v32[7], v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v46 = v75;
  v47 = v75 + *(int *)(v73 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v36(v46, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v36(v47, 1, v34) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  v48 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v36(v47, 1, v34) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v37 = v46;
    goto LABEL_14;
  }
  v51 = v72;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v52 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v48, v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v52 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v53 = v41[8];
  v54 = *((unsigned __int8 *)v42 + v53);
  v55 = *((unsigned __int8 *)v44 + v53);
  if (v54 == 7)
  {
    if (v55 != 7)
      goto LABEL_15;
  }
  else
  {
    v49 = 0;
    if (v55 == 7 || v54 != v55)
      return v49 & 1;
  }
  v56 = v41[9];
  v57 = *((unsigned __int8 *)v42 + v56);
  v58 = *((unsigned __int8 *)v44 + v56);
  if (v57 == 7)
  {
    if (v58 == 7)
      goto LABEL_28;
LABEL_15:
    v49 = 0;
    return v49 & 1;
  }
  v49 = 0;
  if (v58 != 7 && v57 == v58)
  {
LABEL_28:
    if ((specialized static Array<A>.== infix(_:_:)(*v42, *v44, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_MapsRouteHintData.== infix(_:_:)) & 1) != 0)
    {
      v59 = (char *)v42 + v41[5];
      v61 = v69;
      v60 = v70;
      v62 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v63 = v67;
      v62(v67, v59, v70);
      v64 = (char *)v44 + v41[5];
      v65 = v68;
      v62(v68, v64, v60);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v66 = *(void (**)(char *, uint64_t))(v61 + 8);
      v66(v65, v60);
      v66(v63, v60);
      return v49 & 1;
    }
    goto LABEL_15;
  }
  return v49 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionStateObserver.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutUpdate?, CLP_LogEntry_PrivateData_WorkoutUpdate?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutUpdate?, CLP_LogEntry_PrivateData_WorkoutUpdate?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  v53 = specialized static CLP_LogEntry_PrivateData_WorkoutUpdate.== infix(_:_:)(v51, v52);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ClientSatelliteInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  float *v32;
  char v33;
  float *v34;
  int v35;
  uint64_t v36;
  float *v37;
  char v38;
  float *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v51 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 7)
  {
    if (v14 != 7)
      goto LABEL_50;
  }
  else if (v14 == 7 || v13 != v14)
  {
    goto LABEL_50;
  }
  v16 = v11[6];
  v17 = (_DWORD *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 4);
  v19 = (_DWORD *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_50;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_50;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_50;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_50;
  }
  v26 = v11[8];
  v27 = (float *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (float *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_50;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_50;
  }
  v31 = v11[9];
  v32 = (float *)(a1 + v31);
  v33 = *(_BYTE *)(a1 + v31 + 4);
  v34 = (float *)(a2 + v31);
  v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_50;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_50;
  }
  v36 = v11[10];
  v37 = (float *)(a1 + v36);
  v38 = *(_BYTE *)(a1 + v36 + 4);
  v39 = (float *)(a2 + v36);
  v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_50;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_50;
  }
  v41 = v11[11];
  v42 = *(unsigned __int8 *)(a1 + v41);
  v43 = *(unsigned __int8 *)(a2 + v41);
  if (v42 == 2)
  {
    if (v43 != 2)
      goto LABEL_50;
  }
  else if (v43 == 2 || ((((v43 & 1) == 0) ^ v42) & 1) == 0)
  {
    goto LABEL_50;
  }
  v44 = v11[12];
  v45 = *(unsigned __int8 *)(a1 + v44);
  v46 = *(unsigned __int8 *)(a2 + v44);
  if (v45 == 2)
  {
    if (v46 == 2)
      goto LABEL_49;
LABEL_50:
    v48 = 0;
    return v48 & 1;
  }
  if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    goto LABEL_50;
LABEL_49:
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v47(v10, a1, v4);
  v47(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  v49 = *(void (**)(char *, uint64_t))(v5 + 8);
  v49(v8, v4);
  v49(v10, v4);
  return v48 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_XtraFileAvailable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v12 = *(int *)(v11 + 20);
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_16;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_16;
  }
  v17 = *(int *)(v11 + 24);
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_QWORD *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  if (!v19)
  {
    if (!v21)
    {
LABEL_17:
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v24(v10, a1, v4);
      v24(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      v25 = *(void (**)(char *, uint64_t))(v5 + 8);
      v25(v8, v4);
      v25(v10, v4);
      return v23 & 1;
    }
LABEL_16:
    v23 = 0;
    return v23 & 1;
  }
  if (!v21)
    goto LABEL_16;
  if (*v18 == *v20 && v19 == v21)
    goto LABEL_17;
  v23 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_17;
  return v23 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalEnvironment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v4 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v53 = (char *)&v52 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v52 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v52 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  v24 = *(int *)(v23 + 20);
  v57 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v58 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_10;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  v30 = (uint64_t)v59;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v33 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v33 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v34 = v26[6];
  v35 = v58;
  v36 = *(unsigned __int8 *)(v57 + v34);
  v37 = *(unsigned __int8 *)(v58 + v34);
  if (v36 == 8)
  {
    if (v37 != 8)
      goto LABEL_7;
  }
  else
  {
    v31 = 0;
    if (v37 == 8 || v36 != v37)
      return v31 & 1;
  }
  v38 = v26[7];
  v39 = *(unsigned __int8 *)(v57 + v38);
  v40 = *(unsigned __int8 *)(v58 + v38);
  if (v39 == 8)
  {
    if (v40 == 8)
      goto LABEL_20;
LABEL_7:
    v31 = 0;
    return v31 & 1;
  }
  v31 = 0;
  if (v40 != 8 && v39 == v40)
  {
LABEL_20:
    v41 = v26[8];
    v42 = (_DWORD *)(v57 + v41);
    v43 = *(_BYTE *)(v57 + v41 + 4);
    v44 = (_DWORD *)(v58 + v41);
    v45 = *(unsigned __int8 *)(v58 + v41 + 4);
    if ((v43 & 1) != 0)
    {
      if (v45)
      {
LABEL_26:
        v47 = v55;
        v46 = v56;
        v48 = *(void (**)(char *))(v55 + 16);
        v49 = v53;
        v48(v53);
        v50 = v54;
        ((void (*)(char *, uint64_t, uint64_t))v48)(v54, v35, v46);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v51 = *(void (**)(char *, uint64_t))(v47 + 8);
        v51(v50, v46);
        v51(v49, v46);
        return v31 & 1;
      }
    }
    else
    {
      if (*v42 != *v44)
        LOBYTE(v45) = 1;
      if ((v45 & 1) == 0)
        goto LABEL_26;
    }
    goto LABEL_7;
  }
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiAssociationState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for UnknownStorage();
  v47 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)&v42 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAccessPoint?, CLP_LogEntry_PrivateData_WifiAccessPoint?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v48 = (uint64_t)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v42 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = *(unsigned __int8 *)(a1 + v24);
  v49 = a2;
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_12;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_12;
  }
  v43 = v4;
  v27 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    v30 = v29(v28, 1, v8);
    v31 = v43;
    if (v30 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
LABEL_15:
      v37 = v47;
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
      v39 = v45;
      v38(v45, v27, v31);
      v40 = v46;
      v38(v46, v49, v31);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v40, v31);
      v41(v39, v31);
      return v33 & 1;
    }
    goto LABEL_11;
  }
  v32 = v48;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
LABEL_11:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WifiAccessPoint?, CLP_LogEntry_PrivateData_WifiAccessPoint?));
    goto LABEL_12;
  }
  v35 = v44;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v44, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  v36 = specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)(v32, v35);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v31 = v43;
  if ((v36 & 1) != 0)
    goto LABEL_15;
LABEL_12:
  v33 = 0;
  return v33 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TechnologyStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 14)
  {
    if (v14 != 14)
      goto LABEL_15;
  }
  else if (v14 == 14 || v13 != v14)
  {
    goto LABEL_15;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
    {
LABEL_15:
      v20 = 0;
      return v20 & 1;
    }
  }
  else if (v18 == 2 || ((((v18 & 1) == 0) ^ v17) & 1) == 0)
  {
    goto LABEL_15;
  }
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BatchedLocations.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)) & 1) != 0&& (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1], type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)) & 1) != 0)
  {
    v11 = type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
    v12 = (char *)a1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 24), v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiAccessPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  float *v40;
  char v41;
  float *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  char v55;
  _DWORD *v56;
  int v57;
  void (*v59)(char *, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v61 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = (int *)v11;
  v13 = *(int *)(v11 + 20);
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_59;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_59;
  }
  v18 = *(int *)(v11 + 24);
  v19 = (_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if (!v20)
  {
    if (v22)
      goto LABEL_59;
LABEL_16:
    v25 = v12[7];
    v26 = (_DWORD *)(a1 + v25);
    v27 = *(_BYTE *)(a1 + v25 + 4);
    v28 = (_DWORD *)(a2 + v25);
    v29 = *(unsigned __int8 *)(a2 + v25 + 4);
    if ((v27 & 1) != 0)
    {
      if (!v29)
        goto LABEL_59;
    }
    else
    {
      if (*v26 != *v28)
        LOBYTE(v29) = 1;
      if ((v29 & 1) != 0)
        goto LABEL_59;
    }
    v30 = v12[8];
    v31 = *(unsigned __int8 *)(a1 + v30);
    v32 = *(unsigned __int8 *)(a2 + v30);
    if (v31 == 4)
    {
      if (v32 != 4)
        goto LABEL_59;
    }
    else if (v32 == 4 || v31 != v32)
    {
      goto LABEL_59;
    }
    v34 = v12[9];
    v35 = (_DWORD *)(a1 + v34);
    v36 = *(_BYTE *)(a1 + v34 + 4);
    v37 = (_DWORD *)(a2 + v34);
    v38 = *(unsigned __int8 *)(a2 + v34 + 4);
    if ((v36 & 1) != 0)
    {
      if (!v38)
        goto LABEL_59;
    }
    else
    {
      if (*v35 != *v37)
        LOBYTE(v38) = 1;
      if ((v38 & 1) != 0)
        goto LABEL_59;
    }
    v39 = v12[10];
    v40 = (float *)(a1 + v39);
    v41 = *(_BYTE *)(a1 + v39 + 4);
    v42 = (float *)(a2 + v39);
    v43 = *(unsigned __int8 *)(a2 + v39 + 4);
    if ((v41 & 1) != 0)
    {
      if (!v43)
        goto LABEL_59;
    }
    else
    {
      if (*v40 != *v42)
        LOBYTE(v43) = 1;
      if ((v43 & 1) != 0)
        goto LABEL_59;
    }
    v44 = v12[11];
    v45 = *(unsigned __int8 *)(a1 + v44);
    v46 = *(unsigned __int8 *)(a2 + v44);
    if (v45 == 2)
    {
      if (v46 != 2)
        goto LABEL_59;
    }
    else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
    {
      goto LABEL_59;
    }
    v47 = v12[12];
    v48 = *(unsigned __int8 *)(a1 + v47);
    v49 = *(unsigned __int8 *)(a2 + v47);
    if (v48 == 2)
    {
      if (v49 != 2)
        goto LABEL_59;
    }
    else if (v49 == 2 || ((((v49 & 1) == 0) ^ v48) & 1) == 0)
    {
      goto LABEL_59;
    }
    v50 = v12[13];
    v51 = *(unsigned __int8 *)(a1 + v50);
    v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 != 4)
    {
      v24 = 0;
      if (v52 == 4 || v51 != v52)
        return v24 & 1;
LABEL_57:
      v53 = v12[14];
      v54 = (_DWORD *)(a1 + v53);
      v55 = *(_BYTE *)(a1 + v53 + 4);
      v56 = (_DWORD *)(a2 + v53);
      v57 = *(unsigned __int8 *)(a2 + v53 + 4);
      if ((v55 & 1) != 0)
      {
        if (!v57)
          goto LABEL_59;
      }
      else
      {
        if (*v54 != *v56)
          LOBYTE(v57) = 1;
        if ((v57 & 1) != 0)
          goto LABEL_59;
      }
      v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v59(v10, a1, v4);
      v59(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v60 = *(void (**)(char *, uint64_t))(v5 + 8);
      v60(v8, v4);
      v60(v10, v4);
      return v24 & 1;
    }
    if (v52 == 4)
      goto LABEL_57;
LABEL_59:
    v24 = 0;
    return v24 & 1;
  }
  if (!v22)
    goto LABEL_59;
  if (*v19 == *v21 && v20 == v22)
    goto LABEL_16;
  v24 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_16;
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_TunnelEndPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, CLP_LogEntry_PrivateData_TunnelEndPointAssistance?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  v53 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, closure #1 in static CLP_LogEntry_PrivateData_TunnelEndPointAssistance.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  char v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = type metadata accessor for UnknownStorage();
  v53 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v50 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v50 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v50 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v24 = a1;
  v25 = v23;
  v26 = v23[5];
  v27 = *(char *)(v24 + v26);
  v55 = a2;
  v28 = *(char *)(a2 + v26);
  if (v27 == 72)
  {
    if ((_DWORD)v28 != 72)
      goto LABEL_18;
  }
  else if ((_DWORD)v28 == 72 || qword_235BCBD70[v27] != qword_235BCBD70[v28])
  {
    goto LABEL_18;
  }
  v29 = v23[6];
  v30 = (double *)(v24 + v29);
  v31 = *(_BYTE *)(v24 + v29 + 8);
  v32 = (double *)(v55 + v29);
  v33 = *(unsigned __int8 *)(v55 + v29 + 8);
  if ((v31 & 1) != 0)
  {
    if (!v33)
      goto LABEL_18;
  }
  else
  {
    if (*v30 != *v32)
      LOBYTE(v33) = 1;
    if ((v33 & 1) != 0)
      goto LABEL_18;
  }
  v50 = v4;
  v34 = v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v24 + v23[7], (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55 + v25[7], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v35 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v36((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v36(v35, 1, v8) != 1)
    {
      v39 = v54;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, v54, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v40 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v40 & 1) == 0)
        goto LABEL_18;
      goto LABEL_21;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_17:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_18;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v36(v35, 1, v8) != 1)
    goto LABEL_17;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_21:
  v41 = v25[8];
  v42 = *(char *)(v34 + v41);
  v43 = *(char *)(v55 + v41);
  if (v42 != 72)
  {
    if ((_DWORD)v43 == 72 || qword_235BCBD70[v42] != qword_235BCBD70[v43])
      goto LABEL_18;
LABEL_26:
    v44 = v53;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
    v46 = v50;
    v47 = v51;
    v45(v51, v34, v50);
    v48 = v52;
    v45(v52, v55, v46);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49 = *(void (**)(char *, uint64_t))(v44 + 8);
    v49(v48, v46);
    v49(v47, v46);
    return v37 & 1;
  }
  if ((_DWORD)v43 == 72)
    goto LABEL_26;
LABEL_18:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_OutdoorUpdate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  float *v43;
  char v44;
  float *v45;
  int v46;
  void (*v48)(char *, uint64_t, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v50;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v50 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_47;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_47;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_47;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_47;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 3)
  {
    if (v24 != 3)
      goto LABEL_47;
  }
  else if (v24 == 3 || v23 != v24)
  {
    goto LABEL_47;
  }
  v26 = v11[8];
  v27 = *(unsigned __int8 *)(a1 + v26);
  v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 4)
  {
    if (v28 != 4)
      goto LABEL_47;
  }
  else if (v28 == 4 || v27 != v28)
  {
    goto LABEL_47;
  }
  v30 = v11[9];
  v31 = (double *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 8);
  v33 = (double *)(a2 + v30);
  v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34)
      goto LABEL_47;
  }
  else
  {
    if (*v31 != *v33)
      LOBYTE(v34) = 1;
    if ((v34 & 1) != 0)
      goto LABEL_47;
  }
  v35 = v11[10];
  v36 = *(unsigned __int8 *)(a1 + v35);
  v37 = *(unsigned __int8 *)(a2 + v35);
  if (v36 == 4)
  {
    if (v37 != 4)
      goto LABEL_47;
    goto LABEL_40;
  }
  v38 = 0;
  if (v37 != 4 && v36 == v37)
  {
LABEL_40:
    v39 = v11[11];
    v40 = *(unsigned __int8 *)(a1 + v39);
    v41 = *(unsigned __int8 *)(a2 + v39);
    if (v40 != 2)
    {
      if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
        goto LABEL_47;
LABEL_45:
      v42 = v11[12];
      v43 = (float *)(a1 + v42);
      v44 = *(_BYTE *)(a1 + v42 + 4);
      v45 = (float *)(a2 + v42);
      v46 = *(unsigned __int8 *)(a2 + v42 + 4);
      if ((v44 & 1) != 0)
      {
        if (!v46)
          goto LABEL_47;
      }
      else
      {
        if (*v43 != *v45)
          LOBYTE(v46) = 1;
        if ((v46 & 1) != 0)
          goto LABEL_47;
      }
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v48(v10, a1, v4);
      v48(v8, a2, v4);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v49 = *(void (**)(char *, uint64_t))(v5 + 8);
      v49(v8, v4);
      v49(v10, v4);
      return v38 & 1;
    }
    if (v41 == 2)
      goto LABEL_45;
LABEL_47:
    v38 = 0;
  }
  return v38 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutSettings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v33;
  int v34;
  int v35;
  void (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_37;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_37;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_19:
        v25 = v11[7];
        v26 = *(unsigned __int8 *)(a1 + v25);
        v27 = *(unsigned __int8 *)(a2 + v25);
        if (v26 == 67)
        {
          if (v27 != 67)
            goto LABEL_37;
        }
        else if (v27 == 67 || v26 != v27)
        {
          goto LABEL_37;
        }
        v29 = v11[8];
        v30 = *(unsigned __int8 *)(a1 + v29);
        v31 = *(unsigned __int8 *)(a2 + v29);
        if (v30 == 5)
        {
          if (v31 != 5)
            goto LABEL_37;
        }
        else if (v31 == 5 || v30 != v31)
        {
          goto LABEL_37;
        }
        v33 = v11[9];
        v34 = *(unsigned __int8 *)(a1 + v33);
        v35 = *(unsigned __int8 *)(a2 + v33);
        if (v34 == 3)
        {
          if (v35 != 3)
            goto LABEL_37;
        }
        else
        {
          v18 = 0;
          if (v35 == 3 || v34 != v35)
            return v18 & 1;
        }
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v37(v10, a1, v4);
        v37(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v5 + 8);
        v38(v8, v4);
        v38(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v23)
    {
      goto LABEL_19;
    }
LABEL_37:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WorkoutEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v122 = a2;
  v3 = type metadata accessor for UnknownStorage();
  v102 = *(_QWORD *)(v3 - 8);
  v103 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v101 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v100 = (char *)&v98 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v99 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutSettings?, CLP_LogEntry_PrivateData_WorkoutSettings?));
  MEMORY[0x24BDAC7A8](v105);
  v108 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v104 = (uint64_t)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v110 = (char *)&v98 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v111 = (char *)&v98 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v115 = (uint64_t)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v20 = MEMORY[0x24BDAC7A8](v19);
  v112 = (uint64_t)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v116 = (uint64_t)&v98 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v98 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v109 = (uint64_t)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v118 = (uint64_t)&v98 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v113 = (uint64_t)&v98 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v114 = (uint64_t)&v98 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v120 = (uint64_t)&v98 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v121 = (uint64_t)&v98 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v98 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39);
  v44 = (char *)&v98 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)&v98 - v45;
  v47 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v48 = *(int *)(v47 + 20);
  v119 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v48, (uint64_t)v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v117 = (int *)v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122 + *(int *)(v47 + 20), (uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v49 = v19;
  v50 = (uint64_t)&v25[*(int *)(v19 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v46, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v52 = v16;
  if (v51((uint64_t)v25, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v51(v50, 1, v16) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v54 = (uint64_t)v25;
LABEL_34:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v53);
    goto LABEL_35;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, (uint64_t)v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v51(v50, 1, v16) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v55 = v115;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v50, v115, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v56 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v41, v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v56 & 1) == 0)
    goto LABEL_35;
LABEL_8:
  v57 = v117;
  v58 = v119;
  v59 = v121;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119 + v117[6], v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v60 = v120;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122 + v57[6], v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v61 = v116;
  v62 = v116 + *(int *)(v49 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v51(v61, 1, v52) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v63 = v51(v62, 1, v52);
    v64 = v118;
    if (v63 == 1)
    {
      v98 = v52;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v65 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v66 = v51(v62, 1, v52);
  v64 = v118;
  if (v66 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_13:
    v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v54 = v61;
    goto LABEL_34;
  }
  v98 = v52;
  v67 = v115;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, v115, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v68 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v65, v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v68 & 1) == 0)
    goto LABEL_35;
LABEL_15:
  v69 = v57[7];
  v70 = *(unsigned __int8 *)(v58 + v69);
  v71 = *(unsigned __int8 *)(v122 + v69);
  if (v70 == 19)
  {
    if (v71 != 19)
      goto LABEL_35;
LABEL_20:
    v73 = v58 + v57[8];
    v74 = v113;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122 + v57[8], v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v75 = v112;
    v76 = v112 + *(int *)(v49 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v77 = v98;
    if (v51(v75, 1, v98) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v78 = v51(v76, 1, v77);
      v80 = (uint64_t)v110;
      v79 = (uint64_t)v111;
      if (v78 == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_27:
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119 + v57[9], v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v122 + v57[9], v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        v75 = v108;
        v85 = v108 + *(int *)(v105 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        v86 = v107;
        v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48);
        if (v87(v75, 1, v107) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          if (v87(v85, 1, v86) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
LABEL_38:
            v93 = v102;
            v92 = v103;
            v94 = *(void (**)(char *, uint64_t, uint64_t))(v102 + 16);
            v95 = v100;
            v94(v100, v119, v103);
            v96 = v101;
            v94(v101, v122, v92);
            lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v72 = dispatch thunk of static Equatable.== infix(_:_:)();
            v97 = *(void (**)(char *, uint64_t))(v93 + 8);
            v97(v96, v92);
            v97(v95, v92);
            return v72 & 1;
          }
          goto LABEL_32;
        }
        v88 = v104;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        if (v87(v85, 1, v86) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
LABEL_32:
          v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WorkoutSettings?, CLP_LogEntry_PrivateData_WorkoutSettings?);
          goto LABEL_33;
        }
        v90 = v99;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, v99, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        v91 = specialized static CLP_LogEntry_PrivateData_WorkoutSettings.== infix(_:_:)(v88, v90);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v90, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v88, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
        if ((v91 & 1) != 0)
          goto LABEL_38;
LABEL_35:
        v72 = 0;
        return v72 & 1;
      }
    }
    else
    {
      v81 = v109;
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v82 = v51(v76, 1, v77);
      v80 = (uint64_t)v110;
      v79 = (uint64_t)v111;
      if (v82 != 1)
      {
        v83 = v115;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v76, v115, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        v84 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v81, v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v83, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if ((v84 & 1) == 0)
          goto LABEL_35;
        goto LABEL_27;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v81, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v53 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_33:
    v54 = v75;
    goto LABEL_34;
  }
  v72 = 0;
  if (v71 != 19 && v70 == v71)
    goto LABEL_20;
  return v72 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PlaceInference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v37 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v12 = v11;
  v13 = v11[5];
  v14 = *(unsigned __int8 *)(a1 + v13);
  v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 5)
  {
    if (v15 != 5)
      goto LABEL_35;
  }
  else if (v15 == 5 || v14 != v15)
  {
    goto LABEL_35;
  }
  v17 = v11[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 3)
  {
    if (v19 != 3)
      goto LABEL_35;
  }
  else if (v19 == 3 || v18 != v19)
  {
    goto LABEL_35;
  }
  v21 = v11[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (_QWORD *)(a2 + v21);
  v25 = v24[1];
  if (!v23)
  {
    if (v25)
      goto LABEL_35;
LABEL_26:
    v28 = v12[8];
    v29 = (_QWORD *)(a1 + v28);
    v30 = *(_QWORD *)(a1 + v28 + 8);
    v31 = (_QWORD *)(a2 + v28);
    v32 = v31[1];
    if (v30)
    {
      if (v32)
      {
        if (*v29 != *v31 || v30 != v32)
        {
          v27 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v27 & 1;
        }
LABEL_37:
        v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v35(v10, a1, v4);
        v35(v8, a2, v4);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v36 = *(void (**)(char *, uint64_t))(v5 + 8);
        v36(v8, v4);
        v36(v10, v4);
        return v27 & 1;
      }
    }
    else if (!v32)
    {
      goto LABEL_37;
    }
LABEL_35:
    v27 = 0;
    return v27 & 1;
  }
  if (!v25)
    goto LABEL_35;
  if (*v22 == *v24 && v23 == v25)
    goto LABEL_26;
  v27 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_26;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t *v51;
  uint64_t *v52;

  v50 = a4;
  v52 = a3;
  v6 = type metadata accessor for UnknownStorage();
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v45 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v49 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v45 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v45 - v23;
  v25 = ((uint64_t (*)(_QWORD))v52)(0);
  v26 = *(int *)(v25 + 24);
  v51 = a1;
  v27 = (uint64_t)a1 + v26;
  v28 = v25;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(int *)(v28 + 24);
  v52 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v29, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v30 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v31((uint64_t)v15, 1, v10) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v31(v30, 1, v10) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v31(v30, 1, v10) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    v42 = 0;
    return v42 & 1;
  }
  v32 = v49;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, v49, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v33 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v33 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v34 = v51;
  v35 = v52;
  if ((specialized static Array<A>.== infix(_:_:)(*v51, *v52, v50) & 1) == 0)
    goto LABEL_10;
  v36 = (char *)v34 + *(int *)(v28 + 20);
  v38 = v47;
  v37 = v48;
  v39 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v40 = v45;
  v39(v45, v36, v48);
  v41 = v46;
  v39(v46, (char *)v35 + *(int *)(v28 + 20), v37);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v41, v37);
  v43(v40, v37);
  return v42 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReachabilityState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v12 = v11[5];
  v13 = *(char *)(a1 + v12);
  v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5)
      goto LABEL_22;
  }
  else if ((_DWORD)v14 == 5 || qword_235BCBFB0[v13] != qword_235BCBFB0[v14])
  {
    goto LABEL_22;
  }
  v15 = v11[6];
  v16 = *(char *)(a1 + v15);
  v17 = *(char *)(a2 + v15);
  if (v16 == 5)
  {
    if ((_DWORD)v17 != 5)
      goto LABEL_22;
  }
  else if ((_DWORD)v17 == 5 || qword_235BCBFB0[v16] != qword_235BCBFB0[v17])
  {
    goto LABEL_22;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_22;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_22;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 == 2)
      goto LABEL_21;
LABEL_22:
    v25 = 0;
    return v25 & 1;
  }
  if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
    goto LABEL_22;
LABEL_21:
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v10, a1, v4);
  v24(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v8, v4);
  v26(v10, v4);
  return v25 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SensorFusionStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  _DWORD *v14;
  int v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  v12 = (_DWORD *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 4);
  v14 = (_DWORD *)(a2 + v11);
  v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) == 0)
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      goto LABEL_3;
LABEL_7:
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, a1, v4);
    v17(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
    return v16 & 1;
  }
  if (v15)
    goto LABEL_7;
LABEL_3:
  v16 = 0;
  return v16 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DeviceMotionSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  char v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  char v81;
  uint64_t v82;
  float *v83;
  char v84;
  float *v85;
  int v86;
  uint64_t v87;
  float *v88;
  char v89;
  float *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v119 = a1;
  v120 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v100 = *(_QWORD *)(v2 - 8);
  v101 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v99 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v98 = (char *)&v98 - v5;
  v111 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v104 = *(_QWORD *)(v111 - 8);
  MEMORY[0x24BDAC7A8](v111);
  v102 = (uint64_t)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SensorFusionStatus?, CLP_LogEntry_PrivateData_SensorFusionStatus?));
  MEMORY[0x24BDAC7A8](v103);
  v105 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v110 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v108 = (uint64_t)&v98 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v106 = (uint64_t)&v98 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v113 = *(_QWORD *)(v14 - 8);
  v114 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v107 = (uint64_t)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?));
  MEMORY[0x24BDAC7A8](v112);
  v115 = (uint64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v109 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v117 = (uint64_t)&v98 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v118 = (uint64_t)&v98 - v22;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v98 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v98 - v37;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119 + *(int *)(v39 + 20), (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v116 = (int *)v39;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120 + *(int *)(v39 + 20), (uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v41(v40, 1, v23) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v43 = (uint64_t)v29;
    goto LABEL_14;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v41(v40, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v44 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v44 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v45 = v116;
  v47 = v118;
  v46 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119 + v116[6], v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v48 = v120;
  v49 = v117;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v120 + v45[6], v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v50 = v115;
  v51 = v115 + *(int *)(v112 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v52 = v114;
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v53(v50, 1, v114) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    v54 = v53(v51, 1, v52);
    v56 = (uint64_t)v110;
    v55 = v111;
    if (v54 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
      goto LABEL_18;
    }
LABEL_13:
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    v43 = v50;
    goto LABEL_14;
  }
  v57 = v109;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v58 = v53(v51, 1, v52);
  v56 = (uint64_t)v110;
  v55 = v111;
  if (v58 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
    goto LABEL_13;
  }
  v61 = v107;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, v107, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  v62 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v57, v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, closure #1 in static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v61, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((v62 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  v63 = v45[7];
  v64 = *(unsigned __int8 *)(v46 + v63);
  v65 = *(unsigned __int8 *)(v48 + v63);
  if (v64 == 2)
  {
    v66 = v108;
    if (v65 != 2)
      goto LABEL_15;
  }
  else
  {
    v66 = v108;
    if (v65 == 2 || ((((v65 & 1) == 0) ^ v64) & 1) == 0)
      goto LABEL_15;
  }
  v67 = v45[8];
  v68 = (_DWORD *)(v46 + v67);
  v69 = *(_BYTE *)(v46 + v67 + 4);
  v70 = (_DWORD *)(v48 + v67);
  v71 = *(unsigned __int8 *)(v48 + v67 + 4);
  if ((v69 & 1) != 0)
  {
    if (!v71)
      goto LABEL_15;
  }
  else
  {
    if (*v68 != *v70)
      LOBYTE(v71) = 1;
    if ((v71 & 1) != 0)
      goto LABEL_15;
  }
  v72 = v45[9];
  v73 = *(unsigned __int8 *)(v46 + v72);
  v74 = *(unsigned __int8 *)(v48 + v72);
  if (v73 == 5)
  {
    v75 = v106;
    if (v74 != 5)
      goto LABEL_15;
    goto LABEL_34;
  }
  v59 = 0;
  v75 = v106;
  if (v74 != 5 && v73 == v74)
  {
LABEL_34:
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46 + v45[10], v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48 + v45[10], v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    v76 = v105;
    v77 = v105 + *(int *)(v103 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v105, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    v78 = v76;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
    if (v79(v78, 1, v55) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      v78 = v105;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      if (v79(v77, 1, v55) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
LABEL_41:
        v82 = v45[11];
        v83 = (float *)(v46 + v82);
        v84 = *(_BYTE *)(v46 + v82 + 4);
        v85 = (float *)(v48 + v82);
        v86 = *(unsigned __int8 *)(v48 + v82 + 4);
        if ((v84 & 1) != 0)
        {
          if (v86)
            goto LABEL_47;
        }
        else
        {
          if (*v83 != *v85)
            LOBYTE(v86) = 1;
          if ((v86 & 1) == 0)
          {
LABEL_47:
            v87 = v45[12];
            v88 = (float *)(v46 + v87);
            v89 = *(_BYTE *)(v46 + v87 + 4);
            v90 = (float *)(v48 + v87);
            v91 = *(unsigned __int8 *)(v48 + v87 + 4);
            if ((v89 & 1) != 0)
            {
              if (v91)
              {
LABEL_53:
                v93 = v100;
                v92 = v101;
                v94 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
                v95 = v98;
                v94(v98, v46, v101);
                v96 = v99;
                v94(v99, v48, v92);
                lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
                v59 = dispatch thunk of static Equatable.== infix(_:_:)();
                v97 = *(void (**)(char *, uint64_t))(v93 + 8);
                v97(v96, v92);
                v97(v95, v92);
                return v59 & 1;
              }
            }
            else
            {
              if (*v88 != *v90)
                LOBYTE(v91) = 1;
              if ((v91 & 1) == 0)
                goto LABEL_53;
            }
          }
        }
LABEL_15:
        v59 = 0;
        return v59 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      if (v79(v77, 1, v55) != 1)
      {
        v80 = v102;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, v102, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        v81 = specialized static CLP_LogEntry_PrivateData_SensorFusionStatus.== infix(_:_:)(v56, v80);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        if ((v81 & 1) == 0)
          goto LABEL_15;
        goto LABEL_41;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    }
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SensorFusionStatus?, CLP_LogEntry_PrivateData_SensorFusionStatus?);
    v43 = v78;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v42);
    goto LABEL_15;
  }
  return v59 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(char *, char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD);
  uint64_t (*v53)(char *, char *);
  uint64_t *v54;
  uint64_t *v55;

  v52 = a4;
  v53 = a5;
  v55 = a3;
  v7 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (char *)&v46 - v10;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v46 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v46 - v24;
  v26 = ((uint64_t (*)(_QWORD))v55)(0);
  v27 = *(int *)(v26 + 24);
  v54 = a1;
  v28 = (uint64_t)a1 + v27;
  v29 = v26;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v30 = *(int *)(v29 + 24);
  v55 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v30, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v32((uint64_t)v16, 1, v11) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v11) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v11) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
LABEL_10:
    v43 = 0;
    return v43 & 1;
  }
  v33 = v51;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, v51, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v34 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v20, v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v20, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v34 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v35 = v54;
  v36 = v55;
  if ((specialized static Array<A>.== infix(_:_:)(*v54, *v55, v52, v53) & 1) == 0)
    goto LABEL_10;
  v37 = (char *)v35 + *(int *)(v29 + 20);
  v39 = v49;
  v38 = v50;
  v40 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v41 = v47;
  v40(v47, v37, v50);
  v42 = v48;
  v40(v48, (char *)v36 + *(int *)(v29 + 20), v38);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v42, v38);
  v44(v41, v38);
  return v43 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Natalimetry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BodyMetrics?, CLP_LogEntry_PrivateData_BodyMetrics?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BodyMetrics?, CLP_LogEntry_PrivateData_BodyMetrics?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  v53 = specialized static CLP_LogEntry_PrivateData_BodyMetrics.== infix(_:_:)(v51, v52);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionActivity?, CLP_LogEntry_PrivateData_MotionActivity?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionActivity?, CLP_LogEntry_PrivateData_MotionActivity?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  v53 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BodyMetrics.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  float *v17;
  char v18;
  float *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  float *v32;
  char v33;
  float *v34;
  int v35;
  uint64_t v36;
  float *v37;
  char v38;
  float *v39;
  int v40;
  uint64_t v41;
  float *v42;
  char v43;
  float *v44;
  int v45;
  uint64_t v46;
  float *v47;
  char v48;
  float *v49;
  int v50;
  uint64_t v51;
  float *v52;
  char v53;
  float *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  char v59;
  uint64_t v60;
  float *v61;
  char v62;
  float *v63;
  int v64;
  void (*v66)(char *, uint64_t, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v68;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v68 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3)
      goto LABEL_64;
  }
  else if (v14 == 3 || v13 != v14)
  {
    goto LABEL_64;
  }
  v16 = v11[6];
  v17 = (float *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 4);
  v19 = (float *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_64;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_64;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_64;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_64;
  }
  v26 = v11[8];
  v27 = (float *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (float *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_64;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_64;
  }
  v31 = v11[9];
  v32 = (float *)(a1 + v31);
  v33 = *(_BYTE *)(a1 + v31 + 4);
  v34 = (float *)(a2 + v31);
  v35 = *(unsigned __int8 *)(a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_64;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_64;
  }
  v36 = v11[10];
  v37 = (float *)(a1 + v36);
  v38 = *(_BYTE *)(a1 + v36 + 4);
  v39 = (float *)(a2 + v36);
  v40 = *(unsigned __int8 *)(a2 + v36 + 4);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_64;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_64;
  }
  v41 = v11[11];
  v42 = (float *)(a1 + v41);
  v43 = *(_BYTE *)(a1 + v41 + 4);
  v44 = (float *)(a2 + v41);
  v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_64;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_64;
  }
  v46 = v11[12];
  v47 = (float *)(a1 + v46);
  v48 = *(_BYTE *)(a1 + v46 + 4);
  v49 = (float *)(a2 + v46);
  v50 = *(unsigned __int8 *)(a2 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (!v50)
      goto LABEL_64;
  }
  else
  {
    if (*v47 != *v49)
      LOBYTE(v50) = 1;
    if ((v50 & 1) != 0)
      goto LABEL_64;
  }
  v51 = v11[13];
  v52 = (float *)(a1 + v51);
  v53 = *(_BYTE *)(a1 + v51 + 4);
  v54 = (float *)(a2 + v51);
  v55 = *(unsigned __int8 *)(a2 + v51 + 4);
  if ((v53 & 1) != 0)
  {
    if (!v55)
      goto LABEL_64;
  }
  else
  {
    if (*v52 != *v54)
      LOBYTE(v55) = 1;
    if ((v55 & 1) != 0)
      goto LABEL_64;
  }
  v56 = v11[14];
  v57 = *(unsigned __int8 *)(a1 + v56);
  v58 = *(unsigned __int8 *)(a2 + v56);
  if (v57 == 8)
  {
    if (v58 == 8)
      goto LABEL_62;
LABEL_64:
    v59 = 0;
    return v59 & 1;
  }
  v59 = 0;
  if (v58 != 8 && v57 == v58)
  {
LABEL_62:
    v60 = v11[15];
    v61 = (float *)(a1 + v60);
    v62 = *(_BYTE *)(a1 + v60 + 4);
    v63 = (float *)(a2 + v60);
    v64 = *(unsigned __int8 *)(a2 + v60 + 4);
    if ((v62 & 1) != 0)
    {
      if (!v64)
        goto LABEL_64;
    }
    else
    {
      if (*v61 != *v63)
        LOBYTE(v64) = 1;
      if ((v64 & 1) != 0)
        goto LABEL_64;
    }
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v66(v10, a1, v4);
    v66(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v59 = dispatch thunk of static Equatable.== infix(_:_:)();
    v67 = *(void (**)(char *, uint64_t))(v5 + 8);
    v67(v8, v4);
    v67(v10, v4);
  }
  return v59 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WristState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;

  v4 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v61 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v59 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v66 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v59 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v59 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v24 = *(int *)(v23 + 20);
  v64 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v65 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_39;
  }
  v30 = (uint64_t)v66;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0)
    goto LABEL_39;
LABEL_8:
  v32 = v26[6];
  v33 = v65;
  v34 = *(unsigned __int8 *)(v64 + v32);
  v35 = *(unsigned __int8 *)(v65 + v32);
  if (v34 == 4)
  {
    if (v35 != 4)
      goto LABEL_39;
  }
  else
  {
    v36 = 0;
    if (v35 == 4 || v34 != v35)
      return v36 & 1;
  }
  v37 = v26[7];
  v38 = *(unsigned __int8 *)(v64 + v37);
  v39 = *(unsigned __int8 *)(v65 + v37);
  if (v38 == 4)
  {
    if (v39 != 4)
      goto LABEL_39;
  }
  else
  {
    v36 = 0;
    if (v39 == 4 || v38 != v39)
      return v36 & 1;
  }
  v40 = v26[8];
  v41 = *(unsigned __int8 *)(v64 + v40);
  v42 = *(unsigned __int8 *)(v65 + v40);
  if (v41 == 4)
  {
    if (v42 != 4)
      goto LABEL_39;
    goto LABEL_23;
  }
  v36 = 0;
  if (v42 != 4 && v41 == v42)
  {
LABEL_23:
    v43 = v26[9];
    v44 = *(unsigned __int8 *)(v64 + v43);
    v45 = *(unsigned __int8 *)(v65 + v43);
    if (v44 == 2)
    {
      if (v45 != 2)
        goto LABEL_39;
    }
    else if (v45 == 2 || ((((v45 & 1) == 0) ^ v44) & 1) == 0)
    {
      goto LABEL_39;
    }
    v46 = v26[10];
    v47 = *(unsigned __int8 *)(v64 + v46);
    v48 = *(unsigned __int8 *)(v65 + v46);
    if (v47 == 2)
    {
      if (v48 != 2)
        goto LABEL_39;
    }
    else if (v48 == 2 || ((((v48 & 1) == 0) ^ v47) & 1) == 0)
    {
      goto LABEL_39;
    }
    v49 = v26[11];
    v50 = *(unsigned __int8 *)(v64 + v49);
    v51 = *(unsigned __int8 *)(v65 + v49);
    if (v50 != 2)
    {
      if (v51 == 2 || ((((v51 & 1) == 0) ^ v50) & 1) == 0)
        goto LABEL_39;
      goto LABEL_38;
    }
    if (v51 == 2)
    {
LABEL_38:
      v53 = v62;
      v52 = v63;
      v54 = *(void (**)(char *))(v62 + 16);
      v55 = v60;
      v54(v60);
      v56 = v61;
      ((void (*)(char *, uint64_t, uint64_t))v54)(v61, v33, v52);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      v57 = *(void (**)(char *, uint64_t))(v53 + 8);
      v57(v56, v52);
      v57(v55, v52);
      return v36 & 1;
    }
LABEL_39:
    v36 = 0;
  }
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WatchOrientation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 4)
  {
    if (v14 != 4)
      goto LABEL_16;
  }
  else if (v14 == 4 || v13 != v14)
  {
    goto LABEL_16;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 != 4)
  {
    if (v18 != 4 && v17 == v18)
      goto LABEL_11;
LABEL_16:
    v20 = 0;
    return v20 & 1;
  }
  if (v18 != 4)
    goto LABEL_16;
LABEL_11:
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v10, a1, v4);
  v19(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v21(v10, v4);
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_WatchState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t *v42;
  uint64_t v43;
  char v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;

  v102 = a1;
  v103 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v83 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v82 = (char *)&v81 - v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v88 = *(_QWORD *)(v6 - 8);
  v89 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v81 = (uint64_t)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WristState?, CLP_LogEntry_PrivateData_WristState?));
  MEMORY[0x24BDAC7A8](v87);
  v94 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v91 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v92 = (char *)&v81 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v93 = (char *)&v81 - v14;
  v98 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v96 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v86 = (uint64_t)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WatchOrientation?, CLP_LogEntry_PrivateData_WatchOrientation?));
  MEMORY[0x24BDAC7A8](v95);
  v99 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v90 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v100 = (uint64_t)&v81 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v97 = (uint64_t)&v81 - v22;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v81 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v81 - v37;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102 + *(int *)(v39 + 20), (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v101 = (int *)v39;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103 + *(int *)(v39 + 20), (uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v40 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v41((uint64_t)v29, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v41(v40, 1, v23) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v43 = (uint64_t)v29;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v42);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v41(v40, 1, v23) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v40, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v46 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v33, (uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v46 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v47 = v102;
  v48 = v101[6];
  v49 = (_DWORD *)(v102 + v48);
  v50 = *(_BYTE *)(v102 + v48 + 4);
  v51 = v103;
  v52 = (_DWORD *)(v103 + v48);
  v53 = *(unsigned __int8 *)(v103 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v53)
      goto LABEL_8;
  }
  else
  {
    if (*v49 != *v52)
      LOBYTE(v53) = 1;
    if ((v53 & 1) != 0)
      goto LABEL_8;
  }
  v54 = v101;
  v55 = v97;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102 + v101[7], v97, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v56 = v100;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51 + v54[7], v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v57 = v99;
  v58 = v99 + *(int *)(v95 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
  v60 = v98;
  if (v59(v57, 1, v98) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    v61 = v59(v58, 1, v60);
    v63 = (uint64_t)v93;
    v62 = (uint64_t)v94;
    v64 = (uint64_t)v91;
    v65 = (uint64_t)v92;
    if (v61 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  v66 = v90;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v90, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v67 = v59(v58, 1, v60);
  v63 = (uint64_t)v93;
  v62 = (uint64_t)v94;
  v65 = (uint64_t)v92;
  if (v67 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
LABEL_22:
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WatchOrientation?, CLP_LogEntry_PrivateData_WatchOrientation?);
    v43 = v57;
    goto LABEL_7;
  }
  v68 = v86;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v58, v86, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  LODWORD(v98) = specialized static CLP_LogEntry_PrivateData_WatchOrientation.== infix(_:_:)(v66, v68);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v68, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v64 = (uint64_t)v91;
  if ((v98 & 1) == 0)
    goto LABEL_8;
LABEL_24:
  v69 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47 + v101[8], v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51 + v69[8], v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  v70 = v62 + *(int *)(v87 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  v71 = v89;
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v72(v62, 1, v89) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    if (v72(v70, 1, v71) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
LABEL_31:
      v76 = v84;
      v75 = v85;
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
      v78 = v82;
      v77(v82, v47, v85);
      v79 = v83;
      v77(v83, v51, v75);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)();
      v80 = *(void (**)(char *, uint64_t))(v76 + 8);
      v80(v79, v75);
      v80(v78, v75);
      return v44 & 1;
    }
    goto LABEL_29;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if (v72(v70, 1, v71) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
LABEL_29:
    v42 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_WristState?, CLP_LogEntry_PrivateData_WristState?);
    v43 = v62;
    goto LABEL_7;
  }
  v73 = v81;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, v81, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  v74 = specialized static CLP_LogEntry_PrivateData_WristState.== infix(_:_:)(v64, v73);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v73, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if ((v74 & 1) != 0)
    goto LABEL_31;
LABEL_8:
  v44 = 0;
  return v44 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_StepCount.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v60 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_StepCountEntry?, CLP_LogEntry_PrivateData_StepCountEntry?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v60 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v60 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v60 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_8;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v37 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v72;
  v40 = v73;
  v41 = (_DWORD *)(v72 + v38);
  v42 = *(_BYTE *)(v72 + v38 + 4);
  v43 = (_DWORD *)(v73 + v38);
  v44 = *(unsigned __int8 *)(v73 + v38 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_8;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_8;
  }
  v45 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72 + v30[7], v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v46 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[7], v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v47 = v71;
  v48 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v50 = v70;
  if (v49(v47, 1, v70) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
LABEL_24:
      v55 = v63;
      v54 = v64;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
      v57 = v61;
      v56(v61, v39, v64);
      v58 = v62;
      v56(v62, v40, v54);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v58, v54);
      v59(v57, v54);
      return v35 & 1;
    }
    goto LABEL_22;
  }
  v51 = v65;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
LABEL_22:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_StepCountEntry?, CLP_LogEntry_PrivateData_StepCountEntry?);
    v34 = v47;
    goto LABEL_7;
  }
  v52 = v60;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v60, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  v53 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v51, v52, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_StepCountEntry.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if ((v53 & 1) != 0)
    goto LABEL_24;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DirectionOfTravel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  uint64_t v37;
  double *v38;
  char v39;
  double *v40;
  int v41;
  uint64_t v42;
  double *v43;
  char v44;
  double *v45;
  int v46;
  uint64_t v47;
  double *v48;
  char v49;
  double *v50;
  int v51;
  uint64_t v52;
  double *v53;
  char v54;
  double *v55;
  int v56;
  uint64_t v57;
  double *v58;
  char v59;
  double *v60;
  int v61;
  uint64_t v62;
  double *v63;
  char v64;
  double *v65;
  int v66;
  uint64_t v67;
  double *v68;
  char v69;
  double *v70;
  int v71;
  uint64_t v72;
  double *v73;
  char v74;
  double *v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  char *v93;
  char v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v4 = type metadata accessor for UnknownStorage();
  v100 = *(_QWORD *)(v4 - 8);
  v101 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v99 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v98 = (char *)&v97 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v102 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v97 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v97 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v24 = *(int *)(v23 + 20);
  v103 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v104 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_83;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v30 = v102;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v102, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0)
    goto LABEL_83;
LABEL_8:
  v32 = v26[6];
  v33 = (double *)(v103 + v32);
  v34 = *(_BYTE *)(v103 + v32 + 8);
  v35 = (double *)(v104 + v32);
  v36 = *(unsigned __int8 *)(v104 + v32 + 8);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_83;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_83;
  }
  v37 = v26[7];
  v38 = (double *)(v103 + v37);
  v39 = *(_BYTE *)(v103 + v37 + 8);
  v40 = (double *)(v104 + v37);
  v41 = *(unsigned __int8 *)(v104 + v37 + 8);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_83;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_83;
  }
  v42 = v26[8];
  v43 = (double *)(v103 + v42);
  v44 = *(_BYTE *)(v103 + v42 + 8);
  v45 = (double *)(v104 + v42);
  v46 = *(unsigned __int8 *)(v104 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_83;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_83;
  }
  v47 = v26[9];
  v48 = (double *)(v103 + v47);
  v49 = *(_BYTE *)(v103 + v47 + 8);
  v50 = (double *)(v104 + v47);
  v51 = *(unsigned __int8 *)(v104 + v47 + 8);
  if ((v49 & 1) != 0)
  {
    if (!v51)
      goto LABEL_83;
  }
  else
  {
    if (*v48 != *v50)
      LOBYTE(v51) = 1;
    if ((v51 & 1) != 0)
      goto LABEL_83;
  }
  v52 = v26[10];
  v53 = (double *)(v103 + v52);
  v54 = *(_BYTE *)(v103 + v52 + 8);
  v55 = (double *)(v104 + v52);
  v56 = *(unsigned __int8 *)(v104 + v52 + 8);
  if ((v54 & 1) != 0)
  {
    if (!v56)
      goto LABEL_83;
  }
  else
  {
    if (*v53 != *v55)
      LOBYTE(v56) = 1;
    if ((v56 & 1) != 0)
      goto LABEL_83;
  }
  v57 = v26[11];
  v58 = (double *)(v103 + v57);
  v59 = *(_BYTE *)(v103 + v57 + 8);
  v60 = (double *)(v104 + v57);
  v61 = *(unsigned __int8 *)(v104 + v57 + 8);
  if ((v59 & 1) != 0)
  {
    if (!v61)
      goto LABEL_83;
  }
  else
  {
    if (*v58 != *v60)
      LOBYTE(v61) = 1;
    if ((v61 & 1) != 0)
      goto LABEL_83;
  }
  v62 = v26[12];
  v63 = (double *)(v103 + v62);
  v64 = *(_BYTE *)(v103 + v62 + 8);
  v65 = (double *)(v104 + v62);
  v66 = *(unsigned __int8 *)(v104 + v62 + 8);
  if ((v64 & 1) != 0)
  {
    if (!v66)
      goto LABEL_83;
  }
  else
  {
    if (*v63 != *v65)
      LOBYTE(v66) = 1;
    if ((v66 & 1) != 0)
      goto LABEL_83;
  }
  v67 = v26[13];
  v68 = (double *)(v103 + v67);
  v69 = *(_BYTE *)(v103 + v67 + 8);
  v70 = (double *)(v104 + v67);
  v71 = *(unsigned __int8 *)(v104 + v67 + 8);
  if ((v69 & 1) != 0)
  {
    if (!v71)
      goto LABEL_83;
  }
  else
  {
    if (*v68 != *v70)
      LOBYTE(v71) = 1;
    if ((v71 & 1) != 0)
      goto LABEL_83;
  }
  v72 = v26[14];
  v73 = (double *)(v103 + v72);
  v74 = *(_BYTE *)(v103 + v72 + 8);
  v75 = (double *)(v104 + v72);
  v76 = *(unsigned __int8 *)(v104 + v72 + 8);
  if ((v74 & 1) != 0)
  {
    if (!v76)
      goto LABEL_83;
  }
  else
  {
    if (*v73 != *v75)
      LOBYTE(v76) = 1;
    if ((v76 & 1) != 0)
      goto LABEL_83;
  }
  v77 = v26[15];
  v78 = *(unsigned __int8 *)(v103 + v77);
  v79 = *(unsigned __int8 *)(v104 + v77);
  if (v78 == 2)
  {
    if (v79 != 2)
      goto LABEL_83;
  }
  else if (v79 == 2 || ((((v79 & 1) == 0) ^ v78) & 1) == 0)
  {
    goto LABEL_83;
  }
  v80 = v26[16];
  v81 = *(unsigned __int8 *)(v103 + v80);
  v82 = *(unsigned __int8 *)(v104 + v80);
  if (v81 == 2)
  {
    if (v82 != 2)
      goto LABEL_83;
  }
  else if (v82 == 2 || ((((v82 & 1) == 0) ^ v81) & 1) == 0)
  {
    goto LABEL_83;
  }
  v83 = v26[17];
  v84 = *(unsigned __int8 *)(v103 + v83);
  v85 = *(unsigned __int8 *)(v104 + v83);
  if (v84 == 2)
  {
    if (v85 != 2)
      goto LABEL_83;
  }
  else if (v85 == 2 || ((((v85 & 1) == 0) ^ v84) & 1) == 0)
  {
    goto LABEL_83;
  }
  v86 = v26[18];
  v87 = *(unsigned __int8 *)(v103 + v86);
  v88 = *(unsigned __int8 *)(v104 + v86);
  if (v87 != 2)
  {
    if (v88 != 2 && ((((v88 & 1) == 0) ^ v87) & 1) != 0)
      goto LABEL_82;
LABEL_83:
    v94 = 0;
    return v94 & 1;
  }
  if (v88 != 2)
    goto LABEL_83;
LABEL_82:
  v90 = v100;
  v89 = v101;
  v91 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  v92 = v98;
  v91(v98, v103, v101);
  v93 = v99;
  v91(v99, v104, v89);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v94 = dispatch thunk of static Equatable.== infix(_:_:)();
  v95 = *(void (**)(char *, uint64_t))(v90 + 8);
  v95(v93, v89);
  v95(v92, v89);
  return v94 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionTypeVector3.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (float *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (float *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_CompassTypeSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  float *v56;
  char v57;
  float *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v83 = a1;
  v84 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v71 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v70 = (char *)&v69 - v5;
  v80 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v77 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v74 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeCompass?, CLP_LogEntry_PrivateData_MotionTypeCompass?));
  MEMORY[0x24BDAC7A8](v76);
  v81 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v75 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v82 = (uint64_t)&v69 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v79 = (uint64_t)&v69 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v69 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v69 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83 + *(int *)(v30 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v78 = (int *)v30;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84 + *(int *)(v30 + 20), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v35 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v37 = v78;
  v36 = v79;
  v38 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83 + v78[6], v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v39 = v84;
  v40 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84 + v37[6], v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v41 = v81;
  v42 = v81 + *(int *)(v76 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v44 = v80;
  if (v43(v41, 1, v80) != 1)
  {
    v45 = v75;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v74;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, v74, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      v49 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v45, v48, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionTypeCompass.== infix(_:_:));
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeCompass?, CLP_LogEntry_PrivateData_MotionTypeCompass?);
    v34 = v41;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
LABEL_18:
  v50 = v37[7];
  v51 = (float *)(v38 + v50);
  v52 = *(_BYTE *)(v38 + v50 + 4);
  v53 = (float *)(v39 + v50);
  v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_15;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_15;
  }
  v55 = v37[8];
  v56 = (float *)(v38 + v55);
  v57 = *(_BYTE *)(v38 + v55 + 4);
  v58 = (float *)(v39 + v55);
  v59 = *(unsigned __int8 *)(v39 + v55 + 4);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_15;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_15;
  }
  v60 = v37[9];
  v61 = *(unsigned __int8 *)(v38 + v60);
  v62 = *(unsigned __int8 *)(v39 + v60);
  if (v61 == 2)
  {
    if (v62 == 2)
    {
LABEL_35:
      v64 = v72;
      v63 = v73;
      v65 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
      v66 = v70;
      v65(v70, v38, v73);
      v67 = v71;
      v65(v71, v39, v63);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v68 = *(void (**)(char *, uint64_t))(v64 + 8);
      v68(v67, v63);
      v68(v66, v63);
      return v46 & 1;
    }
  }
  else if (v62 != 2 && ((((v62 & 1) == 0) ^ v61) & 1) != 0)
  {
    goto LABEL_35;
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Battery.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  char v32;
  _DWORD *v33;
  int v34;
  char v35;
  void (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_32;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_32;
  }
  v17 = v11[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_32;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_32;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_32;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_32;
  }
  v23 = v11[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 5)
  {
    if (v25 != 5)
      goto LABEL_32;
  }
  else if (v25 == 5 || v24 != v25)
  {
    goto LABEL_32;
  }
  v27 = v11[9];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 2)
  {
    if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
      goto LABEL_32;
LABEL_30:
    v30 = v11[10];
    v31 = (_DWORD *)(a1 + v30);
    v32 = *(_BYTE *)(a1 + v30 + 4);
    v33 = (_DWORD *)(a2 + v30);
    v34 = *(unsigned __int8 *)(a2 + v30 + 4);
    if ((v32 & 1) != 0)
    {
      if (!v34)
        goto LABEL_32;
    }
    else
    {
      if (*v31 != *v33)
        LOBYTE(v34) = 1;
      if ((v34 & 1) != 0)
        goto LABEL_32;
    }
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v37(v10, a1, v4);
    v37(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v8, v4);
    v38(v10, v4);
    return v35 & 1;
  }
  if (v29 == 2)
    goto LABEL_30;
LABEL_32:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Timer.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UnknownStorage();
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v40 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v40 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v47 = (uint64_t)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v40 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v40 - v22;
  v24 = a3(0);
  v25 = *(int *)(v24 + 20);
  v41 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v25, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v26 = *(int *)(v24 + 20);
  v42 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v26, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v28((uint64_t)v15, 1, v10) != 1)
  {
    v29 = v47;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v28(v27, 1, v10) != 1)
    {
      v30 = v40;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v27, v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v31 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v29, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v31 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v37 = 0;
      return v37 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_9;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v28(v27, 1, v10) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_8:
  v33 = v45;
  v32 = v46;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v35 = v43;
  v34(v43, v41, v46);
  v36 = v44;
  v34(v44, v42, v32);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v38(v36, v32);
  v38(v35, v32);
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  char v34;
  uint64_t v35;
  float *v36;
  char v37;
  uint64_t (*v38)(_QWORD);
  float *v39;
  int v40;
  uint64_t v41;
  float *v42;
  char v43;
  float *v44;
  int v45;
  uint64_t v46;
  float *v47;
  char v48;
  float *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *);
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t (*v64)(_QWORD);

  v64 = a3;
  v5 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v58 = (char *)&v57 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v57 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v57 - v22;
  v24 = v64(0);
  v25 = *(int *)(v24 + 20);
  v62 = a1;
  v26 = a1 + v25;
  v27 = (int *)v24;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = v27[5];
  v64 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v28, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v30((uint64_t)v14, 1, v9) != 1)
  {
    v31 = (uint64_t)v63;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v30(v29, 1, v9) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v29, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v34 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v18, v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v34 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v30(v29, 1, v9) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  v35 = v27[6];
  v36 = (float *)(v62 + v35);
  v37 = *(_BYTE *)(v62 + v35 + 4);
  v38 = v64;
  v39 = (float *)((char *)v64 + v35);
  v40 = *((unsigned __int8 *)v64 + v35 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v40)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_7;
  }
  v41 = v27[7];
  v42 = (float *)(v62 + v41);
  v43 = *(_BYTE *)(v62 + v41 + 4);
  v44 = (float *)((char *)v64 + v41);
  v45 = *((unsigned __int8 *)v64 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_7;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_7;
  }
  v46 = v27[8];
  v47 = (float *)(v62 + v46);
  v48 = *(_BYTE *)(v62 + v46 + 4);
  v49 = (float *)((char *)v64 + v46);
  v50 = *((unsigned __int8 *)v64 + v46 + 4);
  if ((v48 & 1) != 0)
  {
    if (v50)
    {
LABEL_28:
      v52 = v60;
      v51 = v61;
      v53 = *(void (**)(char *))(v60 + 16);
      v54 = v58;
      v53(v58);
      v55 = v59;
      ((void (*)(char *, uint64_t (*)(_QWORD), uint64_t))v53)(v59, v38, v51);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v32 & 1;
    }
  }
  else
  {
    if (*v47 != *v49)
      LOBYTE(v50) = 1;
    if ((v50 & 1) == 0)
      goto LABEL_28;
  }
LABEL_7:
  v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_BaroSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  char v37;
  float *v38;
  int v39;
  uint64_t v40;
  float *v41;
  char v42;
  float *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&v51 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v56 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v51 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v51 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  v24 = *(int *)(v23 + 20);
  v57 = a1;
  v25 = a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[5];
  v58 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) != 1)
    {
      v32 = v56;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v33 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if ((v33 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_10:
  v34 = v26[6];
  v35 = v58;
  v36 = (float *)(v57 + v34);
  v37 = *(_BYTE *)(v57 + v34 + 4);
  v38 = (float *)(v58 + v34);
  v39 = *(unsigned __int8 *)(v58 + v34 + 4);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_7;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_7;
  }
  v40 = v26[7];
  v41 = (float *)(v57 + v40);
  v42 = *(_BYTE *)(v57 + v40 + 4);
  v43 = (float *)(v58 + v40);
  v44 = *(unsigned __int8 *)(v58 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (v44)
    {
LABEL_22:
      v46 = v54;
      v45 = v55;
      v47 = *(void (**)(char *))(v54 + 16);
      v48 = v52;
      v47(v52);
      v49 = v53;
      ((void (*)(char *, uint64_t, uint64_t))v47)(v53, v35, v45);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = *(void (**)(char *, uint64_t))(v46 + 8);
      v50(v49, v45);
      v50(v48, v45);
      return v30 & 1;
    }
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) == 0)
      goto LABEL_22;
  }
LABEL_7:
  v30 = 0;
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  uint64_t v23;
  double *v24;
  char v25;
  double *v26;
  int v27;
  uint64_t v28;
  double *v29;
  char v30;
  double *v31;
  int v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v38 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_27;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_27;
  }
  v18 = v11[7];
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
      goto LABEL_27;
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_27;
  }
  v23 = v11[8];
  v24 = (double *)((char *)a1 + v23);
  v25 = *((_BYTE *)a1 + v23 + 8);
  v26 = (double *)((char *)a2 + v23);
  v27 = *((unsigned __int8 *)a2 + v23 + 8);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_27;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_27;
  }
  v28 = v11[9];
  v29 = (double *)((char *)a1 + v28);
  v30 = *((_BYTE *)a1 + v28 + 8);
  v31 = (double *)((char *)a2 + v28);
  v32 = *((unsigned __int8 *)a2 + v28 + 8);
  if ((v30 & 1) != 0)
  {
    if (v32)
      goto LABEL_25;
LABEL_27:
    v35 = 0;
    return v35 & 1;
  }
  if (*v29 != *v31)
    LOBYTE(v32) = 1;
  if ((v32 & 1) != 0)
    goto LABEL_27;
LABEL_25:
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_27;
  v33 = (char *)a1 + v12[5];
  v34 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v34(v10, v33, v4);
  v34(v8, (char *)a2 + v12[5], v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v5 + 8);
  v36(v8, v4);
  v36(v10, v4);
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  int *v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;

  v89 = a1;
  v90 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v78 = *(_QWORD *)(v2 - 8);
  v79 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v77 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v76 = (char *)&v75 - v5;
  v88 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v82 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v80 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?));
  MEMORY[0x24BDAC7A8](v81);
  v83 = (uint64_t)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v87 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v85 = (char *)&v75 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v86 = (char *)&v75 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (uint64_t *)((char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v75 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v75 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v89 + *(int *)(v30 + 24), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v84 = (int *)v30;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v90 + *(int *)(v30 + 24), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    v34 = (uint64_t)v20;
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  v35 = specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.== infix(_:_:)(v24, v17);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((v35 & 1) == 0)
    goto LABEL_27;
LABEL_9:
  v37 = v89;
  v36 = v90;
  if ((specialized static Array<A>.== infix(_:_:)(*v89, *v90) & 1) == 0)
    goto LABEL_27;
  v38 = v84;
  v39 = v84[7];
  v40 = (uint64_t *)((char *)v37 + v39);
  v41 = *((_BYTE *)v37 + v39 + 8);
  v42 = (uint64_t *)((char *)v36 + v39);
  v43 = *((unsigned __int8 *)v36 + v39 + 8);
  if ((v41 & 1) != 0)
  {
    v45 = (uint64_t)v87;
    v44 = v88;
    v47 = (uint64_t)v85;
    v46 = (uint64_t)v86;
    if (!v43)
      goto LABEL_27;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    v45 = (uint64_t)v87;
    v44 = v88;
    v47 = (uint64_t)v85;
    v46 = (uint64_t)v86;
    if ((v43 & 1) != 0)
      goto LABEL_27;
  }
  v48 = v84[8];
  v49 = *((unsigned __int8 *)v37 + v48);
  v50 = *((unsigned __int8 *)v36 + v48);
  if (v49 == 4)
  {
    if (v50 != 4)
      goto LABEL_27;
    goto LABEL_21;
  }
  v51 = 0;
  if (v50 != 4 && v49 == v50)
  {
LABEL_21:
    v52 = v84[9];
    v53 = (_DWORD *)((char *)v37 + v52);
    v54 = *((_BYTE *)v37 + v52 + 4);
    v55 = (_DWORD *)((char *)v36 + v52);
    v56 = *((unsigned __int8 *)v36 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56)
        goto LABEL_27;
    }
    else
    {
      if (*v53 != *v55)
        LOBYTE(v56) = 1;
      if ((v56 & 1) != 0)
        goto LABEL_27;
    }
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37 + v84[10], v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36 + v38[10], v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    v58 = v83;
    v59 = v83 + *(int *)(v81 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    v60 = v58;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    if (v61(v60, 1, v44) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      v60 = v83;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      if (v61(v59, 1, v44) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        goto LABEL_36;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      if (v61(v59, 1, v44) != 1)
      {
        v62 = v80;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v59, v80, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        v63 = specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.== infix(_:_:)(v45, v62);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        if ((v63 & 1) != 0)
        {
LABEL_36:
          v64 = v38[11];
          v65 = (uint64_t *)((char *)v37 + v64);
          v66 = *((_BYTE *)v37 + v64 + 8);
          v67 = (uint64_t *)((char *)v36 + v64);
          v68 = *((unsigned __int8 *)v36 + v64 + 8);
          if ((v66 & 1) != 0)
          {
            if (v68)
            {
LABEL_42:
              v70 = v78;
              v69 = v79;
              v71 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
              v72 = v76;
              v71(v76, (char *)v37 + v38[5], v79);
              v73 = v77;
              v71(v77, (char *)v36 + v38[5], v69);
              lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
              v51 = dispatch thunk of static Equatable.== infix(_:_:)();
              v74 = *(void (**)(char *, uint64_t))(v70 + 8);
              v74(v73, v69);
              v74(v72, v69);
              return v51 & 1;
            }
          }
          else
          {
            if (*v65 != *v67)
              LOBYTE(v68) = 1;
            if ((v68 & 1) == 0)
              goto LABEL_42;
          }
        }
LABEL_27:
        v51 = 0;
        return v51 & 1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    }
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    v34 = v60;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_27;
  }
  return v51 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  char *v53;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v46 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v46 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v46 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  v24 = *(int *)(v23 + 24);
  v51 = a1;
  v25 = (uint64_t)a1 + v24;
  v26 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v27 = v26[6];
  v52 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)a2 + v27, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v29(v28, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_15;
  }
  v30 = (uint64_t)v53;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v29(v28, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v31 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v31 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v32 = v51;
  v33 = v52;
  if ((specialized static Array<A>.== infix(_:_:)(*v51, *v52, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.== infix(_:_:)) & 1) == 0)goto LABEL_15;
  v34 = v26[7];
  v35 = *((unsigned __int8 *)v32 + v34);
  v36 = *((unsigned __int8 *)v33 + v34);
  if (v35 != 2)
  {
    if (v36 != 2 && ((((v36 & 1) == 0) ^ v35) & 1) != 0)
      goto LABEL_14;
LABEL_15:
    v43 = 0;
    return v43 & 1;
  }
  if (v36 != 2)
    goto LABEL_15;
LABEL_14:
  v37 = (char *)v32 + v26[5];
  v39 = v49;
  v38 = v50;
  v40 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
  v41 = v47;
  v40(v47, v37, v50);
  v42 = v48;
  v40(v48, (char *)v33 + v26[5], v38);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v39 + 8);
  v44(v42, v38);
  v44(v41, v38);
  return v43 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  char v34;
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v38 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_21;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_21;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23)
      goto LABEL_21;
  }
  else
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_21;
  }
  v24 = v13[7];
  v25 = (double *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 8);
  v27 = (double *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) == 0)
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v29 = v13[8];
    v30 = (double *)(a1 + v29);
    v31 = *(_BYTE *)(a1 + v29 + 8);
    v32 = (double *)(a2 + v29);
    v33 = *(unsigned __int8 *)(a2 + v29 + 8);
    if ((v31 & 1) != 0)
    {
      if (!v33)
        goto LABEL_21;
    }
    else
    {
      if (*v30 != *v32)
        LOBYTE(v33) = 1;
      if ((v33 & 1) != 0)
        goto LABEL_21;
    }
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v36(v12, a1, v6);
    v36(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v10, v6);
    v37(v12, v6);
    return v34 & 1;
  }
  if (v28)
    goto LABEL_19;
LABEL_21:
  v34 = 0;
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  int *v24;
  uint64_t v25;
  double *v26;
  char v27;
  double *v28;
  int v29;
  uint64_t v30;
  double *v31;
  char v32;
  double *v33;
  int v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  double *v46;
  char v47;
  double *v48;
  int v49;
  uint64_t v50;
  double *v51;
  char v52;
  double *v53;
  int v54;
  uint64_t v55;
  double *v56;
  char v57;
  double *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  char v64;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v4 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)&v74 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v12);
  v79 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v74 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v74 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v24 = v23;
  v25 = v23[5];
  v26 = (double *)(a1 + v25);
  v27 = *(_BYTE *)(a1 + v25 + 8);
  v28 = (double *)(a2 + v25);
  v29 = *(unsigned __int8 *)(a2 + v25 + 8);
  if ((v27 & 1) != 0)
  {
    if (!v29)
      goto LABEL_49;
  }
  else
  {
    if (*v26 != *v28)
      LOBYTE(v29) = 1;
    if ((v29 & 1) != 0)
      goto LABEL_49;
  }
  v30 = v23[6];
  v31 = (double *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 8);
  v33 = (double *)(a2 + v30);
  v34 = *(unsigned __int8 *)(a2 + v30 + 8);
  if ((v32 & 1) != 0)
  {
    if (!v34)
      goto LABEL_49;
  }
  else
  {
    if (*v31 != *v33)
      LOBYTE(v34) = 1;
    if ((v34 & 1) != 0)
      goto LABEL_49;
  }
  v35 = v23[7];
  v36 = (double *)(a1 + v35);
  v37 = *(_BYTE *)(a1 + v35 + 8);
  v38 = (double *)(a2 + v35);
  v39 = *(unsigned __int8 *)(a2 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_49;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_49;
  }
  v40 = v23[8];
  v41 = (double *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 8);
  v43 = (double *)(a2 + v40);
  v44 = *(unsigned __int8 *)(a2 + v40 + 8);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_49;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_49;
  }
  v45 = v23[9];
  v46 = (double *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 8);
  v48 = (double *)(a2 + v45);
  v49 = *(unsigned __int8 *)(a2 + v45 + 8);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_49;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_49;
  }
  v50 = v23[10];
  v51 = (double *)(a1 + v50);
  v52 = *(_BYTE *)(a1 + v50 + 8);
  v53 = (double *)(a2 + v50);
  v54 = *(unsigned __int8 *)(a2 + v50 + 8);
  if ((v52 & 1) != 0)
  {
    if (!v54)
      goto LABEL_49;
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) != 0)
      goto LABEL_49;
  }
  v55 = v23[11];
  v56 = (double *)(a1 + v55);
  v57 = *(_BYTE *)(a1 + v55 + 8);
  v58 = (double *)(a2 + v55);
  v59 = *(unsigned __int8 *)(a2 + v55 + 8);
  if ((v57 & 1) != 0)
  {
    if (!v59)
      goto LABEL_49;
  }
  else
  {
    if (*v56 != *v58)
      LOBYTE(v59) = 1;
    if ((v59 & 1) != 0)
      goto LABEL_49;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v23[12], (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v24[12], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v60 = *(int *)(v12 + 48);
  v61 = v79;
  v62 = v79 + v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v74 = v62;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v63(v61, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v61 = v79;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v63(v74, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_52:
      v69 = v77;
      v68 = v78;
      v70 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      v71 = v75;
      v70(v75, a1, v78);
      v72 = v76;
      v70(v76, a2, v68);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73 = *(void (**)(char *, uint64_t))(v69 + 8);
      v73(v72, v68);
      v73(v71, v68);
      return v64 & 1;
    }
    goto LABEL_48;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v63(v74, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_48:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_49;
  }
  v66 = v61;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v74, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v67 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v17, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v67 & 1) != 0)
    goto LABEL_52;
LABEL_49:
  v64 = 0;
  return v64 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GeomagneticModelData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v38 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v45 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v38 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  v23 = *(int *)(v22 + 20);
  v39 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v24 = *(int *)(v22 + 20);
  v40 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v45;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v38;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v25, v38, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      v29 = specialized static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.== infix(_:_:)(v27, v28);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      if ((v29 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v35 = 0;
      return v35 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v27, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?));
    goto LABEL_9;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
LABEL_8:
  v31 = v43;
  v30 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v33 = v41;
  v32(v41, v39, v44);
  v34 = v42;
  v32(v42, v40, v30);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v36 = *(void (**)(char *, uint64_t))(v31 + 8);
  v36(v34, v30);
  v36(v33, v30);
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  double *v32;
  char v33;
  double *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  char v43;
  double *v44;
  int v45;
  char v46;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v51 - v9;
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_39;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  v12 = v11;
  v13 = v11[6];
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_39;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_39;
  }
  v18 = v11[7];
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
      goto LABEL_39;
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_39;
  }
  v23 = v11[8];
  v24 = *((unsigned __int8 *)a1 + v23);
  v25 = *((unsigned __int8 *)a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2)
      goto LABEL_39;
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_39;
  }
  v26 = v11[9];
  v27 = (double *)((char *)a1 + v26);
  v28 = *((_BYTE *)a1 + v26 + 8);
  v29 = (double *)((char *)a2 + v26);
  v30 = *((unsigned __int8 *)a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_39;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_39;
  }
  v31 = v11[10];
  v32 = (double *)((char *)a1 + v31);
  v33 = *((_BYTE *)a1 + v31 + 8);
  v34 = (double *)((char *)a2 + v31);
  v35 = *((unsigned __int8 *)a2 + v31 + 8);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_39;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_39;
  }
  v36 = v11[11];
  v37 = (double *)((char *)a1 + v36);
  v38 = *((_BYTE *)a1 + v36 + 8);
  v39 = (double *)((char *)a2 + v36);
  v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) == 0)
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_39;
LABEL_37:
    v41 = v11[12];
    v42 = (double *)((char *)a1 + v41);
    v43 = *((_BYTE *)a1 + v41 + 8);
    v44 = (double *)((char *)a2 + v41);
    v45 = *((unsigned __int8 *)a2 + v41 + 8);
    if ((v43 & 1) != 0)
    {
      if (!v45)
        goto LABEL_39;
    }
    else
    {
      if (*v42 != *v44)
        LOBYTE(v45) = 1;
      if ((v45 & 1) != 0)
        goto LABEL_39;
    }
    v48 = (char *)a1 + v11[5];
    v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[5], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    v50 = *(void (**)(char *, uint64_t))(v5 + 8);
    v50(v8, v4);
    v50(v10, v4);
    return v46 & 1;
  }
  if (v40)
    goto LABEL_37;
LABEL_39:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOMapBuildingData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;

  v73 = a1;
  v74 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v2 - 8);
  v64 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v62 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v59 - v5;
  v70 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v67 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?));
  MEMORY[0x24BDAC7A8](v66);
  v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v68 = (uint64_t)&v59 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v59 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v59 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v59 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v73 + *(int *)(v30 + 28), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v72 = v30;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v74 + *(int *)(v30 + 28), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_9;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_19;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v35 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v35 & 1) == 0)
    goto LABEL_19;
LABEL_9:
  v37 = v73;
  v36 = v74;
  if ((specialized static Array<A>.== infix(_:_:)(*v73, *v74) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)((_QWORD *)v37[1], (_QWORD *)v36[1]))
  {
    goto LABEL_19;
  }
  v38 = v72;
  v39 = v69;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37 + *(int *)(v72 + 32), v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v40 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v36 + *(int *)(v38 + 32), v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v41 = v71;
  v42 = v71 + *(int *)(v66 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v44 = v70;
  if (v43(v41, 1, v70) != 1)
  {
    v45 = v65;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v65, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    if (v43(v42, 1, v44) != 1)
    {
      v46 = v60;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, v60, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      v47 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v45, v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      if ((v47 & 1) != 0)
        goto LABEL_18;
LABEL_19:
      v56 = 0;
      return v56 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_16;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_16:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    v34 = v41;
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
LABEL_18:
  v48 = v72;
  v49 = (char *)v37 + *(int *)(v72 + 24);
  v51 = v63;
  v50 = v64;
  v52 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v53 = v61;
  v52(v61, v49, v64);
  v54 = (char *)v36 + *(int *)(v48 + 24);
  v55 = v62;
  v52(v62, v54, v50);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(char *, uint64_t))(v51 + 8);
  v57(v55, v50);
  v57(v53, v50);
  return v56 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  char v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v28 - v11;
  v13 = a3(0);
  v14 = *(int *)(v13 + 20);
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) == 0)
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v19 = *(int *)(v13 + 24);
    v20 = (double *)(a1 + v19);
    v21 = *(_BYTE *)(a1 + v19 + 8);
    v22 = (double *)(a2 + v19);
    v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if ((v21 & 1) != 0)
    {
      if (!v23)
        goto LABEL_9;
    }
    else
    {
      if (*v20 != *v22)
        LOBYTE(v23) = 1;
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v25(v12, a1, v6);
    v25(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v26 = *(void (**)(char *, uint64_t))(v7 + 8);
    v26(v10, v6);
    v26(v12, v6);
    return v24 & 1;
  }
  if (v18)
    goto LABEL_7;
LABEL_9:
  v24 = 0;
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v35;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v35 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_26;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_26;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_26;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_26;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_26;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_26;
  }
  v27 = v11[8];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 != 4)
  {
    if (v29 != 4 && v28 == v29)
      goto LABEL_21;
LABEL_26:
    v31 = 0;
    return v31 & 1;
  }
  if (v29 != 4)
    goto LABEL_26;
LABEL_21:
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v30(v10, a1, v4);
  v30(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  v32 = *(void (**)(char *, uint64_t))(v5 + 8);
  v32(v8, v4);
  v32(v10, v4);
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapsRouteHintData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v41 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (double *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 8);
    v35 = (double *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MapMatcherData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_24;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2)
      goto LABEL_24;
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2)
      goto LABEL_23;
LABEL_24:
    v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    goto LABEL_24;
LABEL_23:
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType, &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationType, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationType, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationType, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationType, &type metadata for CLP_LogEntry_PrivateData_LocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LocationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LocationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LocationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation, &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ClientSatelliteConstellation] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ClientSatelliteConstellation]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocationFixType, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocationFixType, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocationFixType, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocationFixType, &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatchedLocationFixType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatchedLocationFixType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssModeOfOperation, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssModeOfOperation, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssModeOfOperation, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssModeOfOperation, &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssModeOfOperation] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssModeOfOperation]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode, &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_RhythmicGnssWakeMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_RhythmicGnssWakeMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchMode, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchMode, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchMode, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchMode, &type metadata for CLP_LogEntry_PrivateData_BatchMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatchMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatchMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatchMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_OperatingMode, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_OperatingMode, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_OperatingMode, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_OperatingMode, &type metadata for CLP_LogEntry_PrivateData_OperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_OperatingMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_OperatingMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_OperatingMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PipelineOperatingMode, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PipelineOperatingMode, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PipelineOperatingMode, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PipelineOperatingMode, &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PipelineOperatingMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PipelineOperatingMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DominantMotionModeType, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DominantMotionModeType, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DominantMotionModeType, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DominantMotionModeType, &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DominantMotionModeType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DominantMotionModeType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityType, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityType, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityType, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityType, &type metadata for CLP_LogEntry_PrivateData_ReachabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_ReachabilityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_ReachabilityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_ReachabilityType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatteryChargerType, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatteryChargerType, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatteryChargerType, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatteryChargerType, &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BatteryChargerType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BatteryChargerType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel, &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionMode, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionMode, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionMode, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionMode, &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SensorFusionMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SensorFusionMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPointMode, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPointMode, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPointMode, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPointMode, &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiAccessPointMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiAccessPointMode]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiRfBand()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiRfBand] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiRfBand]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanType, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanType, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanType, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanType, &type metadata for CLP_LogEntry_PrivateData_WifiScanType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiScanType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiScanType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiScanType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotificationType, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotificationType, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotificationType, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotificationType, &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WifiNotificationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WifiNotificationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationServicesEnabled, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationServicesEnabled, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationServicesEnabled, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationServicesEnabled, &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LocationServicesEnabled] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LocationServicesEnabled]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DataAvailability, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DataAvailability, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DataAvailability, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DataAvailability, &type metadata for CLP_LogEntry_PrivateData_DataAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DataAvailability()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DataAvailability] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DataAvailability]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorType, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorType, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorType, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorType, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IndoorOutdoorType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IndoorOutdoorType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence, &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IndoorOutdoorConfidence] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IndoorOutdoorConfidence]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy, &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.SignalQualityType, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.SignalQualityType, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.SignalQualityType, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.SignalQualityType, &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.MotionDetectedType, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.MotionDetectedType, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.MotionDetectedType, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location.MotionDetectedType, &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Location.SignalQualityType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Location.SignalQualityType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Location.MotionDetectedType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Location.MotionDetectedType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType, &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.MountedStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.MountedStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode, &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType, &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WorkoutEvent.EventType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WorkoutEvent.EventType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType, &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType, &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType, &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType, &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_DeviceStatus.NotificationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_DeviceStatus.NotificationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType, &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType, &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource, &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType, &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType, &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType, &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WristState.WristStateType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WristState.WristStateType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType, &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame, &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccelSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Accel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GyroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Gyro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BaroSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Baro()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapMatcherData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PressureSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_VehicleHeading()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Location()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BatchedLocations()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionActivity()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateObserver and conformance CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutSettings and conformance CLP_LogEntry_PrivateData_WorkoutSettings, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutEvent and conformance CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionStateMediator and conformance CLP_LogEntry_PrivateData_MotionStateMediator, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionStateMediator);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BodyMetrics()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BodyMetrics and conformance CLP_LogEntry_PrivateData_BodyMetrics, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Natalimetry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Natalimetry and conformance CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Timer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Timer and conformance CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_Timer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Timer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DigitalElevationModel and conformance CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DirectionOfTravel and conformance CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapVector()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapVector and conformance CLP_LogEntry_PrivateData_MapVector, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapVector);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeAssistance and conformance CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelBridgeNotification and conformance CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPointAssistance and conformance CLP_LogEntry_PrivateData_TunnelEndPointAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TunnelEndPoint and conformance CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapsRouteHintData and conformance CLP_LogEntry_PrivateData_MapsRouteHintData, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatchingRouteHint and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReachabilityState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReachabilityState and conformance CLP_LogEntry_PrivateData_ReachabilityState, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Battery()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Battery and conformance CLP_LogEntry_PrivateData_Battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceStatus and conformance CLP_LogEntry_PrivateData_DeviceStatus, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironment and conformance CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalEnvironmentInfo and conformance CLP_LogEntry_PrivateData_SignalEnvironmentInfo, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MagSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MagSample and conformance CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Magnetometer()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Magnetometer and conformance CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Reset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Reset and conformance CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_Reset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Reset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelerometerPace and conformance CLP_LogEntry_PrivateData_AccelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FalseStepDetectorState and conformance CLP_LogEntry_PrivateData_FalseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_StepCountEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCountEntry and conformance CLP_LogEntry_PrivateData_StepCountEntry, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_StepCount()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_StepCount and conformance CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeVector3 and conformance CLP_LogEntry_PrivateData_MotionTypeVector3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDoubleVector4 and conformance CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeCompass and conformance CLP_LogEntry_PrivateData_MotionTypeCompass, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_CompassTypeSample and conformance CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Compass()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Compass and conformance CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_Compass, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeDeviceMotion and conformance CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SensorFusionStatus and conformance CLP_LogEntry_PrivateData_SensorFusionStatus, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotionSample and conformance CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_DeviceMotion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DeviceMotion and conformance CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData and conformance CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GeomagneticModelData and conformance CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GeomagneticModelData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAssociationState and conformance CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiScanResult()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WifiNotification()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOLocationCoordinate2D and conformance CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureBuilding and conformance CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapBuildingData and conformance CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData and conformance CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WatchOrientation()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchOrientation and conformance CLP_LogEntry_PrivateData_WatchOrientation, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WristState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WristState and conformance CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_WristState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_WatchState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WatchState and conformance CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PlaceInference()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PlaceInference and conformance CLP_LogEntry_PrivateData_PlaceInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_RoutineVisit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RoutineVisit and conformance CLP_LogEntry_PrivateData_RoutineVisit, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RoutineVisit);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_OutdoorUpdate and conformance CLP_LogEntry_PrivateData_OutdoorUpdate, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_InertialOdometrySample and conformance CLP_LogEntry_PrivateData_InertialOdometrySample, type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_235A55CA0 + 4 * byte_235BBDAE3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_235A55CD4 + 4 * byte_235BBDADE[v4]))();
}

uint64_t sub_235A55CD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A55CDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A55CE4);
  return result;
}

uint64_t sub_235A55CF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A55CF8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_235A55CFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A55D04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  return &type metadata for CLP_LogEntry_PrivateData_ClientSatelliteConstellation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatchMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatchMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_OperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_OperatingMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xB9)
    goto LABEL_17;
  if (a2 + 71 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 71) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 71;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 71;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 71;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x48;
  v8 = v6 - 72;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DominantMotionModeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 71 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 71) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xB9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xB8)
    return ((uint64_t (*)(void))((char *)&loc_235A55E7C + 4 * byte_235BBDAED[v4]))();
  *a1 = a2 + 71;
  return ((uint64_t (*)(void))((char *)sub_235A55EB0 + 4 * byte_235BBDAE8[v4]))();
}

uint64_t sub_235A55EB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A55EB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A55EC0);
  return result;
}

uint64_t sub_235A55ECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A55ED4);
  *(_BYTE *)result = a2 + 71;
  return result;
}

uint64_t sub_235A55ED8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A55EE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DominantMotionModeType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_ReachabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BatteryChargerType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BatteryChargerType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_SensorFusionMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiRfBand()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiRfBand;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiScanType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiScanType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_235A56068 + 4 * byte_235BBDAF7[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_235A5609C + 4 * byte_235BBDAF2[v4]))();
}

uint64_t sub_235A5609C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A560A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A560ACLL);
  return result;
}

uint64_t sub_235A560B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A560C0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_235A560C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A560CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WifiNotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WifiNotificationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  return &type metadata for CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DataAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_DataAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  return &type metadata for CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeStamp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeStamp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A56178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A56190(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_AccelSample()
{
  type metadata completion function for CLP_LogEntry_PrivateData_AccelSample();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Accel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Accel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AccelSample(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
    v31 = a3[8];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GyroSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A56774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GyroSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5678C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Accel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v16[6];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v16[7];
      v26 = &v14[v25];
      v27 = &v15[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v5);
  return result;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_Accel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_Accel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Gyro()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Gyro()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BaroSample(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v29[4] = v30[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v51 = a3;
  v52 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v39 = v12[5];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v12[6];
      v44 = &v10[v43];
      v45 = &v11[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      v47 = v12[7];
      v48 = &v10[v47];
      v49 = &v11[v47];
      v50 = v49[8];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v50;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v30 = *(int *)(v51 + 24);
  v31 = a1 + v30;
  v32 = (int *)(v52 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = *(int *)(v51 + 28);
  v35 = a1 + v34;
  v36 = (int *)(v52 + v34);
  v37 = *v36;
  *(_BYTE *)(v35 + 4) = *((_BYTE *)v36 + 4);
  *(_DWORD *)v35 = v37;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v43 = a3;
  v44 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[6];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v12[7];
      v41 = &v10[v40];
      v42 = &v11[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v27 = *(int *)(v43 + 24);
  v28 = *(int *)(v43 + 28);
  v29 = a1 + v27;
  v30 = v44 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = v44 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BaroSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A57554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BaroSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5756C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_BaroSample()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Baro()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Baro()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatcherData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatcherData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PressureSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PressureSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ClientSatelliteInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v19;
    v23 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  return &type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A58060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 32)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A580F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 4;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_VehicleSpeed()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleHeading()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_VehicleHeading()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (uint64_t *)((char *)a1 + v9);
    v13 = (uint64_t *)((char *)a2 + v9);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (_QWORD *)(a2 + v8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Location()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Location()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  return &type metadata for CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    a1[1] = a2[1];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for CLP_LogEntry_PrivateData_BatchedLocations(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_BatchedLocations(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_BatchedLocations(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_BatchedLocations(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_BatchedLocations(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocations()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5887C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocations()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_235A58904(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_BatchedLocations()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v10[4] = v11[4];
    *(_DWORD *)v10 = *(_DWORD *)v11;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_RhythmicStreamingControl(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_RhythmicStreamingControl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionActivity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionActivity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A590A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A590C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutUpdate(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[6];
    a1[a3[5]] = a2[a3[5]];
    v10 = &a1[v9];
    v11 = &a2[v9];
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = a3[7];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v7(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  v47 = a3;
  v12 = a3[7];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v7((uint64_t)v13, (uint64_t)v14, v6);
      v34 = v15[5];
      v35 = &v13[v34];
      v36 = &v14[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v15[6];
      v39 = &v13[v38];
      v40 = &v14[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v15[7];
      v43 = &v13[v42];
      v44 = &v14[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v15[6];
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = v15[7];
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;

  v6 = type metadata accessor for UnknownStorage();
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v40 = a3;
  v11 = a3[7];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v7((uint64_t)v12, (uint64_t)v13, v6);
      v30 = v14[5];
      v31 = &v12[v30];
      v32 = &v13[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v14[6];
      v34 = &v12[v33];
      v35 = &v13[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v14[7];
      v37 = &v12[v36];
      v38 = &v13[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v13, v6);
  v19 = v14[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v14[6];
  v23 = &v12[v22];
  v24 = &v13[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = v14[7];
  v26 = &v12[v25];
  v27 = &v13[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A59A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 183)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0x48u)
      v9 = 72;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    v10 = v9 - 72;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0x48u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A59B08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 183)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 72;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v52 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v52(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v51 = v13;
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      v34 = v31[6];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v35[8] = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v37 = v31[7];
      v38 = &v29[v37];
      v39 = &v30[v37];
      if (v52(&v30[v37], 1, v12))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        v41 = v12[5];
        v42 = &v38[v41];
        v43 = &v39[v41];
        *(_QWORD *)v42 = *(_QWORD *)v43;
        v42[8] = v43[8];
        v44 = v12[6];
        v45 = &v38[v44];
        v46 = &v39[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v47 = v12[7];
        v48 = &v38[v47];
        v49 = &v39[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v51 + 56))(v38, 0, 1, v12);
      }
      v29[v31[8]] = v30[v31[8]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v12(v5, v4);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    v11 = v8 + *(int *)(v9 + 28);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    if (v50(&v28[v35], 1, v11))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v39 = v11[5];
      v40 = &v36[v39];
      v41 = &v37[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v11[6];
      v43 = &v36[v42];
      v44 = &v37[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[7];
      v46 = &v36[v45];
      v47 = &v37[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v49 + 56))(v36, 0, 1, v11);
    }
    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v111 = *(_QWORD *)(v6 - 8);
  v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 24);
  v110(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v109 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v110((uint64_t)v8, (uint64_t)v9, v6);
  v49 = v10[5];
  v50 = &v8[v49];
  v51 = &v9[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v10[6];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v10[7];
  v58 = &v8[v57];
  v59 = &v9[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }
    v110((uint64_t)v33, (uint64_t)v34, v6);
    v33[v35[5]] = v34[v35[5]];
    v61 = v35[6];
    v62 = &v33[v61];
    v63 = &v34[v61];
    v64 = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[8] = v64;
    v65 = v35[7];
    v66 = &v34[v65];
    v108 = (uint64_t)&v33[v65];
    v67 = v12();
    v68 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v66, 1, v10);
    if (v67)
    {
      if (!v68)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v108, v66, v6);
        v83 = v10[5];
        v84 = v108 + v83;
        v85 = &v66[v83];
        v86 = v85[8];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v86;
        v87 = v10[6];
        v88 = v108 + v87;
        v89 = &v66[v87];
        v90 = v89[8];
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        v91 = v10[7];
        v92 = v108 + v91;
        v93 = &v66[v91];
        v94 = v93[8];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v109 + 56))(v108, 0, 1, v10);
        goto LABEL_25;
      }
      v69 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v70 = (void *)v108;
    }
    else
    {
      if (!v68)
      {
        v110(v108, (uint64_t)v66, v6);
        v95 = v10[5];
        v96 = v108 + v95;
        v97 = &v66[v95];
        v98 = v97[8];
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        v99 = v10[6];
        v100 = v108 + v99;
        v101 = &v66[v99];
        v102 = v101[8];
        *(_QWORD *)v100 = *(_QWORD *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        v103 = v10[7];
        v104 = v108 + v103;
        v105 = &v66[v103];
        v106 = v105[8];
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v108, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v69 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v70 = (void *)v108;
    }
    memcpy(v70, v66, v69);
LABEL_25:
    v33[v35[8]] = v34[v35[8]];
    return a1;
  }
  if (v39)
  {
LABEL_13:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  v112 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v112(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  v40 = v35[6];
  v41 = &v33[v40];
  v42 = &v34[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  v44 = v35[7];
  v45 = &v33[v44];
  v46 = &v34[v44];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v44], 1, v10))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v112(v45, v46, v6);
    v71 = v10[5];
    v72 = &v45[v71];
    v73 = &v46[v71];
    v74 = v73[8];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v74;
    v75 = v10[6];
    v76 = &v45[v75];
    v77 = &v46[v75];
    v78 = v77[8];
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v76[8] = v78;
    v79 = v10[7];
    v80 = &v45[v79];
    v81 = &v46[v79];
    v82 = v81[8];
    *(_QWORD *)v80 = *(_QWORD *)v81;
    v80[8] = v82;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v109 + 56))(v45, 0, 1, v10);
  }
  v33[v35[8]] = v34[v35[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  unsigned int (*v50)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v50 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v50(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v49 = v12;
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[8] = v34[8];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    if (v50(&v28[v35], 1, v11))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v39 = v11[5];
      v40 = &v36[v39];
      v41 = &v37[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v11[6];
      v43 = &v36[v42];
      v44 = &v37[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[7];
      v46 = &v36[v45];
      v47 = &v37[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v49 + 56))(v36, 0, 1, v11);
    }
    v27[v29[8]] = v28[v29[8]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  size_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v93 = *(_QWORD *)(v6 - 8);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 40);
  v92(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v91 = v11;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v92((uint64_t)v8, (uint64_t)v9, v6);
  v44 = v10[5];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[6];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  v50 = v10[7];
  v51 = &v8[v50];
  v52 = &v9[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v52[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
      goto LABEL_13;
    }
    v92((uint64_t)v29, (uint64_t)v30, v6);
    v29[v31[5]] = v30[v31[5]];
    v53 = v31[6];
    v54 = &v29[v53];
    v55 = &v30[v53];
    v54[8] = v55[8];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v56 = v31[7];
    v57 = &v30[v56];
    v90 = (uint64_t)&v29[v56];
    v58 = v12();
    v59 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v57, 1, v10);
    if (v58)
    {
      if (!v59)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v93 + 32))(v90, v57, v6);
        v71 = v10[5];
        v72 = v90 + v71;
        v73 = &v57[v71];
        *(_QWORD *)v72 = *(_QWORD *)v73;
        *(_BYTE *)(v72 + 8) = v73[8];
        v74 = v10[6];
        v75 = v90 + v74;
        v76 = &v57[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        v77 = v10[7];
        v78 = v90 + v77;
        v79 = &v57[v77];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v91 + 56))(v90, 0, 1, v10);
        goto LABEL_25;
      }
      v60 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v61 = (void *)v90;
    }
    else
    {
      if (!v59)
      {
        v92(v90, (uint64_t)v57, v6);
        v80 = v10[5];
        v81 = v90 + v80;
        v82 = &v57[v80];
        *(_QWORD *)v81 = *(_QWORD *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        v83 = v10[6];
        v84 = v90 + v83;
        v85 = &v57[v83];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        v86 = v10[7];
        v87 = v90 + v86;
        v88 = &v57[v86];
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v90, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v60 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v61 = (void *)v90;
    }
    memcpy(v61, v57, v60);
LABEL_25:
    v29[v31[8]] = v30[v31[8]];
    return a1;
  }
  if (v35)
  {
LABEL_13:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  v94 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  v94(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  v36 = v31[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  v37[8] = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = v31[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v39], 1, v10))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v94(v40, v41, v6);
    v62 = v10[5];
    v63 = &v40[v62];
    v64 = &v41[v62];
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    v65 = v10[6];
    v66 = &v40[v65];
    v67 = &v41[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v10[7];
    v69 = &v40[v68];
    v70 = &v41[v68];
    *(_QWORD *)v69 = *(_QWORD *)v70;
    v69[8] = v70[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v91 + 56))(v40, 0, 1, v10);
  }
  v29[v31[8]] = v30[v31[8]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5B188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateObserver()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5B1A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutSettings(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutSettings(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5B588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5B620(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WorkoutSettings()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapsRouteHintData();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBE)
    goto LABEL_17;
  if (a2 + 66 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 66) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 66;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 66;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 66;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x43;
  v8 = v6 - 67;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 66 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 66) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBD)
    return ((uint64_t (*)(void))((char *)&loc_235A5B82C + 4 * byte_235BBDB01[v4]))();
  *a1 = a2 + 66;
  return ((uint64_t (*)(void))((char *)sub_235A5B860 + 4 * byte_235BBDAFC[v4]))();
}

uint64_t sub_235A5B860(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A5B868(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A5B870);
  return result;
}

uint64_t sub_235A5B87C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A5B884);
  *(_BYTE *)result = a2 + 66;
  return result;
}

uint64_t sub_235A5B888(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A5B890(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WorkoutEvent(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v26 = a3[6];
    v27 = &a1[v26];
    v28 = &a2[v26];
    if (v14(&a2[v26], 1, v12))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v8(v27, v28, v7);
      v30 = v12[5];
      v31 = &v27[v30];
      v32 = &v28[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v12[6];
      v34 = &v27[v33];
      v35 = &v28[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v12[7];
      v37 = &v27[v36];
      v38 = &v28[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v27, 0, 1, v12);
    }
    v39 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v40 = &a1[v39];
    v41 = &a2[v39];
    if (v14(&a2[v39], 1, v12))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v8(v40, v41, v7);
      v43 = v12[5];
      v44 = &v40[v43];
      v45 = &v41[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v46 = v12[6];
      v47 = &v40[v46];
      v48 = &v41[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      v49 = v12[7];
      v50 = &v40[v49];
      v51 = &v41[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v40, 0, 1, v12);
    }
    v52 = a3[9];
    v53 = &a1[v52];
    v54 = &a2[v52];
    v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    v56 = *((_QWORD *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v8(v53, v54, v7);
      v58 = v55[5];
      v59 = &v53[v58];
      v60 = &v54[v58];
      v61 = *((_QWORD *)v60 + 1);
      *(_QWORD *)v59 = *(_QWORD *)v60;
      *((_QWORD *)v59 + 1) = v61;
      v62 = v55[6];
      v63 = &v53[v62];
      v64 = &v54[v62];
      v65 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = v65;
      v53[v55[7]] = v54[v55[7]];
      v53[v55[8]] = v54[v55[8]];
      v53[v55[9]] = v54[v55[9]];
      v66 = *(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v5(v6, v4);
  v9 = a1 + a2[6];
  if (!v8(v9, 1, v7))
    v5(v9, v4);
  v10 = a1 + a2[8];
  if (!v8(v10, 1, v7))
    v5(v10, v4);
  v11 = a1 + a2[9];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
  if (!(_DWORD)result)
  {
    v5(v11, v4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1, v11))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    v28 = v11[5];
    v29 = &v25[v28];
    v30 = &v26[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v11[6];
    v32 = &v25[v31];
    v33 = &v26[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v11[7];
    v35 = &v25[v34];
    v36 = &v26[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v25, 0, 1, v11);
  }
  v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1, v11))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    v41 = v11[5];
    v42 = &v38[v41];
    v43 = &v39[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v11[6];
    v45 = &v38[v44];
    v46 = &v39[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v11[7];
    v48 = &v38[v47];
    v49 = &v39[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v38, 0, 1, v11);
  }
  v50 = a3[9];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    v59 = *((_QWORD *)v58 + 1);
    *(_QWORD *)v57 = *(_QWORD *)v58;
    *((_QWORD *)v57 + 1) = v59;
    v60 = v53[6];
    v61 = &v51[v60];
    v62 = &v52[v60];
    v63 = *((_QWORD *)v62 + 1);
    *(_QWORD *)v61 = *(_QWORD *)v62;
    *((_QWORD *)v61 + 1) = v63;
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    v64 = *(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  uint64_t (*v69)(_BYTE *, uint64_t, int *);
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  void (*v78)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v79;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;

  v6 = type metadata accessor for UnknownStorage();
  v124 = *(_QWORD *)(v6 - 8);
  v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 24);
  v123(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v123((uint64_t)v8, (uint64_t)v9, v6);
  v81 = v10[5];
  v82 = &v8[v81];
  v83 = &v9[v81];
  v84 = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v82[8] = v84;
  v85 = v10[6];
  v86 = &v8[v85];
  v87 = &v9[v85];
  v88 = v87[8];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v86[8] = v88;
  v89 = v10[7];
  v90 = &v8[v89];
  v91 = &v9[v89];
  v92 = v91[8];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v90[8] = v92;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = v12((char *)(a1 + v28), 1, v10);
  v32 = v12(v30, 1, v10);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v29, v30, v6);
      v33 = v10[5];
      v34 = &v29[v33];
      v35 = &v30[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v36;
      v37 = v10[6];
      v38 = &v29[v37];
      v39 = &v30[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v40;
      v41 = v10[7];
      v42 = &v29[v41];
      v43 = &v30[v41];
      v44 = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v44;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v29, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_13;
  }
  v123((uint64_t)v29, (uint64_t)v30, v6);
  v93 = v10[5];
  v94 = &v29[v93];
  v95 = &v30[v93];
  v96 = v95[8];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v94[8] = v96;
  v97 = v10[6];
  v98 = &v29[v97];
  v99 = &v30[v97];
  v100 = v99[8];
  *(_QWORD *)v98 = *(_QWORD *)v99;
  v98[8] = v100;
  v101 = v10[7];
  v102 = &v29[v101];
  v103 = &v30[v101];
  v104 = v103[8];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v102[8] = v104;
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  v49 = v12((char *)(a1 + v46), 1, v10);
  v50 = v12(v48, 1, v10);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v47, v48, v6);
      v51 = v10[5];
      v52 = &v47[v51];
      v53 = &v48[v51];
      v54 = v53[8];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v54;
      v55 = v10[6];
      v56 = &v47[v55];
      v57 = &v48[v55];
      v58 = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v58;
      v59 = v10[7];
      v60 = &v47[v59];
      v61 = &v48[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v62;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v47, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v50)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v47, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_19;
  }
  v123((uint64_t)v47, (uint64_t)v48, v6);
  v105 = v10[5];
  v106 = &v47[v105];
  v107 = &v48[v105];
  v108 = v107[8];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v106[8] = v108;
  v109 = v10[6];
  v110 = &v47[v109];
  v111 = &v48[v109];
  v112 = v111[8];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v112;
  v113 = v10[7];
  v114 = &v47[v113];
  v115 = &v48[v113];
  v116 = v115[8];
  *(_QWORD *)v114 = *(_QWORD *)v115;
  v114[8] = v116;
LABEL_19:
  v64 = a3[9];
  v65 = (_BYTE *)(a1 + v64);
  v66 = (_BYTE *)(a2 + v64);
  v67 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v68 = *((_QWORD *)v67 - 1);
  v69 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (!v71)
    {
      v123((uint64_t)v65, (uint64_t)v66, v6);
      v117 = v67[5];
      v118 = &v65[v117];
      v119 = &v66[v117];
      *v118 = *v119;
      v118[1] = v119[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v120 = v67[6];
      v121 = &v65[v120];
      v122 = &v66[v120];
      *v121 = *v122;
      v121[1] = v122[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v65[v67[7]] = v66[v67[7]];
      v65[v67[8]] = v66[v67[8]];
      v65[v67[9]] = v66[v67[9]];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v65, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v71)
  {
LABEL_24:
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v124 + 16))(v65, v66, v6);
  v72 = v67[5];
  v73 = &v65[v72];
  v74 = &v66[v72];
  *v73 = *v74;
  v73[1] = v74[1];
  v75 = v67[6];
  v76 = &v65[v75];
  v77 = &v66[v75];
  *v76 = *v77;
  v76[1] = v77[1];
  v65[v67[7]] = v66[v67[7]];
  v65[v67[8]] = v66[v67[8]];
  v65[v67[9]] = v66[v67[9]];
  v78 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v68 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78(v65, 0, 1, v67);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  if (v13((char *)(a2 + v24), 1, v11))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v25, (uint64_t)v26, v6);
    v28 = v11[5];
    v29 = &v25[v28];
    v30 = &v26[v28];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v11[6];
    v32 = &v25[v31];
    v33 = &v26[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v11[7];
    v35 = &v25[v34];
    v36 = &v26[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v25, 0, 1, v11);
  }
  v37 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  if (v13((char *)(a2 + v37), 1, v11))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v38, (uint64_t)v39, v6);
    v41 = v11[5];
    v42 = &v38[v41];
    v43 = &v39[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v11[6];
    v45 = &v38[v44];
    v46 = &v39[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v11[7];
    v48 = &v38[v47];
    v49 = &v39[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v38, 0, 1, v11);
  }
  v50 = a3[9];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    *(_OWORD *)&v51[v53[5]] = *(_OWORD *)&v52[v53[5]];
    *(_OWORD *)&v51[v53[6]] = *(_OWORD *)&v52[v53[6]];
    v51[v53[7]] = v52[v53[7]];
    v51[v53[8]] = v52[v53[8]];
    v51[v53[9]] = v52[v53[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WorkoutEvent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  int *v58;
  uint64_t v59;
  uint64_t (*v60)(_BYTE *, uint64_t, int *);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;

  v6 = type metadata accessor for UnknownStorage();
  v103 = *(_QWORD *)(v6 - 8);
  v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 40);
  v102(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v102((uint64_t)v8, (uint64_t)v9, v6);
  v65 = v10[5];
  v66 = &v8[v65];
  v67 = &v9[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v10[6];
  v69 = &v8[v68];
  v70 = &v9[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v70[8];
  v71 = v10[7];
  v72 = &v8[v71];
  v73 = &v9[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = v12((char *)(a1 + v25), 1, v10);
  v29 = v12(v27, 1, v10);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v26, v27, v6);
      v30 = v10[5];
      v31 = &v26[v30];
      v32 = &v27[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v10[6];
      v34 = &v26[v33];
      v35 = &v27[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v10[7];
      v37 = &v26[v36];
      v38 = &v27[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v26, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  v102((uint64_t)v26, (uint64_t)v27, v6);
  v74 = v10[5];
  v75 = &v26[v74];
  v76 = &v27[v74];
  *(_QWORD *)v75 = *(_QWORD *)v76;
  v75[8] = v76[8];
  v77 = v10[6];
  v78 = &v26[v77];
  v79 = &v27[v77];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v78[8] = v79[8];
  v80 = v10[7];
  v81 = &v26[v80];
  v82 = &v27[v80];
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v81[8] = v82[8];
LABEL_13:
  v40 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v41 = (char *)(a1 + v40);
  v42 = (char *)(a2 + v40);
  v43 = v12((char *)(a1 + v40), 1, v10);
  v44 = v12(v42, 1, v10);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v41, v42, v6);
      v45 = v10[5];
      v46 = &v41[v45];
      v47 = &v42[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v10[6];
      v49 = &v41[v48];
      v50 = &v42[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v10[7];
      v52 = &v41[v51];
      v53 = &v42[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v41, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v44)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_18:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  v102((uint64_t)v41, (uint64_t)v42, v6);
  v83 = v10[5];
  v84 = &v41[v83];
  v85 = &v42[v83];
  *(_QWORD *)v84 = *(_QWORD *)v85;
  v84[8] = v85[8];
  v86 = v10[6];
  v87 = &v41[v86];
  v88 = &v42[v86];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v88[8];
  v89 = v10[7];
  v90 = &v41[v89];
  v91 = &v42[v89];
  *(_QWORD *)v90 = *(_QWORD *)v91;
  v90[8] = v91[8];
LABEL_19:
  v55 = a3[9];
  v56 = (_BYTE *)(a1 + v55);
  v57 = (_BYTE *)(a2 + v55);
  v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v59 = *((_QWORD *)v58 - 1);
  v60 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      v102((uint64_t)v56, (uint64_t)v57, v6);
      v92 = v58[5];
      v93 = &v56[v92];
      v94 = (uint64_t *)&v57[v92];
      v96 = *v94;
      v95 = v94[1];
      *v93 = v96;
      v93[1] = v95;
      swift_bridgeObjectRelease();
      v97 = v58[6];
      v98 = &v56[v97];
      v99 = (uint64_t *)&v57[v97];
      v101 = *v99;
      v100 = v99[1];
      *v98 = v101;
      v98[1] = v100;
      swift_bridgeObjectRelease();
      v56[v58[7]] = v57[v58[7]];
      v56[v58[8]] = v57[v58[8]];
      v56[v58[9]] = v57[v58[9]];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
    goto LABEL_24;
  }
  if (v62)
  {
LABEL_24:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v103 + 32))(v56, v57, v6);
  *(_OWORD *)&v56[v58[5]] = *(_OWORD *)&v57[v58[5]];
  *(_OWORD *)&v56[v58[6]] = *(_OWORD *)&v57[v58[6]];
  v56[v58[7]] = v57[v58[7]];
  v56[v58[8]] = v57[v58[8]];
  v56[v58[9]] = v57[v58[9]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5D1A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 236)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if (*(unsigned __int8 *)(a1 + a3[7]) <= 0x13u)
    v13 = 19;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[7]);
  v14 = v13 - 19;
  if (*(unsigned __int8 *)(a1 + a3[7]) >= 0x13u)
    return v14;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5D288(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 236)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 19;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WorkoutEvent()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WorkoutEvent.EventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_235A5D4FC + 4 * byte_235BBDB0B[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_235A5D530 + 4 * byte_235BBDB06[v4]))();
}

uint64_t sub_235A5D530(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A5D538(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A5D540);
  return result;
}

uint64_t sub_235A5D54C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A5D554);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_235A5D558(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A5D560(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WorkoutEvent.EventType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionStateMediator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_BodyMetrics(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[4] = v10[4];
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = a3[9];
    v18 = a3[10];
    v19 = (char *)a1 + v17;
    v20 = (char *)a2 + v17;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = (char *)a1 + v18;
    v22 = (char *)a2 + v18;
    LODWORD(v19) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v19;
    v23 = a3[11];
    v24 = a3[12];
    v25 = (char *)a1 + v23;
    v26 = (char *)a2 + v23;
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v25[4] = v26[4];
    v27 = (char *)a1 + v24;
    v28 = (char *)a2 + v24;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = a3[13];
    v30 = a3[14];
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
    v33 = a3[15];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  v27 = a3[11];
  v28 = a1 + v27;
  v29 = (int *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 4) = *((_BYTE *)v29 + 4);
  *(_DWORD *)v28 = v30;
  v31 = a3[12];
  v32 = a1 + v31;
  v33 = (int *)(a2 + v31);
  v34 = *v33;
  *(_BYTE *)(v32 + 4) = *((_BYTE *)v33 + 4);
  *(_DWORD *)v32 = v34;
  v35 = a3[13];
  v36 = a1 + v35;
  v37 = (int *)(a2 + v35);
  v38 = *v37;
  *(_BYTE *)(v36 + 4) = *((_BYTE *)v37 + 4);
  *(_DWORD *)v36 = v38;
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v39 = a3[15];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LOBYTE(v38) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v38;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_BodyMetrics(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a3[9];
  v17 = a3[10];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a1 + v17;
  v21 = a2 + v17;
  LODWORD(v18) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v18;
  v22 = a3[11];
  v23 = a3[12];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  v26 = a1 + v23;
  v27 = a2 + v23;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = a3[13];
  v29 = a3[14];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v32 = a3[15];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BodyMetrics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5DC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BodyMetrics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5DD08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_BodyMetrics()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  return &type metadata for CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Natalimetry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[v31[5]] = v30[v31[5]];
      v34 = v31[6];
      v35 = &v29[v34];
      v36 = &v30[v34];
      v35[4] = v36[4];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v37 = v31[7];
      v38 = &v29[v37];
      v39 = &v30[v37];
      v38[4] = v39[4];
      *(_DWORD *)v38 = *(_DWORD *)v39;
      v40 = v31[8];
      v41 = &v29[v40];
      v42 = &v30[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v43 = v31[9];
      v44 = &v29[v43];
      v45 = &v30[v43];
      v44[4] = v45[4];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v46 = v31[10];
      v47 = &v29[v46];
      v48 = &v30[v46];
      v47[4] = v48[4];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v49 = v31[11];
      v50 = &v29[v49];
      v51 = &v30[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v31[12];
      v53 = &v29[v52];
      v54 = &v30[v52];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      v55 = v31[13];
      v56 = &v29[v55];
      v57 = &v30[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v29[v31[14]] = v30[v31[14]];
      v58 = v31[15];
      v59 = &v29[v58];
      v60 = &v30[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v10(v5, v4);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v41 = v29[9];
    v42 = &v27[v41];
    v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v44 = v29[10];
    v45 = &v27[v44];
    v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v47 = v29[11];
    v48 = &v27[v47];
    v49 = &v28[v47];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    v50 = v29[12];
    v51 = &v27[v50];
    v52 = &v28[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    v53 = v29[13];
    v54 = &v27[v53];
    v55 = &v28[v53];
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    v56 = v29[15];
    v57 = &v27[v56];
    v58 = &v28[v56];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v77;
  char *v78;
  char *v79;
  char v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  int v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int v116;
  uint64_t v117;
  char *v118;
  char *v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;

  v6 = type metadata accessor for UnknownStorage();
  v125 = *(_QWORD *)(v6 - 8);
  v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 24);
  v124(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v124((uint64_t)v8, (uint64_t)v9, v6);
  v77 = v10[5];
  v78 = &v8[v77];
  v79 = &v9[v77];
  v80 = v79[8];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v78[8] = v80;
  v81 = v10[6];
  v82 = &v8[v81];
  v83 = &v9[v81];
  v84 = v83[8];
  *(_QWORD *)v82 = *(_QWORD *)v83;
  v82[8] = v84;
  v85 = v10[7];
  v86 = &v8[v85];
  v87 = &v9[v85];
  v88 = v87[8];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v86[8] = v88;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      v124((uint64_t)v33, (uint64_t)v34, v6);
      v33[v35[5]] = v34[v35[5]];
      v89 = v35[6];
      v90 = &v33[v89];
      v91 = &v34[v89];
      v92 = v91[4];
      *(_DWORD *)v90 = *(_DWORD *)v91;
      v90[4] = v92;
      v93 = v35[7];
      v94 = &v33[v93];
      v95 = &v34[v93];
      v96 = v95[4];
      *(_DWORD *)v94 = *(_DWORD *)v95;
      v94[4] = v96;
      v97 = v35[8];
      v98 = &v33[v97];
      v99 = &v34[v97];
      v100 = v99[4];
      *(_DWORD *)v98 = *(_DWORD *)v99;
      v98[4] = v100;
      v101 = v35[9];
      v102 = &v33[v101];
      v103 = &v34[v101];
      v104 = v103[4];
      *(_DWORD *)v102 = *(_DWORD *)v103;
      v102[4] = v104;
      v105 = v35[10];
      v106 = &v33[v105];
      v107 = &v34[v105];
      v108 = v107[4];
      *(_DWORD *)v106 = *(_DWORD *)v107;
      v106[4] = v108;
      v109 = v35[11];
      v110 = &v33[v109];
      v111 = &v34[v109];
      v112 = *(_DWORD *)v111;
      v110[4] = v111[4];
      *(_DWORD *)v110 = v112;
      v113 = v35[12];
      v114 = &v33[v113];
      v115 = &v34[v113];
      v116 = *(_DWORD *)v115;
      v114[4] = v115[4];
      *(_DWORD *)v114 = v116;
      v117 = v35[13];
      v118 = &v33[v117];
      v119 = &v34[v117];
      v120 = *(_DWORD *)v119;
      v118[4] = v119[4];
      *(_DWORD *)v118 = v120;
      v33[v35[14]] = v34[v35[14]];
      v121 = v35[15];
      v122 = &v33[v121];
      v123 = &v34[v121];
      LOBYTE(v120) = v123[4];
      *(_DWORD *)v122 = *(_DWORD *)v123;
      v122[4] = v120;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 16))(v33, v34, v6);
  v33[v35[5]] = v34[v35[5]];
  v40 = v35[6];
  v41 = &v33[v40];
  v42 = &v34[v40];
  v43 = v42[4];
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v41[4] = v43;
  v44 = v35[7];
  v45 = &v33[v44];
  v46 = &v34[v44];
  v47 = v46[4];
  *(_DWORD *)v45 = *(_DWORD *)v46;
  v45[4] = v47;
  v48 = v35[8];
  v49 = &v33[v48];
  v50 = &v34[v48];
  v51 = v50[4];
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v49[4] = v51;
  v52 = v35[9];
  v53 = &v33[v52];
  v54 = &v34[v52];
  v55 = v54[4];
  *(_DWORD *)v53 = *(_DWORD *)v54;
  v53[4] = v55;
  v56 = v35[10];
  v57 = &v33[v56];
  v58 = &v34[v56];
  v59 = v58[4];
  *(_DWORD *)v57 = *(_DWORD *)v58;
  v57[4] = v59;
  v60 = v35[11];
  v61 = &v33[v60];
  v62 = &v34[v60];
  v63 = *(_DWORD *)v62;
  v61[4] = v62[4];
  *(_DWORD *)v61 = v63;
  v64 = v35[12];
  v65 = &v33[v64];
  v66 = &v34[v64];
  v67 = *(_DWORD *)v66;
  v65[4] = v66[4];
  *(_DWORD *)v65 = v67;
  v68 = v35[13];
  v69 = &v33[v68];
  v70 = &v34[v68];
  v71 = *(_DWORD *)v70;
  v69[4] = v70[4];
  *(_DWORD *)v69 = v71;
  v33[v35[14]] = v34[v35[14]];
  v72 = v35[15];
  v73 = &v33[v72];
  v74 = &v34[v72];
  LOBYTE(v71) = v74[4];
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v73[4] = v71;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (char *)(a1 + v24);
  v28 = (char *)(a2 + v24);
  v29 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v27[v29[5]] = v28[v29[5]];
    v32 = v29[6];
    v33 = &v27[v32];
    v34 = &v28[v32];
    v33[4] = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v35 = v29[7];
    v36 = &v27[v35];
    v37 = &v28[v35];
    v36[4] = v37[4];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v39[4] = v40[4];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v41 = v29[9];
    v42 = &v27[v41];
    v43 = &v28[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v44 = v29[10];
    v45 = &v27[v44];
    v46 = &v28[v44];
    v45[4] = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v47 = v29[11];
    v48 = &v27[v47];
    v49 = &v28[v47];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    v50 = v29[12];
    v51 = &v27[v50];
    v52 = &v28[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    v53 = v29[13];
    v54 = &v27[v53];
    v55 = &v28[v53];
    *(_DWORD *)v54 = *(_DWORD *)v55;
    v54[4] = v55[4];
    v27[v29[14]] = v28[v29[14]];
    v56 = v29[15];
    v57 = &v27[v56];
    v58 = &v28[v56];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v58[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;

  v6 = type metadata accessor for UnknownStorage();
  v102 = *(_QWORD *)(v6 - 8);
  v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 40);
  v101(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v101((uint64_t)v8, (uint64_t)v9, v6);
  v65 = v10[5];
  v66 = &v8[v65];
  v67 = &v9[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v10[6];
  v69 = &v8[v68];
  v70 = &v9[v68];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v70[8];
  v71 = v10[7];
  v72 = &v8[v71];
  v73 = &v9[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v101((uint64_t)v29, (uint64_t)v30, v6);
      v29[v31[5]] = v30[v31[5]];
      v74 = v31[6];
      v75 = &v29[v74];
      v76 = &v30[v74];
      v75[4] = v76[4];
      *(_DWORD *)v75 = *(_DWORD *)v76;
      v77 = v31[7];
      v78 = &v29[v77];
      v79 = &v30[v77];
      v78[4] = v79[4];
      *(_DWORD *)v78 = *(_DWORD *)v79;
      v80 = v31[8];
      v81 = &v29[v80];
      v82 = &v30[v80];
      v81[4] = v82[4];
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v83 = v31[9];
      v84 = &v29[v83];
      v85 = &v30[v83];
      v84[4] = v85[4];
      *(_DWORD *)v84 = *(_DWORD *)v85;
      v86 = v31[10];
      v87 = &v29[v86];
      v88 = &v30[v86];
      v87[4] = v88[4];
      *(_DWORD *)v87 = *(_DWORD *)v88;
      v89 = v31[11];
      v90 = &v29[v89];
      v91 = &v30[v89];
      *(_DWORD *)v90 = *(_DWORD *)v91;
      v90[4] = v91[4];
      v92 = v31[12];
      v93 = &v29[v92];
      v94 = &v30[v92];
      *(_DWORD *)v93 = *(_DWORD *)v94;
      v93[4] = v94[4];
      v95 = v31[13];
      v96 = &v29[v95];
      v97 = &v30[v95];
      *(_DWORD *)v96 = *(_DWORD *)v97;
      v96[4] = v97[4];
      v29[v31[14]] = v30[v31[14]];
      v98 = v31[15];
      v99 = &v29[v98];
      v100 = &v30[v98];
      *(_DWORD *)v99 = *(_DWORD *)v100;
      v99[4] = v100[4];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v102 + 32))(v29, v30, v6);
  v29[v31[5]] = v30[v31[5]];
  v36 = v31[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  v37[4] = v38[4];
  *(_DWORD *)v37 = *(_DWORD *)v38;
  v39 = v31[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  v40[4] = v41[4];
  *(_DWORD *)v40 = *(_DWORD *)v41;
  v42 = v31[8];
  v43 = &v29[v42];
  v44 = &v30[v42];
  v43[4] = v44[4];
  *(_DWORD *)v43 = *(_DWORD *)v44;
  v45 = v31[9];
  v46 = &v29[v45];
  v47 = &v30[v45];
  v46[4] = v47[4];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v48 = v31[10];
  v49 = &v29[v48];
  v50 = &v30[v48];
  v49[4] = v50[4];
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v51 = v31[11];
  v52 = &v29[v51];
  v53 = &v30[v51];
  *(_DWORD *)v52 = *(_DWORD *)v53;
  v52[4] = v53[4];
  v54 = v31[12];
  v55 = &v29[v54];
  v56 = &v30[v54];
  *(_DWORD *)v55 = *(_DWORD *)v56;
  v55[4] = v56[4];
  v57 = v31[13];
  v58 = &v29[v57];
  v59 = &v30[v57];
  *(_DWORD *)v58 = *(_DWORD *)v59;
  v58[4] = v59[4];
  v29[v31[14]] = v30[v31[14]];
  v60 = v31[15];
  v61 = &v29[v60];
  v62 = &v30[v60];
  *(_DWORD *)v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Natalimetry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5F208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Natalimetry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5F220(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Natalimetry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Timer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5F260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Timer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5F278(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_Timer(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = (char *)a1 + v31;
    v34 = (char *)a2 + v31;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = (char *)a1 + v32;
    v36 = (char *)a2 + v32;
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
    v37 = a3[10];
    v38 = a3[11];
    v39 = (char *)a1 + v37;
    v40 = (char *)a2 + v37;
    v41 = *(_DWORD *)v40;
    v39[4] = v40[4];
    *(_DWORD *)v39 = v41;
    v42 = (char *)a1 + v38;
    v43 = (char *)a2 + v38;
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = (int *)(a2 + v35);
  v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)v37 = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v62 = *((_QWORD *)v12 - 1);
  v63 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v62 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v63, v11, v6);
      v17 = v12[5];
      v18 = v63 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v63 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v63 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v62 + 56))(v63, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v63;
  }
  else
  {
    if (!v14)
    {
      v8(v63, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v63 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v63 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v63 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v63;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = a2 + v49;
  LODWORD(v48) = *(_DWORD *)v51;
  *(_BYTE *)(v50 + 4) = *(_BYTE *)(v51 + 4);
  *(_DWORD *)v50 = v48;
  v52 = a3[9];
  v53 = a1 + v52;
  v54 = a2 + v52;
  LODWORD(v48) = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  *(_DWORD *)v53 = v48;
  v55 = a3[10];
  v56 = a1 + v55;
  v57 = a2 + v55;
  LODWORD(v48) = *(_DWORD *)v57;
  *(_BYTE *)(v56 + 4) = *(_BYTE *)(v57 + 4);
  *(_DWORD *)v56 = v48;
  v58 = a3[11];
  v59 = a1 + v58;
  v60 = a2 + v58;
  LODWORD(v48) = *(_DWORD *)v60;
  *(_BYTE *)(v59 + 4) = *(_BYTE *)(v60 + 4);
  *(_DWORD *)v59 = v48;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = (int *)(a2 + v35);
  v39 = *v38;
  *(_BYTE *)(v37 + 4) = *((_BYTE *)v38 + 4);
  *(_DWORD *)v37 = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DigitalElevationModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v55 = *((_QWORD *)v12 - 1);
  v56 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v55 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v56, v11, v6);
      v17 = v12[5];
      v18 = v56 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v56 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v56 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v55 + 56))(v56, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v56;
  }
  else
  {
    if (!v14)
    {
      v8(v56, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v56 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v56 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v56 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v56;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_DWORD *)v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_DWORD *)v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  v47 = a3[10];
  v48 = a3[11];
  v49 = a1 + v47;
  v50 = (int *)(a2 + v47);
  v51 = *v50;
  *(_BYTE *)(v49 + 4) = *((_BYTE *)v50 + 4);
  *(_DWORD *)v49 = v51;
  v52 = a1 + v48;
  v53 = a2 + v48;
  *(_BYTE *)(v52 + 4) = *(_BYTE *)(v53 + 4);
  *(_DWORD *)v52 = *(_DWORD *)v53;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5FDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A5FDE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DigitalElevationModel()
{
  type metadata completion function for CLP_LogEntry_PrivateData_DigitalElevationModel();
}

{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DirectionOfTravel(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = &a1[v25];
    v28 = &a2[v25];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = &a1[v26];
    v30 = &a2[v26];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = &a1[v31];
    v34 = &a2[v31];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = &a1[v32];
    v36 = &a2[v32];
    v35[8] = v36[8];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v37 = a3[10];
    v38 = a3[11];
    v39 = &a1[v37];
    v40 = &a2[v37];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = &a1[v38];
    v42 = &a2[v38];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = a3[12];
    v44 = a3[13];
    v45 = &a1[v43];
    v46 = &a2[v43];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = &a1[v44];
    v48 = &a2[v44];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = a3[14];
    v50 = a3[15];
    v51 = &a1[v49];
    v52 = &a2[v49];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    a1[v50] = a2[v50];
    v53 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    a1[v53] = a2[v53];
    a1[a3[18]] = a2[a3[18]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[12];
  v42 = a3[13];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = a3[14];
  v48 = a3[15];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v78 = *((_QWORD *)v12 - 1);
  v79 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v78 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v79, v11, v6);
      v17 = v12[5];
      v18 = v79 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v79 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v79 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v78 + 56))(v79, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v79;
  }
  else
  {
    if (!v14)
    {
      v8(v79, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v79 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v79 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v79 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v79, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v79;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  v53 = a3[9];
  v54 = a1 + v53;
  v55 = (uint64_t *)(a2 + v53);
  v56 = *v55;
  *(_BYTE *)(v54 + 8) = *((_BYTE *)v55 + 8);
  *(_QWORD *)v54 = v56;
  v57 = a3[10];
  v58 = a1 + v57;
  v59 = (uint64_t *)(a2 + v57);
  v60 = *v59;
  *(_BYTE *)(v58 + 8) = *((_BYTE *)v59 + 8);
  *(_QWORD *)v58 = v60;
  v61 = a3[11];
  v62 = a1 + v61;
  v63 = (uint64_t *)(a2 + v61);
  v64 = *v63;
  *(_BYTE *)(v62 + 8) = *((_BYTE *)v63 + 8);
  *(_QWORD *)v62 = v64;
  v65 = a3[12];
  v66 = a1 + v65;
  v67 = (uint64_t *)(a2 + v65);
  v68 = *v67;
  *(_BYTE *)(v66 + 8) = *((_BYTE *)v67 + 8);
  *(_QWORD *)v66 = v68;
  v69 = a3[13];
  v70 = a1 + v69;
  v71 = (uint64_t *)(a2 + v69);
  v72 = *v71;
  *(_BYTE *)(v70 + 8) = *((_BYTE *)v71 + 8);
  *(_QWORD *)v70 = v72;
  v73 = a3[14];
  v74 = a1 + v73;
  v75 = (uint64_t *)(a2 + v73);
  v76 = *v75;
  *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
  *(_QWORD *)v74 = v76;
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_BYTE *)(v33 + 8) = *(_BYTE *)(v34 + 8);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v35 = a3[10];
  v36 = a3[11];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[12];
  v42 = a3[13];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  v47 = a3[14];
  v48 = a3[15];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_BYTE *)(a1 + v48) = *(_BYTE *)(a2 + v48);
  v51 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DirectionOfTravel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v65 = *((_QWORD *)v12 - 1);
  v66 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v65 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v66, v11, v6);
      v17 = v12[5];
      v18 = v66 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v66 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v66 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v65 + 56))(v66, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v66;
  }
  else
  {
    if (!v14)
    {
      v8(v66, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v66 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v66 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v66 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v66;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = a3[10];
  v48 = a3[11];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  v51 = a1 + v48;
  v52 = a2 + v48;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  v53 = a3[12];
  v54 = a3[13];
  v55 = a1 + v53;
  v56 = a2 + v53;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  v57 = a1 + v54;
  v58 = a2 + v54;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  v59 = a3[14];
  v60 = a3[15];
  v61 = a1 + v59;
  v62 = a2 + v59;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  *(_BYTE *)(a1 + v60) = *(_BYTE *)(a2 + v60);
  v63 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v63) = *(_BYTE *)(a2 + v63);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A60BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 60));
  if (v14 >= 2)
    v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v15 = -2;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A60C7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 60)) = a2 + 2;
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_DirectionOfTravel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapVector()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapVector()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = &a1[v25];
    v28 = &a2[v25];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = &a1[v26];
    v30 = &a2[v26];
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = a3[8];
    v32 = a3[9];
    v33 = &a1[v31];
    v34 = &a2[v31];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    a1[v32] = a2[v32];
    v35 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v35] = a2[v35];
    a1[a3[12]] = a2[a3[12]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v54 = *((_QWORD *)v12 - 1);
  v55 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v54 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v55, v11, v6);
      v17 = v12[5];
      v18 = v55 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v55 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v55 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v54 + 56))(v55, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v55;
  }
  else
  {
    if (!v14)
    {
      v8(v55, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v55 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v55 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v55 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v55, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v55;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = (uint64_t *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 8) = *((_BYTE *)v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = (uint64_t *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 8) = *((_BYTE *)v47 + 8);
  *(_QWORD *)v46 = v48;
  v49 = a3[8];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[8];
  v30 = a3[9];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v47 = *((_QWORD *)v12 - 1);
  v48 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v47 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v48, v11, v6);
      v17 = v12[5];
      v18 = v48 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v48 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v48 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v48, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v48;
  }
  else
  {
    if (!v14)
    {
      v8(v48, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v48 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v48 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v48 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v48;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[6];
  v36 = a3[7];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  v39 = a1 + v36;
  v40 = a2 + v36;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = a3[8];
  v42 = a3[9];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  v45 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelBridgeAssistance()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, int *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v58;
  uint64_t v59;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v14 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v26 = a3[6];
    v27 = a3[7];
    v28 = (char *)a1 + v26;
    v29 = (char *)a2 + v26;
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v30 = (char *)a1 + v27;
    v31 = (char *)a2 + v27;
    v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v58 = v13;
      v59 = v33;
      v8((uint64_t *)v30, (uint64_t *)v31, v7);
      v35 = v32[5];
      v36 = &v30[v35];
      v37 = &v31[v35];
      if (v14(&v31[v35], 1, v12))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v36, (uint64_t *)v37, v7);
        v39 = v12[5];
        v40 = &v36[v39];
        v41 = &v37[v39];
        *(_QWORD *)v40 = *(_QWORD *)v41;
        v40[8] = v41[8];
        v42 = v12[6];
        v43 = &v36[v42];
        v44 = &v37[v42];
        *(_QWORD *)v43 = *(_QWORD *)v44;
        v43[8] = v44[8];
        v45 = v12[7];
        v46 = &v36[v45];
        v47 = &v37[v45];
        *(_QWORD *)v46 = *(_QWORD *)v47;
        v46[8] = v47[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v58 + 56))(v36, 0, 1, v12);
      }
      v48 = v32[6];
      v49 = &v30[v48];
      v50 = &v31[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v32[7];
      v52 = &v30[v51];
      v53 = &v31[v51];
      v52[8] = v53[8];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v54 = v32[8];
      v55 = &v30[v54];
      v56 = &v31[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v56[8];
      v30[v32[9]] = v31[v32[9]];
      v30[v32[10]] = v31[v32[10]];
      v30[v32[11]] = v31[v32[11]];
      v30[v32[12]] = v31[v32[12]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v30, 0, 1, v32);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v12(v5, v4);
  v8 = a1 + *(int *)(a2 + 28);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v12(v8, v4);
    v11 = v8 + *(int *)(v9 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v11, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = a3[7];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = (char *)(a1 + v25);
  v29 = (char *)(a2 + v25);
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v56 = v12;
    v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v33 = v30[5];
    v34 = &v28[v33];
    v35 = &v29[v33];
    if (v13(&v29[v33], 1, v11))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      v37 = v11[5];
      v38 = &v34[v37];
      v39 = &v35[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v11[6];
      v41 = &v34[v40];
      v42 = &v35[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v11[7];
      v44 = &v34[v43];
      v45 = &v35[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v34, 0, 1, v11);
    }
    v46 = v30[6];
    v47 = &v28[v46];
    v48 = &v29[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v30[7];
    v50 = &v28[v49];
    v51 = &v29[v49];
    v50[8] = v51[8];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v52 = v30[8];
    v53 = &v28[v52];
    v54 = &v29[v52];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t, int *);
  int v38;
  int v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  _QWORD *__dst;
  char *__dsta;

  v6 = type metadata accessor for UnknownStorage();
  __dst = *(_QWORD **)(v6 - 8);
  v126 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[3];
  v126(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v125 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[2])(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v126((uint64_t)v8, (uint64_t)v9, v6);
  v45 = v10[5];
  v46 = &v8[v45];
  v47 = &v9[v45];
  v48 = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v48;
  v49 = v10[6];
  v50 = &v8[v49];
  v51 = &v9[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v10[7];
  v54 = &v8[v53];
  v55 = &v9[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
LABEL_7:
  v28 = a3[6];
  v29 = a1 + v28;
  v30 = (int *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 4) = *((_BYTE *)v30 + 4);
  *(_DWORD *)v29 = v31;
  v32 = a3[7];
  v33 = (_BYTE *)(a1 + v32);
  v34 = (_BYTE *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v36 = *((_QWORD *)v35 - 1);
  v37 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }
    v126((uint64_t)v33, (uint64_t)v34, v6);
    v57 = v35[5];
    v58 = &v34[v57];
    v124 = (uint64_t)&v33[v57];
    v59 = v12();
    v60 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v58, 1, v10);
    if (v59)
    {
      if (!v60)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v124, v58, v6);
        v87 = v10[5];
        v88 = v124 + v87;
        v89 = &v58[v87];
        v90 = v89[8];
        *(_QWORD *)v88 = *(_QWORD *)v89;
        *(_BYTE *)(v88 + 8) = v90;
        v91 = v10[6];
        v92 = v124 + v91;
        v93 = &v58[v91];
        v94 = v93[8];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *(_BYTE *)(v92 + 8) = v94;
        v95 = v10[7];
        v96 = v124 + v95;
        v97 = &v58[v95];
        v98 = v97[8];
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *(_BYTE *)(v96 + 8) = v98;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v125 + 56))(v124, 0, 1, v10);
        goto LABEL_25;
      }
      v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v62 = (void *)v124;
    }
    else
    {
      if (!v60)
      {
        v126(v124, (uint64_t)v58, v6);
        v99 = v10[5];
        v100 = v124 + v99;
        v101 = &v58[v99];
        v102 = v101[8];
        *(_QWORD *)v100 = *(_QWORD *)v101;
        *(_BYTE *)(v100 + 8) = v102;
        v103 = v10[6];
        v104 = v124 + v103;
        v105 = &v58[v103];
        v106 = v105[8];
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *(_BYTE *)(v104 + 8) = v106;
        v107 = v10[7];
        v108 = v124 + v107;
        v109 = &v58[v107];
        v110 = v109[8];
        *(_QWORD *)v108 = *(_QWORD *)v109;
        *(_BYTE *)(v108 + 8) = v110;
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v124, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v61 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v62 = (void *)v124;
    }
    memcpy(v62, v58, v61);
LABEL_25:
    v111 = v35[6];
    v112 = &v33[v111];
    v113 = &v34[v111];
    v114 = *(_QWORD *)v113;
    v112[8] = v113[8];
    *(_QWORD *)v112 = v114;
    v115 = v35[7];
    v116 = &v33[v115];
    v117 = &v34[v115];
    v118 = *(_QWORD *)v117;
    v116[8] = v117[8];
    *(_QWORD *)v116 = v118;
    v119 = v35[8];
    v120 = &v33[v119];
    v121 = &v34[v119];
    v122 = *(_QWORD *)v121;
    v120[8] = v121[8];
    *(_QWORD *)v120 = v122;
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    v33[v35[12]] = v34[v35[12]];
    return a1;
  }
  if (v39)
  {
LABEL_13:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  v40 = (void (*)(char *, char *, uint64_t))__dst[2];
  v40(v33, v34, v6);
  v41 = v35[5];
  __dsta = &v33[v41];
  v42 = &v34[v41];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v34[v41], 1, v10))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(__dsta, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v40(__dsta, v42, v6);
    v63 = v10[5];
    v64 = &__dsta[v63];
    v65 = &v42[v63];
    v66 = v65[8];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v66;
    v67 = v10[6];
    v68 = &__dsta[v67];
    v69 = &v42[v67];
    v70 = v69[8];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v70;
    v71 = v10[7];
    v72 = &__dsta[v71];
    v73 = &v42[v71];
    v74 = v73[8];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v74;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v125 + 56))(__dsta, 0, 1, v10);
  }
  v75 = v35[6];
  v76 = &v33[v75];
  v77 = &v34[v75];
  v78 = *(_QWORD *)v77;
  v76[8] = v77[8];
  *(_QWORD *)v76 = v78;
  v79 = v35[7];
  v80 = &v33[v79];
  v81 = &v34[v79];
  v82 = *(_QWORD *)v81;
  v80[8] = v81[8];
  *(_QWORD *)v80 = v82;
  v83 = v35[8];
  v84 = &v33[v83];
  v85 = &v34[v83];
  v86 = *(_QWORD *)v85;
  v84[8] = v85[8];
  *(_QWORD *)v84 = v86;
  v33[v35[9]] = v34[v35[9]];
  v33[v35[10]] = v34[v35[10]];
  v33[v35[11]] = v34[v35[11]];
  v33[v35[12]] = v34[v35[12]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, int *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v15 = v11[5];
    v16 = &v9[v15];
    v17 = &v10[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = v11[6];
    v19 = &v9[v18];
    v20 = &v10[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v24 = a3[6];
  v25 = a3[7];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  v28 = (char *)(a1 + v25);
  v29 = (char *)(a2 + v25);
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v31 = *((_QWORD *)v30 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v56 = v12;
    v57 = v31;
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v33 = v30[5];
    v34 = &v28[v33];
    v35 = &v29[v33];
    if (v13(&v29[v33], 1, v11))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v34, (uint64_t)v35, v6);
      v37 = v11[5];
      v38 = &v34[v37];
      v39 = &v35[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v11[6];
      v41 = &v34[v40];
      v42 = &v35[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v11[7];
      v44 = &v34[v43];
      v45 = &v35[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v34, 0, 1, v11);
    }
    v46 = v30[6];
    v47 = &v28[v46];
    v48 = &v29[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = v30[7];
    v50 = &v28[v49];
    v51 = &v29[v49];
    v50[8] = v51[8];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v52 = v30[8];
    v53 = &v28[v52];
    v54 = &v29[v52];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v54[8];
    v28[v30[9]] = v29[v30[9]];
    v28[v30[10]] = v29[v30[10]];
    v28[v30[11]] = v29[v30[11]];
    v28[v30[12]] = v29[v30[12]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(_BYTE *, uint64_t, int *);
  int v34;
  int v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  int v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t);
  _QWORD *__dst;
  char *__dsta;

  v6 = type metadata accessor for UnknownStorage();
  __dst = *(_QWORD **)(v6 - 8);
  v104 = (void (*)(uint64_t, uint64_t, uint64_t))__dst[5];
  v104(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(void))(v11 + 48);
  v13 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v8, 1, v10);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v9, 1, v10);
  v103 = v11;
  if (v13)
  {
    if (!v14)
    {
      ((void (*)(char *, char *, uint64_t))__dst[4])(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v104((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[7];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
LABEL_7:
  v25 = a3[6];
  v26 = a3[7];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  v29 = (_BYTE *)(a1 + v26);
  v30 = (_BYTE *)(a2 + v26);
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v32 = *((_QWORD *)v31 - 1);
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (v35)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
      goto LABEL_13;
    }
    v104((uint64_t)v29, (uint64_t)v30, v6);
    v50 = v31[5];
    v51 = &v30[v50];
    v102 = (uint64_t)&v29[v50];
    v52 = v12();
    v53 = ((uint64_t (*)(char *, uint64_t, int *))v12)(v51, 1, v10);
    if (v52)
    {
      if (!v53)
      {
        ((void (*)(uint64_t, char *, uint64_t))__dst[4])(v102, v51, v6);
        v74 = v10[5];
        v75 = v102 + v74;
        v76 = &v51[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        *(_BYTE *)(v75 + 8) = v76[8];
        v77 = v10[6];
        v78 = v102 + v77;
        v79 = &v51[v77];
        *(_QWORD *)v78 = *(_QWORD *)v79;
        *(_BYTE *)(v78 + 8) = v79[8];
        v80 = v10[7];
        v81 = v102 + v80;
        v82 = &v51[v80];
        *(_QWORD *)v81 = *(_QWORD *)v82;
        *(_BYTE *)(v81 + 8) = v82[8];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v103 + 56))(v102, 0, 1, v10);
        goto LABEL_25;
      }
      v54 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v55 = (void *)v102;
    }
    else
    {
      if (!v53)
      {
        v104(v102, (uint64_t)v51, v6);
        v83 = v10[5];
        v84 = v102 + v83;
        v85 = &v51[v83];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        *(_BYTE *)(v84 + 8) = v85[8];
        v86 = v10[6];
        v87 = v102 + v86;
        v88 = &v51[v86];
        *(_QWORD *)v87 = *(_QWORD *)v88;
        *(_BYTE *)(v87 + 8) = v88[8];
        v89 = v10[7];
        v90 = v102 + v89;
        v91 = &v51[v89];
        *(_QWORD *)v90 = *(_QWORD *)v91;
        *(_BYTE *)(v90 + 8) = v91[8];
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v102, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      v54 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v55 = (void *)v102;
    }
    memcpy(v55, v51, v54);
LABEL_25:
    v92 = v31[6];
    v93 = &v29[v92];
    v94 = &v30[v92];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[8] = v94[8];
    v95 = v31[7];
    v96 = &v29[v95];
    v97 = &v30[v95];
    v96[8] = v97[8];
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v98 = v31[8];
    v99 = &v29[v98];
    v100 = &v30[v98];
    *(_QWORD *)v99 = *(_QWORD *)v100;
    v99[8] = v100[8];
    v29[v31[9]] = v30[v31[9]];
    v29[v31[10]] = v30[v31[10]];
    v29[v31[11]] = v30[v31[11]];
    v29[v31[12]] = v30[v31[12]];
    return a1;
  }
  if (v35)
  {
LABEL_13:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    return a1;
  }
  v36 = (void (*)(char *, char *, uint64_t))__dst[4];
  v36(v29, v30, v6);
  v37 = v31[5];
  __dsta = &v29[v37];
  v38 = &v30[v37];
  if (((unsigned int (*)(_BYTE *, uint64_t, int *))v12)(&v30[v37], 1, v10))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v36(__dsta, v38, v6);
    v56 = v10[5];
    v57 = &__dsta[v56];
    v58 = &v38[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v10[6];
    v60 = &__dsta[v59];
    v61 = &v38[v59];
    *(_QWORD *)v60 = *(_QWORD *)v61;
    v60[8] = v61[8];
    v62 = v10[7];
    v63 = &__dsta[v62];
    v64 = &v38[v62];
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v103 + 56))(__dsta, 0, 1, v10);
  }
  v65 = v31[6];
  v66 = &v29[v65];
  v67 = &v30[v65];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v31[7];
  v69 = &v29[v68];
  v70 = &v30[v68];
  v69[8] = v70[8];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v71 = v31[8];
  v72 = &v29[v71];
  v73 = &v30[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v73[8];
  v29[v31[9]] = v30[v31[9]];
  v29[v31[10]] = v30[v31[10]];
  v29[v31[11]] = v30[v31[11]];
  v29[v31[12]] = v30[v31[12]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A630A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelBridgeNotification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A630B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelBridgeNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPointAssistance()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(uint64_t *a1, uint64_t *a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  int v7;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);

  v7 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v7 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else
  {
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v11((uint64_t *)v13, (uint64_t *)v14, v10);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v28 = a3[6];
    v29 = a3[7];
    v30 = (char *)a1 + v28;
    v31 = (char *)a2 + v28;
    *(_DWORD *)v30 = *(_DWORD *)v31;
    v30[4] = v31[4];
    v32 = (char *)a1 + v29;
    v33 = (char *)a2 + v29;
    v34 = a4(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(a5);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v11((uint64_t *)v32, (uint64_t *)v33, v10);
      *(_QWORD *)&v32[*(int *)(v34 + 20)] = *(_QWORD *)&v33[*(int *)(v34 + 20)];
      v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      swift_retain();
      v37(v32, 0, 1, v34);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(a1, v6);
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v7(v8, v6);
  v10 = a1 + *(int *)(a2 + 28);
  v11 = a3(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v7(v10, v6);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);

  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(a1, a2, v9);
  v11 = a3[5];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[6];
  v27 = a3[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  v32 = a4(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    *(_QWORD *)&v30[*(int *)(v32 + 20)] = *(_QWORD *)&v31[*(int *)(v32 + 20)];
    v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56);
    swift_retain();
    v35(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(a1, a2, v9);
  v11 = a3[5];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[6];
  v27 = a3[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  v32 = a4(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v30, (uint64_t)v31, v9);
    *(_QWORD *)&v30[*(int *)(v32 + 20)] = *(_QWORD *)&v31[*(int *)(v32 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6385C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TunnelEndPoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A63874(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelEndPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapsRouteHintData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MapMatchingRouteHint(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = &a2[v8];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = &a2[v13];
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v29 = a3[7];
    v30 = (char *)v7 + v29;
    v31 = &a2[v29];
    if (v18(&a2[v29], 1, v16))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v12(v30, v31, v11);
      v33 = v16[5];
      v34 = &v30[v33];
      v35 = &v31[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v16[6];
      v37 = &v30[v36];
      v38 = &v31[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      v39 = v16[7];
      v40 = &v30[v39];
      v41 = &v31[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v30, 0, 1, v16);
    }
    v42 = a3[9];
    *((_BYTE *)v7 + a3[8]) = a2[a3[8]];
    *((_BYTE *)v7 + v42) = a2[v42];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v11(v6, v5);
  v9 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  return result;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v18 = v14[5];
    v19 = &v12[v18];
    v20 = &v13[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v14[7];
    v25 = &v12[v24];
    v26 = &v13[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    v31 = v14[5];
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v14[6];
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v14[7];
    v38 = &v28[v37];
    v39 = &v29[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  v40 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v40) = a2[v40];
  return a1;
}

char *assignWithCopy for CLP_LogEntry_PrivateData_MapMatchingRouteHint(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v74 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v74(v7, v8, v9);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v75 = *((_QWORD *)v14 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v75 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15(v13, 1, v14);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      v21 = v20[8];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v21;
      v22 = v14[6];
      v23 = &v12[v22];
      v24 = &v13[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = v14[7];
      v27 = &v12[v26];
      v28 = &v13[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v75 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v74(v12, v13, v9);
  v50 = v14[5];
  v51 = &v12[v50];
  v52 = &v13[v50];
  v53 = v52[8];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v53;
  v54 = v14[6];
  v55 = &v12[v54];
  v56 = &v13[v54];
  v57 = v56[8];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v57;
  v58 = v14[7];
  v59 = &v12[v58];
  v60 = &v13[v58];
  v61 = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v61;
LABEL_7:
  v31 = a3[7];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  v34 = v15(&a1[v31], 1, v14);
  v35 = v15(v33, 1, v14);
  if (!v34)
  {
    if (!v35)
    {
      v74(v32, v33, v9);
      v62 = v14[5];
      v63 = &v32[v62];
      v64 = &v33[v62];
      v65 = v64[8];
      *(_QWORD *)v63 = *(_QWORD *)v64;
      v63[8] = v65;
      v66 = v14[6];
      v67 = &v32[v66];
      v68 = &v33[v66];
      v69 = v68[8];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      v67[8] = v69;
      v70 = v14[7];
      v71 = &v32[v70];
      v72 = &v33[v70];
      v73 = v72[8];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v71[8] = v73;
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v32, v33, v9);
  v36 = v14[5];
  v37 = &v32[v36];
  v38 = &v33[v36];
  v39 = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v39;
  v40 = v14[6];
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  v44 = v14[7];
  v45 = &v32[v44];
  v46 = &v33[v44];
  v47 = v46[8];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v47;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v75 + 56))(v32, 0, 1, v14);
LABEL_13:
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[a3[9]] = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_MapMatchingRouteHint(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v18 = v14[5];
    v19 = &v12[v18];
    v20 = &v13[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v14[7];
    v25 = &v12[v24];
    v26 = &v13[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    v31 = v14[5];
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v14[6];
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v14[7];
    v38 = &v28[v37];
    v39 = &v29[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  v40 = a3[9];
  *((_BYTE *)a1 + a3[8]) = a2[a3[8]];
  *((_BYTE *)a1 + v40) = a2[v40];
  return a1;
}

char *assignWithTake for CLP_LogEntry_PrivateData_MapMatchingRouteHint(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v63 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v63(v7, v8, v9);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v64 = *((_QWORD *)v14 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15(v13, 1, v14);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v13, v9);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v14[6];
      v22 = &v12[v21];
      v23 = &v13[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = v14[7];
      v25 = &v12[v24];
      v26 = &v13[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v63(v12, v13, v9);
  v45 = v14[5];
  v46 = &v12[v45];
  v47 = &v13[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  v48 = v14[6];
  v49 = &v12[v48];
  v50 = &v13[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v14[7];
  v52 = &v12[v51];
  v53 = &v13[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
LABEL_7:
  v28 = a3[7];
  v29 = &a1[v28];
  v30 = (char *)a2 + v28;
  v31 = v15(&a1[v28], 1, v14);
  v32 = v15(v30, 1, v14);
  if (!v31)
  {
    if (!v32)
    {
      v63(v29, v30, v9);
      v54 = v14[5];
      v55 = &v29[v54];
      v56 = &v30[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v56[8];
      v57 = v14[6];
      v58 = &v29[v57];
      v59 = &v30[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v59[8];
      v60 = v14[7];
      v61 = &v29[v60];
      v62 = &v30[v60];
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v61[8] = v62[8];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
  v33 = v14[5];
  v34 = &v29[v33];
  v35 = &v30[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = v14[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = v14[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v29, 0, 1, v14);
LABEL_13:
  v43 = a3[9];
  a1[a3[8]] = *((_BYTE *)a2 + a3[8]);
  a1[v43] = *((_BYTE *)a2 + v43);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for CLP_LogEntry_PrivateData_MapMatchingRouteHint()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientSatelliteConstellation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_235A64890 + 4 * byte_235BBDB15[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_235A648C4 + 4 * byte_235BBDB10[v4]))();
}

uint64_t sub_235A648C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A648CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A648D4);
  return result;
}

uint64_t sub_235A648E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A648E8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_235A648EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A648F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  return &type metadata for CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(_QWORD *a1, char *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, int *);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = *((_QWORD *)a2 + 1);
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = &a2[v8];
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = (char *)v7 + v13;
    v15 = &a2[v13];
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    v18 = *(unsigned int (**)(char *, uint64_t, int *))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v29 = a3[8];
    v30 = (char *)v7 + v29;
    v31 = &a2[v29];
    if (v18(&a2[v29], 1, v16))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v12(v30, v31, v11);
      v33 = v16[5];
      v34 = &v30[v33];
      v35 = &v31[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v16[6];
      v37 = &v30[v36];
      v38 = &v31[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      v39 = v16[7];
      v40 = &v30[v39];
      v41 = &v31[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v30, 0, 1, v16);
    }
    v42 = a3[9];
    v43 = a3[10];
    v44 = (char *)v7 + v42;
    v45 = &a2[v42];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    *((_BYTE *)v7 + v43) = a2[v43];
    v46 = a3[11];
    v47 = a3[12];
    v48 = (char *)v7 + v46;
    v49 = &a2[v46];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
    *((_BYTE *)v7 + v47) = a2[v47];
    *((_BYTE *)v7 + a3[13]) = a2[a3[13]];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (!v8(v6, 1, v7))
    v11(v6, v5);
  v9 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v5);
  return result;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, int *);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;

  v6 = *((_QWORD *)a2 + 1);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(unsigned int (**)(char *, uint64_t, int *))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v19 = v15[5];
    v20 = &v13[v19];
    v21 = &v14[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = v15[6];
    v23 = &v13[v22];
    v24 = &v14[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v15[7];
    v26 = &v13[v25];
    v27 = &v14[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = &a2[v28];
  if (v17(&a2[v28], 1, v15))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v11(v29, v30, v10);
    v32 = v15[5];
    v33 = &v29[v32];
    v34 = &v30[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v15[6];
    v36 = &v29[v35];
    v37 = &v30[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v15[7];
    v39 = &v29[v38];
    v40 = &v30[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v29, 0, 1, v15);
  }
  v41 = a3[9];
  v42 = a3[10];
  v43 = (char *)a1 + v41;
  v44 = &a2[v41];
  *(_DWORD *)v43 = *(_DWORD *)v44;
  v43[4] = v44[4];
  *((_BYTE *)a1 + v42) = a2[v42];
  v45 = a3[11];
  v46 = a3[12];
  v47 = (char *)a1 + v45;
  v48 = &a2[v45];
  *(_DWORD *)v47 = *(_DWORD *)v48;
  v47[4] = v48[4];
  *((_BYTE *)a1 + v46) = a2[v46];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *assignWithCopy for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v82 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v82(v7, v8, v9);
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v83 = *((_QWORD *)v14 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v83 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15(v13, 1, v14);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      v21 = v20[8];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v21;
      v22 = v14[6];
      v23 = &v12[v22];
      v24 = &v13[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = v14[7];
      v27 = &v12[v26];
      v28 = &v13[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v83 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v82(v12, v13, v9);
  v58 = v14[5];
  v59 = &v12[v58];
  v60 = &v13[v58];
  v61 = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v61;
  v62 = v14[6];
  v63 = &v12[v62];
  v64 = &v13[v62];
  v65 = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v65;
  v66 = v14[7];
  v67 = &v12[v66];
  v68 = &v13[v66];
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
LABEL_7:
  v31 = a3[8];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  v34 = v15(&a1[v31], 1, v14);
  v35 = v15(v33, 1, v14);
  if (!v34)
  {
    if (!v35)
    {
      v82(v32, v33, v9);
      v70 = v14[5];
      v71 = &v32[v70];
      v72 = &v33[v70];
      v73 = v72[8];
      *(_QWORD *)v71 = *(_QWORD *)v72;
      v71[8] = v73;
      v74 = v14[6];
      v75 = &v32[v74];
      v76 = &v33[v74];
      v77 = v76[8];
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v75[8] = v77;
      v78 = v14[7];
      v79 = &v32[v78];
      v80 = &v33[v78];
      v81 = v80[8];
      *(_QWORD *)v79 = *(_QWORD *)v80;
      v79[8] = v81;
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v32, v33, v9);
  v36 = v14[5];
  v37 = &v32[v36];
  v38 = &v33[v36];
  v39 = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v39;
  v40 = v14[6];
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  v44 = v14[7];
  v45 = &v32[v44];
  v46 = &v33[v44];
  v47 = v46[8];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v47;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v83 + 56))(v32, 0, 1, v14);
LABEL_13:
  v49 = a3[9];
  v50 = &a1[v49];
  v51 = (char *)a2 + v49;
  v52 = *(_DWORD *)v51;
  v50[4] = v51[4];
  *(_DWORD *)v50 = v52;
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  v53 = a3[11];
  v54 = &a1[v53];
  v55 = (char *)a2 + v53;
  v56 = *(_DWORD *)v55;
  v54[4] = v55[4];
  *(_DWORD *)v54 = v56;
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, int *);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;

  *a1 = *(_OWORD *)a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = &a2[v11];
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(unsigned int (**)(char *, uint64_t, int *))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v18 = v14[5];
    v19 = &v12[v18];
    v20 = &v13[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v14[6];
    v22 = &v12[v21];
    v23 = &v13[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v14[7];
    v25 = &v12[v24];
    v26 = &v13[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = &a2[v27];
  if (v16(&a2[v27], 1, v14))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v10(v28, v29, v9);
    v31 = v14[5];
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = v14[6];
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    v37 = v14[7];
    v38 = &v28[v37];
    v39 = &v29[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v28, 0, 1, v14);
  }
  v40 = a3[9];
  v41 = a3[10];
  v42 = (char *)a1 + v40;
  v43 = &a2[v40];
  *(_DWORD *)v42 = *(_DWORD *)v43;
  v42[4] = v43[4];
  *((_BYTE *)a1 + v41) = a2[v41];
  v44 = a3[11];
  v45 = a3[12];
  v46 = (char *)a1 + v44;
  v47 = &a2[v44];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  *((_BYTE *)a1 + v45) = a2[v45];
  *((_BYTE *)a1 + a3[13]) = a2[a3[13]];
  return a1;
}

char *assignWithTake for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v70 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v70(v7, v8, v9);
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v71 = *((_QWORD *)v14 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v71 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15(v13, 1, v14);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v13, v9);
      v18 = v14[5];
      v19 = &v12[v18];
      v20 = &v13[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v14[6];
      v22 = &v12[v21];
      v23 = &v13[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = v14[7];
      v25 = &v12[v24];
      v26 = &v13[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v71 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v70(v12, v13, v9);
  v52 = v14[5];
  v53 = &v12[v52];
  v54 = &v13[v52];
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
  v55 = v14[6];
  v56 = &v12[v55];
  v57 = &v13[v55];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v57[8];
  v58 = v14[7];
  v59 = &v12[v58];
  v60 = &v13[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v60[8];
LABEL_7:
  v28 = a3[8];
  v29 = &a1[v28];
  v30 = (char *)a2 + v28;
  v31 = v15(&a1[v28], 1, v14);
  v32 = v15(v30, 1, v14);
  if (!v31)
  {
    if (!v32)
    {
      v70(v29, v30, v9);
      v61 = v14[5];
      v62 = &v29[v61];
      v63 = &v30[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v63[8];
      v64 = v14[6];
      v65 = &v29[v64];
      v66 = &v30[v64];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v14[7];
      v68 = &v29[v67];
      v69 = &v30[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v29, v30, v9);
  v33 = v14[5];
  v34 = &v29[v33];
  v35 = &v30[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = v14[6];
  v37 = &v29[v36];
  v38 = &v30[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = v14[7];
  v40 = &v29[v39];
  v41 = &v30[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v71 + 56))(v29, 0, 1, v14);
LABEL_13:
  v43 = a3[9];
  v44 = a3[10];
  v45 = &a1[v43];
  v46 = (char *)a2 + v43;
  *(_DWORD *)v45 = *(_DWORD *)v46;
  v45[4] = v46[4];
  a1[v44] = *((_BYTE *)a2 + v44);
  v47 = a3[11];
  v48 = a3[12];
  v49 = &a1[v47];
  v50 = (char *)a2 + v47;
  *(_DWORD *)v49 = *(_DWORD *)v50;
  v49[4] = v50[4];
  a1[v48] = *((_BYTE *)a2 + v48);
  a1[a3[13]] = *((_BYTE *)a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A65950(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_235A65A00(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_235A65C54 + 4 * byte_235BBDB1F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_235A65C88 + 4 * byte_235BBDB1A[v4]))();
}

uint64_t sub_235A65C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A65C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A65C98);
  return result;
}

uint64_t sub_235A65CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A65CACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_235A65CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A65CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  return &type metadata for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReachabilityState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReachabilityState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReachabilityState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Battery(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v12 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v13 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)v14 = *(_DWORD *)v15;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v11 = a3[10];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Battery(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Battery()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_27Tm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Battery()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_28Tm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_Battery()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xED)
    goto LABEL_17;
  if (a2 + 19 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 19) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 19;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 19;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 19;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x14;
  v8 = v6 - 20;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 19 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 19) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xED)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEC)
    return ((uint64_t (*)(void))((char *)&loc_235A66370 + 4 * byte_235BBDB29[v4]))();
  *a1 = a2 + 19;
  return ((uint64_t (*)(void))((char *)sub_235A663A4 + 4 * byte_235BBDB24[v4]))();
}

uint64_t sub_235A663A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A663AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A663B4);
  return result;
}

uint64_t sub_235A663C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A663C8);
  *(_BYTE *)result = a2 + 19;
  return result;
}

uint64_t sub_235A663CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A663D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_DeviceStatus.NotificationType;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SignalEnvironment(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    v26 = a3[8];
    v27 = &a1[v26];
    v28 = &a2[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v46 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v12[6];
      v39 = &v10[v38];
      v40 = &v11[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  *(_BYTE *)(a1 + v47[7]) = *(_BYTE *)(a2 + v47[7]);
  v29 = v47[8];
  v30 = a1 + v29;
  v31 = (int *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)v30 = v32;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SignalEnvironment(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v41 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v40 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v40 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[6];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[7];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v40 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v41[7];
  *(_BYTE *)(a1 + v41[6]) = *(_BYTE *)(a2 + v41[6]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  v27 = v41[8];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A66CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 8u)
    v14 = 8;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v15 = v14 - 8;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 8u)
    return v15;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A66D7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 8;
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_SignalEnvironment()
{
  type metadata completion function for CLP_LogEntry_PrivateData_AccelSample();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_235A66E88 + 4 * byte_235BBDB33[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_235A66EBC + 4 * byte_235BBDB2E[v4]))();
}

uint64_t sub_235A66EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A66EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A66ECCLL);
  return result;
}

uint64_t sub_235A66ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A66EE0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_235A66EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A66EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  return &type metadata for CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A66F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A66FA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SignalEnvironmentInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  int *v55;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v55 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v54 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v54 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v42 = v12[5];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      v46 = v12[6];
      v47 = &v10[v46];
      v48 = &v11[v46];
      v49 = v48[8];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v49;
      v50 = v12[7];
      v51 = &v10[v50];
      v52 = &v11[v50];
      v53 = v52[8];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v53;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v10, 0, 1, v12);
LABEL_7:
  v29 = v55[6];
  v30 = a1 + v29;
  v31 = (int *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 4) = *((_BYTE *)v31 + 4);
  *(_DWORD *)v30 = v32;
  v33 = v55[7];
  v34 = a1 + v33;
  v35 = (int *)(a2 + v33);
  v36 = *v35;
  *(_BYTE *)(v34 + 4) = *((_BYTE *)v35 + 4);
  *(_DWORD *)v34 = v36;
  v37 = v55[8];
  v38 = a1 + v37;
  v39 = (int *)(a2 + v37);
  v40 = *v39;
  *(_BYTE *)(v38 + 4) = *((_BYTE *)v39 + 4);
  *(_DWORD *)v38 = v40;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_AccelSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v46 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v45 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v45 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v36 = v12[5];
      v37 = &v10[v36];
      v38 = &v11[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      v39 = v12[6];
      v40 = &v10[v39];
      v41 = &v11[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v45 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v46[6];
  v27 = v46[7];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = v46[8];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MagSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A674C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MagSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A674D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Magnetometer()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Magnetometer()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Timer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      v35 = v12[6];
      v36 = &v10[v35];
      v37 = &v11[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v12[7];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v28 = v12[5];
      v29 = &v10[v28];
      v30 = &v11[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v12[6];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[7];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Reset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A67C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Reset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A67CAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AccelerometerPace()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_FalseStepDetectorState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_FalseStepDetectorState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FalseStepDetectorState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_ClientSatelliteInfo();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_235A68160 + 4 * byte_235BBDB3D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_235A68194 + 4 * byte_235BBDB38[v4]))();
}

uint64_t sub_235A68194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A6819C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A681A4);
  return result;
}

uint64_t sub_235A681B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A681B8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_235A681BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A681C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_StepCount(uint64_t *a1, uint64_t *a2, int *a3)
{
  return initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t destroy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_MotionState(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithCopy for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  void (*v42)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;

  v8 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v8 - 8);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 24);
  v57(a1, a2, v8);
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v10, v11, v8);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v20;
      v21 = v12[6];
      v22 = &v10[v21];
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v24;
      v25 = v12[7];
      v26 = &v10[v25];
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v28;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  v57((uint64_t)v10, (uint64_t)v11, v8);
  v45 = v12[5];
  v46 = &v10[v45];
  v47 = &v11[v45];
  v48 = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v48;
  v49 = v12[6];
  v50 = &v10[v49];
  v51 = &v11[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v12[7];
  v54 = &v10[v53];
  v55 = &v11[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
LABEL_7:
  v30 = a3[6];
  v31 = a1 + v30;
  v32 = (int *)(a2 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = a3[7];
  v35 = (char *)(a1 + v34);
  v36 = (char *)(a2 + v34);
  v37 = a4(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      v57((uint64_t)v35, (uint64_t)v36, v8);
      *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v35, a4);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    v43 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v35, v36, v8);
  *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
  v42 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
  swift_retain();
  v42(v35, 0, 1, v37);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return initializeWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, int *a3)
{
  return assignWithTake for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, int *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;

  v8 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v8 - 8);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 40);
  v49(a1, a2, v8);
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v10, v11, v8);
      v17 = v12[5];
      v18 = &v10[v17];
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      v18[8] = v19[8];
      v20 = v12[6];
      v21 = &v10[v20];
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v49((uint64_t)v10, (uint64_t)v11, v8);
  v40 = v12[5];
  v41 = &v10[v40];
  v42 = &v11[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  v43 = v12[6];
  v44 = &v10[v43];
  v45 = &v11[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  v46 = v12[7];
  v47 = &v10[v46];
  v48 = &v11[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v48[8];
LABEL_7:
  v27 = a3[6];
  v28 = a3[7];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = (char *)(a1 + v28);
  v32 = (char *)(a2 + v28);
  v33 = a4(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v49((uint64_t)v31, (uint64_t)v32, v8);
      *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v31, a4);
    goto LABEL_12;
  }
  if (v37)
  {
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v31, v32, v8);
  *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCount()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A68854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_47Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t __swift_get_extra_inhabitant_index_47Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v10 = v13;
      v15 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a3 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_StepCount()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6890C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_48Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t __swift_store_extra_inhabitant_index_48Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      v12 = v15;
      v17 = *(int *)(a4 + 20);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v16 = *(_QWORD *)(v12 - 8);
      v17 = *(int *)(a4 + 28);
    }
    v14 = a1 + v17;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for CLP_LogEntry_PrivateData_StepCount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionState(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionState(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v8 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, a4, a5);
      if (v9 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeVector3()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_TimeStamp();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeCompass()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_CompassTypeSample(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
      v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      swift_retain();
      v31(v26, 0, 1, v28);
    }
    v32 = a3[7];
    v33 = a3[8];
    v34 = &a1[v32];
    v35 = &a2[v32];
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    v36 = &a1[v33];
    v37 = &a2[v33];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v5(v6, v4);
  v8 = a1 + *(int *)(a2 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    swift_retain();
    v29(v24, 0, 1, v26);
  }
  v30 = a3[7];
  v31 = a3[8];
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = a1 + v31;
  v35 = a2 + v31;
  *(_DWORD *)v34 = *(_DWORD *)v35;
  *(_BYTE *)(v34 + 4) = *(_BYTE *)(v35 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;

  v6 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v6 - 8);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24);
  v59(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v59((uint64_t)v8, (uint64_t)v9, v6);
  v47 = v10[5];
  v48 = &v8[v47];
  v49 = &v9[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  v51 = v10[6];
  v52 = &v8[v51];
  v53 = &v9[v51];
  v54 = v53[8];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v54;
  v55 = v10[7];
  v56 = &v8[v55];
  v57 = &v9[v55];
  v58 = v57[8];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v58;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v59((uint64_t)v29, (uint64_t)v30, v6);
      *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v29, v30, v6);
  *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
  v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
  swift_retain();
  v36(v29, 0, 1, v31);
LABEL_13:
  v38 = a3[7];
  v39 = a1 + v38;
  v40 = (int *)(a2 + v38);
  v41 = *v40;
  *(_BYTE *)(v39 + 4) = *((_BYTE *)v40 + 4);
  *(_DWORD *)v39 = v41;
  v42 = a3[8];
  v43 = a1 + v42;
  v44 = (int *)(a2 + v42);
  v45 = *v44;
  *(_BYTE *)(v43 + 4) = *((_BYTE *)v44 + 4);
  *(_DWORD *)v43 = v45;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[7];
  v30 = a3[8];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a1 + v30;
  v34 = a2 + v30;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_CompassTypeSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;

  v6 = type metadata accessor for UnknownStorage();
  v51 = *(_QWORD *)(v6 - 8);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 40);
  v50(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v50((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v10[7];
  v48 = &v8[v47];
  v49 = &v9[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v50((uint64_t)v26, (uint64_t)v27, v6);
      *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
      swift_release();
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v26, v27, v6);
  *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  v34 = a3[7];
  v35 = a3[8];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  v38 = a1 + v35;
  v39 = a2 + v35;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A69914(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  int v17;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v16 >= 2)
    v17 = ((v16 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v17 = -2;
  if (v17 < 0)
    v17 = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_CompassTypeSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A69A10(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 2;
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_CompassTypeSample()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Compass()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Compass()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SensorFusionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SensorFusionStatus()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_DeviceMotionSample(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = &a1[v25];
    v27 = &a2[v25];
    v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v8(v26, v27, v7);
      *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
      v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      swift_retain();
      v31(v26, 0, 1, v28);
    }
    v32 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v33 = &a1[v32];
    v34 = &a2[v32];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v8(v36, v37, v7);
      v41 = *(int *)(v38 + 20);
      v42 = &v36[v41];
      v43 = &v37[v41];
      *(_DWORD *)v42 = *(_DWORD *)v43;
      v42[4] = v43[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v44 = a3[11];
    v45 = a3[12];
    v46 = &a1[v44];
    v47 = &a2[v44];
    *(_DWORD *)v46 = *(_DWORD *)v47;
    v46[4] = v47[4];
    v48 = &a1[v45];
    v49 = &a2[v45];
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = v49[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v12(v5, v4);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v12(v7, v4);
    swift_release();
  }
  v9 = a1 + a2[10];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    swift_retain();
    v29(v24, 0, 1, v26);
  }
  v30 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v31 = a1 + v30;
  v32 = a2 + v30;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v34, (uint64_t)v35, v6);
    v39 = *(int *)(v36 + 20);
    v40 = &v34[v39];
    v41 = &v35[v39];
    *(_DWORD *)v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v42 = a3[11];
  v43 = a3[12];
  v44 = a1 + v42;
  v45 = a2 + v42;
  *(_DWORD *)v44 = *(_DWORD *)v45;
  *(_BYTE *)(v44 + 4) = *(_BYTE *)(v45 + 4);
  v46 = a1 + v43;
  v47 = a2 + v43;
  *(_DWORD *)v46 = *(_DWORD *)v47;
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(v47 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;

  v6 = type metadata accessor for UnknownStorage();
  v81 = *(_QWORD *)(v6 - 8);
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 24);
  v80(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = v17[8];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v10[7];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v80((uint64_t)v8, (uint64_t)v9, v6);
  v64 = v10[5];
  v65 = &v8[v64];
  v66 = &v9[v64];
  v67 = v66[8];
  *(_QWORD *)v65 = *(_QWORD *)v66;
  v65[8] = v67;
  v68 = v10[6];
  v69 = &v8[v68];
  v70 = &v9[v68];
  v71 = v70[8];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v71;
  v72 = v10[7];
  v73 = &v8[v72];
  v74 = &v9[v72];
  v75 = v74[8];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v75;
LABEL_7:
  v28 = a3[6];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v29, v30, v6);
      *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
      v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
      swift_retain();
      v36(v29, 0, 1, v31);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v80((uint64_t)v29, (uint64_t)v30, v6);
  *(_QWORD *)&v29[*(int *)(v31 + 20)] = *(_QWORD *)&v30[*(int *)(v31 + 20)];
  swift_retain();
  swift_release();
LABEL_13:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v38 = a3[8];
  v39 = a1 + v38;
  v40 = (int *)(a2 + v38);
  v41 = *v40;
  *(_BYTE *)(v39 + 4) = *((_BYTE *)v40 + 4);
  *(_DWORD *)v39 = v41;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v42 = a3[10];
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  v45 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (!v49)
    {
      v80((uint64_t)v43, (uint64_t)v44, v6);
      v76 = *(int *)(v45 + 20);
      v77 = &v43[v76];
      v78 = &v44[v76];
      v79 = v78[4];
      *(_DWORD *)v77 = *(_DWORD *)v78;
      v77[4] = v79;
      goto LABEL_19;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v49)
  {
LABEL_18:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v43, v44, v6);
  v50 = *(int *)(v45 + 20);
  v51 = &v43[v50];
  v52 = &v44[v50];
  v53 = v52[4];
  *(_DWORD *)v51 = *(_DWORD *)v52;
  v51[4] = v53;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_19:
  v55 = a3[11];
  v56 = a1 + v55;
  v57 = (int *)(a2 + v55);
  v58 = *v57;
  *(_BYTE *)(v56 + 4) = *((_BYTE *)v57 + 4);
  *(_DWORD *)v56 = v58;
  v59 = a3[12];
  v60 = a1 + v59;
  v61 = (int *)(a2 + v59);
  v62 = *v61;
  *(_BYTE *)(v60 + 4) = *((_BYTE *)v61 + 4);
  *(_DWORD *)v60 = v62;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v24, (uint64_t)v25, v6);
    *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_DWORD *)v30 = *(_DWORD *)v31;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  v32 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = *(int *)(v35 + 20);
    v39 = &v33[v38];
    v40 = &v34[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v41 = a3[11];
  v42 = a3[12];
  v43 = a1 + v41;
  v44 = a2 + v41;
  *(_DWORD *)v43 = *(_DWORD *)v44;
  *(_BYTE *)(v43 + 4) = *(_BYTE *)(v44 + 4);
  v45 = a1 + v42;
  v46 = a2 + v42;
  *(_DWORD *)v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = *(_BYTE *)(v46 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_DeviceMotionSample(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;

  v6 = type metadata accessor for UnknownStorage();
  v69 = *(_QWORD *)(v6 - 8);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 40);
  v68(a1, a2, v6);
  v7 = a3[5];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(char *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v10[7];
      v22 = &v8[v21];
      v23 = &v9[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  v68((uint64_t)v8, (uint64_t)v9, v6);
  v56 = v10[5];
  v57 = &v8[v56];
  v58 = &v9[v56];
  *(_QWORD *)v57 = *(_QWORD *)v58;
  v57[8] = v58[8];
  v59 = v10[6];
  v60 = &v8[v59];
  v61 = &v9[v59];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v60[8] = v61[8];
  v62 = v10[7];
  v63 = &v8[v62];
  v64 = &v9[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v64[8];
LABEL_7:
  v25 = a3[6];
  v26 = (char *)(a1 + v25);
  v27 = (char *)(a2 + v25);
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v26, v27, v6);
      *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v68((uint64_t)v26, (uint64_t)v27, v6);
  *(_QWORD *)&v26[*(int *)(v28 + 20)] = *(_QWORD *)&v27[*(int *)(v28 + 20)];
  swift_release();
LABEL_13:
  v34 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v68((uint64_t)v38, (uint64_t)v39, v6);
      v65 = *(int *)(v40 + 20);
      v66 = &v38[v65];
      v67 = &v39[v65];
      *(_DWORD *)v66 = *(_DWORD *)v67;
      v66[4] = v67[4];
      goto LABEL_19;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
    goto LABEL_18;
  }
  if (v44)
  {
LABEL_18:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v38, v39, v6);
  v45 = *(int *)(v40 + 20);
  v46 = &v38[v45];
  v47 = &v39[v45];
  *(_DWORD *)v46 = *(_DWORD *)v47;
  v46[4] = v47[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
LABEL_19:
  v49 = a3[11];
  v50 = a3[12];
  v51 = a1 + v49;
  v52 = a2 + v49;
  *(_DWORD *)v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  v53 = a1 + v50;
  v54 = a2 + v50;
  *(_DWORD *)v53 = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = *(_BYTE *)(v54 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6B0CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_11;
  }
  if ((_DWORD)a2 != 253)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[10];
    goto LABEL_11;
  }
  v15 = *(unsigned __int8 *)(a1 + a3[7]);
  if (v15 >= 2)
    v16 = ((v15 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v16 = -2;
  if (v16 < 0)
    v16 = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6B1EC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[6];
      }
      else
      {
        if (a3 == 253)
        {
          *(_BYTE *)(a1 + a4[7]) = a2 + 2;
          return result;
        }
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[10];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DeviceMotionSample()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_DeviceMotion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = (char *)a1 + v16;
    v20 = (char *)a2 + v16;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[9];
    v22 = a3[10];
    v23 = (char *)a1 + v21;
    v24 = (char *)a2 + v21;
    v23[8] = v24[8];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v25 = (char *)a1 + v22;
    v26 = (char *)a2 + v22;
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    v29[8] = v30[8];
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v34 = *((_QWORD *)v33 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v31, (uint64_t *)v32, v7);
      v37 = v33[5];
      v38 = &v31[v37];
      v39 = &v32[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v33[6];
      v41 = &v31[v40];
      v42 = &v32[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v33[7];
      v44 = &v31[v43];
      v45 = &v32[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 48);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = v16;
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v20;
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v24;
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = v28;
  v29 = a3[10];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(_BYTE *)(v31 + 8);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = v32;
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = a2 + v33;
  v36 = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = v36;
  v37 = a3[12];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  v43 = v42(v38, 1, v40);
  v44 = v42(v39, 1, v40);
  if (!v43)
  {
    if (!v44)
    {
      v8((uint64_t)v38, (uint64_t)v39, v6);
      v59 = v40[5];
      v60 = &v38[v59];
      v61 = &v39[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v62;
      v63 = v40[6];
      v64 = &v38[v63];
      v65 = &v39[v63];
      v66 = v65[8];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = v66;
      v67 = v40[7];
      v68 = &v38[v67];
      v69 = &v39[v67];
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v70;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v38, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v44)
  {
LABEL_6:
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v38, v39, v6);
  v45 = v40[5];
  v46 = &v38[v45];
  v47 = &v39[v45];
  v48 = v47[8];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v48;
  v49 = v40[6];
  v50 = &v38[v49];
  v51 = &v39[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v40[7];
  v54 = &v38[v53];
  v55 = &v39[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[9];
  v21 = a3[10];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = (char *)(a1 + v27);
  v31 = (char *)(a2 + v27);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a1 + v10;
  v14 = a2 + v10;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a3[9];
  v22 = a3[10];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = a1 + v22;
  v26 = a2 + v22;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = (char *)(a1 + v28);
  v32 = (char *)(a2 + v28);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(uint64_t (**)(char *, uint64_t, int *))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      v8((uint64_t)v31, (uint64_t)v32, v6);
      v49 = v33[5];
      v50 = &v31[v49];
      v51 = &v32[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      v52 = v33[6];
      v53 = &v31[v52];
      v54 = &v32[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v53[8] = v54[8];
      v55 = v33[7];
      v56 = &v31[v55];
      v57 = &v32[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v31, v32, v6);
  v38 = v33[5];
  v39 = &v31[v38];
  v40 = &v32[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  v41 = v33[6];
  v42 = &v31[v41];
  v43 = &v32[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v33[7];
  v45 = &v31[v44];
  v46 = &v32[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6BFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v10 = a1 + *(int *)(a3 + 48);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6C054(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v12[8];
      v26 = &v10[v25];
      v27 = &v11[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v12[9];
      v29 = &v10[v28];
      v30 = &v11[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v12[10];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[11];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[12];
      v38 = &v10[v37];
      v39 = &v11[v37];
      v40 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v41 = *((_QWORD *)v40 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v38, (uint64_t *)v39, v7);
        v43 = v40[5];
        v44 = &v38[v43];
        v45 = &v39[v43];
        *(_QWORD *)v44 = *(_QWORD *)v45;
        v44[8] = v45[8];
        v46 = v40[6];
        v47 = &v38[v46];
        v48 = &v39[v46];
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v47[8] = v48[8];
        v49 = v40[7];
        v50 = &v38[v49];
        v51 = &v39[v49];
        *(_QWORD *)v50 = *(_QWORD *)v51;
        v50[8] = v51[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    v8 = v5 + *(int *)(v6 + 48);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v39 = *((_QWORD *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v41 = v38[5];
      v42 = &v36[v41];
      v43 = &v37[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v38[6];
      v45 = &v36[v44];
      v46 = &v37[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v38[7];
      v48 = &v36[v47];
      v49 = &v37[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, int *);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char v114;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v55 = v12[5];
      v56 = v10 + v55;
      v57 = &v11[v55];
      v58 = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *(_BYTE *)(v56 + 8) = v58;
      v59 = v12[6];
      v60 = v10 + v59;
      v61 = &v11[v59];
      v62 = v61[8];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *(_BYTE *)(v60 + 8) = v62;
      v63 = v12[7];
      v64 = v10 + v63;
      v65 = &v11[v63];
      v66 = v65[8];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *(_BYTE *)(v64 + 8) = v66;
      v67 = v12[8];
      v68 = v10 + v67;
      v69 = &v11[v67];
      v70 = v69[8];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *(_BYTE *)(v68 + 8) = v70;
      v71 = v12[9];
      v72 = v10 + v71;
      v73 = &v11[v71];
      v74 = v73[8];
      *(_QWORD *)v72 = *(_QWORD *)v73;
      *(_BYTE *)(v72 + 8) = v74;
      v75 = v12[10];
      v76 = v10 + v75;
      v77 = &v11[v75];
      v78 = v77[8];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *(_BYTE *)(v76 + 8) = v78;
      v79 = v12[11];
      v80 = v10 + v79;
      v81 = &v11[v79];
      v82 = v81[8];
      *(_QWORD *)v80 = *(_QWORD *)v81;
      *(_BYTE *)(v80 + 8) = v82;
      v83 = v12[12];
      v84 = v10 + v83;
      v85 = &v11[v83];
      v86 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v87 = *((_QWORD *)v86 - 1);
      v88 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v87 + 48);
      v89 = v88(v84, 1, v86);
      v90 = v88((uint64_t)v85, 1, v86);
      if (v89)
      {
        if (!v90)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v84, v85, v6);
          v91 = v86[5];
          v92 = v84 + v91;
          v93 = &v85[v91];
          v94 = v93[8];
          *(_QWORD *)v92 = *(_QWORD *)v93;
          *(_BYTE *)(v92 + 8) = v94;
          v95 = v86[6];
          v96 = v84 + v95;
          v97 = &v85[v95];
          v98 = v97[8];
          *(_QWORD *)v96 = *(_QWORD *)v97;
          *(_BYTE *)(v96 + 8) = v98;
          v99 = v86[7];
          v100 = v84 + v99;
          v101 = &v85[v99];
          v102 = v101[8];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          *(_BYTE *)(v100 + 8) = v102;
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v87 + 56))(v84, 0, 1, v86);
          return a1;
        }
      }
      else
      {
        if (!v90)
        {
          v8(v84, (uint64_t)v85, v6);
          v116 = v86[5];
          v117 = v84 + v116;
          v118 = &v85[v116];
          v119 = v118[8];
          *(_QWORD *)v117 = *(_QWORD *)v118;
          *(_BYTE *)(v117 + 8) = v119;
          v120 = v86[6];
          v121 = v84 + v120;
          v122 = &v85[v120];
          v123 = v122[8];
          *(_QWORD *)v121 = *(_QWORD *)v122;
          *(_BYTE *)(v121 + 8) = v123;
          v124 = v86[7];
          v125 = v84 + v124;
          v126 = &v85[v124];
          v127 = v126[8];
          *(_QWORD *)v125 = *(_QWORD *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          return a1;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v84, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v53 = (void *)v84;
      v54 = v85;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    v52 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?)
                                - 8)
                    + 64);
    v53 = (void *)v10;
    v54 = v11;
LABEL_8:
    memcpy(v53, v54, v52);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v21;
  v22 = v12[6];
  v23 = v10 + v22;
  v24 = &v11[v22];
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = v25;
  v26 = v12[7];
  v27 = v10 + v26;
  v28 = &v11[v26];
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = v29;
  v30 = v12[8];
  v31 = v10 + v30;
  v32 = &v11[v30];
  v33 = v32[8];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v33;
  v34 = v12[9];
  v35 = v10 + v34;
  v36 = &v11[v34];
  v37 = v36[8];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = v37;
  v38 = v12[10];
  v39 = v10 + v38;
  v40 = &v11[v38];
  v41 = v40[8];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = v41;
  v42 = v12[11];
  v43 = v10 + v42;
  v44 = &v11[v42];
  v45 = v44[8];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = v45;
  v46 = v12[12];
  v47 = (char *)(v10 + v46);
  v48 = &v11[v46];
  v49 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v50 = *((_QWORD *)v49 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v50 + 48))(v48, 1, v49))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v47, v48, v6);
    v103 = v49[5];
    v104 = &v47[v103];
    v105 = &v48[v103];
    v106 = v105[8];
    *(_QWORD *)v104 = *(_QWORD *)v105;
    v104[8] = v106;
    v107 = v49[6];
    v108 = &v47[v107];
    v109 = &v48[v107];
    v110 = v109[8];
    *(_QWORD *)v108 = *(_QWORD *)v109;
    v108[8] = v110;
    v111 = v49[7];
    v112 = &v47[v111];
    v113 = &v48[v111];
    v114 = v113[8];
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v114;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v50 + 56))(v47, 0, 1, v49);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v11[8];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v11[9];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v11[10];
    v30 = &v9[v29];
    v31 = &v10[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[11];
    v33 = &v9[v32];
    v34 = &v10[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = v11[12];
    v36 = &v9[v35];
    v37 = &v10[v35];
    v38 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v39 = *((_QWORD *)v38 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v36, (uint64_t)v37, v6);
      v41 = v38[5];
      v42 = &v36[v41];
      v43 = &v37[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v38[6];
      v45 = &v36[v44];
      v46 = &v37[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v38[7];
      v48 = &v36[v47];
      v49 = &v37[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, int *);
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8(v10, (uint64_t)v11, v6);
      v48 = v12[5];
      v49 = v10 + v48;
      v50 = &v11[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      *(_BYTE *)(v49 + 8) = v50[8];
      v51 = v12[6];
      v52 = v10 + v51;
      v53 = &v11[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *(_BYTE *)(v52 + 8) = v53[8];
      v54 = v12[7];
      v55 = v10 + v54;
      v56 = &v11[v54];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *(_BYTE *)(v55 + 8) = v56[8];
      v57 = v12[8];
      v58 = v10 + v57;
      v59 = &v11[v57];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      *(_BYTE *)(v58 + 8) = v59[8];
      v60 = v12[9];
      v61 = v10 + v60;
      v62 = &v11[v60];
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *(_BYTE *)(v61 + 8) = v62[8];
      v63 = v12[10];
      v64 = v10 + v63;
      v65 = &v11[v63];
      *(_QWORD *)v64 = *(_QWORD *)v65;
      *(_BYTE *)(v64 + 8) = v65[8];
      v66 = v12[11];
      v67 = v10 + v66;
      v68 = &v11[v66];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      *(_BYTE *)(v67 + 8) = v68[8];
      v69 = v12[12];
      v70 = v10 + v69;
      v71 = &v11[v69];
      v72 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
      v73 = *((_QWORD *)v72 - 1);
      v74 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v73 + 48);
      v75 = v74(v70, 1, v72);
      v76 = v74((uint64_t)v71, 1, v72);
      if (v75)
      {
        if (!v76)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v70, v71, v6);
          v77 = v72[5];
          v78 = v70 + v77;
          v79 = &v71[v77];
          *(_QWORD *)v78 = *(_QWORD *)v79;
          *(_BYTE *)(v78 + 8) = v79[8];
          v80 = v72[6];
          v81 = v70 + v80;
          v82 = &v71[v80];
          *(_QWORD *)v81 = *(_QWORD *)v82;
          *(_BYTE *)(v81 + 8) = v82[8];
          v83 = v72[7];
          v84 = v70 + v83;
          v85 = &v71[v83];
          *(_QWORD *)v84 = *(_QWORD *)v85;
          *(_BYTE *)(v84 + 8) = v85[8];
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v73 + 56))(v70, 0, 1, v72);
          return a1;
        }
      }
      else
      {
        if (!v76)
        {
          v8(v70, (uint64_t)v71, v6);
          v96 = v72[5];
          v97 = v70 + v96;
          v98 = &v71[v96];
          *(_QWORD *)v97 = *(_QWORD *)v98;
          *(_BYTE *)(v97 + 8) = v98[8];
          v99 = v72[6];
          v100 = v70 + v99;
          v101 = &v71[v99];
          *(_QWORD *)v100 = *(_QWORD *)v101;
          *(_BYTE *)(v100 + 8) = v101[8];
          v102 = v72[7];
          v103 = v70 + v102;
          v104 = &v71[v102];
          *(_QWORD *)v103 = *(_QWORD *)v104;
          *(_BYTE *)(v103 + 8) = v104[8];
          return a1;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
      }
      v45 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                  - 8)
                      + 64);
      v46 = (void *)v70;
      v47 = v71;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v10, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
LABEL_7:
    v45 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?)
                                - 8)
                    + 64);
    v46 = (void *)v10;
    v47 = v11;
LABEL_8:
    memcpy(v46, v47, v45);
    return a1;
  }
  if (v16)
    goto LABEL_7;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  v21 = v12[6];
  v22 = v10 + v21;
  v23 = &v11[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = v23[8];
  v24 = v12[7];
  v25 = v10 + v24;
  v26 = &v11[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v26[8];
  v27 = v12[8];
  v28 = v10 + v27;
  v29 = &v11[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = v29[8];
  v30 = v12[9];
  v31 = v10 + v30;
  v32 = &v11[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v32[8];
  v33 = v12[10];
  v34 = v10 + v33;
  v35 = &v11[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = v35[8];
  v36 = v12[11];
  v37 = v10 + v36;
  v38 = &v11[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = v38[8];
  v39 = v12[12];
  v40 = (char *)(v10 + v39);
  v41 = &v11[v39];
  v42 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v43 = *((_QWORD *)v42 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v17((uint64_t)v40, v41, v6);
    v86 = v42[5];
    v87 = &v40[v86];
    v88 = &v41[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    v87[8] = v88[8];
    v89 = v42[6];
    v90 = &v40[v89];
    v91 = &v41[v89];
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[8] = v91[8];
    v92 = v42[7];
    v93 = &v40[v92];
    v94 = &v41[v92];
    *(_QWORD *)v93 = *(_QWORD *)v94;
    v93[8] = v94[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6D400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm_0(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t __swift_get_extra_inhabitant_index_1Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v12 = a1 + *(int *)(a3 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GeomagneticModelData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6D490(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm_0(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t __swift_store_extra_inhabitant_index_2Tm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = a1 + *(int *)(a4 + 20);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GeomagneticModelData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_Timer(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Timer(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for UnknownStorage();
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, a4, a5);
    if (v8 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WifiAccessPoint(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (_QWORD *)((char *)a1 + v9);
    v13 = (_QWORD *)((char *)a2 + v9);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = a3[7];
    v16 = a3[8];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[9];
    v20 = a3[10];
    v21 = (char *)a1 + v19;
    v22 = (char *)a2 + v19;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = (char *)a1 + v20;
    v24 = (char *)a2 + v20;
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    v25 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v25) = *((_BYTE *)a2 + v25);
    v26 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_XtraFileAvailable(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (_QWORD *)(a2 + v8);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[9];
  v19 = a3[10];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  v24 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = (int *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 4) = *((_BYTE *)v16 + 4);
  *(_DWORD *)v15 = v17;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = (int *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 4) = *((_BYTE *)v20 + 4);
  *(_DWORD *)v19 = v21;
  v22 = a3[10];
  v23 = a1 + v22;
  v24 = (int *)(a2 + v22);
  v25 = *v24;
  *(_BYTE *)(v23 + 4) = *((_BYTE *)v24 + 4);
  *(_DWORD *)v23 = v25;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v26 = a3[14];
  v27 = a1 + v26;
  v28 = (int *)(a2 + v26);
  v29 = *v28;
  *(_BYTE *)(v27 + 4) = *((_BYTE *)v28 + 4);
  *(_DWORD *)v27 = v29;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = a3[7];
  v12 = a3[8];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v15 = a3[9];
  v16 = a3[10];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  v21 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WifiAccessPoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_QWORD *)(a1 + v8);
  v12 = (uint64_t *)(a2 + v8);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  v25 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_DWORD *)v27 = *(_DWORD *)v28;
  *(_BYTE *)(v27 + 4) = *(_BYTE *)(v28 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_33Tm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_34Tm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WifiAccessPoint()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WifiAssociationState(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, _QWORD, uint64_t, int *);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = v12[7];
      v24 = &v10[v23];
      v25 = &v11[v23];
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v25[4];
      v10[v12[8]] = v11[v12[8]];
      v26 = v12[9];
      v27 = &v10[v26];
      v28 = &v11[v26];
      v27[4] = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v29 = v12[10];
      v30 = &v10[v29];
      v31 = &v11[v29];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v31[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v32 = v12[14];
      v33 = &v10[v32];
      v34 = &v11[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      v35 = *(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain();
      v35(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v5(v6, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, _QWORD, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v11[7];
    v22 = &v9[v21];
    v23 = &v10[v21];
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v9[v11[8]] = v10[v11[8]];
    v24 = v11[9];
    v25 = &v9[v24];
    v26 = &v10[v24];
    v25[4] = v26[4];
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v27 = v11[10];
    v28 = &v9[v27];
    v29 = &v10[v27];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    v30 = v11[14];
    v31 = &v9[v30];
    v32 = &v10[v30];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = *(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain();
    v33(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int v61;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = *(int *)(a3 + 24);
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v39 = v12[5];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = *(_QWORD *)v41;
      v40[8] = v41[8];
      *(_QWORD *)v40 = v42;
      v43 = v12[6];
      v44 = &v10[v43];
      v45 = &v11[v43];
      *v44 = *v45;
      v44[1] = v45[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v46 = v12[7];
      v47 = &v10[v46];
      v48 = &v11[v46];
      v49 = *(_DWORD *)v48;
      v47[4] = v48[4];
      *(_DWORD *)v47 = v49;
      v10[v12[8]] = v11[v12[8]];
      v50 = v12[9];
      v51 = &v10[v50];
      v52 = &v11[v50];
      v53 = *(_DWORD *)v52;
      v51[4] = v52[4];
      *(_DWORD *)v51 = v53;
      v54 = v12[10];
      v55 = &v10[v54];
      v56 = &v11[v54];
      v57 = *(_DWORD *)v56;
      v55[4] = v56[4];
      *(_DWORD *)v55 = v57;
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v58 = v12[14];
      v59 = &v10[v58];
      v60 = &v11[v58];
      v61 = *(_DWORD *)v60;
      v59[4] = v60[4];
      *(_DWORD *)v59 = v61;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  *v22 = *v23;
  v22[1] = v23[1];
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  LOBYTE(v20) = v26[4];
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v20;
  v10[v12[8]] = v11[v12[8]];
  v27 = v12[9];
  v28 = &v10[v27];
  v29 = &v11[v27];
  LODWORD(v20) = *(_DWORD *)v29;
  v28[4] = v29[4];
  *(_DWORD *)v28 = v20;
  v30 = v12[10];
  v31 = &v10[v30];
  v32 = &v11[v30];
  LOBYTE(v20) = v32[4];
  *(_DWORD *)v31 = *(_DWORD *)v32;
  v31[4] = v20;
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  v33 = v12[14];
  v34 = &v10[v33];
  v35 = &v11[v33];
  LODWORD(v20) = *(_DWORD *)v35;
  v34[4] = v35[4];
  *(_DWORD *)v34 = v20;
  v36 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56);
  swift_bridgeObjectRetain();
  v36(v10, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *(_OWORD *)&v9[v11[6]] = *(_OWORD *)&v10[v11[6]];
    v17 = v11[7];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v9[v11[8]] = v10[v11[8]];
    v20 = v11[9];
    v21 = &v9[v20];
    v22 = &v10[v20];
    v21[4] = v22[4];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v23 = v11[10];
    v24 = &v9[v23];
    v25 = &v10[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v9[v11[13]] = v10[v11[13]];
    v26 = v11[14];
    v27 = &v9[v26];
    v28 = &v10[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WifiAssociationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[6];
      v38 = &v10[v37];
      v39 = (uint64_t *)&v11[v37];
      v41 = *v39;
      v40 = v39[1];
      *v38 = v41;
      v38[1] = v40;
      swift_bridgeObjectRelease();
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      *(_DWORD *)v43 = *(_DWORD *)v44;
      v43[4] = v44[4];
      v10[v12[8]] = v11[v12[8]];
      v45 = v12[9];
      v46 = &v10[v45];
      v47 = &v11[v45];
      *(_DWORD *)v46 = *(_DWORD *)v47;
      v46[4] = v47[4];
      v48 = v12[10];
      v49 = &v10[v48];
      v50 = &v11[v48];
      *(_DWORD *)v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      v10[v12[11]] = v11[v12[11]];
      v10[v12[12]] = v11[v12[12]];
      v10[v12[13]] = v11[v12[13]];
      v51 = v12[14];
      v52 = &v10[v51];
      v53 = &v11[v51];
      v52[4] = v53[4];
      *(_DWORD *)v52 = *(_DWORD *)v53;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
  v20 = v12[7];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v10[v12[8]] = v11[v12[8]];
  v23 = v12[9];
  v24 = &v10[v23];
  v25 = &v11[v23];
  v24[4] = v25[4];
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = v12[10];
  v27 = &v10[v26];
  v28 = &v11[v26];
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v10[v12[11]] = v11[v12[11]];
  v10[v12[12]] = v11[v12[12]];
  v10[v12[13]] = v11[v12[13]];
  v29 = v12[14];
  v30 = &v10[v29];
  v31 = &v11[v29];
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v30[4] = v31[4];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6E968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;
  int v12;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 253)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    v12 = ((v11 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v12 = -2;
  if (v12 < 0)
    v12 = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiAssociationState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6EA38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WifiAssociationState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_Accel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v33 = v15[5];
      v34 = &v13[v33];
      v35 = &v14[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v36;
      v37 = v15[6];
      v38 = &v13[v37];
      v39 = &v14[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v40;
      v41 = v15[7];
      v42 = &v13[v41];
      v43 = &v14[v41];
      v44 = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v44;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v19 = v15[5];
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v22;
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  v26 = v25[8];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v26;
  v27 = v15[7];
  v28 = &v13[v27];
  v29 = &v14[v27];
  v30 = v29[8];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v30;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_Accel(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v30 = v15[5];
      v31 = &v13[v30];
      v32 = &v14[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v15[6];
      v34 = &v13[v33];
      v35 = &v14[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v15[7];
      v37 = &v13[v36];
      v38 = &v14[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  v19 = v15[5];
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v15[6];
  v23 = &v13[v22];
  v24 = &v14[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = v15[7];
  v26 = &v13[v25];
  v27 = &v14[v25];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiScanResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for CLP_LogEntry_PrivateData_Accel()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiNotification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WifiNotification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    v26 = &a1[v25];
    v27 = &a2[v25];
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  int *v47;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v46 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v34 = v12[5];
      v35 = &v10[v34];
      v36 = &v11[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v12[6];
      v39 = &v10[v38];
      v40 = &v11[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  v19 = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v19;
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v12[7];
  v25 = &v10[v24];
  v26 = &v11[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v10, 0, 1, v12);
LABEL_7:
  *(_BYTE *)(a1 + v47[6]) = *(_BYTE *)(a2 + v47[6]);
  v29 = v47[7];
  v30 = a1 + v29;
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(a1 + v47[8]) = *(_BYTE *)(a2 + v47[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v40 = a3;
  v9 = a3[5];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v39 = *((_QWORD *)v12 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v39 + 48);
  v14 = v13(v10, 1, v12);
  v15 = v13(v11, 1, v12);
  if (!v14)
  {
    if (!v15)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v30 = v12[5];
      v31 = &v10[v30];
      v32 = &v11[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v12[6];
      v34 = &v10[v33];
      v35 = &v11[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = v12[7];
      v37 = &v10[v36];
      v38 = &v11[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v16 = v12[5];
  v17 = &v10[v16];
  v18 = &v11[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = v12[6];
  v20 = &v10[v19];
  v21 = &v11[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v12[7];
  v23 = &v10[v22];
  v24 = &v11[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v10, 0, 1, v12);
LABEL_7:
  v26 = v40[7];
  *(_BYTE *)(a1 + v40[6]) = *(_BYTE *)(a2 + v40[6]);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_BYTE *)(a1 + v40[8]) = *(_BYTE *)(a2 + v40[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6F918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 4u)
    v14 = 4;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v15 = v14 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 4u)
    return v15;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A6F9D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 4;
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction()
{
  type metadata completion function for CLP_LogEntry_PrivateData_AccelSample();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = a3[8];
    v20 = a3[9];
    v21 = *((_BYTE *)a2 + v19);
    v17[8] = v18[8];
    *((_BYTE *)v7 + v19) = v21;
    v22 = (char *)v7 + v20;
    *(_QWORD *)v22 = *(_QWORD *)((char *)a2 + v20);
    v22[8] = *((_BYTE *)a2 + v20 + 8);
    v23 = a3[10];
    v24 = a3[11];
    v25 = (char *)v7 + v23;
    v26 = (char *)a2 + v23;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = (char *)v7 + v24;
    v28 = (char *)a2 + v24;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = a3[12];
    v30 = (char *)v7 + v29;
    v31 = (char *)a2 + v29;
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = a3[10];
  v21 = a3[11];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = (char *)a1 + v21;
  v25 = (char *)a2 + v21;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)v12;
  v11[8] = v12[8];
  *(_QWORD *)v11 = v13;
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  LOBYTE(v13) = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v13;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = a3[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  LOBYTE(v20) = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v20;
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  LOBYTE(v20) = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v20;
  v27 = a3[12];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  LOBYTE(v20) = v29[8];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = v20;
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[10];
  v20 = a3[11];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[12];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = a3[10];
  v20 = a3[11];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = a3[12];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v16[6];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v16[7];
      v26 = &v14[v25];
      v27 = &v15[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v28 = a3[8];
    v29 = (char *)v7 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v12(v29, v30, v11);
      v34 = *(int *)(v31 + 20);
      v35 = &v29[v34];
      v36 = &v30[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = *(int *)(v31 + 24);
      v38 = &v29[v37];
      v39 = &v30[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GEOMapBuildingData(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v11(v6, v5);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
  return result;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapBuildingData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v27 = a3[8];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v11(v28, v29, v10);
    v33 = *(int *)(v30 + 20);
    v34 = &v28[v33];
    v35 = &v29[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    v36 = *(int *)(v30 + 24);
    v37 = &v28[v36];
    v38 = &v29[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapBuildingData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v70 = *(_QWORD *)(v9 - 8);
  v69 = *(void (**)(char *, char *, uint64_t))(v70 + 24);
  v69(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v11, v12, v9);
      v18 = v13[5];
      v19 = &v11[v18];
      v20 = &v12[v18];
      v21 = v20[8];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v21;
      v22 = v13[6];
      v23 = &v11[v22];
      v24 = &v12[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = v13[7];
      v27 = &v11[v26];
      v28 = &v12[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v69(v11, v12, v9);
  v49 = v13[5];
  v50 = &v11[v49];
  v51 = &v12[v49];
  v52 = v51[8];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v52;
  v53 = v13[6];
  v54 = &v11[v53];
  v55 = &v12[v53];
  v56 = v55[8];
  *(_QWORD *)v54 = *(_QWORD *)v55;
  v54[8] = v56;
  v57 = v13[7];
  v58 = &v11[v57];
  v59 = &v12[v57];
  v60 = v59[8];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v60;
LABEL_7:
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      v69(v32, v33, v9);
      v61 = *(int *)(v34 + 20);
      v62 = &v32[v61];
      v63 = &v33[v61];
      v64 = v63[8];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v64;
      v65 = *(int *)(v34 + 24);
      v66 = &v32[v65];
      v67 = &v33[v65];
      v68 = v67[8];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v66[8] = v68;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v32, v33, v9);
  v39 = *(int *)(v34 + 20);
  v40 = &v32[v39];
  v41 = &v33[v39];
  v42 = v41[8];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v42;
  v43 = *(int *)(v34 + 24);
  v44 = &v32[v43];
  v45 = &v33[v43];
  v46 = v45[8];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v46;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

_OWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapBuildingData(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v26 = a3[8];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v10(v27, v28, v9);
    v32 = *(int *)(v29 + 20);
    v33 = &v27[v32];
    v34 = &v28[v32];
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = v34[8];
    v35 = *(int *)(v29 + 24);
    v36 = &v27[v35];
    v37 = &v28[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapBuildingData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v60 = *(_QWORD *)(v9 - 8);
  v59 = *(void (**)(char *, char *, uint64_t))(v60 + 40);
  v59(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v11, v12, v9);
      v18 = v13[5];
      v19 = &v11[v18];
      v20 = &v12[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v13[6];
      v22 = &v11[v21];
      v23 = &v12[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = v13[7];
      v25 = &v11[v24];
      v26 = &v12[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v59(v11, v12, v9);
  v44 = v13[5];
  v45 = &v11[v44];
  v46 = &v12[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v47 = v13[6];
  v48 = &v11[v47];
  v49 = &v12[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  v50 = v13[7];
  v51 = &v11[v50];
  v52 = &v12[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v52[8];
LABEL_7:
  v28 = a3[8];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      v59(v29, v30, v9);
      v53 = *(int *)(v31 + 20);
      v54 = &v29[v53];
      v55 = &v30[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      v54[8] = v55[8];
      v56 = *(int *)(v31 + 24);
      v57 = &v29[v56];
      v58 = &v30[v56];
      *(_QWORD *)v57 = *(_QWORD *)v58;
      v57[8] = v58[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v29, v30, v9);
  v36 = *(int *)(v31 + 20);
  v37 = &v29[v36];
  v38 = &v30[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = *(int *)(v31 + 24);
  v40 = &v29[v39];
  v41 = &v30[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v40[8] = v41[8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A71474(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[8];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_235A7154C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[8];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapBuildingData()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *((_BYTE *)v7 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v14[4] = v15[4];
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v16 = a3[8];
    v17 = a3[9];
    v18 = (char *)v7 + v16;
    v19 = (char *)a2 + v16;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = (char *)v7 + v17;
    v21 = (char *)a2 + v17;
    v20[4] = v21[4];
    *(_DWORD *)v20 = *(_DWORD *)v21;
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v12[4] = v13[4];
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a3[8];
  v15 = a3[9];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v16[4] = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  v18[4] = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v13;
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v17;
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v21;
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[8];
  v14 = a3[9];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[8];
  v14 = a3[9];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = (char *)v7 + v14;
    v18 = (char *)a2 + v14;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[8];
    v20 = a3[9];
    v21 = (char *)v7 + v19;
    v22 = (char *)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = (char *)v7 + v20;
    v24 = (char *)a2 + v20;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = (char *)a1 + v12;
  v16 = (char *)a2 + v12;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[8];
  v18 = a3[9];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (char *)a1 + v18;
  v22 = (char *)a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v21;
  v22 = a3[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v24[8];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v25;
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[8];
  v17 = a3[9];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[8];
  v17 = a3[9];
  v18 = (char *)a1 + v16;
  v19 = (char *)a2 + v16;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = (char *)a1 + v17;
  v21 = (char *)a2 + v17;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (_QWORD *)((char *)v7 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v14 = *v15;
      v19 = v16[5];
      v20 = (char *)v14 + v19;
      v53 = v11;
      v21 = v12;
      v22 = (char *)v15 + v19;
      swift_bridgeObjectRetain();
      v23 = v22;
      v12 = v21;
      v11 = v53;
      v12(v20, v23, v53);
      v24 = v16[6];
      v25 = (char *)v14 + v24;
      v26 = (char *)v15 + v24;
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = v16[7];
      v28 = (char *)v14 + v27;
      v29 = (char *)v15 + v27;
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v29[8];
      v30 = v16[8];
      v31 = (char *)v14 + v30;
      v32 = (char *)v15 + v30;
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = v16[9];
      v34 = (char *)v14 + v33;
      v35 = (char *)v15 + v33;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v36 = a3[7];
    v37 = a3[8];
    v38 = (char *)v7 + v36;
    v39 = (char *)a2 + v36;
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    *((_BYTE *)v7 + v37) = *((_BYTE *)a2 + v37);
    v40 = a3[9];
    v41 = a3[10];
    v42 = (char *)v7 + v40;
    v43 = (char *)a2 + v40;
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    v44 = (char *)v7 + v41;
    v45 = (char *)a2 + v41;
    v46 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v12(v44, v45, v11);
      v44[*(int *)(v46 + 20)] = v45[*(int *)(v46 + 20)];
      v44[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v49 = a3[11];
    v50 = (char *)v7 + v49;
    v51 = (char *)a2 + v49;
    *(_QWORD *)v50 = *(_QWORD *)v51;
    v50[8] = v51[8];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 20), v5);
  }
  v8 = a1 + a2[10];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
  return result;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v17 = v14[5];
    v18 = (char *)v12 + v17;
    v51 = v9;
    v19 = v10;
    v20 = (char *)v13 + v17;
    swift_bridgeObjectRetain();
    v21 = v20;
    v10 = v19;
    v9 = v51;
    v10(v18, v21, v51);
    v22 = v14[6];
    v23 = (char *)v12 + v22;
    v24 = (char *)v13 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    v25 = v14[7];
    v26 = (char *)v12 + v25;
    v27 = (char *)v13 + v25;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v26[8] = v27[8];
    v28 = v14[8];
    v29 = (char *)v12 + v28;
    v30 = (char *)v13 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = v14[9];
    v32 = (char *)v12 + v31;
    v33 = (char *)v13 + v31;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v34 = a3[7];
  v35 = a3[8];
  v36 = (char *)a1 + v34;
  v37 = (char *)a2 + v34;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  v38 = a3[9];
  v39 = a3[10];
  v40 = (char *)a1 + v38;
  v41 = (char *)a2 + v38;
  *(_DWORD *)v40 = *(_DWORD *)v41;
  v40[4] = v41[4];
  v42 = (char *)a1 + v39;
  v43 = (char *)a2 + v39;
  v44 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v10(v42, v43, v9);
    v42[*(int *)(v44 + 20)] = v43[*(int *)(v44 + 20)];
    v42[*(int *)(v44 + 24)] = v43[*(int *)(v44 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  v47 = a3[11];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_BYTE *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char v76;
  void (*v77)(char *, char *);
  uint64_t v78;
  uint64_t v79;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  v10 = *(void (**)(char *, char *))(v78 + 24);
  v10(v7, v8);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  v77 = v10;
  if (v17)
  {
    if (!v18)
    {
      *v12 = *v13;
      v19 = v14[5];
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
      swift_bridgeObjectRetain();
      v22(v20, v21, v79);
      v23 = v14[6];
      v24 = (char *)v12 + v23;
      v25 = (char *)v13 + v23;
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      v27 = v14[7];
      v28 = (char *)v12 + v27;
      v29 = (char *)v13 + v27;
      v30 = v29[8];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v30;
      v31 = v14[8];
      v32 = (char *)v12 + v31;
      v33 = (char *)v13 + v31;
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      v35 = v14[9];
      v36 = (char *)v12 + v35;
      v37 = (char *)v13 + v35;
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  *v12 = *v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + v14[5], (char *)v13 + v14[5], v79);
  v61 = v14[6];
  v62 = (char *)v12 + v61;
  v63 = (char *)v13 + v61;
  v64 = v63[8];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v64;
  v65 = v14[7];
  v66 = (char *)v12 + v65;
  v67 = (char *)v13 + v65;
  v68 = v67[8];
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v68;
  v69 = v14[8];
  v70 = (char *)v12 + v69;
  v71 = (char *)v13 + v69;
  v72 = v71[8];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v72;
  v73 = v14[9];
  v74 = (char *)v12 + v73;
  v75 = (char *)v13 + v73;
  v76 = v75[8];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  v74[8] = v76;
LABEL_7:
  v40 = a3[7];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)v41 = v43;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  LODWORD(v43) = *(_DWORD *)v46;
  v45[4] = v46[4];
  *(_DWORD *)v45 = v43;
  v47 = a3[10];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  v50 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v51 + 48);
  v53 = v52(v48, 1, v50);
  v54 = v52(v49, 1, v50);
  if (!v53)
  {
    if (!v54)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v77)(v48, v49, v79);
      v48[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
      v48[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v48, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v54)
  {
LABEL_12:
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v78 + 16))(v48, v49, v79);
  v48[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
  v48[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
LABEL_13:
  v56 = a3[11];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = *(_QWORD *)v58;
  v57[8] = v58[8];
  *(_QWORD *)v57 = v59;
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + v14[5], (char *)v13 + v14[5], v9);
    v17 = v14[6];
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[7];
    v21 = (char *)v12 + v20;
    v22 = (char *)v13 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[8];
    v24 = (char *)v12 + v23;
    v25 = (char *)v13 + v23;
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    v26 = v14[9];
    v27 = (char *)v12 + v26;
    v28 = (char *)v13 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = a3[8];
  v31 = (char *)a1 + v29;
  v32 = (char *)a2 + v29;
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  *((_BYTE *)a1 + v30) = *((_BYTE *)a2 + v30);
  v33 = a3[9];
  v34 = a3[10];
  v35 = (char *)a1 + v33;
  v36 = (char *)a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  v35[4] = v36[4];
  v37 = (char *)a1 + v34;
  v38 = (char *)a2 + v34;
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v10(v37, v38, v9);
    v37[*(int *)(v39 + 20)] = v38[*(int *)(v39 + 20)];
    v37[*(int *)(v39 + 24)] = v38[*(int *)(v39 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v42 = a3[11];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v64 = *(_QWORD *)(v9 - 8);
  v63 = *(void (**)(char *, char *, uint64_t))(v64 + 40);
  v63(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v11 = *(_QWORD *)v12;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v11[v13[5]], &v12[v13[5]], v9);
      v18 = v13[6];
      v19 = &v11[v18];
      v20 = &v12[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v21 = v13[7];
      v22 = &v11[v21];
      v23 = &v12[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = v13[8];
      v25 = &v11[v24];
      v26 = &v12[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = v13[9];
      v28 = &v11[v27];
      v29 = &v12[v27];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v29[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v11 = *(_QWORD *)v12;
  swift_bridgeObjectRelease();
  v63(&v11[v13[5]], &v12[v13[5]], v9);
  v51 = v13[6];
  v52 = &v11[v51];
  v53 = &v12[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
  v54 = v13[7];
  v55 = &v11[v54];
  v56 = &v12[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  v57 = v13[8];
  v58 = &v11[v57];
  v59 = &v12[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v13[9];
  v61 = &v11[v60];
  v62 = &v12[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
LABEL_7:
  v31 = a3[7];
  v32 = a3[8];
  v33 = (char *)a1 + v31;
  v34 = (char *)a2 + v31;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *((_BYTE *)a1 + v32) = *((_BYTE *)a2 + v32);
  v35 = a3[9];
  v36 = a3[10];
  v37 = (char *)a1 + v35;
  v38 = (char *)a2 + v35;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  v37[4] = v38[4];
  v39 = (char *)a1 + v36;
  v40 = (char *)a2 + v36;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      v63(v39, v40, v9);
      v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
      v39[*(int *)(v41 + 24)] = v40[*(int *)(v41 + 24)];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v39, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
    goto LABEL_12;
  }
  if (v45)
  {
LABEL_12:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v39, v40, v9);
  v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
  v39[*(int *)(v41 + 24)] = v40[*(int *)(v41 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_13:
  v47 = a3[11];
  v48 = (char *)a1 + v47;
  v49 = (char *)a2 + v47;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v49[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A73120(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_235A731F8(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  return &type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = v16[5];
      v20 = &v14[v19];
      v21 = &v15[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v16[6];
      v23 = &v14[v22];
      v24 = &v15[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v16[7];
      v26 = &v14[v25];
      v27 = &v15[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    *((_BYTE *)v7 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v46 = a3;
  v47 = a2;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v11(v13, v14, v9);
      v34 = v15[5];
      v35 = &v13[v34];
      v36 = &v14[v34];
      v37 = v36[8];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v37;
      v38 = v15[6];
      v39 = &v13[v38];
      v40 = &v14[v38];
      v41 = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v41;
      v42 = v15[7];
      v43 = &v13[v42];
      v44 = &v14[v42];
      v45 = v44[8];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v45;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v15[6];
  v25 = &v13[v24];
  v26 = &v14[v24];
  v27 = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v27;
  v28 = v15[7];
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = v30[8];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v31;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v46 + 28)) = *((_BYTE *)v47 + *(int *)(v46 + 28));
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v40 = a3;
  v41 = a2;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v11(v13, v14, v9);
      v31 = v15[5];
      v32 = &v13[v31];
      v33 = &v14[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v15[6];
      v35 = &v13[v34];
      v36 = &v14[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v15[7];
      v38 = &v13[v37];
      v39 = &v14[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = v15[7];
  v27 = &v13[v26];
  v28 = &v14[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(v40 + 28)) = *((_BYTE *)v41 + *(int *)(v40 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_4Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_TechnologyStatus(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_TechnologyStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchOrientation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A740AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 4u)
    v9 = 4;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 4;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 4u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchOrientation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A7413C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_WatchOrientation()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WristState(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v25] = a2[v25];
    v26 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    a1[v26] = a2[v26];
    v27 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    a1[v27] = a2[v27];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v42 = *((_QWORD *)v12 - 1);
  v43 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v42 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v43, v11, v6);
      v17 = v12[5];
      v18 = v43 + v17;
      v19 = &v11[v17];
      v20 = v19[8];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v20;
      v21 = v12[6];
      v22 = v43 + v21;
      v23 = &v11[v21];
      v24 = v23[8];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *(_BYTE *)(v22 + 8) = v24;
      v25 = v12[7];
      v26 = v43 + v25;
      v27 = &v11[v25];
      v28 = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *(_BYTE *)(v26 + 8) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v42 + 56))(v43, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v43;
  }
  else
  {
    if (!v14)
    {
      v8(v43, (uint64_t)v11, v6);
      v29 = v12[5];
      v30 = v43 + v29;
      v31 = &v11[v29];
      v32 = v31[8];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v32;
      v33 = v12[6];
      v34 = v43 + v33;
      v35 = &v11[v33];
      v36 = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = v36;
      v37 = v12[7];
      v38 = v43 + v37;
      v39 = &v11[v37];
      v40 = v39[8];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_BYTE *)(v38 + 8) = v40;
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v43;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WristState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v39 = *((_QWORD *)v12 - 1);
  v40 = v10;
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48);
  LODWORD(v10) = v13(v10, 1, v12);
  v14 = v13((uint64_t)v11, 1, v12);
  if ((_DWORD)v10)
  {
    if (!v14)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v40, v11, v6);
      v17 = v12[5];
      v18 = v40 + v17;
      v19 = &v11[v17];
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *(_BYTE *)(v18 + 8) = v19[8];
      v20 = v12[6];
      v21 = v40 + v20;
      v22 = &v11[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *(_BYTE *)(v21 + 8) = v22[8];
      v23 = v12[7];
      v24 = v40 + v23;
      v25 = &v11[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *(_BYTE *)(v24 + 8) = v25[8];
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v39 + 56))(v40, 0, 1, v12);
      goto LABEL_9;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v40;
  }
  else
  {
    if (!v14)
    {
      v8(v40, (uint64_t)v11, v6);
      v26 = v12[5];
      v27 = v40 + v26;
      v28 = &v11[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *(_BYTE *)(v27 + 8) = v28[8];
      v29 = v12[6];
      v30 = v40 + v29;
      v31 = &v11[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      *(_BYTE *)(v30 + 8) = v31[8];
      v32 = v12[7];
      v33 = v40 + v32;
      v34 = &v11[v32];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      *(_BYTE *)(v33 + 8) = v34[8];
      goto LABEL_9;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v40, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?)
                                - 8)
                    + 64);
    v16 = (void *)v40;
  }
  memcpy(v16, v11, v15);
LABEL_9:
  v35 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  v36 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v36) = *(_BYTE *)(a2 + v36);
  v37 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v37) = *(_BYTE *)(a2 + v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WristState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_71Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2)
    v15 = ((v14 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v15 = -2;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WristState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_72Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

void type metadata completion function for CLP_LogEntry_PrivateData_WristState()
{
  type metadata completion function for CLP_LogEntry_PrivateData_DigitalElevationModel();
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateType;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_OperatingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235A74DD8 + 4 * byte_235BBDB47[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_235A74E0C + 4 * byte_235BBDB42[v4]))();
}

uint64_t sub_235A74E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A74E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A74E1CLL);
  return result;
}

uint64_t sub_235A74E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A74E30);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_235A74E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A74E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_WatchState(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, int *);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *((_QWORD *)v12 - 1);
    v55 = *(unsigned int (**)(char *, uint64_t, int *))(v13 + 48);
    v54 = v13;
    if (v55(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = a3[6];
    v26 = a3[7];
    v27 = (char *)a1 + v25;
    v28 = (char *)a2 + v25;
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v29 = (char *)a1 + v26;
    v30 = (char *)a2 + v26;
    v31 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v29, (uint64_t *)v30, v7);
      v29[*(int *)(v31 + 20)] = v30[*(int *)(v31 + 20)];
      v29[*(int *)(v31 + 24)] = v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v34 = a3[8];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
    v38 = *((_QWORD *)v37 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v35, (uint64_t *)v36, v7);
      v40 = v37[5];
      v41 = &v35[v40];
      v42 = &v36[v40];
      if (v55(&v36[v40], 1, v12))
      {
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)v41, (uint64_t *)v42, v7);
        v44 = v12[5];
        v45 = &v41[v44];
        v46 = &v42[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v45[8] = v46[8];
        v47 = v12[6];
        v48 = &v41[v47];
        v49 = &v42[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        v50 = v12[7];
        v51 = &v41[v50];
        v52 = &v42[v50];
        *(_QWORD *)v51 = *(_QWORD *)v52;
        v51[8] = v52[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v41, 0, 1, v12);
      }
      v35[v37[6]] = v36[v37[6]];
      v35[v37[7]] = v36[v37[7]];
      v35[v37[8]] = v36[v37[8]];
      v35[v37[9]] = v36[v37[9]];
      v35[v37[10]] = v36[v37[10]];
      v35[v37[11]] = v36[v37[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v14(v5, v4);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v14(v8, v4);
  v10 = a1 + a2[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v14(v10, v4);
    v13 = v10 + *(int *)(v11 + 20);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v13, 1, v6);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v14)(v13, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  v52 = v12;
  if (v53(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (void *)(a1 + v24);
  v28 = (const void *)(a2 + v24);
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[8];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v36 = *((_QWORD *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = v35[5];
    v39 = &v33[v38];
    v40 = &v34[v38];
    if (v53(&v34[v38], 1, v11))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      v42 = v11[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[6];
      v46 = &v39[v45];
      v47 = &v40[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v11[7];
      v49 = &v39[v48];
      v50 = &v40[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v52 + 56))(v39, 0, 1, v11);
    }
    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int *v47;
  uint64_t v48;
  uint64_t (*v49)(_BYTE *, uint64_t, int *);
  int v50;
  int v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char v98;
  uint64_t v99;
  uint64_t v101;
  char *v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, int *);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v118(a1, a2, v6);
  v8 = a3[5];
  v117 = a1;
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v114 = v13;
  v15 = v13(v10, 1, v11);
  v113 = v12;
  v115 = v7;
  v116 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
      v16 = v11[5];
      v17 = &v9[v16];
      v18 = &v10[v16];
      v19 = v18[8];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v19;
      v20 = v11[6];
      v21 = &v9[v20];
      v22 = &v10[v20];
      v23 = v22[8];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v23;
      v24 = v11[7];
      v25 = &v9[v24];
      v26 = &v10[v24];
      v27 = v26[8];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v27;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v118((uint64_t)v9, (uint64_t)v10, v6);
  v58 = v11[5];
  v59 = &v9[v58];
  v60 = &v10[v58];
  v61 = v60[8];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  v59[8] = v61;
  v62 = v11[6];
  v63 = &v9[v62];
  v64 = &v10[v62];
  v65 = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v65;
  v66 = v11[7];
  v67 = &v9[v66];
  v68 = &v10[v66];
  v69 = v68[8];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v69;
LABEL_7:
  v29 = v117;
  v30 = a3[6];
  v31 = v117 + v30;
  v32 = (int *)(a2 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  v34 = a3[7];
  v35 = (_BYTE *)(v117 + v34);
  v36 = (_BYTE *)(a2 + v34);
  v37 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v115 + 16))(v35, v36, v116);
      v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
      v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_13:
      v43 = v118;
      goto LABEL_14;
    }
LABEL_12:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  if (v41)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }
  v43 = v118;
  v118((uint64_t)v35, (uint64_t)v36, v116);
  v35[*(int *)(v37 + 20)] = v36[*(int *)(v37 + 20)];
  v35[*(int *)(v37 + 24)] = v36[*(int *)(v37 + 24)];
LABEL_14:
  v44 = a3[8];
  v45 = (_BYTE *)(v117 + v44);
  v46 = (_BYTE *)(a2 + v44);
  v47 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v48 = *((_QWORD *)v47 - 1);
  v49 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v45, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }
    v43((uint64_t)v45, (uint64_t)v46, v116);
    v70 = v47[5];
    v71 = &v45[v70];
    v72 = &v46[v70];
    v73 = v114(&v45[v70], 1, v11);
    v74 = v114(v72, 1, v11);
    if (v73)
    {
      if (!v74)
      {
        (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v71, v72, v116);
        v75 = v11[5];
        v76 = &v71[v75];
        v77 = &v72[v75];
        v78 = v77[8];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v78;
        v79 = v11[6];
        v80 = &v71[v79];
        v81 = &v72[v79];
        v82 = v81[8];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v80[8] = v82;
        v83 = v11[7];
        v84 = &v71[v83];
        v85 = &v72[v83];
        v86 = v85[8];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        v84[8] = v86;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v113 + 56))(v71, 0, 1, v11);
LABEL_31:
        v29 = v117;
        v45[v47[6]] = v46[v47[6]];
        v45[v47[7]] = v46[v47[7]];
        v45[v47[8]] = v46[v47[8]];
        v45[v47[9]] = v46[v47[9]];
        v45[v47[10]] = v46[v47[10]];
        v45[v47[11]] = v46[v47[11]];
        return v29;
      }
    }
    else
    {
      if (!v74)
      {
        v43((uint64_t)v71, (uint64_t)v72, v116);
        v101 = v11[5];
        v102 = &v71[v101];
        v103 = &v72[v101];
        v104 = v103[8];
        *(_QWORD *)v102 = *(_QWORD *)v103;
        v102[8] = v104;
        v105 = v11[6];
        v106 = &v71[v105];
        v107 = &v72[v105];
        v108 = v107[8];
        *(_QWORD *)v106 = *(_QWORD *)v107;
        v106[8] = v108;
        v109 = v11[7];
        v110 = &v71[v109];
        v111 = &v72[v109];
        v112 = v111[8];
        *(_QWORD *)v110 = *(_QWORD *)v111;
        v110[8] = v112;
        goto LABEL_31;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v71, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_31;
  }
  if (v51)
  {
LABEL_20:
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return v29;
  }
  v52 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v52(v45, v46, v116);
  v53 = v47[5];
  v54 = &v45[v53];
  v55 = &v46[v53];
  if (v114(&v46[v53], 1, v11))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v52(v54, v55, v116);
    v87 = v11[5];
    v88 = &v54[v87];
    v89 = &v55[v87];
    v90 = v89[8];
    *(_QWORD *)v88 = *(_QWORD *)v89;
    v88[8] = v90;
    v91 = v11[6];
    v92 = &v54[v91];
    v93 = &v55[v91];
    v94 = v93[8];
    *(_QWORD *)v92 = *(_QWORD *)v93;
    v92[8] = v94;
    v95 = v11[7];
    v96 = &v54[v95];
    v97 = &v55[v95];
    v98 = v97[8];
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v96[8] = v98;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v113 + 56))(v54, 0, 1, v11);
  }
  v45[v47[6]] = v46[v47[6]];
  v45[v47[7]] = v46[v47[7]];
  v45[v47[8]] = v46[v47[8]];
  v45[v47[9]] = v46[v47[9]];
  v45[v47[10]] = v46[v47[10]];
  v45[v47[11]] = v46[v47[11]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v48 + 56))(v45, 0, 1, v47);
  return v29;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, int *);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v53 = *(unsigned int (**)(char *, uint64_t, int *))(v12 + 48);
  v52 = v12;
  if (v53(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = a3[6];
  v24 = a3[7];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  v27 = (void *)(a1 + v24);
  v28 = (const void *)(a2 + v24);
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    *((_BYTE *)v27 + *(int *)(v29 + 20)) = *((_BYTE *)v28 + *(int *)(v29 + 20));
    *((_BYTE *)v27 + *(int *)(v29 + 24)) = *((_BYTE *)v28 + *(int *)(v29 + 24));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = a3[8];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v36 = *((_QWORD *)v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v38 = v35[5];
    v39 = &v33[v38];
    v40 = &v34[v38];
    if (v53(&v34[v38], 1, v11))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v7((uint64_t)v39, (uint64_t)v40, v6);
      v42 = v11[5];
      v43 = &v39[v42];
      v44 = &v40[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v11[6];
      v46 = &v39[v45];
      v47 = &v40[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v11[7];
      v49 = &v39[v48];
      v50 = &v40[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v52 + 56))(v39, 0, 1, v11);
    }
    v33[v35[6]] = v34[v35[6]];
    v33[v35[7]] = v34[v35[7]];
    v33[v35[8]] = v34[v35[8]];
    v33[v35[9]] = v34[v35[9]];
    v33[v35[10]] = v34[v35[10]];
    v33[v35[11]] = v34[v35[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_WatchState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, int *);
  int v46;
  int v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, int *);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v102(a1, a2, v6);
  v8 = a3[5];
  v101 = a1;
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(char *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v98 = v13;
  v15 = v13(v10, 1, v11);
  v97 = v12;
  v99 = v7;
  v100 = v6;
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v10, v6);
      v16 = v11[5];
      v17 = &v9[v16];
      v18 = &v10[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v11[6];
      v20 = &v9[v19];
      v21 = &v10[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v11[7];
      v23 = &v9[v22];
      v24 = &v10[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v102((uint64_t)v9, (uint64_t)v10, v6);
  v54 = v11[5];
  v55 = &v9[v54];
  v56 = &v10[v54];
  *(_QWORD *)v55 = *(_QWORD *)v56;
  v55[8] = v56[8];
  v57 = v11[6];
  v58 = &v9[v57];
  v59 = &v10[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  v60 = v11[7];
  v61 = &v9[v60];
  v62 = &v10[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
LABEL_7:
  v26 = v101;
  v27 = a3[6];
  v28 = a3[7];
  v29 = v101 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = (_BYTE *)(v101 + v28);
  v32 = (_BYTE *)(a2 + v28);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(v31, v32, v100);
      v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
      v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_13:
      v39 = v102;
      goto LABEL_14;
    }
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  if (v37)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
    goto LABEL_12;
  }
  v39 = v102;
  v102((uint64_t)v31, (uint64_t)v32, v100);
  v31[*(int *)(v33 + 20)] = v32[*(int *)(v33 + 20)];
  v31[*(int *)(v33 + 24)] = v32[*(int *)(v33 + 24)];
LABEL_14:
  v40 = a3[8];
  v41 = (_BYTE *)(v101 + v40);
  v42 = (_BYTE *)(a2 + v40);
  v43 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (v47)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v41, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
      goto LABEL_20;
    }
    v39((uint64_t)v41, (uint64_t)v42, v100);
    v63 = v43[5];
    v64 = &v41[v63];
    v65 = &v42[v63];
    v66 = v98(&v41[v63], 1, v11);
    v67 = v98(v65, 1, v11);
    if (v66)
    {
      if (!v67)
      {
        (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v64, v65, v100);
        v68 = v11[5];
        v69 = &v64[v68];
        v70 = &v65[v68];
        *(_QWORD *)v69 = *(_QWORD *)v70;
        v69[8] = v70[8];
        v71 = v11[6];
        v72 = &v64[v71];
        v73 = &v65[v71];
        *(_QWORD *)v72 = *(_QWORD *)v73;
        v72[8] = v73[8];
        v74 = v11[7];
        v75 = &v64[v74];
        v76 = &v65[v74];
        *(_QWORD *)v75 = *(_QWORD *)v76;
        v75[8] = v76[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v64, 0, 1, v11);
LABEL_31:
        v26 = v101;
        v41[v43[6]] = v42[v43[6]];
        v41[v43[7]] = v42[v43[7]];
        v41[v43[8]] = v42[v43[8]];
        v41[v43[9]] = v42[v43[9]];
        v41[v43[10]] = v42[v43[10]];
        v41[v43[11]] = v42[v43[11]];
        return v26;
      }
    }
    else
    {
      if (!v67)
      {
        v39((uint64_t)v64, (uint64_t)v65, v100);
        v88 = v11[5];
        v89 = &v64[v88];
        v90 = &v65[v88];
        *(_QWORD *)v89 = *(_QWORD *)v90;
        v89[8] = v90[8];
        v91 = v11[6];
        v92 = &v64[v91];
        v93 = &v65[v91];
        *(_QWORD *)v92 = *(_QWORD *)v93;
        v92[8] = v93[8];
        v94 = v11[7];
        v95 = &v64[v94];
        v96 = &v65[v94];
        *(_QWORD *)v95 = *(_QWORD *)v96;
        v95[8] = v96[8];
        goto LABEL_31;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_31;
  }
  if (v47)
  {
LABEL_20:
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    return v26;
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
  v48(v41, v42, v100);
  v49 = v43[5];
  v50 = &v41[v49];
  v51 = &v42[v49];
  if (v98(&v42[v49], 1, v11))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v48(v50, v51, v100);
    v77 = v11[5];
    v78 = &v50[v77];
    v79 = &v51[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    v80 = v11[6];
    v81 = &v50[v80];
    v82 = &v51[v80];
    *(_QWORD *)v81 = *(_QWORD *)v82;
    v81[8] = v82[8];
    v83 = v11[7];
    v84 = &v50[v83];
    v85 = &v51[v83];
    *(_QWORD *)v84 = *(_QWORD *)v85;
    v84[8] = v85[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v97 + 56))(v50, 0, 1, v11);
  }
  v41[v43[6]] = v42[v43[6]];
  v41[v43[7]] = v42[v43[7]];
  v41[v43[8]] = v42[v43[8]];
  v41[v43[9]] = v42[v43[9]];
  v41[v43[10]] = v42[v43[10]];
  v41[v43[11]] = v42[v43[11]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  return v26;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A767D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[7];
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_WatchState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A768A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WatchState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WristState);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PlaceInference(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_PlaceInference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PlaceInference()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A76DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PlaceInference()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235A76E90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PlaceInference()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_MapMatcherData();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BatchedLocationFixType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_235A77008 + 4 * byte_235BBDB51[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_235A7703C + 4 * byte_235BBDB4C[v4]))();
}

uint64_t sub_235A7703C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A77044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A7704CLL);
  return result;
}

uint64_t sub_235A77058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A77060);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_235A77064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A7706C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  return &type metadata for CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_RoutineVisit()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_RoutineVisit()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_OutdoorUpdate(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[9];
    v16 = a3[10];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v14 = a3[9];
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 8) = *((_BYTE *)v16 + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  LODWORD(v17) = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_DWORD *)v19 = v17;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_OutdoorUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[9];
  v15 = a3[10];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_21Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_22Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 44)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_OutdoorUpdate()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_InertialOdometrySample()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_235A777FC + 4 * byte_235BBDB5B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235A77830 + 4 * byte_235BBDB56[v4]))();
}

uint64_t sub_235A77830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A77838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235A77840);
  return result;
}

uint64_t sub_235A7784C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235A77854);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_235A77858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235A77860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  return &type metadata for CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass()
{
  unint64_t v0;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_Location._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Location._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
                if (v7 <= 0x3F)
                  swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionActivity._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionActivity._StorageClass()
{
  unint64_t v0;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MapVector._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MapVector._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(a1, a2, a3, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v7 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, a4, a5);
    if (v8 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass()
{
  unint64_t v0;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Battery);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_WifiNotification._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_WifiNotification._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t ALProtoRequest.().init()()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x24BDAC7A8]();
  v2 = &v5[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = swift_beginAccess();
  if (static ALProtoRequest._sTransactionCount == -1)
  {
    __break(1u);
  }
  else
  {
    ++static ALProtoRequest._sTransactionCount;
    CLP_LogEntry_AONLoc_Request.init()((uint64_t)v2);
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v2, v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
    swift_beginAccess();
    CLP_LogEntry_AONLoc_Request.processID.setter(0);
    CLP_LogEntry_AONLoc_Request.transactionID.setter(static ALProtoRequest._sTransactionCount);
    swift_endAccess();
    v4 = mach_continuous_time();
    swift_beginAccess();
    CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.setter(v4);
    swift_endAccess();
    return v0;
  }
  return result;
}

int *ALProtoRequest._sTransactionCount.unsafeMutableAddressor()
{
  return &static ALProtoRequest._sTransactionCount;
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1)
{
  return ALProtoRequest.__allocating_init(wifiResultOptions:)(a1, 3);
}

uint64_t type metadata accessor for ALProtoRequest()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ALProtoRequest;
  if (!type metadata singleton initialization cache for ALProtoRequest)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ALProtoRequest.__allocating_init(btResultOptions:)(uint64_t a1)
{
  return ALProtoRequest.__allocating_init(wifiResultOptions:)(a1, 4);
}

uint64_t ALProtoRequest.__allocating_init(wifiResultOptions:)(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  MEMORY[0x24BDAC7A8]();
  v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ALProtoRequest();
  v6 = swift_allocObject();
  ALProtoRequest.().init()();
  swift_beginAccess();
  swift_retain();
  CLP_LogEntry_AONLoc_Request.type.setter(a2);
  swift_endAccess();
  ALResultOptions.toPb()(v5);
  swift_beginAccess();
  CLP_LogEntry_AONLoc_Request.resultOptions.setter((uint64_t)v5);
  swift_endAccess();
  swift_release();
  v7 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

uint64_t ALProtoRequest.__allocating_init(data:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v1 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = swift_allocObject();
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  Message.init(serializedData:extensions:partial:options:)();
  if (v0)
    swift_deallocPartialClassInstance();
  else
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v4, v5 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return v5;
}

uint64_t ALProtoRequest.init(data:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  Message.init(serializedData:extensions:partial:options:)();
  if (v1)
  {
    type metadata accessor for ALProtoRequest();
    swift_deallocPartialClassInstance();
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request((uint64_t)v5, v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request)
  {
    v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(255);
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request);
  }
  return result;
}

uint64_t outlined init with take of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ALProtoRequest.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 128))(v2);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request();
  v5 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v4);
  return v5;
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Bool __swiftcall ALProtoRequest.isWiFiResult()()
{
  return ALProtoRequest.isWiFiResult()(3);
}

Swift::Bool __swiftcall ALProtoRequest.isBtResult()()
{
  return ALProtoRequest.isWiFiResult()(4);
}

BOOL ALProtoRequest.isWiFiResult()(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(uint64_t);
  BOOL v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  char v16;
  char v17;

  v3 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v15 - v8;
  v10 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 128);
  v10(v7);
  v11 = CLP_LogEntry_AONLoc_Request.hasType.getter();
  v12 = outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v9);
  if (!v11)
    return 0;
  v10(v12);
  v13 = CLP_LogEntry_AONLoc_Request.type.getter();
  outlined destroy of CLP_LogEntry_AONLoc_Request((uint64_t)v6);
  v17 = v13;
  v16 = a1;
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v15[2] == v15[1];
}

uint64_t ALProtoRequest._pb.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess();
  return outlined init with copy of CLP_LogEntry_AONLoc_Request(v3, a1);
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ALProtoRequest._pb.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb;
  swift_beginAccess();
  outlined assign with take of CLP_LogEntry_AONLoc_Request(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ALProtoRequest._pb.modify())()
{
  swift_beginAccess();
  return ALFResultsRequesterData._options.modify;
}

uint64_t static ALProtoRequest._sTransactionCount.getter()
{
  swift_beginAccess();
  return static ALProtoRequest._sTransactionCount;
}

uint64_t static ALProtoRequest._sTransactionCount.setter(int a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ALProtoRequest._sTransactionCount = a1;
  return result;
}

uint64_t (*static ALProtoRequest._sTransactionCount.modify())()
{
  swift_beginAccess();
  return ALFResultsRequesterData._label.modify;
}

uint64_t ALProtoRequest.deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return v0;
}

uint64_t ALProtoRequest.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request(v0 + OBJC_IVAR____TtC10ALProtobuf14ALProtoRequest__pb);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ALProtoRequest()
{
  return type metadata accessor for ALProtoRequest();
}

uint64_t type metadata completion function for ALProtoRequest()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ALProtoRequest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALProtoRequest.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALProtoRequest.serializedData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ALProtoRequest.isBtResult()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionMethod()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionMethod and conformance Proto_Gnss_Emergency_PositionMethod();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_PositionMethod@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_PositionMethod.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_PositionMethod@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_PositionMethod.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_PositionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionMethod.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionMethod(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionMethod.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionReqType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionReqType and conformance Proto_Gnss_Emergency_PositionReqType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_PositionReqType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionReqType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionReqType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionReqType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionSession()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionSession and conformance Proto_Gnss_Emergency_PositionSession();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_PositionSession.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionSession.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionSession(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionSession;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PositionProtocol()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_PositionProtocol and conformance Proto_Gnss_Emergency_PositionProtocol();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_PositionProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PositionProtocol(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PositionProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SessionErrorCode()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_SessionErrorCode and conformance Proto_Gnss_Emergency_SessionErrorCode();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_SessionErrorCode@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_SessionErrorCode.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_SessionErrorCode@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_SessionErrorCode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SessionErrorCode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionErrorCode.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_TriggerType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_TriggerType and conformance Proto_Gnss_Emergency_TriggerType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_TriggerType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_TriggerType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_TriggerType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_TriggerType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_Status()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_Status and conformance Proto_Gnss_Emergency_Status();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_Status@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_Status.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_Status@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_Status.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_Status.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_Status.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Status(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_Status.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_EndCause()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_EndCause and conformance Proto_Gnss_Emergency_EndCause();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_EndCause@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_EndCause.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_EndCause@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_EndCause.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_EndCause.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_EndCause.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_EndCause(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_EndCause.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ConnectionStatus()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_ConnectionStatus and conformance Proto_Gnss_Emergency_ConnectionStatus();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ConnectionStatus(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ConnectionStatus.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_CellType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_CellType and conformance Proto_Gnss_Emergency_CellType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_CellType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_CellType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_CellType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_CellType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_FreqMode()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_FreqMode and conformance Proto_Gnss_Emergency_FreqMode();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_FreqMode.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_FreqMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FreqMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FreqMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SLPAddressType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_SLPAddressType and conformance Proto_Gnss_Emergency_SLPAddressType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_SLPAddressType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SLPAddressType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SLPAddressType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SLPAddressType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ErrorCodes()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_ErrorCodes and conformance Proto_Gnss_Emergency_ErrorCodes();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_ErrorCodes.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ErrorCodes.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ErrorCodes(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ErrorCodes.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ClsModemState()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_ClsModemState and conformance Proto_Gnss_Emergency_ClsModemState();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_ClsModemState.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsModemState.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsModemState(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsModemState;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SessionProtocol()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_SessionProtocol and conformance Proto_Gnss_Emergency_SessionProtocol();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_SessionProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SessionProtocol(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SessionProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_PosProtocol()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_PosProtocol and conformance Proto_Gnss_Emergency_PosProtocol();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_PosProtocol.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_PosProtocol.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_PosProtocol(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_PosProtocol.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MethodType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_MethodType and conformance Proto_Gnss_Emergency_MethodType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_MethodType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MethodType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MethodType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MethodType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_Environment()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_Environment and conformance Proto_Gnss_Emergency_Environment();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_Environment.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_Environment.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Environment(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_Environment;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AdditionalInfo()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_AdditionalInfo and conformance Proto_Gnss_Emergency_AdditionalInfo();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_AdditionalInfo.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AdditionalInfo.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AdditionalInfo(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AdditionalInfo;
}

uint64_t Proto_Gnss_Emergency_GnssId.rawValue.getter(char a1)
{
  return qword_235BD98D8[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_GnssId(char *a1, char *a2)
{
  return qword_235BD98D8[*a1] == qword_235BD98D8[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GnssId()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GnssId and conformance Proto_Gnss_Emergency_GnssId();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_GnssId@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_GnssId.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_GnssId()
{
  char *v0;

  return qword_235BD98D8[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_GnssId@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_GnssId.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_GnssId(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BD98D8[*v1];
}

void *static Proto_Gnss_Emergency_GnssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GnssId(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssId.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_SupportedGADShapes.rawValue.getter(char a1)
{
  return qword_235BD9910[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_SupportedGADShapes(char *a1, char *a2)
{
  return qword_235BD9910[*a1] == qword_235BD9910[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_SupportedGADShapes()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_SupportedGADShapes and conformance Proto_Gnss_Emergency_SupportedGADShapes();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_SupportedGADShapes@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_SupportedGADShapes.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes()
{
  char *v0;

  return qword_235BD9910[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_SupportedGADShapes@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_SupportedGADShapes.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BD9910[*v1];
}

void *static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_SupportedGADShapes(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_SupportedGADShapes.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_FixType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_FixType and conformance Proto_Gnss_Emergency_FixType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_FixType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_FixType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FixType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_FixType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ClsNetworkType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_ClsNetworkType and conformance Proto_Gnss_Emergency_ClsNetworkType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ClsNetworkType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ClsNetworkType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GnssTimeId()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GnssTimeId and conformance Proto_Gnss_Emergency_GnssTimeId();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_GnssTimeId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssTimeId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GnssTimeId(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GnssTimeId.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_ShapeType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_ShapeType and conformance Proto_Gnss_Emergency_ShapeType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_ShapeType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_ShapeType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_ShapeType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Proto_Gnss_Emergency_ShapeType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_ShapeType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_ShapeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_ShapeType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_ShapeType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_VelocityType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_VelocityType and conformance Proto_Gnss_Emergency_VelocityType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_VelocityType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_VelocityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_VelocityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_VelocityType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MultipathIndicator()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_MultipathIndicator and conformance Proto_Gnss_Emergency_MultipathIndicator();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MultipathIndicator(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_MultipathIndicator.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssId()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssId and conformance Proto_Gnss_Emergency_GanssId();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_GanssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssId(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssId.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_MeasurementsResult.rawValue.getter(char a1)
{
  return qword_235BD99A0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_MeasurementsResult(char *a1, char *a2)
{
  return qword_235BD99A0[*a1] == qword_235BD99A0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MeasurementsResult()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_MeasurementsResult and conformance Proto_Gnss_Emergency_MeasurementsResult();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_MeasurementsResult()
{
  char *v0;

  return qword_235BD99A0[*v0];
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_MeasurementsResult(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BD99A0[*v1];
}

void *static Proto_Gnss_Emergency_MeasurementsResult.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MeasurementsResult.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementsResult(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementsResult;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_LcsGanssId()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_LcsGanssId and conformance Proto_Gnss_Emergency_LcsGanssId();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_LcsGanssId.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_LcsGanssId.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_LcsGanssId(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_LcsGanssId.allCases.getter;
}

ALProtobuf::Proto_Gnss_Emergency_AidMask_optional __swiftcall Proto_Gnss_Emergency_AidMask.init(rawValue:)(Swift::Int rawValue)
{
  return (ALProtobuf::Proto_Gnss_Emergency_AidMask_optional)specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(rawValue);
}

uint64_t Proto_Gnss_Emergency_AidMask.rawValue.getter(char a1)
{
  return qword_235BD9950[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Proto_Gnss_Emergency_AidMask(char *a1, char *a2)
{
  return qword_235BD9950[*a1] == qword_235BD9950[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AidMask()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_AidMask and conformance Proto_Gnss_Emergency_AidMask();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_AidMask@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance Proto_Gnss_Emergency_AidMask()
{
  char *v0;

  return qword_235BD9950[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_AidMask@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_AidMask.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Proto_Gnss_Emergency_AidMask(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BD9950[*v1];
}

void *static Proto_Gnss_Emergency_AidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AidMask(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_AidMask.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssCommonAidMask()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssCommonAidMask and conformance Proto_Gnss_Emergency_GanssCommonAidMask();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_GanssCommonAidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssCommonAidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssCommonAidMask(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssCommonAidMask;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssGenericAidMask()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssGenericAidMask and conformance Proto_Gnss_Emergency_GanssGenericAidMask();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssGenericAidMask(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssGenericAidMask.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GanssSignalIdMask and conformance Proto_Gnss_Emergency_GanssSignalIdMask();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_GanssSignalIdMask.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Proto_Gnss_Emergency_GanssSignalIdMask@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized Proto_Gnss_Emergency_GanssSignalIdMask.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static Proto_Gnss_Emergency_GanssSignalIdMask.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GanssSignalIdMask.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssSignalIdMask(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GanssSignalIdMask;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AssistanceRequest()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_AssistanceRequest and conformance Proto_Gnss_Emergency_AssistanceRequest();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_AssistanceRequest.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AssistanceRequest.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AssistanceRequest(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AssistanceRequest;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_UtranSfnGpsUncertainty and conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_UtranSfnGpsUncertainty.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_UtranSfnGpsUncertainty.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_UtranSfnGpsUncertainty;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_GpsDopplerUncMpsExt and conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_GpsDopplerUncMpsExt(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_GpsDopplerUncMpsExt.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_MeasurementAndEstimateResponseType and conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_MeasurementAndEstimateResponseType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_AfltAction()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_AfltAction and conformance Proto_Gnss_Emergency_AfltAction();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_AfltAction.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_AfltAction.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AfltAction(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_AfltAction;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Proto_Gnss_Emergency_WlanMeasurementResult()
{
  lazy protocol witness table accessor for type Proto_Gnss_Emergency_WlanMeasurementResult and conformance Proto_Gnss_Emergency_WlanMeasurementResult();
  return Enum.hash(into:)();
}

void *static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter()
{
  return &outlined read-only object #0 of static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Proto_Gnss_Emergency_WlanMeasurementResult(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Proto_Gnss_Emergency_WlanMeasurementResult.allCases.getter;
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.heloEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.heloEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasHeloEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearHeloEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.earlyReturnEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasEarlyReturnEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearEarlyReturnEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 24)) = 2;
}

double Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t (*Proto_Gnss_Emergency_Configuration.targetVerticalUncertaintyM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Configuration(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL Proto_Gnss_Emergency_Configuration.hasTargetVerticalUncertaintyM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Configuration.clearTargetVerticalUncertaintyM()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

int *Proto_Gnss_Emergency_Configuration.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  v3 = a1 + result[7];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify;
}

void Proto_Gnss_Emergency_SummaryReport.latitudeDegrees.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasLatitudeDegrees.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearLatitudeDegrees()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(_BYTE *)(v7 + 40) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify;
}

void Proto_Gnss_Emergency_SummaryReport.longitudeDegrees.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 32) = v4;
  *(_BYTE *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasLongitudeDegrees.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 40) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearLongitudeDegrees()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.altitudeMeters.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 48);
  if (*(_BYTE *)(v1 + 56))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.altitudeMeters.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 48) = a1;
  *(_BYTE *)(v7 + 56) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.altitudeMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 48) = v4;
  *(_BYTE *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAltitudeMeters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAltitudeMeters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 64);
  if (*(_BYTE *)(v1 + 72))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 64) = a1;
  *(_BYTE *)(v7 + 72) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.achievedHorizontalUncertaintyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 64) = v4;
  *(_BYTE *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAchievedHorizontalUncertaintyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAchievedHorizontalUncertaintyMeters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 80) = a1;
  *(_BYTE *)(v7 + 88) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.achievedVerticalUncertaintyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 80) = v4;
  *(_BYTE *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAchievedVerticalUncertaintyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAchievedVerticalUncertaintyMeters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.ttffSeconds.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 96);
  if (*(_BYTE *)(v1 + 104))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.ttffSeconds.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 96) = a1;
  *(_BYTE *)(v7 + 104) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 96);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify;
}

void Proto_Gnss_Emergency_SummaryReport.ttffSeconds.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 96) = v4;
  *(_BYTE *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasTtffSeconds.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 104) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearTtffSeconds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 96) = 0;
  *(_BYTE *)(v5 + 104) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.technologySource.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 112))
    return 0;
  else
    return *(unsigned int *)(v1 + 108);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.technologySource.setter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_DWORD *)(v7 + 108) = a1;
  *(_BYTE *)(v7 + 112) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.technologySource.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SummaryReport.technologySource.modify;
}

void Proto_Gnss_Emergency_SummaryReport.technologySource.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(_BYTE *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasTechnologySource.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearTechnologySource()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(_BYTE *)(v5 + 112) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.methodType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 113) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 113);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.methodType.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 113) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.methodType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 113);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.methodType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.methodType.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 113);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasMethodType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 113) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearMethodType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 113) = 18;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 114) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 114);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionType.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 114) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.sessionType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.sessionType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.sessionType.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasSessionType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 114) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearSessionType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 114) = 4;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.protocolType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 115) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 115);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.protocolType.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 115) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.protocolType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 115);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.protocolType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.protocolType.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 115);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasProtocolType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 115) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearProtocolType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 115) = 7;
}

double Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 120) = a1;
  *(_BYTE *)(v7 + 128) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 120) = v4;
  *(_BYTE *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SummaryReport);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedResponseTimeoutSeconds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 120) = 0;
  *(_BYTE *)(v5 + 128) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 136);
  if (*(_BYTE *)(v1 + 144))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 136) = a1;
  *(_BYTE *)(v7 + 144) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 136);
  if (*(_BYTE *)(v5 + 144))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedHorizontalAccuracyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 136) = v4;
  *(_BYTE *)(v10 + 144) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedHorizontalAccuracyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 144) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedHorizontalAccuracyMeters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 136) = 0;
  *(_BYTE *)(v5 + 144) = 1;
}

double Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 152);
  if (*(_BYTE *)(v1 + 160))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 152) = a1;
  *(_BYTE *)(v7 + 160) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 152);
  if (*(_BYTE *)(v5 + 160))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify;
}

void Proto_Gnss_Emergency_SummaryReport.requestedVerticalAccuracyMeters.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 152) = v4;
  *(_BYTE *)(v10 + 160) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedVerticalAccuracyMeters.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 160) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearRequestedVerticalAccuracyMeters()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 152) = 0;
  *(_BYTE *)(v5 + 160) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.posReqType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 161) == 8)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 161);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.posReqType.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 161) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.posReqType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 161);
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.posReqType.modify;
}

void Proto_Gnss_Emergency_SummaryReport.posReqType.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 161);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasPosReqType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 161) != 8;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearPosReqType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 161) = 8;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.errorCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 162) == 17)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 162);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.errorCode.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 162) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.errorCode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 162);
  if (v6 == 17)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SummaryReport.errorCode.modify;
}

void Proto_Gnss_Emergency_SummaryReport.errorCode.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 162);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasErrorCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 162) != 17;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearErrorCode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 162) = 17;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 163) & 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 163) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 163) & 1;
  return Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify;
}

void Proto_Gnss_Emergency_SummaryReport.heloEnabled.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 163) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasHeloEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 163) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearHeloEnabled()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 163) = 2;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloInjected.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 164) & 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.heloInjected.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 164) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.heloInjected.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 164) & 1;
  return Proto_Gnss_Emergency_SummaryReport.heloInjected.modify;
}

void Proto_Gnss_Emergency_SummaryReport.heloInjected.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 164) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasHeloInjected.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 164) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearHeloInjected()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 164) = 2;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.assistanceUsed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 176))
    return 0;
  else
    return *(_QWORD *)(v1 + 168);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.assistanceUsed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v7 + 168) = a1;
  *(_BYTE *)(v7 + 176) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 168);
  if (*(_BYTE *)(v5 + 176))
    v6 = 0;
  v3[9] = v6;
  return Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify;
}

void Proto_Gnss_Emergency_SummaryReport.assistanceUsed.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 168) = v4;
  *(_BYTE *)(v10 + 176) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasAssistanceUsed.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 176) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearAssistanceUsed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 168) = 0;
  *(_BYTE *)(v5 + 176) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 184))
    return 0;
  else
    return *(unsigned int *)(v1 + 180);
}

uint64_t Proto_Gnss_Emergency_SummaryReport.sessionID.setter(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_DWORD *)(v7 + 180) = a1;
  *(_BYTE *)(v7 + 184) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SummaryReport.sessionID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 180);
  if (*(_BYTE *)(v5 + 184))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SummaryReport.sessionID.modify;
}

void Proto_Gnss_Emergency_SummaryReport.sessionID.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 180) = v4;
  *(_BYTE *)(v10 + 184) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasSessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 184) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SummaryReport.clearSessionID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_SummaryReport._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 180) = 0;
  *(_BYTE *)(v5 + 184) = 1;
}

uint64_t Proto_Gnss_Emergency_SummaryReport.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_SummaryReport, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_SummaryReport._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SummaryReport._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplPort.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.suplPort.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplPort.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSuplPort()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.suplServer.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.suplServer.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSuplServer.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSuplServer()()
{
  CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableMsa.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.enableMsa.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasEnableMsa.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearEnableMsa()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplConfig);
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.enableLppRel13WlanMeas.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasEnableLppRel13WlanMeas.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearEnableLppRel13WlanMeas()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 32)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.supportsLppRel13WlanMeasTypeRssi.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSupportsLppRel13WlanMeasTypeRssi.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSupportsLppRel13WlanMeasTypeRssi()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 36)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplConfig.supportsLppRel13LocationSource.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplConfig.hasSupportsLppRel13LocationSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplConfig.clearSupportsLppRel13LocationSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0) + 40)) = 2;
}

int *Proto_Gnss_Emergency_SuplConfig.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplConfig(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.isServingCell.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.isServingCell.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.isServingCell.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasIsServingCell.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearIsServingCell()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mcc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.mcc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMcc.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearMcc()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.mnc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.mnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasMnc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearMnc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.tac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.tac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTac.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearTac()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.cellid.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.cellid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasCellid.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearCellid()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.pci.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasPci.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearPci()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrp.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrp.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.rsrp.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasRsrp.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearRsrp()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.rsrq.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasRsrq.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearRsrq()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.ta.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTa.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTa.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearTa()()
{
  Proto_Gnss_Emergency_LteCellInfo.clearTa()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_LteCellInfo.dlearfcn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LteCellInfo.clearDlearfcn()()
{
  Proto_Gnss_Emergency_LteCellInfo.clearDlearfcn()(type metadata accessor for Proto_Gnss_Emergency_LteCellInfo);
}

int *Proto_Gnss_Emergency_LteCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_LteCellInfo(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[11];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + result[14];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.isServingCell.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.isServingCell.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.isServingCell.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasIsServingCell.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearIsServingCell()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mcc.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mcc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.mcc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasMcc.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearMcc()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mnc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.mnc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.mnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasMnc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearMnc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.lac.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.lac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.lac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasLac.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearLac()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.cellid.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t Proto_Gnss_Emergency_GsmCellInfo.cellid.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_GsmCellInfo.cellid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GsmCellInfo.hasCellid.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GsmCellInfo.clearCellid()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
}

int *Proto_Gnss_Emergency_GsmCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GsmCellInfo.init()(type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo, a1);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.isServingCell.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasIsServingCell.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearIsServingCell()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mcc.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mcc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.mcc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasMcc.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearMcc()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mnc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.mnc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.mnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasMnc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearMnc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.lac.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.lac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.lac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasLac.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearLac()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.cellid.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.cellid.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.cellid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasCellid.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearCellid()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.psc.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 40));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.psc.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.pci.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.psc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasPsc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearPsc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.freqMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasFreqMode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearFreqMode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 44)) = 4;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 48));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WcdmaCellInfo.dluarfcn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WcdmaCellInfo.hasDluarfcn.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WcdmaCellInfo.clearDluarfcn()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo);
}

int *Proto_Gnss_Emergency_WcdmaCellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_WcdmaCellInfo(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 4;
  v8 = a1 + result[12];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_LocationId.cellType.getter()
{
  return Proto_Gnss_Emergency_LocationId.cellType.getter(type metadata accessor for Proto_Gnss_Emergency_LocationId);
}

uint64_t Proto_Gnss_Emergency_LocationId.cellType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_LocationId.cellType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LocationId.hasCellType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32)) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationId.clearCellType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 32)) = 7;
}

uint64_t Proto_Gnss_Emergency_LocationId.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Proto_Gnss_Emergency_LocationId.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationId(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*Proto_Gnss_Emergency_LocationId.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_LocationId.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  a1[2] = v2;
  v3 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v3 + 32)) = 7;
  return result;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementRequest.responseTimeSeconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementRequest.hasResponseTimeSeconds.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementRequest.clearResponseTimeSeconds()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementRequest.isRssiRequested.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementRequest.hasIsRssiRequested.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementRequest.clearIsRssiRequested()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.getter()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    v3 = 0;
  else
    v3 = *v1;
  outlined copy of Data?(*v1, v2);
  return v3;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  result = outlined consume of Data?(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = *v4;
  v6 = v4[1];
  if (v6 >> 60 == 15)
    v7 = 0;
  else
    v7 = *v4;
  v8 = 0xC000000000000000;
  if (v6 >> 60 != 15)
    v8 = v6;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  outlined copy of Data?(v5, v6);
  return Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.bssid.modify(uint64_t a1, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) + *(int *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)a1, v2);
    outlined consume of Data?(v5, v6);
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
    return outlined consume of Data._Representation(v4, v2);
  }
  else
  {
    result = outlined consume of Data?(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasBssid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20) + 8) >> 60 != 15;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearBssid()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 20);
  outlined consume of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_OWORD *)v1 = xmmword_235BB6C50;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.isServingFlagPresent.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasIsServingFlagPresent.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearIsServingFlagPresent()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.servingFlag.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasServingFlag.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearServingFlag()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.apChannelFrequencyNumber.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasApChannelFrequencyNumber.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearApChannelFrequencyNumber()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementElement.rssiDbm.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementElement.hasRssiDbm.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementElement.clearRssiDbm()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement);
}

double Proto_Gnss_Emergency_WlanMeasurementElement.init()@<D0>(uint64_t a1@<X8>)
{
  int *v2;
  double result;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementElement(0);
  result = 0.0;
  *(_OWORD *)(a1 + v2[5]) = xmmword_235BB6C50;
  *(_BYTE *)(a1 + v2[6]) = 2;
  *(_BYTE *)(a1 + v2[7]) = 2;
  v4 = a1 + v2[8];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[9];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_WlanMeasurementElement._bssid()
{
  return 0;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.result.getter()
{
  return Proto_Gnss_Emergency_WlanMeasurementList.result.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.result.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementList.result.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_WlanMeasurementList.hasResult.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_WlanMeasurementList.clearResult()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0) + 24)) = 6;
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList, a1);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList);
}

uint64_t (*Proto_Gnss_Emergency_WlanMeasurementList.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_WlanMeasurementList.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + *(int *)(v2 + 24)) = 6;
  return result;
}

uint64_t Proto_Gnss_Emergency_QoP.isValid.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.isValid.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.isValid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasIsValid.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearIsValid()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_QoP.horizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.horizontalAccuracy.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.horizontalAccuracy.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearHorizontalAccuracy()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.verticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.verticalAccuracy.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.verticalAccuracy.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearVerticalAccuracy()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.maxLocationAge.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.maxLocationAge.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.maxLocationAge.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasMaxLocationAge.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearMaxLocationAge()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.delay.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t Proto_Gnss_Emergency_QoP.delay.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

uint64_t (*Proto_Gnss_Emergency_QoP.delay.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_QoP(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_QoP.hasDelay.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_QoP.clearDelay()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_QoP);
}

int *Proto_Gnss_Emergency_QoP.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GsmCellInfo.init()(type metadata accessor for Proto_Gnss_Emergency_QoP, a1);
}

int *Proto_Gnss_Emergency_GsmCellInfo.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  v5 = a2 + result[6];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + result[7];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + result[8];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + result[9];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.isValid.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.isValid.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.isValid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasIsValid.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearIsValid()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.slpAddressType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.slpAddressType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.slpAddressType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasSlpAddressType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28)) != 5;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearSlpAddressType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 28)) = 5;
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.fQdn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SLPAddress.clearFQdn()()
{
  Proto_Gnss_Emergency_SLPAddress.clearFQdn()(type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t (*Proto_Gnss_Emergency_SLPAddress.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  _QWORD *v4;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 2;
  *((_BYTE *)a1 + v2[7]) = 5;
  v4 = (_QWORD *)((char *)a1 + v2[8]);
  *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t Proto_Gnss_Emergency_Notification.isValid.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t Proto_Gnss_Emergency_Notification.isValid.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*Proto_Gnss_Emergency_Notification.isValid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Notification.hasIsValid.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Notification.clearIsValid()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 20)) = 2;
}

uint64_t Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

uint64_t (*Proto_Gnss_Emergency_Notification.emergencyCallLocationPresent.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_Notification.hasEmergencyCallLocationPresent.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Notification.clearEmergencyCallLocationPresent()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Notification(0) + 24)) = 2;
}

uint64_t Proto_Gnss_Emergency_Notification.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 2;
  return result;
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t inited;
  int *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(inited + 20), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  v8 = (_QWORD *)((char *)a1 + v7[8]);
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

void (*Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    v11 = (_QWORD *)((char *)v9 + v6[8]);
    *v11 = 0;
    v11[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify;
}

void Proto_Gnss_Emergency_SuplInitVer2Extension.eSlpaddress.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

BOOL Proto_Gnss_Emergency_SuplInitVer2Extension.hasESlpaddress.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplInitVer2Extension.clearESlpaddress()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplInitVer2Extension.triggerType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplInitVer2Extension.hasTriggerType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplInitVer2Extension.clearTriggerType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0) + 24)) = 4;
}

uint64_t Proto_Gnss_Emergency_SuplInitVer2Extension.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  UnknownStorage.init()();
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  v3 = a1 + *(int *)(inited + 20);
  v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SuplInitVer2Extension._eSlpaddress@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_SLPAddress, a1);
}

uint64_t Proto_Gnss_Emergency_Init.posMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 16) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t Proto_Gnss_Emergency_Init.posMethod.setter(char a1)
{
  return Proto_Gnss_Emergency_Init.posMethod.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Init, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_Init._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_Init.posMethod.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_Init.posMethod.modify;
}

void Proto_Gnss_Emergency_Init.posMethod.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_Init.posMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_Init._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_Init.hasPosMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 16) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearPosMethod()()
{
  Proto_Gnss_Emergency_Init.clearPosMethod()(type metadata accessor for Proto_Gnss_Emergency_Init, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_Init._StorageClass.init(copying:), 18);
}

uint64_t Proto_Gnss_Emergency_Init.qop.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_QoP);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
}

uint64_t Proto_Gnss_Emergency_Init.qop.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_QoP);
  v13 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.qop.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_QoP);
  }
  return Proto_Gnss_Emergency_Init.qop.modify;
}

void Proto_Gnss_Emergency_Init.qop.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_Init.qop.setter, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

BOOL Proto_Gnss_Emergency_Init.hasQop.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop, type metadata accessor for Proto_Gnss_Emergency_QoP);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearQop()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_QoP?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.slpAddress.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[6]) = 2;
  *((_BYTE *)a1 + v7[7]) = 5;
  v8 = (_QWORD *)((char *)a1 + v7[8]);
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
}

uint64_t Proto_Gnss_Emergency_Init.slpAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  v13 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.slpAddress.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[6]) = 2;
    *((_BYTE *)v9 + v6[7]) = 5;
    v11 = (_QWORD *)((char *)v9 + v6[8]);
    *v11 = 0;
    v11[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
  }
  return Proto_Gnss_Emergency_Init.slpAddress.modify;
}

void Proto_Gnss_Emergency_Init.slpAddress.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_Init.slpAddress.setter, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

BOOL Proto_Gnss_Emergency_Init.hasSlpAddress.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress, type metadata accessor for Proto_Gnss_Emergency_SLPAddress);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearSlpAddress()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SLPAddress?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.notification.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Notification);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
}

uint64_t Proto_Gnss_Emergency_Init.notification.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_Notification);
  v13 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.notification.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Notification);
  }
  return Proto_Gnss_Emergency_Init.notification.modify;
}

void Proto_Gnss_Emergency_Init.notification.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_Init.notification.setter, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

BOOL Proto_Gnss_Emergency_Init.hasNotification.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification, type metadata accessor for Proto_Gnss_Emergency_Notification);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearNotification()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Notification?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.suplInitv2Extension.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 48))(v5, 1, inited) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(inited + 20);
  v9 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(a1 + *(int *)(inited + 24)) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
}

uint64_t Proto_Gnss_Emergency_Init.suplInitv2Extension.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 56))(v8, 0, 1, inited);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_Init.suplInitv2Extension.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t inited;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  v7 = *(_QWORD *)(inited - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, inited) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(inited + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v9[*(int *)(inited + 24)] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
  }
  return Proto_Gnss_Emergency_Init.suplInitv2Extension.modify;
}

void Proto_Gnss_Emergency_Init.suplInitv2Extension.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_Init.suplInitv2Extension.setter, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

BOOL Proto_Gnss_Emergency_Init.hasSuplInitv2Extension.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?, type metadata accessor for Proto_Gnss_Emergency_Init, &OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension, type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Init.clearSuplInitv2Extension()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Init(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_Init._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 56))(v3, 1, 1, inited);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SuplInitVer2Extension?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_Init.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_Init, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_Init._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_Init._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplPort.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplPort.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.suplPort.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSuplPort.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSuplPort()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplServer.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.suplServer.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.suplServer.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSuplServer.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSuplServer()()
{
  CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableMsa.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableMsa.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.enableMsa.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasEnableMsa.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearEnableMsa()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 28)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.imsi.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 32));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t Proto_Gnss_Emergency_SuplContext.imsi.setter(uint64_t a1, uint64_t a2)
{
  return Proto_Gnss_Emergency_SLPAddress.fQdn.setter(a1, a2, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.fQdn.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 32));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.imsi.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasImsi.getter()
{
  return Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

BOOL Proto_Gnss_Emergency_SLPAddress.hasFQdn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearImsi()()
{
  Proto_Gnss_Emergency_SLPAddress.clearFQdn()(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SLPAddress.clearFQdn()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 32));
  result = swift_bridgeObjectRelease();
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SuplContext.config.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  v8 = a1 + v7[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
}

uint64_t Proto_Gnss_Emergency_SuplContext.config.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_SuplContext.config.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

void (*Proto_Gnss_Emergency_SuplContext.config.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v11 = &v9[v6[7]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Configuration);
  }
  return Proto_Gnss_Emergency_SuplContext.config.modify;
}

void Proto_Gnss_Emergency_SuplContext.config.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

BOOL Proto_Gnss_Emergency_SuplContext.hasConfig.getter()
{
  return Proto_Gnss_Emergency_SuplContext.hasConfig.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_SuplContext, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearConfig()()
{
  Proto_Gnss_Emergency_SuplContext.clearConfig()(type metadata accessor for Proto_Gnss_Emergency_SuplContext, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Configuration?, type metadata accessor for Proto_Gnss_Emergency_Configuration);
}

uint64_t Proto_Gnss_Emergency_SuplContext.nsuuid.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.nsuuid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.nsuuid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasNsuuid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40) + 8) != 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearNsuuid()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 40));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.enableLppRel13WlanMeas.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasEnableLppRel13WlanMeas.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearEnableLppRel13WlanMeas()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 44)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) & 1;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.supportsLppRel13WlanMeasTypeRssi.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSupportsLppRel13WlanMeasTypeRssi.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSupportsLppRel13WlanMeasTypeRssi()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 48)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.getter()
{
  return Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.getter(type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.setter(char a1)
{
  return Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SuplContext);
}

uint64_t (*Proto_Gnss_Emergency_SuplContext.supportsLppRel13LocationSource.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SuplContext.hasSupportsLppRel13LocationSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52)) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SuplContext.clearSupportsLppRel13LocationSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SuplContext(0) + 52)) = 2;
}

uint64_t Proto_Gnss_Emergency_SuplContext.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = (_QWORD *)(a1 + v2[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + v2[7]) = 2;
  v5 = (_QWORD *)(a1 + v2[8]);
  *v5 = 0;
  v5[1] = 0;
  v6 = a1 + v2[9];
  v7 = type metadata accessor for Proto_Gnss_Emergency_Configuration(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)(a1 + v2[10]);
  *v9 = 0;
  v9[1] = 0;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  *(_BYTE *)(a1 + v2[13]) = 2;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SuplContext._config@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_Configuration, a1);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.sessionID.getter()
{
  return Proto_Gnss_Emergency_SessionStatus.sessionID.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.sessionID.setter(int a1)
{
  return Proto_Gnss_Emergency_SessionStatus.sessionID.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_SessionStatus.sessionID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_SessionStatus.sessionID.modify;
}

void Proto_Gnss_Emergency_SessionStatus.sessionID.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_SessionStatus.sessionID.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasSessionID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearSessionID()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()(type metadata accessor for Proto_Gnss_Emergency_SessionStatus, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass, (void (*)(uint64_t))Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_SessionStatus.posMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 21) == 18)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 21);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.posMethod.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 21) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.posMethod.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 18)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.posMethod.modify;
}

void Proto_Gnss_Emergency_SessionStatus.posMethod.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 21);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasPosMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 21) != 18;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearPosMethod()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 21) = 18;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.status.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 22) == 33)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 22);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.status.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 22) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.status.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 22);
  if (v6 == 33)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.status.modify;
}

void Proto_Gnss_Emergency_SessionStatus.status.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 22);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasStatus.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 22) != 33;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearStatus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 22) = 33;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.endCause.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 23) == 24)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 23);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.endCause.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 23) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.endCause.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (v6 == 24)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_SessionStatus.endCause.modify;
}

void Proto_Gnss_Emergency_SessionStatus.endCause.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 23);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasEndCause.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 23) != 24;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearEndCause()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 23) = 24;
}

double Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 24);
  if (*(_BYTE *)(v1 + 32))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 32) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 24);
  if (*(_BYTE *)(v5 + 32))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify;
}

void Proto_Gnss_Emergency_SessionStatus.horzAccuracyRequested.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 24) = v4;
  *(_BYTE *)(v10 + 32) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasHorzAccuracyRequested.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearHorzAccuracyRequested()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 32) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.lat.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 40);
  if (*(_BYTE *)(v1 + 48))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.lat.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 40) = a1;
  *(_BYTE *)(v6 + 48) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.lat.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 40);
  if (*(_BYTE *)(v5 + 48))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.lat.modify;
}

void Proto_Gnss_Emergency_SessionStatus.lat.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 40) = v4;
  *(_BYTE *)(v10 + 48) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasLat.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearLat()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.lon.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 56);
  if (*(_BYTE *)(v1 + 64))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.lon.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 56) = a1;
  *(_BYTE *)(v6 + 64) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.lon.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 56);
  if (*(_BYTE *)(v5 + 64))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.lon.modify;
}

void Proto_Gnss_Emergency_SessionStatus.lon.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 56) = v4;
  *(_BYTE *)(v10 + 64) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasLon.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearLon()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 64) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.alt.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 72);
  if (*(_BYTE *)(v1 + 80))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.alt.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 72) = a1;
  *(_BYTE *)(v6 + 80) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.alt.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 72);
  if (*(_BYTE *)(v5 + 80))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.alt.modify;
}

void Proto_Gnss_Emergency_SessionStatus.alt.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 72) = v4;
  *(_BYTE *)(v10 + 80) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasAlt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearAlt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 88);
  if (*(_BYTE *)(v1 + 96))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 88) = a1;
  *(_BYTE *)(v6 + 96) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 88);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncSemiMajor.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 88) = v4;
  *(_BYTE *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncSemiMajor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 96) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncSemiMajor()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 88) = 0;
  *(_BYTE *)(v4 + 96) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 104);
  if (*(_BYTE *)(v1 + 112))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 104) = a1;
  *(_BYTE *)(v6 + 112) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 104);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncSemiMinor.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 104) = v4;
  *(_BYTE *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncSemiMinor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 112) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncSemiMinor()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 1;
}

double Proto_Gnss_Emergency_SessionStatus.uncAlt.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

double Proto_Gnss_Emergency_SummaryReport.requestedResponseTimeoutSeconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(double *)(v2 + 120);
  if (*(_BYTE *)(v2 + 128))
    return 0.0;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.uncAlt.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 120) = a1;
  *(_BYTE *)(v6 + 128) = 0;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.uncAlt.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 120);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return Proto_Gnss_Emergency_SessionStatus.uncAlt.modify;
}

void Proto_Gnss_Emergency_SessionStatus.uncAlt.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 120) = v4;
  *(_BYTE *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasUncAlt.getter()
{
  return Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(type metadata accessor for Proto_Gnss_Emergency_SessionStatus);
}

BOOL Proto_Gnss_Emergency_SummaryReport.hasRequestedResponseTimeoutSeconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 128) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearUncAlt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 120) = 0;
  *(_BYTE *)(v4 + 128) = 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.ephProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 129) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.ephProvided.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 129) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.ephProvided.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 129) & 1;
  return Proto_Gnss_Emergency_SessionStatus.ephProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.ephProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 129) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasEphProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 129) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearEphProvided()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 129) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 130) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.referenceTimeProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 130) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasReferenceTimeProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 130) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearReferenceTimeProvided()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 130) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 131) = a1 & 1;
  return result;
}

void (*Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify;
}

void Proto_Gnss_Emergency_SessionStatus.referenceLocationProvided.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 131) = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasReferenceLocationProvided.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 131) != 2;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearReferenceLocationProvided()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 131) = 2;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
}

int *Proto_Gnss_Emergency_NetworkReferenceLocation.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefLocation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  v13 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[11]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
  }
  return Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify;
}

void Proto_Gnss_Emergency_SessionStatus.nwRefLocation.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_SessionStatus.nwRefLocation.setter, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasNwRefLocation.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearNwRefLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceLocation?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
}

int *Proto_Gnss_Emergency_NetworkReferenceTime.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_SessionStatus.nwRefTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  v13 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
  }
  return Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify;
}

void Proto_Gnss_Emergency_SessionStatus.nwRefTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_SessionStatus.nwRefTime.setter, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

BOOL Proto_Gnss_Emergency_SessionStatus.hasNwRefTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?, type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime, type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionStatus.clearNwRefTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_SessionStatus._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_NetworkReferenceTime?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_SessionStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_SessionStatus, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_SessionStatus._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_SessionStatus._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.msPart.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.msPart.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsGpsCellTime.msPart.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsGpsCellTime.hasMsPart.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsGpsCellTime.clearMsPart()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsGpsCellTime.lsPart.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsGpsCellTime.hasLsPart.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsGpsCellTime.clearLsPart()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify;
}

void Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasUtranGpsTimingCellFrames.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearUtranGpsTimingCellFrames()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.refCellSfn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasRefCellSfn.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearRefCellSfn()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.refCellPsc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasRefCellPsc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearRefCellPsc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.roundTripTime.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.roundTripTime.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.roundTripTime.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasRoundTripTime.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearRoundTripTime()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.modemState.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.modemState.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_ClsUtranCellTime.modemState.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_ClsUtranCellTime.hasModemState.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36)) != 5;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsUtranCellTime.clearModemState()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0) + 36)) = 5;
}

uint64_t Proto_Gnss_Emergency_ClsUtranCellTime.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  return result;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_ClsUtranCellTime._utranGpsTimingCellFrames@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_Plmn.mcc.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_Plmn.mcc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*Proto_Gnss_Emergency_Plmn.mcc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_Plmn.hasMcc.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Plmn.clearMcc()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_Plmn.mnc.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_Plmn.mnc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*Proto_Gnss_Emergency_Plmn.mnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_Plmn.hasMnc.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Plmn.clearMnc()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_Plmn.threeDigitMnc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_Plmn.threeDigitMnc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t (*Proto_Gnss_Emergency_Plmn.threeDigitMnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Plmn(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_Plmn.hasThreeDigitMnc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Plmn.clearThreeDigitMnc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

int *Proto_Gnss_Emergency_Plmn.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_Plmn.init()(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter()
{
  return Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t Proto_Gnss_Emergency_SessionInfo.sessionProtocol.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SessionInfo.sessionProtocol.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SessionInfo.hasSessionProtocol.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 20)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionInfo.clearSessionProtocol()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 20)) = 6;
}

uint64_t Proto_Gnss_Emergency_SessionInfo.posProtocol.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_SessionInfo.posProtocol.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_SessionInfo.posProtocol.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_SessionInfo.hasPosProtocol.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24)) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionInfo.clearPosProtocol()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 24)) = 7;
}

uint64_t Proto_Gnss_Emergency_SessionInfo.sessionID.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t Proto_Gnss_Emergency_SessionInfo.sessionID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

uint64_t (*Proto_Gnss_Emergency_SessionInfo.sessionID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_SessionInfo.hasSessionID.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_SessionInfo.clearSessionID()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

int *Proto_Gnss_Emergency_SessionInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  *(_BYTE *)(a1 + result[5]) = 6;
  *(_BYTE *)(a1 + result[6]) = 7;
  v3 = a1 + result[7];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_PositionRequest.interval.getter()
{
  return Proto_Gnss_Emergency_SessionStatus.sessionID.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_SessionStatus.sessionID.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 20))
    return 0;
  else
    return *(unsigned int *)(v2 + 16);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.interval.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.interval.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.interval.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.interval.modify;
}

void Proto_Gnss_Emergency_PositionRequest.interval.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.interval.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasInterval.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearInterval()()
{
  Proto_Gnss_Emergency_PositionRequest.clearInterval()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.method.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 21) == 5)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 21);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.method.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 21) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_PositionRequest.method.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 21);
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_PositionRequest.method.modify;
}

void Proto_Gnss_Emergency_PositionRequest.method.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 21);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasMethod.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 21) != 5;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearMethod()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 21) = 5;
}

uint64_t Proto_Gnss_Emergency_PositionRequest.responseTime.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.responseTime.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.responseTime.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.responseTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.responseTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.responseTime.modify;
}

void Proto_Gnss_Emergency_PositionRequest.responseTime.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.responseTime.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasResponseTime.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasResponseTime.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearResponseTime()()
{
  Proto_Gnss_Emergency_PositionRequest.clearResponseTime()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 32);
  if (*(_BYTE *)(v5 + 36))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.modify;
}

void Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.horizontalAccuracy.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasHorizontalAccuracy.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasHorizontalAccuracy.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearHorizontalAccuracy()()
{
  Proto_Gnss_Emergency_PositionRequest.clearHorizontalAccuracy()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.velocityRequested.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.velocityRequested.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.velocityRequested.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.velocityRequested.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.velocityRequested.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 40);
  if (*(_BYTE *)(v5 + 44))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.velocityRequested.modify;
}

void Proto_Gnss_Emergency_PositionRequest.velocityRequested.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.velocityRequested.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasVelocityRequested.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasVelocityRequested.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearVelocityRequested()()
{
  Proto_Gnss_Emergency_PositionRequest.clearVelocityRequested()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 48);
  if (*(_BYTE *)(v5 + 52))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.modify;
}

void Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.horizontalConfidence.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasHorizontalConfidence.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasHorizontalConfidence.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearHorizontalConfidence()()
{
  Proto_Gnss_Emergency_PositionRequest.clearHorizontalConfidence()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 56);
  if (*(_BYTE *)(v5 + 60))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.modify;
}

void Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.verticalAccuracy.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasVerticalAccuracy.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasVerticalAccuracy.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearVerticalAccuracy()()
{
  Proto_Gnss_Emergency_PositionRequest.clearVerticalAccuracy()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalConfidence.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.verticalConfidence.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalConfidence.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.verticalConfidence.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.verticalConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 64);
  if (*(_BYTE *)(v5 + 68))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.verticalConfidence.modify;
}

void Proto_Gnss_Emergency_PositionRequest.verticalConfidence.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.verticalConfidence.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasVerticalConfidence.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasVerticalConfidence.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearVerticalConfidence()()
{
  Proto_Gnss_Emergency_PositionRequest.clearVerticalConfidence()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalRequested.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.verticalRequested.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.verticalRequested.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.verticalRequested.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.verticalRequested.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 72);
  if (*(_BYTE *)(v5 + 76))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.verticalRequested.modify;
}

void Proto_Gnss_Emergency_PositionRequest.verticalRequested.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.verticalRequested.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasVerticalRequested.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasVerticalRequested.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearVerticalRequested()()
{
  Proto_Gnss_Emergency_PositionRequest.clearVerticalRequested()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 80);
  if (*(_BYTE *)(v5 + 84))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.modify;
}

void Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.assistanceAvailability.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasAssistanceAvailability.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasAssistanceAvailability.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearAssistanceAvailability()()
{
  Proto_Gnss_Emergency_PositionRequest.clearAssistanceAvailability()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.requestedGnss.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.requestedGnss.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.requestedGnss.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.requestedGnss.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.requestedGnss.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 88);
  if (*(_BYTE *)(v5 + 92))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.requestedGnss.modify;
}

void Proto_Gnss_Emergency_PositionRequest.requestedGnss.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.requestedGnss.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasRequestedGnss.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasRequestedGnss.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearRequestedGnss()()
{
  Proto_Gnss_Emergency_PositionRequest.clearRequestedGnss()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 96);
  if (*(_BYTE *)(v5 + 100))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.modify;
}

void Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.locCordinateTypeAllowed.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasLocCordinateTypeAllowed.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasLocCordinateTypeAllowed.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearLocCordinateTypeAllowed()()
{
  Proto_Gnss_Emergency_PositionRequest.clearLocCordinateTypeAllowed()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.velocityTypes.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.velocityTypes.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.velocityTypes.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.velocityTypes.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.velocityTypes.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 104);
  if (*(_BYTE *)(v5 + 108))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.velocityTypes.modify;
}

void Proto_Gnss_Emergency_PositionRequest.velocityTypes.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.velocityTypes.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasVelocityTypes.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasVelocityTypes.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearVelocityTypes()()
{
  Proto_Gnss_Emergency_PositionRequest.clearVelocityTypes()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.reportAmount.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.reportAmount.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.reportAmount.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.reportAmount.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.reportAmount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 112);
  if (*(_BYTE *)(v5 + 116))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.reportAmount.modify;
}

void Proto_Gnss_Emergency_PositionRequest.reportAmount.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.reportAmount.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasReportAmount.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasReportAmount.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearReportAmount()()
{
  Proto_Gnss_Emergency_PositionRequest.clearReportAmount()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.posProtocol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 117) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 117);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.posProtocol.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v6 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 117) = a1;
  return result;
}

void (*Proto_Gnss_Emergency_PositionRequest.posProtocol.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 117);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_PositionRequest.posProtocol.modify;
}

void Proto_Gnss_Emergency_PositionRequest.posProtocol.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v9 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 117);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasPosProtocol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 117) != 7;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearPosProtocol()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
    v4 = swift_allocObject();
    specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 117) = 7;
}

uint64_t Proto_Gnss_Emergency_PositionRequest.sessionID.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.sessionID.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.sessionID.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.sessionID.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.sessionID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 120);
  if (*(_BYTE *)(v5 + 124))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.sessionID.modify;
}

void Proto_Gnss_Emergency_PositionRequest.sessionID.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.sessionID.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasSessionID.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasSessionID.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearSessionID()()
{
  Proto_Gnss_Emergency_PositionRequest.clearSessionID()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

uint64_t Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 128);
  if (*(_BYTE *)(v5 + 132))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.modify;
}

void Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionRequest.horizontalAccuracyMeters.modify(a1, a2, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionRequest.hasHorizontalAccuracyMeters.getter()
{
  return Proto_Gnss_Emergency_PositionRequest.hasHorizontalAccuracyMeters.getter(type metadata accessor for Proto_Gnss_Emergency_PositionRequest);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionRequest.clearHorizontalAccuracyMeters()()
{
  Proto_Gnss_Emergency_PositionRequest.clearHorizontalAccuracyMeters()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, (void (*)(void))type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass, 133, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionRequest._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionRequest.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_PositionRequest, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_PositionRequest._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_PositionRequest._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.ueUtranCellTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 5;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.ueUtranCellTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

void (*Proto_Gnss_Emergency_UtranGpsTimeMeasured.ueUtranCellTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v9[v6[9]] = 5;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
  }
  return Proto_Gnss_Emergency_UtranGpsTimeMeasured.ueUtranCellTime.modify;
}

void Proto_Gnss_Emergency_UtranGpsTimeMeasured.ueUtranCellTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

BOOL Proto_Gnss_Emergency_UtranGpsTimeMeasured.hasUeUtranCellTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGpsTimeMeasured.clearUeUtranCellTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsUtranCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

void (*Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
  }
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.modify;
}

BOOL Proto_Gnss_Emergency_UtranGpsTimeMeasured.hasGpsUmtsTimeDifference.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGpsTimeMeasured.clearGpsUmtsTimeDifference()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsGpsCellTime?, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_UtranGpsTimeMeasured.init()(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_UtranGpsTimeMeasured._ueUtranCellTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime, a1);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.refFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.refFrameMsb.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.refFrameMsb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.hasRefFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.clearRefFrameMsb()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.gpsTowSubms.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.gpsTowSubms.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t (*Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.gpsTowSubms.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.hasGpsTowSubms.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.clearGpsTowSubms()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t Proto_Gnss_Emergency_ClsGpsCellTime.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = a1(0);
  v5 = a2 + *(int *)(result + 20);
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + *(int *)(result + 24);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.refFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.refFrameMsb.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.refFrameMsb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.hasRefFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.clearRefFrameMsb()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.deltaTow.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.deltaTow.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t (*Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.deltaTow.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.hasDeltaTow.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.clearDeltaTow()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.utranTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  v11 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.utranTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

void (*Proto_Gnss_Emergency_GpsTimeMeasured.utranTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_ClsUtranCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    v14 = type metadata accessor for Proto_Gnss_Emergency_ClsGpsCellTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
  }
  return Proto_Gnss_Emergency_GpsTimeMeasured.utranTime.modify;
}

void Proto_Gnss_Emergency_GpsTimeMeasured.utranTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

BOOL Proto_Gnss_Emergency_GpsTimeMeasured.hasUtranTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTimeMeasured.clearUtranTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeBased.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t Proto_Gnss_Emergency_UtranGpsTimeMeasured.gpsUmtsTimeDifference.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *(int *)(v12 + 24), (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + *(int *)(v13 + 20);
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeBased.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

void (*Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeBased.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
  }
  return Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeBased.modify;
}

void Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeBased.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

BOOL Proto_Gnss_Emergency_GpsTimeMeasured.hasGeranTimeBased.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTimeMeasured.clearGeranTimeBased()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeAssisted.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeAssisted.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

void (*Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeAssisted.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
  }
  return Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeAssisted.modify;
}

void Proto_Gnss_Emergency_GpsTimeMeasured.geranTimeAssisted.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

BOOL Proto_Gnss_Emergency_GpsTimeMeasured.hasGeranTimeAssisted.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTimeMeasured.clearGeranTimeAssisted()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted?, type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasured.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1 + v2[7];
  v8 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GpsTimeMeasured._utranTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GpsTimeMeasured._geranTimeBased@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GpsTimeMeasured._geranTimeAssisted@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted, a1);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasuredType.getter()
{
  return Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams);
}

uint64_t Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 6)
    return 0;
  else
    return v2;
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasuredType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasuredType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GpsTimeMeasuredParams.hasGpsTimeMeasuredType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 20)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTimeMeasuredParams.clearGpsTimeMeasuredType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 20)) = 6;
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasured.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  v11 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + v7[7];
  v13 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasured.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

void (*Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasured.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_UtranGpsTimeMeasured(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[7]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
  }
  return Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasured.modify;
}

void Proto_Gnss_Emergency_GpsTimeMeasuredParams.gpsTimeMeasured.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

BOOL Proto_Gnss_Emergency_GpsTimeMeasuredParams.hasGpsTimeMeasured.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTimeMeasuredParams.clearGpsTimeMeasured()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams, 6, type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GpsTimeMeasuredParams._gpsTimeMeasured@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasured, a1);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodmsec.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodmsec.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*Proto_Gnss_Emergency_GpsTOD.gpsTodmsec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GpsTOD.hasGpsTodmsec.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTOD.clearGpsTodmsec()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodfrac.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodfrac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*Proto_Gnss_Emergency_GpsTOD.gpsTodfrac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GpsTOD.hasGpsTodfrac.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTOD.clearGpsTodfrac()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodunc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_GpsTOD.gpsTodunc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t (*Proto_Gnss_Emergency_GpsTOD.gpsTodunc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GpsTOD.hasGpsTodunc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GpsTOD.clearGpsTodunc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

int *Proto_Gnss_Emergency_GpsTOD.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_Plmn.init()(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

int *Proto_Gnss_Emergency_Plmn.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + result[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + result[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTow.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTow.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_LocationInfo.gpsTow.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasGpsTow.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearGpsTow()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsWeek.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsWeek.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_LocationInfo.gpsWeek.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasGpsWeek.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearGpsWeek()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTimeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTimeUncertainty.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_LocationInfo.gpsTimeUncertainty.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasGpsTimeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearGpsTimeUncertainty()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.fixType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_LocationInfo.fixType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_LocationInfo.fixType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasFixType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearFixType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 32)) = 4;
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTodpresent.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTodpresent.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_LocationInfo.gpsTodpresent.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasGpsTodpresent.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearGpsTodpresent()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.gpsTod.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

void (*Proto_Gnss_Emergency_LocationInfo.gpsTod.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
  }
  return Proto_Gnss_Emergency_LocationInfo.gpsTod.modify;
}

void Proto_Gnss_Emergency_LocationInfo.gpsTod.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

BOOL Proto_Gnss_Emergency_LocationInfo.hasGpsTod.getter()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?, type metadata accessor for Proto_Gnss_Emergency_LocationInfo, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocationInfo.clearGpsTod()()
{
  CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()(type metadata accessor for Proto_Gnss_Emergency_LocationInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GpsTOD?, type metadata accessor for Proto_Gnss_Emergency_GpsTOD);
}

uint64_t Proto_Gnss_Emergency_LocationInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  v6 = a1 + v2[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[10];
  v8 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_LocationInfo._gpsTod@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_GpsTOD, a1);
}

uint64_t Proto_Gnss_Emergency_CellInfo.cellInfoPresent.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.cellInfoPresent.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*Proto_Gnss_Emergency_CellInfo.cellInfoPresent.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_CellInfo.hasCellInfoPresent.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_CellInfo.clearCellInfoPresent()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.lac.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.lac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*Proto_Gnss_Emergency_CellInfo.lac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_CellInfo.hasLac.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_CellInfo.clearLac()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.cellID.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.cellID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t (*Proto_Gnss_Emergency_CellInfo.cellID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_CellInfo.hasCellID.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_CellInfo.clearCellID()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_CellInfo.plmn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
}

uint64_t Proto_Gnss_Emergency_CellInfo.plmn.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

void (*Proto_Gnss_Emergency_CellInfo.plmn.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_CellInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }
  return Proto_Gnss_Emergency_CellInfo.plmn.modify;
}

void Proto_Gnss_Emergency_CellInfo.plmn.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

BOOL Proto_Gnss_Emergency_CellInfo.hasPlmn.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_CellInfo, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_CellInfo.clearPlmn()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for Proto_Gnss_Emergency_CellInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_CellInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_CellInfo._plmn@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_Plmn, a1);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.utranTimingOfCellFrames.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 20));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.utranTimingOfCellFrames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v4 = v1 + *(int *)(result + 20);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_UtranGanssTimeMeasured.utranTimingOfCellFrames.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify;
}

BOOL Proto_Gnss_Emergency_UtranGanssTimeMeasured.hasUtranTimingOfCellFrames.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGanssTimeMeasured.clearUtranTimingOfCellFrames()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.refSfn.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.refSfn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*Proto_Gnss_Emergency_UtranGanssTimeMeasured.refSfn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_UtranGanssTimeMeasured.hasRefSfn.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGanssTimeMeasured.clearRefSfn()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.refPsc.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.refPsc.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t (*Proto_Gnss_Emergency_UtranGanssTimeMeasured.refPsc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_UtranGanssTimeMeasured.hasRefPsc.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGanssTimeMeasured.clearRefPsc()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }
  return Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.modify;
}

void Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

BOOL Proto_Gnss_Emergency_UtranGanssTimeMeasured.hasCellInfo.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_UtranGanssTimeMeasured.clearCellInfo()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_UtranGanssTimeMeasured.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  v7 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_UtranGanssTimeMeasured._cellInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_CellInfo, a1);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameMsb.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameMsb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGanssTimeMeasured.hasRefFrameMsb.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGanssTimeMeasured.clearRefFrameMsb()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameNumber.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameNumber.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t (*Proto_Gnss_Emergency_GeranGanssTimeMeasured.refFrameNumber.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GeranGanssTimeMeasured.hasRefFrameNumber.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGanssTimeMeasured.clearRefFrameNumber()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.cellInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.cellInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

void (*Proto_Gnss_Emergency_GeranGanssTimeMeasured.cellInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
  }
  return Proto_Gnss_Emergency_UtranGanssTimeMeasured.cellInfo.modify;
}

BOOL Proto_Gnss_Emergency_GeranGanssTimeMeasured.hasCellInfo.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GeranGanssTimeMeasured.clearCellInfo()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured, &demangling cache variable for type metadata for Proto_Gnss_Emergency_CellInfo?, type metadata accessor for Proto_Gnss_Emergency_CellInfo);
}

uint64_t Proto_Gnss_Emergency_GeranGanssTimeMeasured.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  v6 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.physicalCellID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.physicalCellID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.physicalCellID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasPhysicalCellID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearPhysicalCellID()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.earfcn.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.earfcn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.earfcn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasEarfcn.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearEarfcn()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.sfn.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.sfn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.sfn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasSfn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearSfn()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.cgiInfoPresent.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.cgiInfoPresent.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.cgiInfoPresent.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasCgiInfoPresent.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearCgiInfoPresent()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.plmn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.plmn.setter(uint64_t a1)
{
  return Proto_Gnss_Emergency_SuplContext.config.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_SuplContext.config.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*Proto_Gnss_Emergency_ClsEutranCell.plmn.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Plmn);
  }
  return Proto_Gnss_Emergency_CellInfo.plmn.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasPlmn.getter()
{
  return Proto_Gnss_Emergency_SuplContext.hasConfig.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

BOOL Proto_Gnss_Emergency_SuplContext.hasConfig.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 36), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearPlmn()()
{
  Proto_Gnss_Emergency_SuplContext.clearConfig()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Plmn?, type metadata accessor for Proto_Gnss_Emergency_Plmn);
}

uint64_t Proto_Gnss_Emergency_SuplContext.clearConfig()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.eutranCellID.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.eutranCellID.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.eutranCellID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasEutranCellID.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearEutranCellID()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.secFromFrameStart.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.secFromFrameStart.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.secFromFrameStart.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasSecFromFrameStart.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearSecFromFrameStart()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.fracSecFromFrameStart.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.fracSecFromFrameStart.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.rsrq.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.fracSecFromFrameStart.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasFracSecFromFrameStart.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearFracSecFromFrameStart()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.frameDrift.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 52));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.frameDrift.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.ta.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.ta.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 52);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.frameDrift.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 52);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasFrameDrift.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasTa.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasTa.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 52) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearFrameDrift()()
{
  Proto_Gnss_Emergency_LteCellInfo.clearTa()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearTa()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 52);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.refTimeUncertainty.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 56));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.refTimeUncertainty.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.dlearfcn.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 56);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.refTimeUncertainty.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasRefTimeUncertainty.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL Proto_Gnss_Emergency_LteCellInfo.hasDlearfcn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 56) + 4) & 1) == 0;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearRefTimeUncertainty()()
{
  Proto_Gnss_Emergency_LteCellInfo.clearDlearfcn()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_LteCellInfo.clearDlearfcn()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 56);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.bsAlign.getter()
{
  return Proto_Gnss_Emergency_ClsEutranCell.bsAlign.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.bsAlign.setter(int a1)
{
  return Proto_Gnss_Emergency_ClsEutranCell.bsAlign.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t (*Proto_Gnss_Emergency_ClsEutranCell.bsAlign.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0) + 60);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_ClsEutranCell.hasBsAlign.getter()
{
  return Proto_Gnss_Emergency_ClsEutranCell.hasBsAlign.getter(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ClsEutranCell.clearBsAlign()()
{
  Proto_Gnss_Emergency_ClsEutranCell.clearBsAlign()(type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

uint64_t Proto_Gnss_Emergency_ClsEutranCell.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[9];
  v8 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v2[12];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v2[13];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v2[14];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v2[15];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  v12 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  v13 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    v15 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
  }
  return Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.modify;
}

void Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_GanssTimeMeasured.utranTime.setter, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

BOOL Proto_Gnss_Emergency_GanssTimeMeasured.hasUtranTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime, type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssTimeMeasured.clearUtranTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_UtranGanssTimeMeasured?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  v11 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  v13 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_CellInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
  }
  return Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.modify;
}

void Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_GanssTimeMeasured.geranTime.setter, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

BOOL Proto_Gnss_Emergency_GanssTimeMeasured.hasGeranTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime, type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssTimeMeasured.clearGeranTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GeranGanssTimeMeasured?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  v13 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1 + v7[12];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = a1 + v7[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = a1 + v7[14];
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = a1 + v7[15];
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  v13 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_Plmn(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v19 = &v9[v6[12]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    v20 = &v9[v6[13]];
    *(_DWORD *)v20 = 0;
    v20[4] = 1;
    v21 = &v9[v6[14]];
    *(_DWORD *)v21 = 0;
    v21[4] = 1;
    v22 = &v9[v6[15]];
    *(_DWORD *)v22 = 0;
    v22[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
  }
  return Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.modify;
}

void Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_GanssTimeMeasured.eutranTime.setter, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

BOOL Proto_Gnss_Emergency_GanssTimeMeasured.hasEutranTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime, type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssTimeMeasured.clearEutranTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ClsEutranCell?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasured.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GanssTimeMeasured._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasuredType.getter()
{
  return Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasuredType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasuredType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GanssTimeMeasuredParams.hasGanssTimeMeasuredType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 20)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssTimeMeasuredParams.clearGanssTimeMeasuredType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 20)) = 6;
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasured.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasured.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

void (*Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasured.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
  }
  return Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasured.modify;
}

void Proto_Gnss_Emergency_GanssTimeMeasuredParams.ganssTimeMeasured.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

BOOL Proto_Gnss_Emergency_GanssTimeMeasuredParams.hasGanssTimeMeasured.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssTimeMeasuredParams.clearGanssTimeMeasured()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssTimeMeasured?, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured);
}

uint64_t Proto_Gnss_Emergency_GanssTimeMeasuredParams.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasuredParams, 6, type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, a1);
}

uint64_t Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v8 = a1(0);
  *(_BYTE *)(a4 + *(int *)(v8 + 20)) = a2;
  v9 = a4 + *(int *)(v8 + 24);
  v10 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_GanssTimeMeasuredParams._ganssTimeMeasured@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured, a1);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.timeID.getter()
{
  return Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.timeID.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.timeID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasTimeID.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 20)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearTimeID()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 20)) = 6;
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTod.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTod.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.ganssTod.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasGanssTod.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearGanssTod()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTodFrac.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTodFrac.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.ganssTodFrac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasGanssTodFrac.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearGanssTodFrac()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTodUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.ganssTodUncertainty.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.ganssTodUncertainty.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasGanssTodUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearGanssTodUncertainty()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.fixType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.fixType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.fixType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasFixType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36)) != 4;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearFixType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 36)) = 4;
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.referenceGnss.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t Proto_Gnss_Emergency_GanssLocationInfo.referenceGnss.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

uint64_t (*Proto_Gnss_Emergency_GanssLocationInfo.referenceGnss.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_GanssLocationInfo.hasReferenceGnss.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_GanssLocationInfo.clearReferenceGnss()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

int *Proto_Gnss_Emergency_GanssLocationInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  *(_BYTE *)(a1 + result[5]) = 6;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 4;
  v6 = a1 + result[10];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_EllipsoidPoint.latitude.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_EllipsoidPoint.latitude.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidPoint.latitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidPoint.hasLatitude.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidPoint.clearLatitude()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_EllipsoidPoint.longitude.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_EllipsoidPoint.longitude.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidPoint.longitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidPoint.hasLongitude.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidPoint.clearLongitude()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_EllipsoidPoint.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.point.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.point.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*Proto_Gnss_Emergency_PointUncertainCircle.point.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_PointUncertainCircle.point.modify;
}

void Proto_Gnss_Emergency_PointUncertainCircle.point.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

BOOL Proto_Gnss_Emergency_PointUncertainCircle.hasPoint.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainCircle.clearPoint()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.uncertainRadius.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.uncertainRadius.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t (*Proto_Gnss_Emergency_PointUncertainCircle.uncertainRadius.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainCircle.hasUncertainRadius.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainCircle.clearUncertainRadius()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_PointUncertainCircle.init()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_PointUncertainCircle._point@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.point.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.point.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*Proto_Gnss_Emergency_PointUncertainEllipse.point.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_PointUncertainCircle.point.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainEllipse.hasPoint.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainEllipse.clearPoint()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.semiMajorAxis.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.semiMajorAxis.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*Proto_Gnss_Emergency_PointUncertainEllipse.semiMajorAxis.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainEllipse.hasSemiMajorAxis.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainEllipse.clearSemiMajorAxis()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.semiMinorAxis.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.semiMinorAxis.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*Proto_Gnss_Emergency_PointUncertainEllipse.semiMinorAxis.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainEllipse.hasSemiMinorAxis.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainEllipse.clearSemiMinorAxis()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.orientationAngle.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.orientationAngle.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*Proto_Gnss_Emergency_PointUncertainEllipse.orientationAngle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainEllipse.hasOrientationAngle.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainEllipse.clearOrientationAngle()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.confidence.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.confidence.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t (*Proto_Gnss_Emergency_PointUncertainEllipse.confidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointUncertainEllipse.hasConfidence.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointUncertainEllipse.clearConfidence()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

uint64_t Proto_Gnss_Emergency_PointUncertainEllipse.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.point.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.point.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.point.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_PointUncertainCircle.point.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasPoint.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearPoint()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.altitude.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.altitude.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.altitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearAltitude()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMajorAxis.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMajorAxis.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMajorAxis.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasSemiMajorAxis.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearSemiMajorAxis()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMinorAxis.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMinorAxis.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.semiMinorAxis.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasSemiMinorAxis.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearSemiMinorAxis()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.orientationAngle.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.orientationAngle.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.orientationAngle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasOrientationAngle.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearOrientationAngle()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.uncertainAltitude.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.uncertainAltitude.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.uncertainAltitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasUncertainAltitude.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearUncertainAltitude()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.confidence.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.confidence.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.confidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.hasConfidence.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.clearConfidence()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

uint64_t Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.point.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.point.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*Proto_Gnss_Emergency_EllipsoidArc.point.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_PointUncertainCircle.point.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasPoint.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearPoint()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.innerRadius.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.innerRadius.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidArc.innerRadius.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasInnerRadius.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearInnerRadius()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.uncertainRadius.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.uncertainRadius.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidArc.uncertainRadius.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasUncertainRadius.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearUncertainRadius()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.offsetAngle.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.offsetAngle.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidArc.offsetAngle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasOffsetAngle.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearOffsetAngle()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.includedAngle.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.includedAngle.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidArc.includedAngle.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasIncludedAngle.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearIncludedAngle()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.confidence.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.confidence.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t (*Proto_Gnss_Emergency_EllipsoidArc.confidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_EllipsoidArc.hasConfidence.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_EllipsoidArc.clearConfidence()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

uint64_t Proto_Gnss_Emergency_EllipsoidArc.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_PointAltitude.point.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint, a1);
}

uint64_t Proto_Gnss_Emergency_PointAltitude.point.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

void (*Proto_Gnss_Emergency_PointAltitude.point.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_PointUncertainCircle.point.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitude.hasPoint.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitude.clearPoint()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_PointAltitude, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

uint64_t Proto_Gnss_Emergency_PointAltitude.altitude.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t Proto_Gnss_Emergency_PointAltitude.altitude.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t (*Proto_Gnss_Emergency_PointAltitude.altitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_PointAltitude.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PointAltitude.clearAltitude()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

uint64_t Proto_Gnss_Emergency_PointAltitude.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_PointUncertainCircle.init()(type metadata accessor for Proto_Gnss_Emergency_PointAltitude, a1);
}

uint64_t Proto_Gnss_Emergency_PointUncertainCircle.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a1(0);
  v5 = a2 + *(int *)(v4 + 20);
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a2 + *(int *)(v4 + 24);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_Polygon.noOfPoints.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t Proto_Gnss_Emergency_Polygon.noOfPoints.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*Proto_Gnss_Emergency_Polygon.noOfPoints.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_Polygon(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_Polygon.hasNoOfPoints.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_Polygon.clearNoOfPoints()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t Proto_Gnss_Emergency_Polygon.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t Proto_Gnss_Emergency_Polygon.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

uint64_t (*Proto_Gnss_Emergency_Polygon.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t Proto_Gnss_Emergency_Polygon.init()@<X0>(_QWORD *a1@<X8>)
{
  return Proto_Gnss_Emergency_Polygon.init()(type metadata accessor for Proto_Gnss_Emergency_Polygon, a1);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle, a1);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  v14 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
  }
  return Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.setter, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasPointUncertainCircle.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle, type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearPointUncertainCircle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainCircle?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  v14 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
  }
  return Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.pointUncertainEllipse.setter, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasPointUncertainEllipse.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse, type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearPointUncertainEllipse()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointUncertainEllipse?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  v14 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
  }
  return Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.pointAltitudeUncertainEllipsoid.setter, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasPointAltitudeUncertainEllipsoid.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid, type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearPointAltitudeUncertainEllipsoid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  v14 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
  }
  return Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.ellipsoidArc.setter, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasEllipsoidArc.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc, type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearEllipsoidArc()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidArc?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  v14 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
  }
  return Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.ellipsoidPoint.setter, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasEllipsoidPoint.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint, type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearEllipsoidPoint()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_EllipsoidPoint?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointAltitude.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, type metadata accessor for Proto_Gnss_Emergency_PointAltitude, a1);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointUncertainCircle.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + *(int *)(v13 + 20);
  v15 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = a4 + *(int *)(v13 + 24);
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.pointAltitude.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  v14 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.pointAltitude.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
  }
  return Proto_Gnss_Emergency_ShapeInfo.pointAltitude.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.pointAltitude.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.pointAltitude.setter, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasPointAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude, type metadata accessor for Proto_Gnss_Emergency_PointAltitude);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearPointAltitude()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_PointAltitude?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.polygon.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.polygon.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  v14 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_ShapeInfo.polygon.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_Polygon);
  }
  return Proto_Gnss_Emergency_ShapeInfo.polygon.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.polygon.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_ShapeInfo.polygon.setter, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasPolygon.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon, type metadata accessor for Proto_Gnss_Emergency_Polygon);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearPolygon()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_Polygon?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.noLocation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.noLocation.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

void (*Proto_Gnss_Emergency_ShapeInfo.noLocation.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_ShapeInfo.noLocation.modify;
}

void Proto_Gnss_Emergency_ShapeInfo.noLocation.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

BOOL Proto_Gnss_Emergency_ShapeInfo.hasNoLocation.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_ShapeInfo.clearNoLocation()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_ShapeInfo._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation);
}

uint64_t Proto_Gnss_Emergency_ShapeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, &one-time initialization token for defaultInstance, &static Proto_Gnss_Emergency_ShapeInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_ShapeInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t Proto_Gnss_Emergency_LocEstimate.shapeType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20));
  if (v1 == 9)
    return 0;
  else
    return v1;
}

uint64_t Proto_Gnss_Emergency_LocEstimate.shapeType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_LocEstimate.shapeType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 9)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_LocEstimate.hasShapeType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20)) != 9;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocEstimate.clearShapeType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 20)) = 9;
}

uint64_t Proto_Gnss_Emergency_LocEstimate.shape.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
  v7 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static Proto_Gnss_Emergency_ShapeInfo._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
}

uint64_t Proto_Gnss_Emergency_LocEstimate.shape.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_LocEstimate, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

void (*Proto_Gnss_Emergency_LocEstimate.shape.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ShapeInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static Proto_Gnss_Emergency_ShapeInfo._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
  }
  return Proto_Gnss_Emergency_LocEstimate.shape.modify;
}

void Proto_Gnss_Emergency_LocEstimate.shape.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

BOOL Proto_Gnss_Emergency_LocEstimate.hasShape.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?, type metadata accessor for Proto_Gnss_Emergency_LocEstimate, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_LocEstimate.clearShape()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_LocEstimate, &demangling cache variable for type metadata for Proto_Gnss_Emergency_ShapeInfo?, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo);
}

uint64_t Proto_Gnss_Emergency_LocEstimate.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()(type metadata accessor for Proto_Gnss_Emergency_LocEstimate, 9, type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_LocEstimate._shapeType()
{
  return 9;
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_LocEstimate._shape@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_ShapeInfo, a1);
}

uint64_t Proto_Gnss_Emergency_HorizontalVelocity.bearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizontalVelocity.bearing.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizontalVelocity.bearing.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizontalVelocity.hasBearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizontalVelocity.clearBearing()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizontalVelocity.horizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizontalVelocity.horizontalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizontalVelocity.horizontalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizontalVelocity.hasHorizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizontalVelocity.clearHorizontalSpeed()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizontalVelocity.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsGpsCellTime.init()(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.bearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.bearing.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertVelocity.bearing.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertVelocity.hasBearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertVelocity.clearBearing()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.horizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.horizontalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertVelocity.horizontalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertVelocity.hasHorizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertVelocity.clearHorizontalSpeed()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertVelocity.hasVerticalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertVelocity.clearVerticalSpeed()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeedDirection.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeedDirection.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertVelocity.verticalSpeedDirection.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertVelocity.hasVerticalSpeedDirection.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertVelocity.clearVerticalSpeedDirection()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

int *Proto_Gnss_Emergency_HorizWithVertVelocity.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_HorizWithVertVelocity.init()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.bearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.bearing.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.bearing.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.hasBearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.clearBearing()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.horizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.horizontalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.horizontalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.hasHorizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.clearHorizontalSpeed()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.uncertaintySpeed.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.uncertaintySpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.uncertaintySpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.hasUncertaintySpeed.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.clearUncertaintySpeed()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

int *Proto_Gnss_Emergency_HorizWithUncertaintyVelocity.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_Plmn.init()(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.bearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.bearing.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.bearing.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasBearing.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearBearing()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizontalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizontalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasHorizontalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearHorizontalSpeed()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasVerticalSpeed.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearVerticalSpeed()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeedDirection.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeedDirection.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.verticalSpeedDirection.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasVerticalSpeedDirection.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearVerticalSpeedDirection()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizUncertaintySpeed.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizUncertaintySpeed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.horizUncertaintySpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasHorizUncertaintySpeed.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearHorizUncertaintySpeed()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.vertUncertaintySpeed.getter()
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.vertUncertaintySpeed.setter(int a1)
{
  return Proto_Gnss_Emergency_LteCellInfo.pci.setter(a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t (*Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.vertUncertaintySpeed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.hasVertUncertaintySpeed.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.clearVertUncertaintySpeed()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

int *Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizontal.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_ClsUtranCellTime.utranGpsTimingCellFrames.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizontal.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

void (*Proto_Gnss_Emergency_VelocityInfo.horizontal.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
  }
  return Proto_Gnss_Emergency_VelocityInfo.horizontal.modify;
}

void Proto_Gnss_Emergency_VelocityInfo.horizontal.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

BOOL Proto_Gnss_Emergency_VelocityInfo.hasHorizontal.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityInfo.clearHorizontal()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizontalVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithVert.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithVert.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

void (*Proto_Gnss_Emergency_VelocityInfo.horizWithVert.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
  }
  return Proto_Gnss_Emergency_VelocityInfo.horizWithVert.modify;
}

void Proto_Gnss_Emergency_VelocityInfo.horizWithVert.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

BOOL Proto_Gnss_Emergency_VelocityInfo.hasHorizWithVert.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityInfo.clearHorizWithVert()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithUncertainty.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithUncertainty.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

void (*Proto_Gnss_Emergency_VelocityInfo.horizWithUncertainty.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
  }
  return Proto_Gnss_Emergency_VelocityInfo.horizWithUncertainty.modify;
}

void Proto_Gnss_Emergency_VelocityInfo.horizWithUncertainty.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

BOOL Proto_Gnss_Emergency_VelocityInfo.hasHorizWithUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityInfo.clearHorizWithUncertainty()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithVertUncertainty.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.horizWithVertUncertainty.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

void (*Proto_Gnss_Emergency_VelocityInfo.horizWithVertUncertainty.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
  }
  return Proto_Gnss_Emergency_VelocityInfo.horizWithVertUncertainty.modify;
}

void Proto_Gnss_Emergency_VelocityInfo.horizWithVertUncertainty.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

BOOL Proto_Gnss_Emergency_VelocityInfo.hasHorizWithVertUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityInfo.clearHorizWithVertUncertainty()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, &demangling cache variable for type metadata for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity?, type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity);
}

uint64_t Proto_Gnss_Emergency_VelocityInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a1 + v2[7];
  v8 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a1 + v2[8];
  v10 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_VelocityInfo._horizontal@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_VelocityInfo._horizWithVert@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_VelocityInfo._horizWithUncertainty@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_VelocityInfo._horizWithVertUncertainty@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity, a1);
}

uint64_t Proto_Gnss_Emergency_VelocityEstimate.velocityType.getter()
{
  return Proto_Gnss_Emergency_SessionInfo.sessionProtocol.getter(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate);
}

uint64_t Proto_Gnss_Emergency_VelocityEstimate.velocityType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*Proto_Gnss_Emergency_VelocityEstimate.velocityType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL Proto_Gnss_Emergency_VelocityEstimate.hasVelocityType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 20)) != 6;
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityEstimate.clearVelocityType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 20)) = 6;
}

uint64_t Proto_Gnss_Emergency_VelocityEstimate.velocity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  v11 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1 + v7[7];
  v13 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = a1 + v7[8];
  v15 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
}

uint64_t Proto_Gnss_Emergency_VelocityEstimate.velocity.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

void (*Proto_Gnss_Emergency_VelocityEstimate.velocity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_VelocityInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for Proto_Gnss_Emergency_HorizontalVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    v14 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
    v15 = &v9[v6[7]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_HorizWithUncertaintyVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = &v9[v6[8]];
    v18 = type metadata accessor for Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
  }
  return Proto_Gnss_Emergency_VelocityEstimate.velocity.modify;
}

void Proto_Gnss_Emergency_VelocityEstimate.velocity.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

BOOL Proto_Gnss_Emergency_VelocityEstimate.hasVelocity.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?, type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_VelocityEstimate.clearVelocity()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, &demangling cache variable for type metadata for Proto_Gnss_Emergency_VelocityInfo?, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo);
}

uint64_t Proto_Gnss_Emergency_VelocityEstimate.init()@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_GpsTimeMeasuredParams.init()(type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate, 6, type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, a1);
}

uint64_t variable initialization expression of Proto_Gnss_Emergency_VelocityEstimate._velocity@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gnss_Emergency_VelocityInfo, a1);
}

uint64_t Proto_Gnss_Emergency_PositionReport.result.getter()
{
  return Proto_Gnss_Emergency_PositionReport.result.getter(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t Proto_Gnss_Emergency_PositionReport.result.setter(char a1)
{
  return Proto_Gnss_Emergency_PositionReport.result.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionReport, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionReport.result.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 9)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return Proto_Gnss_Emergency_PositionReport.result.modify;
}

void Proto_Gnss_Emergency_PositionReport.result.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionReport.result.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionReport.hasResult.getter()
{
  return Proto_Gnss_Emergency_PositionReport.hasResult.getter(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionReport.clearResult()()
{
  Proto_Gnss_Emergency_PositionReport.clearResult()(type metadata accessor for Proto_Gnss_Emergency_PositionReport, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionReport.responseType.getter()
{
  return Proto_Gnss_Emergency_PositionReport.responseType.getter(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

uint64_t Proto_Gnss_Emergency_PositionReport.responseType.setter(int a1)
{
  return Proto_Gnss_Emergency_PositionReport.responseType.setter(a1, type metadata accessor for Proto_Gnss_Emergency_PositionReport, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

void (*Proto_Gnss_Emergency_PositionReport.responseType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 20);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return Proto_Gnss_Emergency_PositionReport.responseType.modify;
}

void Proto_Gnss_Emergency_PositionReport.responseType.modify(uint64_t *a1, char a2)
{
  Proto_Gnss_Emergency_PositionReport.responseType.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

BOOL Proto_Gnss_Emergency_PositionReport.hasResponseType.getter()
{
  return Proto_Gnss_Emergency_PositionReport.hasResponseType.getter(type metadata accessor for Proto_Gnss_Emergency_PositionReport);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionReport.clearResponseType()()
{
  Proto_Gnss_Emergency_PositionReport.clearResponseType()(type metadata accessor for Proto_Gnss_Emergency_PositionReport, (void (*)(_QWORD))type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass, (void (*)(uint64_t))specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:));
}

uint64_t Proto_Gnss_Emergency_PositionReport.sessionInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return Proto_Gnss_Emergency_PositionReport.sessionInfo.getter(type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, a1);
}

uint64_t Proto_Gnss_Emergency_PositionReport.sessionInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  v14 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_PositionReport.sessionInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v9[v6[6]] = 7;
    v11 = &v9[v6[7]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
  }
  return Proto_Gnss_Emergency_PositionReport.sessionInfo.modify;
}

void Proto_Gnss_Emergency_PositionReport.sessionInfo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_PositionReport.sessionInfo.setter, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

BOOL Proto_Gnss_Emergency_PositionReport.hasSessionInfo.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo, type metadata accessor for Proto_Gnss_Emergency_SessionInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionReport.clearSessionInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_SessionInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_PositionReport.locationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  v13 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
}

uint64_t Proto_Gnss_Emergency_PositionReport.locationInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  v14 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_PositionReport.locationInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    v16 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
  }
  return Proto_Gnss_Emergency_PositionReport.locationInfo.modify;
}

void Proto_Gnss_Emergency_PositionReport.locationInfo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_PositionReport.locationInfo.setter, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

BOOL Proto_Gnss_Emergency_PositionReport.hasLocationInfo.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo, type metadata accessor for Proto_Gnss_Emergency_LocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionReport.clearLocationInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_LocationInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  v7 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 6;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 4;
  v11 = a1 + v7[10];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
}

uint64_t Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  v14 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  swift_endAccess();
  return swift_release();
}

void (*Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 6;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[9]] = 4;
    v14 = &v9[v6[10]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
  }
  return Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.modify;
}

void Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))Proto_Gnss_Emergency_PositionReport.ganssLocationInfo.setter, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

BOOL Proto_Gnss_Emergency_PositionReport.hasGanssLocationInfo.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?, type metadata accessor for Proto_Gnss_Emergency_PositionReport, &OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo, type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo);
}

Swift::Void __swiftcall Proto_Gnss_Emergency_PositionReport.clearGanssLocationInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for Proto_Gnss_Emergency_PositionReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized Proto_Gnss_Emergency_PositionReport._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for Proto_Gnss_Emergency_GanssLocationInfo?);
  swift_endAccess();
  swift_release();
}

