uint64_t ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v6)(_BYTE *, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t);
  _BYTE v10[32];

  if ((a3 & 0x100000000) == 0)
  {
    v6 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 240))(v10);
    ALResultOptions.intervalSec.setter();
    v6(v10, 0);
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))(*(_QWORD *)v3 + 280);
  swift_retain();
  swift_retain();
  v8(partial apply for closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:), v3, partial apply for closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:), v7);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ALResultOptions();
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ALProtoRequest();
  (*(void (**)(void))(*(_QWORD *)a1 + 120))();
  ALProtoRequest.__allocating_init(wifiResultOptions:)((uint64_t)v3);
  v4 = dispatch thunk of ALProtoRequest.serializedData()();
  swift_release();
  return v4;
}

uint64_t partial apply for closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)()
{
  uint64_t v0;

  return closure #1 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(v0);
}

uint64_t closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _DWORD *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD);
  uint64_t v43;
  int v44;
  uint64_t v45;

  v42 = a3;
  v43 = a4;
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ALWiFiNotifications();
  v11 = *(_QWORD *)(v41 - 8);
  v12 = MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v35 - v17;
  outlined copy of Data._Representation(a1, a2);
  result = ALWiFiNotifications.init(data:)(a1, a2, (uint64_t)v18);
  if (!v4)
  {
    v38 = v7;
    v39 = v8;
    corelog.getter((uint64_t)v10);
    v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v21 = v41;
    v20(v16, v18, v41);
    v22 = v40;
    v20(v40, v18, v21);
    v37 = v10;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = (_DWORD *)swift_slowAlloc();
      v36 = v25;
      v27 = v26;
      *v26 = 134349312;
      v35 = v26 + 1;
      v28 = *(_QWORD *)(ALWiFiNotifications.results.getter() + 16);
      swift_bridgeObjectRelease();
      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v16, v21);
      v45 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v27 + 6) = 1026;
      v30 = ALWiFiNotifications.isLastBatch.getter() & 1;
      v29(v22, v21);
      v44 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_235928000, v23, (os_log_type_t)v36, "#WiFi,dataCallback,results,%{public}ld,last,%{BOOL,public}d", (uint8_t *)v27, 0x12u);
      MEMORY[0x23B7DBDA4](v27, -1, -1);
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v22, v21);
      v29(v16, v21);
    }
    v31 = v38;
    v32 = v39;

    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v31);
    v33 = ALWiFiNotifications.results.getter();
    v34 = ALWiFiNotifications.isLastBatch.getter();
    v42(v33, v34 & 1);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v29)(v18, v21);
  }
  return result;
}

uint64_t sub_23592A820()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return closure #2 in ALFWiFiScanResultsRequester.register(callback:intervalSec:)(a1, a2, *(void (**)(uint64_t, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t ALFWiFiScanResultsRequester.__allocating_init(queue:)(uint64_t a1)
{
  swift_allocObject();
  return ALFResultsRequesterData.init(queue:)(a1);
}

uint64_t ALFWiFiScanResultsRequester.__deallocating_deinit()
{
  ALFResultsRequesterData.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ALFWiFiScanResultsRequester()
{
  return type metadata accessor for ALFWiFiScanResultsRequester();
}

uint64_t type metadata accessor for ALFWiFiScanResultsRequester()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ALFWiFiScanResultsRequester;
  if (!type metadata singleton initialization cache for ALFWiFiScanResultsRequester)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ALFWiFiScanResultsRequester()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ALFWiFiScanResultsRequester()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 328))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ALFWiFiScanResultsRequester.query(options:callback:start:end:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t ResultHandler.onData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - v11;
  xpclog.getter((uint64_t)&v26 - v11);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v28 = v3;
    v15 = swift_slowAlloc();
    v29 = v10;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc();
    v30 = v6;
    v18 = v17;
    v32 = v17;
    *(_DWORD *)v16 = 136315138;
    v26 = v16 + 4;
    outlined copy of Data._Representation(a1, a2);
    v19 = Data.description.getter();
    v27 = v7;
    v20 = v19;
    v22 = v21;
    outlined consume of Data._Representation(a1, a2);
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v3 = v28;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_235928000, v13, v14, "onData,callback,%s", v16, 0xCu);
    swift_arrayDestroy();
    v23 = v18;
    v24 = v30;
    MEMORY[0x23B7DBDA4](v23, -1, -1);
    MEMORY[0x23B7DBDA4](v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v24);
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 24))(a1, a2);
}

uint64_t ResultHandler.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t key path getter for ALFResultsRequesterData._options : ALFResultsRequesterData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
}

uint64_t key path setter for ALFResultsRequesterData._options : ALFResultsRequesterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for ALResultOptions();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 128))(v6);
}

uint64_t ALFResultsRequesterData._options.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  swift_beginAccess();
  v4 = type metadata accessor for ALResultOptions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ALFResultsRequesterData._options.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  swift_beginAccess();
  v4 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ALFResultsRequesterData._options.modify())()
{
  swift_beginAccess();
  return ALFResultsRequesterData._options.modify;
}

uint64_t variable initialization expression of ALFResultsRequesterData._label()
{
  return 0;
}

uint64_t key path getter for ALFResultsRequesterData._label : ALFResultsRequesterData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ALFResultsRequesterData._label : ALFResultsRequesterData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ALFResultsRequesterData._label.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ALFResultsRequesterData._label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ALFResultsRequesterData._label.modify())()
{
  swift_beginAccess();
  return ALFResultsRequesterData._label.modify;
}

uint64_t variable initialization expression of ALFResultsRequesterData._repeatHandler()
{
  return 0;
}

uint64_t ALFResultsRequesterData.__allocating_init(queue:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = swift_allocObject();
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *v4 = 0;
  v4[1] = 0;
  ALResultOptions.init()();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue) = a1;
  return v2;
}

uint64_t ALFResultsRequesterData.init(queue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = type metadata accessor for ALResultOptions();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__label);
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *v8 = 0;
  v8[1] = 0;
  ALResultOptions.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options, v6, v3);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue) = a1;
  return v1;
}

uint64_t key path getter for ALFResultsRequesterData.options : ALFResultsRequesterData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
}

uint64_t key path setter for ALFResultsRequesterData.options : ALFResultsRequesterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for ALResultOptions();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 232))(v6);
}

uint64_t ALFResultsRequesterData.options.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t ALFResultsRequesterData.options.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = type metadata accessor for ALResultOptions();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  (*(void (**)(char *))(*(_QWORD *)v1 + 128))(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*ALFResultsRequesterData.options.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for ALResultOptions();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  (*(void (**)(void))(*(_QWORD *)v1 + 120))();
  return ALFResultsRequesterData.options.modify;
}

void ALFResultsRequesterData.options.modify(uint64_t **a1, char a2)
{
  uint64_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);

  v3 = *a1;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[2] + 16);
  v4((*a1)[4], v3[5], v3[1]);
  v5 = (void *)v3[4];
  v6 = (void *)v3[5];
  v8 = v3[2];
  v7 = (void *)v3[3];
  v9 = *v3;
  v10 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4(v3[3], v3[4], v3[1]);
    (*(void (**)(void *))(*(_QWORD *)v9 + 128))(v7);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v10);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 128))(v3[4]);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v11(v6, v10);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t key path getter for ALFResultsRequesterData.label : ALFResultsRequesterData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for ALFResultsRequesterData.label : ALFResultsRequesterData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 256);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t ALFResultsRequesterData.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
  if (v2)
    return v1;
  v4 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (!v5)
    return 0x6B6E556C6562616CLL;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t ALFResultsRequesterData.label.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t (*ALFResultsRequesterData.label.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  id v8;
  unint64_t v9;

  a1[2] = v1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 144))();
  if (v4)
  {
    v5 = v3;
    v6 = v4;
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v8 = objc_msgSend(v7, sel_bundleIdentifier);

    if (v8)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v9;

    }
    else
    {
      v6 = 0xEC0000006E776F6ELL;
      v5 = 0x6B6E556C6562616CLL;
    }
  }
  *a1 = v5;
  a1[1] = v6;
  return ALFResultsRequesterData.label.modify;
}

uint64_t ALFResultsRequesterData.label.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = a1[1];
  v3 = *a1;
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[2] + 152);
  if ((a2 & 1) == 0)
    return v4(*a1, v2);
  swift_bridgeObjectRetain();
  v4(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t ALFResultsRequesterData.register(payload:dataCallback:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(char *, uint64_t);
  char *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = v4;
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v35 - v13;
  v15 = OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler;
  if (*(_QWORD *)(v5 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler))
  {
    allog.getter((uint64_t)&v35 - v13);
    swift_retain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
    {

      swift_release_n();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v38 = v19;
    v36 = v8;
    *(_DWORD *)v18 = 136446210;
    v20 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 248))();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_235928000, v16, v17, "register,%{public}s,already exist", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v19, -1, -1);
    MEMORY[0x23B7DBDA4](v18, -1, -1);

    v22 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    v23 = v14;
  }
  else
  {
    v36 = v8;
    v24 = *(void **)(v5 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__queue);
    type metadata accessor for ResultHandler();
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = 0;
    v25[3] = a3;
    v25[4] = a4;
    v25[5] = partial apply for implicit closure #3 in implicit closure #2 in ALFResultsRequesterData.register(payload:dataCallback:);
    v25[6] = v5;
    type metadata accessor for ALXPCClient();
    swift_allocObject();
    swift_retain();
    v26 = v24;
    swift_retain();
    swift_retain();
    v25[2] = ALXPCClient.init(queue:callback:)(v26, (uint64_t)v25);
    swift_release();
    *(_QWORD *)(v5 + v15) = v25;
    swift_release();
    v27 = *(_QWORD *)(v5 + v15);
    if (v27 && *(_QWORD *)(v27 + 16))
    {
      swift_retain();
      swift_retain();
      dispatch thunk of ALXPCClient.send(_:)();
      swift_release();
      swift_release();
    }
    allog.getter((uint64_t)v12);
    swift_retain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v38 = v31;
      *(_DWORD *)v30 = 136446210;
      v32 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 248))();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_235928000, v28, v29, "register,%{public}s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v31, -1, -1);
      MEMORY[0x23B7DBDA4](v30, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v22 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    v23 = v12;
  }
  return v22(v23, v36);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in ALFResultsRequesterData.register(payload:dataCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t type metadata accessor for ResultHandler()
{
  return objc_opt_self();
}

uint64_t ALFResultsRequesterData.register(request:dataCallback:)(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = v3;
  v6 = (uint64_t (**)(uint64_t))(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  *v6 = a1;
  v6[1] = a2;
  swift_retain();
  v8 = outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(v7);
  result = a1(v8);
  if (!v4)
  {
    v11 = result;
    v12 = v10;
    (*(void (**)(void))(*(_QWORD *)v2 + 272))();
    return outlined consume of Data._Representation(v11, v12);
  }
  return result;
}

Swift::Void __swiftcall ALFResultsRequesterData.onInterrupt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_log_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  os_log_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v28 - v8;
  v10 = *(uint64_t (**)(uint64_t))(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet);
  if (v10)
  {
    v32 = v2;
    v11 = swift_retain();
    v15 = v10(v11);
    v17 = v16;
    v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler);
    if (v18 && *(_QWORD *)(v18 + 16))
    {
      swift_retain();
      swift_retain();
      dispatch thunk of ALXPCClient.send(_:)();
      swift_release();
      swift_release();
    }
    allog.getter((uint64_t)v9);
    outlined copy of Data._Representation(v15, v17);
    outlined copy of Data._Representation(v15, v17);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v31 = v19;
      v21 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v34 = v30;
      v29 = v21;
      *(_DWORD *)v21 = 136315138;
      v28 = v21 + 4;
      outlined copy of Data._Representation(v15, v17);
      v22 = Data.description.getter();
      v24 = v23;
      outlined consume of Data._Representation(v15, v17);
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      v25 = v31;
      v26 = v29;
      _os_log_impl(&dword_235928000, v31, v20, "onInterrupt,resend request %s", v29, 0xCu);
      v27 = v30;
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v27, -1, -1);
      MEMORY[0x23B7DBDA4](v26, -1, -1);
      outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?((uint64_t)v10);

      outlined consume of Data._Representation(v15, v17);
    }
    else
    {
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      outlined consume of Data._Representation(v15, v17);
      outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?((uint64_t)v10);

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v32);
  }
  else
  {
    allog.getter((uint64_t)v7);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_235928000, v12, (os_log_type_t)v13, "_requestPayloadGet,nil", v14, 2u);
      MEMORY[0x23B7DBDA4](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
}

Swift::Void __swiftcall ALFResultsRequesterData.unregister()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__repeatHandler) = 0;
  swift_release();
}

uint64_t ALFResultsRequesterData.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  v2 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet));
  return v0;
}

uint64_t ALFResultsRequesterData.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__options;
  v2 = type metadata accessor for ALResultOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(*(_QWORD *)(v0 + OBJC_IVAR____TtC8AONSense23ALFResultsRequesterData__requestPayloadGet));
  return swift_deallocClassInstance();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> (@owned Data, @error @owned Error))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for implicit closure #2 in ALFResultsRequesterData.onInterrupt()()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x727265746E496E6FLL;
  v0._object = (void *)0xEC0000002C747075;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t ObjC metadata update function for ALFResultsRequesterData()
{
  return type metadata accessor for ALFResultsRequesterData();
}

uint64_t type metadata accessor for ALFResultsRequesterData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ALFResultsRequesterData;
  if (!type metadata singleton initialization cache for ALFResultsRequesterData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ALFResultsRequesterData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ALResultOptions();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ALFResultsRequesterData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._options.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ALFResultsRequesterData._label.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.__allocating_init(queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.options.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.label.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.register(payload:dataCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.register(request:dataCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.onInterrupt()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.updateOptions(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.unregister()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.query(options:dataDallback:start:end:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ALFResultsRequesterData.queryCancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7DBD08]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void ALFResultsRequesterData._requestPayloadGet.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

Swift::Bool __swiftcall isAvailable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _DWORD v9[4];

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PersistentConfig();
  static PersistentConfig.instance.getter();
  dispatch thunk of ALXPCClient.onData(_:)();
  swift_release();
  type metadata accessor for PlatformInfo();
  static PlatformInfo.instance.getter();
  v4 = dispatch thunk of PlatformInfo.isAvailable.getter();
  swift_release();
  allog.getter((uint64_t)v3);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67240192;
    v9[3] = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_235928000, v5, v6, "AONSense.isAvailable,%{BOOL,public}d", v7, 8u);
    MEMORY[0x23B7DBDA4](v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v6)(_BYTE *, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t);
  _BYTE v10[32];

  if ((a3 & 0x100000000) == 0)
  {
    v6 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 240))(v10);
    ALResultOptions.intervalSec.setter();
    v6(v10, 0);
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = *(void (**)(uint64_t (*)(), uint64_t, uint64_t (*)(uint64_t, unint64_t), uint64_t))(*(_QWORD *)v3 + 280);
  swift_retain();
  swift_retain();
  v8(partial apply for closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:), v3, partial apply for closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:), v7);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ALResultOptions();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ALProtoRequest();
  (*(void (**)(void))(*(_QWORD *)a1 + 120))();
  ALProtoRequest.__allocating_init(btResultOptions:)((uint64_t)v4);
  v5 = dispatch thunk of ALProtoRequest.serializedData()();
  swift_release();
  return v5;
}

uint64_t partial apply for closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)()
{
  uint64_t v0;

  return closure #1 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(v0);
}

uint64_t closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _DWORD *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD);
  uint64_t v43;
  int v44;
  uint64_t v45;

  v42 = a3;
  v43 = a4;
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for ALBtNotifications();
  v11 = *(_QWORD *)(v41 - 8);
  v12 = MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v35 - v17;
  outlined copy of Data._Representation(a1, a2);
  result = ALBtNotifications.init(data:)(a1, a2, (uint64_t)v18);
  if (!v4)
  {
    v38 = v7;
    v39 = v8;
    corelog.getter((uint64_t)v10);
    v20 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v21 = v41;
    v20(v16, v18, v41);
    v22 = v40;
    v20(v40, v18, v21);
    v37 = v10;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = (_DWORD *)swift_slowAlloc();
      v36 = v25;
      v27 = v26;
      *v26 = 134349312;
      v35 = v26 + 1;
      v28 = *(_QWORD *)(ALBtNotifications.results.getter() + 16);
      swift_bridgeObjectRelease();
      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v16, v21);
      v45 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v27 + 6) = 1026;
      v30 = ALBtNotifications.isLastBatch.getter() & 1;
      v29(v22, v21);
      v44 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_235928000, v23, (os_log_type_t)v36, "#BT,dataCallback,results,%{public}ld,last,%{BOOL,public}d", (uint8_t *)v27, 0x12u);
      MEMORY[0x23B7DBDA4](v27, -1, -1);
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v22, v21);
      v29(v16, v21);
    }
    v31 = v38;
    v32 = v39;

    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v31);
    v33 = ALBtNotifications.results.getter();
    v34 = ALBtNotifications.isLastBatch.getter();
    v42(v33, v34 & 1);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v29)(v18, v21);
  }
  return result;
}

uint64_t sub_23592D254()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return closure #2 in ALFBtAdvResultsRequester.register(callback:intervalSec:)(a1, a2, *(void (**)(uint64_t, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t ALFBtAdvResultsRequester.__allocating_init(queue:)(uint64_t a1)
{
  swift_allocObject();
  return ALFResultsRequesterData.init(queue:)(a1);
}

uint64_t ALFBtAdvResultsRequester.__deallocating_deinit()
{
  ALFResultsRequesterData.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ALFBtAdvResultsRequester()
{
  return type metadata accessor for ALFBtAdvResultsRequester();
}

uint64_t type metadata accessor for ALFBtAdvResultsRequester()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ALFBtAdvResultsRequester;
  if (!type metadata singleton initialization cache for ALFBtAdvResultsRequester)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t method lookup function for ALFBtAdvResultsRequester()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALFBtAdvResultsRequester.register(callback:intervalSec:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v3 + 328))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ALFBtAdvResultsRequester.query(options:callback:start:end:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t ALXPCClient._callback.getter()
{
  return swift_unknownObjectRetain();
}

id ALXPCClient._connection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t ALXPCClient.__allocating_init(queue:callback:)(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ALXPCClient.init(queue:callback:)(a1, a2);
  return v4;
}

uint64_t ALXPCClient.init(queue:callback:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  void *v43;
  uint8_t *v44;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;

  v3 = v2;
  v48 = a1;
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v46 - v9;
  *(_QWORD *)(v2 + 16) = a2;
  type metadata accessor for ALServiceDelegate();
  v50 = a2;
  swift_unknownObjectRetain();
  v11 = static ALServiceDelegate.serviceName()();
  v13 = v12;
  xpclog.getter((uint64_t)v10);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v46 = v6;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v47 = v11;
    v19 = v18;
    aBlock = v18;
    *(_DWORD *)v17 = 136446210;
    swift_bridgeObjectRetain();
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v13, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_235928000, v14, v15, "Try connecting xpc service %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    v20 = v19;
    v11 = v47;
    MEMORY[0x23B7DBDA4](v20, -1, -1);
    MEMORY[0x23B7DBDA4](v17, -1, -1);

    v21 = *(void (**)(char *, uint64_t))(v46 + 8);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  }
  v21(v10, v5);
  v22 = objc_allocWithZone(MEMORY[0x24BDD1988]);
  v23 = (void *)MEMORY[0x23B7DB7C8](v11, v13);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v22, sel_initWithMachServiceName_options_, v23, 0);

  *(_QWORD *)(v3 + 24) = v24;
  objc_msgSend(v24, sel_setExportedObject_, v3);
  v25 = (void *)objc_opt_self();
  v26 = v24;
  v27 = objc_msgSend(v25, sel_interfaceWithProtocol_, &unk_2563770B0);
  objc_msgSend(v26, sel_setExportedInterface_, v27);

  v28 = *(id *)(v3 + 24);
  v29 = objc_msgSend(v25, sel_interfaceWithProtocol_, &unk_2563770B0);
  objc_msgSend(v28, sel_setRemoteObjectInterface_, v29);

  v30 = *(void **)(v3 + 24);
  v56 = partial apply for implicit closure #3 in implicit closure #2 in ALXPCClient.init(queue:callback:);
  v57 = v3;
  v31 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v53 = 1107296256;
  v54 = thunk for @escaping @callee_guaranteed () -> ();
  v55 = &block_descriptor;
  v32 = _Block_copy(&aBlock);
  v33 = v30;
  swift_retain();
  swift_release();
  objc_msgSend(v33, sel_setInterruptionHandler_, v32);
  _Block_release(v32);

  v34 = *(void **)(v3 + 24);
  v56 = partial apply for implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:);
  v57 = v3;
  aBlock = v31;
  v53 = 1107296256;
  v54 = thunk for @escaping @callee_guaranteed () -> ();
  v55 = &block_descriptor_3;
  v35 = _Block_copy(&aBlock);
  swift_retain();
  v36 = v34;
  swift_release();
  objc_msgSend(v36, sel_setInvalidationHandler_, v35);
  _Block_release(v35);

  v37 = *(void **)(v3 + 24);
  v38 = v48;
  objc_msgSend(v37, sel__setQueue_, v48);
  objc_msgSend(v37, sel_activate);
  v39 = v49;
  xpclog.getter(v49);
  swift_retain();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = v5;
    v43 = v38;
    v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v44 = 67240192;
    LODWORD(aBlock) = objc_msgSend(*(id *)(v3 + 24), sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_235928000, v40, v41, "Connected to xpc service pid: %{public}d", v44, 8u);
    MEMORY[0x23B7DBDA4](v44, -1, -1);

    v5 = v42;
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
    swift_release();
  }

  v21((char *)v39, v5);
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v5);
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.invalidationHandler(), a1, (unint64_t)"invalidationHandler()", 21, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCClient.swift", 76, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void ALXPCClient.onData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  Class isa;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = v2;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v9);
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v24 = v3;
    v12 = swift_slowAlloc();
    v23 = v7;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc();
    v26 = v14;
    *(_DWORD *)v13 = 136315138;
    v21 = v13 + 4;
    outlined copy of Data._Representation(a1, a2);
    v15 = Data.description.getter();
    v22 = v6;
    v16 = v15;
    v18 = v17;
    outlined consume of Data._Representation(a1, a2);
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v3 = v24;
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    _os_log_impl(&dword_235928000, v10, v11, "receive %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v14, -1, -1);
    MEMORY[0x23B7DBDA4](v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
  }
  else
  {
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v19 = *(void **)(v3 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, sel_onData_, isa);

}

Swift::Void __swiftcall ALXPCClient.onInterrupt()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), sel_onInterrupt);
}

uint64_t ALXPCClient.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  Class isa;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  char *v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v35 - v11;
  v13 = *(void **)(v3 + 24);
  aBlock[4] = (uint64_t)partial apply for implicit closure #2 in implicit closure #1 in ALXPCClient.send(_:);
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v15 = objc_msgSend(v13, sel_remoteObjectProxyWithErrorHandler_, v14);
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ALXPCProtocol);
  if (swift_dynamicCast())
  {
    v16 = (void *)v38;
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, sel_onData_, isa);

    xpclog.getter((uint64_t)v12);
    outlined copy of Data._Representation(a1, a2);
    outlined copy of Data._Representation(a1, a2);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v37 = v6;
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      aBlock[0] = v21;
      v36 = v7;
      *(_DWORD *)v20 = 136446210;
      v35[1] = v20 + 4;
      outlined copy of Data._Representation(a1, a2);
      v22 = Data.description.getter();
      v35[2] = v16;
      v23 = v22;
      v25 = v24;
      outlined consume of Data._Representation(a1, a2);
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a1, a2);
      outlined consume of Data._Representation(a1, a2);
      _os_log_impl(&dword_235928000, v18, v19, "sent %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v21, -1, -1);
      MEMORY[0x23B7DBDA4](v20, -1, -1);
      swift_unknownObjectRelease();

      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v12, v37);
    }
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(a1, a2);

    swift_unknownObjectRelease();
    v33 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v34 = v12;
  }
  else
  {
    xpclog.getter((uint64_t)v10);
    swift_retain_n();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v37 = v6;
      *(_DWORD *)v29 = 138543362;
      aBlock[0] = (uint64_t)v13;
      v30 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v31 = v36;
      *(_QWORD *)v36 = v13;
      swift_release_n();
      _os_log_impl(&dword_235928000, v27, v28, "remoteObjectProxyWithErrorHandler failed%{public}@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v32 = v31;
      v6 = v37;
      MEMORY[0x23B7DBDA4](v32, -1, -1);
      MEMORY[0x23B7DBDA4](v29, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v33 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v34 = v10;
  }
  return v33(v34, v6);
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

id ALXPCClient.interruptionHandler()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v5);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v16 = v3;
    v9 = (uint8_t *)v8;
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138543362;
    v17 = v2;
    v11 = *(void **)(v1 + 24);
    v18 = v11;
    v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v11;
    v2 = v17;
    swift_release_n();
    _os_log_impl(&dword_235928000, v6, v7, "client,interruptionHandler %{public}@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v10, -1, -1);
    v13 = v9;
    v3 = v16;
    MEMORY[0x23B7DBDA4](v13, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return objc_msgSend(*(id *)(v1 + 16), sel_onInterrupt);
}

uint64_t ALXPCClient.proxyErrorHandler(error:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  uint64_t v8;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  v8 = a1;
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:), v7, (unint64_t)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCClient.swift", 76, 2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ALXPCClient.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return v0;
}

uint64_t ALXPCClient.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)()
{
  void *v0;

  return implicit closure #5 in implicit closure #4 in ALXPCClient.init(queue:callback:)(v0);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ALXPCClient.send(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(21);
  v0._object = (void *)0x8000000235BE8460;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  swift_getErrorValue();
  v1._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t type metadata accessor for ALXPCClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for ALXPCClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALXPCClient.__allocating_init(queue:callback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ALXPCClient.onData(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ALXPCClient.onInterrupt()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ALXPCClient.send(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t partial apply for implicit closure #1 in ALXPCClient.invalidationHandler()()
{
  uint64_t v0;
  Swift::String v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x8000000235BE84A0;
  v1._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2 = *(void **)(v0 + 24);
  v3 = objc_msgSend(v2, sel_description);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x20646970202CLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  v12 = objc_msgSend(v2, sel_processIdentifier);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x737469786520;
  v10._object = (void *)0xE600000000000000;
  String.append(_:)(v10);
  return HIDWORD(v12);
}

id ALServiceDelegate._listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener);
}

id ALServiceDelegate._queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue);
}

uint64_t ALServiceDelegate._dataService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  return outlined init with copy of ALXPCDataService(v3, a1);
}

uint64_t outlined init with copy of ALXPCDataService(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ALServiceDelegate._dataService.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_0(v3);
  outlined init with take of ALXPCDataService(a1, v3);
  return swift_endAccess();
}

uint64_t outlined init with take of ALXPCDataService(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t (*ALServiceDelegate._dataService.modify())()
{
  swift_beginAccess();
  return ALFResultsRequesterData._label.modify;
}

char *ALServiceDelegate.__allocating_init(queue:dataService:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ALServiceDelegate.init(queue:dataService:)(a1, a2);
}

char *ALServiceDelegate.init(queue:dataService:)(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  void *v11;
  id v12;
  objc_class *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue] = a1;
  v26 = a2;
  outlined init with copy of ALXPCDataService(a2, (uint64_t)&v2[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__dataService]);
  v9 = objc_allocWithZone(MEMORY[0x24BDD1998]);
  v10 = v2;
  v25 = a1;
  v11 = (void *)MEMORY[0x23B7DB7C8](0xD000000000000017, 0x8000000235BE84C0);
  v12 = objc_msgSend(v9, sel_initWithMachServiceName_, v11);

  *(_QWORD *)&v10[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener] = v12;
  v13 = (objc_class *)type metadata accessor for ALServiceDelegate();
  v29.receiver = v10;
  v29.super_class = v13;
  v14 = (char *)objc_msgSendSuper2(&v29, sel_init);
  v15 = *(void **)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__listener];
  v16 = *(_QWORD *)&v14[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue];
  v17 = v14;
  objc_msgSend(v15, sel__setQueue_, v16);
  objc_msgSend(v15, sel_setDelegate_, v17);
  objc_msgSend(v15, sel_activate);
  xpclog.getter((uint64_t)v8);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v28 = v21;
    v24 = v5;
    *(_DWORD *)v20 = 136446210;
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x8000000235BE84C0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_235928000, v18, v19, "serviceName %{public}s started", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v21, -1, -1);
    MEMORY[0x23B7DBDA4](v20, -1, -1);

    __swift_destroy_boxed_opaque_existential_0(v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_0(v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

unint64_t static ALServiceDelegate.serviceName()()
{
  return 0xD000000000000017;
}

uint64_t type metadata accessor for ALServiceDelegate()
{
  return objc_opt_self();
}

Swift::Bool __swiftcall ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

Swift::Bool __swiftcall ALServiceDelegate.checkEntitlement(_:)(NSXPCConnection a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  id v10;
  objc_class *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  Swift::Bool v15;
  objc_class *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v20[16];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v20[-v7];
  v9 = (void *)MEMORY[0x23B7DB7C8](0xD000000000000017, 0x8000000235BE84C0);
  v10 = -[objc_class valueForEntitlement:](a1.super.isa, sel_valueForEntitlement_, v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v21, (uint64_t)v23);
  outlined init with copy of Any?((uint64_t)v23, (uint64_t)&v21);
  if (*((_QWORD *)&v22 + 1))
  {
    if (swift_dynamicCast() && (v20[15] & 1) != 0)
    {
      xpclog.getter((uint64_t)v8);
      v11 = a1.super.isa;
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v14 = 67240192;
        LODWORD(v21) = -[objc_class processIdentifier](v11, sel_processIdentifier);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_235928000, v12, v13, "Entitlement check passed for pid: %{public}d", v14, 8u);
        MEMORY[0x23B7DBDA4](v14, -1, -1);
      }
      else
      {

      }
      v15 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v21);
  }
  xpclog.getter((uint64_t)v6);
  v16 = a1.super.isa;
  v12 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v18 = 67240192;
    LODWORD(v21) = -[objc_class processIdentifier](v16, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_235928000, v12, v17, "Entitlement check failed for pid:%{public}d, connection rejected", v18, 8u);
    MEMORY[0x23B7DBDA4](v18, -1, -1);
  }
  else
  {

  }
  v15 = 0;
  v8 = v6;
LABEL_15:

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  outlined destroy of Any?((uint64_t)v23);
  return v15;
}

uint64_t ALServiceDelegate.onData(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)();
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)());
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD v30[2];
  _QWORD aBlock[3];
  void *v32;
  uint64_t (*v33)();
  uint64_t v34;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v30 - v10;
  v12 = objc_msgSend((id)objc_opt_self(), sel_currentConnection);
  if (v12)
  {
    v13 = v12;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v2;
    v33 = partial apply for implicit closure #2 in implicit closure #1 in ALServiceDelegate.onData(_:);
    v34 = v14;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v32 = &block_descriptor_0;
    v15 = _Block_copy(aBlock);
    v16 = v2;
    swift_release();
    v17 = objc_msgSend(v13, sel_remoteObjectProxyWithErrorHandler_, v15);
    _Block_release(v15);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ALXPCProtocol);
    if (swift_dynamicCast())
    {
      v18 = v30[1];
      (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x24BEE4EA0] & *v16) + 0x68))(aBlock);
      v19 = v32;
      v20 = v33;
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v32);
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v18;
      v22 = (void (*)(uint64_t, uint64_t, void (*)(), uint64_t, void *, void *, uint64_t (*)()))*((_QWORD *)v20 + 1);
      swift_unknownObjectRetain();
      v22(a1, a2, partial apply for implicit closure #4 in implicit closure #3 in ALServiceDelegate.onData(_:), v21, v13, v19, v20);
      swift_release();

      swift_unknownObjectRelease();
      return __swift_destroy_boxed_opaque_existential_0((uint64_t)aBlock);
    }
    else
    {
      xpclog.getter((uint64_t)v11);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_235928000, v27, v28, "Invalid proxy", v29, 2u);
        MEMORY[0x23B7DBDA4](v29, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
  }
  else
  {
    xpclog.getter((uint64_t)v9);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_235928000, v24, v25, "Invalid current connnection", v26, 2u);
      MEMORY[0x23B7DBDA4](v26, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t implicit closure #2 in implicit closure #1 in ALServiceDelegate.onData(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  uint64_t v8;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  xpclog.getter((uint64_t)v5);
  v8 = a1;
  Logger._fault(_:function:file:line:)(partial apply for implicit closure #1 in ALXPCClient.proxyErrorHandler(error:), v7, (unint64_t)"proxyErrorHandler(error:)", 25, 2, (unint64_t)"/Library/Caches/com.apple.xbs/Sources/AONLoc/Interface/XPC/ALXPCService.swift", 77, 2);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Void __swiftcall ALServiceDelegate.onInterrupt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v3);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_235928000, v4, v5, "service,onInterrupt", v6, 2u);
    MEMORY[0x23B7DBDA4](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t ALServiceDelegate.interruptionHandler(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;

  v2 = v1;
  v20 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpclog.getter((uint64_t)v7);
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v16 = v5;
    v17 = v4;
    v18 = v2;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138543362;
    if (a1)
    {
      v19 = v8;
      v13 = v8;
    }
    else
    {
      v19 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = a1;

    _os_log_impl(&dword_235928000, v9, v10, "service,interruptionHandler,%{public}@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v12, -1, -1);
    MEMORY[0x23B7DBDA4](v11, -1, -1);
    v4 = v17;
    v5 = v16;
  }
  else
  {

    v9 = v8;
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return ALServiceDelegate.invalidationHandler(_:)(a1);
}

uint64_t ALServiceDelegate.invalidationHandler(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[4];
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v39 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v31[-v9];
  if (a1)
  {
    v11 = a1;
    xpclog.getter((uint64_t)v10);
    v12 = v11;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.info.getter();
    v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      v16 = swift_slowAlloc();
      v35 = v4;
      v17 = v16;
      v18 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v17 = 138543618;
      v33 = v2;
      v36[0] = v12;
      v32 = v15;
      v19 = v12;
      v34 = v5;
      v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = a1;

      *(_WORD *)(v17 + 12) = 1026;
      v21 = -[NSObject processIdentifier](v20, sel_processIdentifier);

      LODWORD(v36[0]) = v21;
      v2 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v5 = v34;
      _os_log_impl(&dword_235928000, v13, (os_log_type_t)v32, "service,invalidationHandler,%{public}@,pid,%{public}d,exited", (uint8_t *)v17, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v18, -1, -1);
      v22 = v17;
      v4 = v35;
      MEMORY[0x23B7DBDA4](v22, -1, -1);
    }
    else
    {

      v13 = v12;
    }

    v28 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x68))(v36, v28);
    v29 = v37;
    v30 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v30 + 16))(v12, v29, v30);

    return __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  }
  else
  {
    xpclog.getter((uint64_t)v8);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138543362;
      v36[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v26 = 0;
      _os_log_impl(&dword_235928000, v23, v24, "serviceIvalidationHandler, invalid %{public}@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v26, -1, -1);
      MEMORY[0x23B7DBDA4](v25, -1, -1);
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
}

id ALServiceDelegate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ALServiceDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ALServiceDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ALServiceDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  void (*v16)(char *, uint64_t);
  int v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  _QWORD *v37;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  NSObject *aBlock;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  void *v46;
  void (*v47)();
  uint64_t v48;

  v2 = v1;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v39 - v8;
  xpclog.getter((uint64_t)&v39 - v8);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v39 = (_QWORD *)swift_slowAlloc();
    v40 = v2;
    *(_DWORD *)v13 = 67240450;
    v41 = v4;
    LODWORD(aBlock) = -[NSObject processIdentifier](v10, sel_processIdentifier);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2114;
    aBlock = v10;
    v14 = v10;
    v4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v39;
    *v39 = v10;

    _os_log_impl(&dword_235928000, v11, v12, "New XPC Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v13, 0x12u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v2 = v40;
    MEMORY[0x23B7DBDA4](v15, -1, -1);
    MEMORY[0x23B7DBDA4](v13, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v9, v4);
  v17 = (*(uint64_t (**))((*MEMORY[0x24BEE4EA0] & *v2) + 0x90))(v10);
  if ((v17 & 1) != 0)
  {
    LODWORD(v41) = v17;
    -[NSObject setExportedObject:](v10, sel_setExportedObject_, v2);
    v18 = (void *)objc_opt_self();
    v19 = objc_msgSend(v18, sel_interfaceWithProtocol_, &unk_2563770B0);
    -[NSObject setExportedInterface:](v10, sel_setExportedInterface_, v19);

    v20 = objc_msgSend(v18, sel_interfaceWithProtocol_, &unk_2563770B0);
    -[NSObject setRemoteObjectInterface:](v10, sel_setRemoteObjectInterface_, v20);

    v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v2;
    *(_QWORD *)(v22 + 24) = v21;
    v47 = partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:);
    v48 = v22;
    v23 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v44 = 1107296256;
    v45 = thunk for @escaping @callee_guaranteed () -> ();
    v46 = &block_descriptor_13;
    v24 = _Block_copy(&aBlock);
    v25 = v2;
    swift_release();
    -[NSObject setInterruptionHandler:](v10, sel_setInterruptionHandler_, v24);
    _Block_release(v24);
    v26 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v25;
    *(_QWORD *)(v27 + 24) = v26;
    v47 = partial apply for closure #2 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:);
    v48 = v27;
    aBlock = v23;
    v44 = 1107296256;
    v45 = thunk for @escaping @callee_guaranteed () -> ();
    v46 = &block_descriptor_20;
    v28 = _Block_copy(&aBlock);
    v29 = v25;
    swift_release();
    -[NSObject setInvalidationHandler:](v10, sel_setInvalidationHandler_, v28);
    _Block_release(v28);
    -[NSObject _setQueue:](v10, sel__setQueue_, *(_QWORD *)&v29[OBJC_IVAR____TtC5ALXPC17ALServiceDelegate__queue]);
    -[NSObject activate](v10, sel_activate);
    xpclog.getter((uint64_t)v42);
    v30 = v10;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v40 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v33 = 67240450;
      LODWORD(aBlock) = -[NSObject processIdentifier](v30, sel_processIdentifier);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 8) = 2114;
      aBlock = v30;
      v34 = v16;
      v35 = v4;
      v36 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v37 = v40;
      *v40 = v30;

      v4 = v35;
      v16 = v34;
      _os_log_impl(&dword_235928000, v31, v32, "Activated Connection from process:%{public}d, details:(%{public}@)", (uint8_t *)v33, 0x12u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v37, -1, -1);
      MEMORY[0x23B7DBDA4](v33, -1, -1);
    }
    else
    {

      v31 = v30;
    }

    v16(v42, v4);
    LOBYTE(v17) = v41;
  }
  return v17 & 1;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2359302B4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_235930318()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for implicit closure #4 in implicit closure #3 in ALServiceDelegate.onData(_:)()
{
  uint64_t v0;
  void *v1;
  Class isa;

  v1 = *(void **)(v0 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_onData_, isa);

}

uint64_t dispatch thunk of ALXPCDataService.subscribe(_:cb:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ALXPCDataService.unsubscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for ALServiceDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ALServiceDelegate.__allocating_init(queue:dataService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ALServiceDelegate.onData(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ALServiceDelegate.onInterrupt()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t sub_2359303F8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)((void (*)(void))ALServiceDelegate.interruptionHandler(_:));
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)((void (*)(void))ALServiceDelegate.invalidationHandler(_:));
}

void partial apply for closure #1 in ALServiceDelegate.listener(_:shouldAcceptNewConnection:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(v1 + 24) + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x23B7DBDEC](v3);
  a1();

}

Swift::String __swiftcall prettyFunctionName(_:_:)(Swift::String a1, Swift::String a2)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String result;

  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  lazy protocol witness table accessor for type String and conformance String();
  v4 = StringProtocol.components<A>(separatedBy:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 16 * v5;
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(void **)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 35;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = countAndFlagsBits;
    v10._object = object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    countAndFlagsBits = v8;
    object = v7;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  v11 = countAndFlagsBits;
  v12 = object;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x23B7DBD20](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t Logger._fault(_:function:file:line:)(uint64_t (*a1)(void), void *a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  Swift::String v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  result = a1();
  v15 = result;
  v17 = v16;
  if ((a8 & 1) != 0)
  {
    v14 = HIDWORD(a6);
    if (!HIDWORD(a6))
    {
      if (a6 >> 11 == 27)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      LODWORD(v14) = WORD1(a6);
      if (WORD1(a6) <= 0x10u)
      {
        if ((a6 & 0xFFFFFF80) == 0)
        {
          if (a6 > 0xFF)
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          v18 = (a6 + 1);
          goto LABEL_10;
        }
LABEL_28:
        v30 = (a6 & 0x3F) << 8;
        v31 = (v30 | (a6 >> 6)) + 33217;
        v32 = (v30 | (a6 >> 6) & 0x3F) << 8;
        v33 = (((v32 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
        v34 = (v32 | (a6 >> 12)) + 8487393;
        if ((_DWORD)v14)
          v18 = v33;
        else
          v18 = v34;
        if (a6 < 0x800)
          v18 = v31;
LABEL_10:
        v40 = (v18 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v18) >> 3)) & 7)));
        goto LABEL_11;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!a6)
  {
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  result = static String._fromUTF8Repairing(_:)();
  a6 = result;
  a2 = v19;
  if ((a5 & 1) == 0)
  {
    if (a3)
      goto LABEL_21;
    __break(1u);
    goto LABEL_35;
  }
  v14 = HIDWORD(a3);
  if (HIDWORD(a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a3 >> 11 == 27)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  LODWORD(v14) = WORD1(a3);
  if (WORD1(a3) > 0x10u)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    v35 = (a3 & 0x3F) << 8;
    v36 = (v35 | (a3 >> 6)) + 33217;
    v37 = (v35 | (a3 >> 6) & 0x3F) << 8;
    v38 = (((v37 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
    v39 = (v37 | (a3 >> 12)) + 8487393;
    if ((_DWORD)v14)
      v20 = v38;
    else
      v20 = v39;
    if (a3 < 0x800)
      v20 = v36;
    goto LABEL_20;
  }
  if ((a3 & 0xFFFFFF80) != 0)
    goto LABEL_38;
  if (a3 > 0xFF)
  {
    __break(1u);
    goto LABEL_45;
  }
  v20 = (a3 + 1);
LABEL_20:
  v40 = (v20 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v20) >> 3)) & 7)));
LABEL_21:
  v21._countAndFlagsBits = static String._fromUTF8Repairing(_:)();
  v23 = v22;
  v24._countAndFlagsBits = a6;
  v24._object = a2;
  v21._object = v23;
  v25 = prettyFunctionName(_:_:)(v24, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = static os_log_type_t.fault.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v27 = Logger.logObject.getter();
  if (os_log_type_enabled(v27, v26))
  {
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v40 = v29;
    *(_DWORD *)v28 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25._countAndFlagsBits, (unint64_t)v25._object, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_235928000, v27, v26, "fault,func,%s,message,%s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v29, -1, -1);
    MEMORY[0x23B7DBDA4](v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  reportBug(type:subType:subTypeContext:fatalCallback:)(0x746C756166, 0xE500000000000000, v25._countAndFlagsBits, (unint64_t)v25._object, 0, 0, 0, 0);
  return swift_bridgeObjectRelease();
}

uint64_t Logger._fatal(_:function:file:line:)(uint64_t (*a1)(void), void *a2, unint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  void *v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  Swift::String v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  void *v41;
  Swift::String v42;
  uint64_t result;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v46 = a1();
  if ((a8 & 1) != 0)
  {
    v18 = HIDWORD(a6);
    if (HIDWORD(a6))
      goto LABEL_21;
    if (a6 >> 11 != 27)
    {
      LODWORD(v18) = WORD1(a6);
      if (WORD1(a6) > 0x10u)
        goto LABEL_22;
      if ((a6 & 0xFFFFFF80) != 0)
        goto LABEL_24;
      if (a6 <= 0xFF)
      {
        v9 = v17;
        v19 = (a6 + 1);
        goto LABEL_10;
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_43;
  }
  if (!a6)
    goto LABEL_20;
  v9 = v17;
  while (1)
  {
    v10 = static String._fromUTF8Repairing(_:)();
    a2 = v17;
    if ((a5 & 1) == 0)
    {
      if (a3)
        goto LABEL_43;
      __break(1u);
    }
    v18 = HIDWORD(a3);
    if (HIDWORD(a3))
      goto LABEL_23;
    if (a3 >> 11 == 27)
      goto LABEL_33;
    LODWORD(v18) = WORD1(a3);
    if (WORD1(a3) > 0x10u)
      goto LABEL_31;
    if ((a3 & 0xFFFFFF80) != 0)
      break;
    if (a3 <= 0xFF)
    {
      v30 = (a3 + 1);
      goto LABEL_42;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    v9 = v17;
    v20 = (a6 & 0x3F) << 8;
    v21 = (v20 | (a6 >> 6)) + 33217;
    v22 = (v20 | (a6 >> 6) & 0x3F) << 8;
    v23 = (((v22 | (a6 >> 12) & 0x3F) << 8) | (a6 >> 18)) - 2122219023;
    v24 = (v22 | (a6 >> 12)) + 8487393;
    if ((_DWORD)v18)
      v19 = v23;
    else
      v19 = v24;
    if (a6 < 0x800)
      v19 = v21;
LABEL_10:
    v47 = (v19 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v19) >> 3)) & 7)));
  }
  v25 = (a3 & 0x3F) << 8;
  v26 = (v25 | (a3 >> 6)) + 33217;
  v27 = (v25 | (a3 >> 6) & 0x3F) << 8;
  v28 = (((v27 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
  v29 = (v27 | (a3 >> 12)) + 8487393;
  if ((_DWORD)v18)
    v30 = v28;
  else
    v30 = v29;
  if (a3 < 0x800)
    v30 = v26;
LABEL_42:
  v47 = (v30 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v30) >> 3)) & 7)));
LABEL_43:
  v31._countAndFlagsBits = static String._fromUTF8Repairing(_:)();
  v33 = v32;
  v34._countAndFlagsBits = v10;
  v34._object = a2;
  v31._object = v33;
  v35 = prettyFunctionName(_:_:)(v34, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v33) = static os_log_type_t.error.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v36 = Logger.logObject.getter();
  type = v33;
  if (os_log_type_enabled(v36, (os_log_type_t)v33))
  {
    v37 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    v47 = v44;
    *(_DWORD *)v37 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35._countAndFlagsBits, (unint64_t)v35._object, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, (unint64_t)v9, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_235928000, v36, type, "fatal,func,%s,message,%s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v44, -1, -1);
    MEMORY[0x23B7DBDA4](v37, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v46;
  *(_QWORD *)(v38 + 24) = v9;
  *(_QWORD *)(v38 + 32) = a6;
  *(_QWORD *)(v38 + 40) = a7;
  *(_BYTE *)(v38 + 48) = a8;
  *(_QWORD *)(v38 + 56) = a9;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  reportBug(type:subType:subTypeContext:fatalCallback:)(0x6C61746166, 0xE500000000000000, v35._countAndFlagsBits, (unint64_t)v35._object, v46, v9, (void (*)(_QWORD))partial apply for closure #1 in Logger._fatal(_:function:file:line:), v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  objc_msgSend((id)objc_opt_self(), sel_sleepForTimeInterval_, 10.0);
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v39._object = (void *)0x8000000235BE85D0;
  v39._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v39);
  Double.write<A>(to:)();
  v40 = v47;
  v41 = (void *)v48;
  v47 = v46;
  v48 = (unint64_t)v9;
  swift_bridgeObjectRetain();
  v42._countAndFlagsBits = v40;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *ALLogger.subsystem.unsafeMutableAddressor()
{
  return &static ALLogger.subsystem;
}

unint64_t static ALLogger.subsystem.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for core(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.core);
}

uint64_t ALLogger.core.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t static ALLogger.core.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for core, (uint64_t)static ALLogger.core, a1);
}

uint64_t one-time initialization function for util(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.util);
}

uint64_t ALLogger.util.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for util, (uint64_t)static ALLogger.util);
}

uint64_t static ALLogger.util.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for util, (uint64_t)static ALLogger.util, a1);
}

uint64_t static ALLogger.core.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for xpc(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.xpc);
}

uint64_t ALLogger.xpc.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for xpc, (uint64_t)static ALLogger.xpc);
}

uint64_t static ALLogger.xpc.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for xpc, (uint64_t)static ALLogger.xpc, a1);
}

uint64_t one-time initialization function for rpc(uint64_t a1)
{
  return one-time initialization function for core(a1, static ALLogger.rpc);
}

uint64_t one-time initialization function for core(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t ALLogger.rpc.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for rpc, (uint64_t)static ALLogger.rpc);
}

uint64_t static ALLogger.rpc.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for rpc, (uint64_t)static ALLogger.rpc, a1);
}

uint64_t ALLogger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ALLogger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ALLogger.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t one-time initialization function for corelog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, corelog, &one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t corelog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for corelog, (uint64_t)corelog);
}

uint64_t corelog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for corelog, (uint64_t)corelog, a1);
}

uint64_t one-time initialization function for allog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, allog, &one-time initialization token for core, (uint64_t)static ALLogger.core);
}

uint64_t one-time initialization function for corelog(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  v8 = __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v9 = __swift_project_value_buffer(v7, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v8, v9, v7);
}

uint64_t allog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for allog, (uint64_t)allog);
}

uint64_t allog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for allog, (uint64_t)allog, a1);
}

uint64_t one-time initialization function for rpclog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, rpclog, &one-time initialization token for rpc, (uint64_t)static ALLogger.rpc);
}

uint64_t rpclog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for rpclog, (uint64_t)rpclog);
}

uint64_t rpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for rpclog, (uint64_t)rpclog, a1);
}

uint64_t one-time initialization function for utillog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, utillog, &one-time initialization token for util, (uint64_t)static ALLogger.util);
}

uint64_t utillog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for utillog, (uint64_t)utillog);
}

uint64_t utillog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for utillog, (uint64_t)utillog, a1);
}

uint64_t one-time initialization function for xpclog(uint64_t a1)
{
  return one-time initialization function for corelog(a1, xpclog, &one-time initialization token for xpc, (uint64_t)static ALLogger.xpc);
}

uint64_t xpclog.unsafeMutableAddressor()
{
  return ALLogger.core.unsafeMutableAddressor(&one-time initialization token for xpclog, (uint64_t)xpclog);
}

uint64_t ALLogger.core.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t xpclog.getter@<X0>(uint64_t a1@<X8>)
{
  return static ALLogger.core.getter(&one-time initialization token for xpclog, (uint64_t)xpclog, a1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, a1, v6);
  v10 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16[3] = MEMORY[0x24BEE0D00];
    v16[4] = MEMORY[0x24BEE0D70];
    v16[0] = 7104878;
    v16[1] = 0xE300000000000000;
  }
  else
  {
    v14 = a2;
    v15 = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v9, a2);
    outlined init with take of ALXPCDataService(&v13, (uint64_t)v16);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
  _print_unlocked<A, B>(_:_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
}

uint64_t sub_235931628()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in Logger._fatal(_:function:file:line:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t type metadata accessor for ALLogger()
{
  return objc_opt_self();
}

uint64_t method lookup function for ALLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char *v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void (*v48)(_QWORD);
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  char *v52;
  Class isa;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void (*v58)(_QWORD);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t aBlock[7];

  v67 = a8;
  v15 = type metadata accessor for Logger();
  v69 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v63 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v68 = (char *)&v57 - v18;
  v70 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1760]), sel_init);
  v19 = (Class)objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB3470]), sel_init);
  v20 = (void *)MEMORY[0x23B7DB7C8](0xD000000000000010, 0x8000000235BE8610);
  v60 = a1;
  v64 = a2;
  v21 = (void *)MEMORY[0x23B7DB7C8](a1, a2);
  v61 = a3;
  v65 = a4;
  v22 = (void *)MEMORY[0x23B7DB7C8](a3, a4);
  v66 = (unint64_t)a6;
  v62 = a5;
  v23 = v15;
  if (a6)
    a6 = (void *)MEMORY[0x23B7DB7C8](a5, a6);
  v24 = objc_msgSend(v70, sel_processName);
  if (!v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = (id)MEMORY[0x23B7DB7C8](v25);
    swift_bridgeObjectRelease();
  }
  v26 = (char *)-[objc_class signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:](v19, sel_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_, v20, v21, v22, a6, v24, 0);

  if (!v26)
  {
    v43 = utillog.unsafeMutableAddressor();
    v44 = v69;
    v45 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v63, v43, v23);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = a7;
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_235928000, v46, v47, "reportBugBlocking,signature,nil", v49, 2u);
      v50 = v49;
      a7 = v48;
      v44 = v69;
      MEMORY[0x23B7DBDA4](v50, -1, -1);
    }

    v51 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v23);
    if (a7)
      a7(v51);
    goto LABEL_24;
  }
  v63 = v26;
  if (a7)
    v27 = 0.0;
  else
    v27 = 6.0;
  v28 = utillog.unsafeMutableAddressor();
  v29 = v68;
  v30 = v69;
  v31 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v28, v23);
  v32 = v66;
  swift_bridgeObjectRetain_n();
  v33 = v64;
  swift_bridgeObjectRetain_n();
  v34 = v65;
  swift_bridgeObjectRetain_n();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.default.getter();
  v59 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc();
    v57 = swift_slowAlloc();
    aBlock[0] = v57;
    *(_DWORD *)v37 = 136315906;
    v58 = a7;
    swift_bridgeObjectRetain();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v38 = v30;
    *(_WORD *)(v37 + 12) = 2080;
    swift_bridgeObjectRetain();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 22) = 2080;
    if (v32)
      v39 = v62;
    else
      v39 = 45;
    if (v32)
      v40 = v32;
    else
      v40 = 0xE100000000000000;
    v65 = v31;
    swift_bridgeObjectRetain();
    v41 = v39;
    a7 = v58;
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 32) = 2048;
    v71 = *(_QWORD *)&v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_235928000, v35, (os_log_type_t)v59, "reportBug,type:%s,subtype:%s,context:%s,delay:%f", (uint8_t *)v37, 0x2Au);
    v42 = v57;
    swift_arrayDestroy();
    MEMORY[0x23B7DBDA4](v42, -1, -1);
    MEMORY[0x23B7DBDA4](v37, -1, -1);

    (*(void (**)(char *, unint64_t))(v38 + 8))(v68, v65);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, unint64_t))(v30 + 8))(v29, v31);
  }
  aBlock[0] = 0;
  v52 = v63;
  static Dictionary._forceBridgeFromObjectiveC(_:result:)();
  if (aBlock[0])
  {

    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v54 = swift_allocObject();
    v55 = v67;
    *(_QWORD *)(v54 + 16) = a7;
    *(_QWORD *)(v54 + 24) = v55;
    aBlock[4] = (uint64_t)partial apply for closure #1 in reportBug(type:subType:subTypeContext:fatalCallback:);
    aBlock[5] = v54;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_1;
    v56 = _Block_copy(aBlock);
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)a7);
    swift_release();
    -[objc_class snapshotWithSignature:delay:events:payload:actions:reply:](v19, sel_snapshotWithSignature_delay_events_payload_actions_reply_, isa, 0, 0, 0, v56, v27);
    _Block_release(v56);

    v70 = v52;
    v19 = isa;
LABEL_24:

    return;
  }
  __break(1u);
}

uint64_t logginResponse(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  uint8_t *v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  _QWORD v47[5];
  __int128 v48;
  __int128 v49;

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v42 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v42 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v42 - v13;
  if (a1)
  {
    v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v15;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(a1 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v17 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v48);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v47);
    if (*((_QWORD *)&v49 + 1))
    {
      type metadata accessor for NSNumber();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v18 = v45;
        if (objc_msgSend(v45, sel_BOOLValue))
        {
          swift_bridgeObjectRelease();
          v19 = utillog.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v19, v2);
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v22 = 0;
            _os_log_impl(&dword_235928000, v20, v21, "reportBug,successful", v22, 2u);
            MEMORY[0x23B7DBDA4](v22, -1, -1);
          }

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v14, v2);
        }
        v32 = utillog.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v12, v32, v2);
        swift_bridgeObjectRetain();
        v33 = Logger.logObject.getter();
        v34 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v33, (os_log_type_t)v34))
        {

          swift_bridgeObjectRelease_n();
LABEL_33:

          return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v12, v2);
        }
        v43 = v34;
        v35 = (uint8_t *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v44 = v42;
        *(_DWORD *)v35 = 136315138;
        v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v46 = v36;
        AnyHashable.init<A>(_:)();
        if (*(_QWORD *)(a1 + 16)
          && (v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v38 & 1) != 0))
        {
          outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v37, (uint64_t)&v48);
        }
        else
        {
          v48 = 0u;
          v49 = 0u;
        }
        outlined destroy of AnyHashable((uint64_t)v47);
        if (*((_QWORD *)&v49 + 1))
        {
          if ((swift_dynamicCast() & 1) != 0)
          {
            v39 = (uint64_t)v45;
            v40 = v46;
LABEL_32:
            v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_235928000, v33, (os_log_type_t)v43, "reportBug,failed,reason,%s ", v35, 0xCu);
            v41 = v42;
            swift_arrayDestroy();
            MEMORY[0x23B7DBDA4](v41, -1, -1);
            MEMORY[0x23B7DBDA4](v35, -1, -1);

            goto LABEL_33;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v48);
        }
        v40 = 0xE700000000000000;
        v39 = 0x6E776F6E6B6E75;
        goto LABEL_32;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of Any?((uint64_t)&v48);
    }
    v28 = utillog.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v28, v2);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_235928000, v29, v30, "reportBug,response,malformed", v31, 2u);
      MEMORY[0x23B7DBDA4](v31, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  else
  {
    v24 = utillog.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v24, v2);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_235928000, v25, (os_log_type_t)v26, "reportBug,response,nil", v27, 2u);
      MEMORY[0x23B7DBDA4](v27, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_2359323B8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in reportBug(type:subType:subTypeContext:fatalCallback:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  result = logginResponse(_:)(a1);
  if (v2)
    return v2(result);
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t outlined copy of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x23B7DB8DC](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Request);
}

uint64_t CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 20);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasMachContinuousTimeNs.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearMachContinuousTimeNs()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 20);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.processID.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_AONLoc_Request.processID.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 24);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.processID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasProcessID.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearProcessID()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 24);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.transactionID.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_AONLoc_Request.transactionID.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.transactionID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.hasTransactionID.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearTransactionID()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 28);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.type.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_AONLoc_Request.type.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.type.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.type.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.hasType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_AONLoc_Request.resultOptions.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  v8 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v8;
  a1[2] = v8;
  UnknownStorage.init()();
  *((_BYTE *)a1 + v7[8]) = 2;
  v9 = (char *)a1 + v7[9];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a1 + v7[10];
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = (char *)a1 + v7[11];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = (char *)a1 + v7[12];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = (char *)a1 + v7[13];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = (char *)a1 + v7[14];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  uint64_t result;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  a1[2] = v2;
  v3 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v3[8]) = 2;
  v5 = (char *)a1 + v3[9];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v3[10];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v3[11];
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = (char *)a1 + v3[12];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  v9 = (char *)a1 + v3[13];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a1 + v3[14];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t CLP_LogEntry_AONLoc_Request.resultOptions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_Request.resultOptions.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    *v9 = MEMORY[0x24BEE4AF8];
    v9[1] = v11;
    v9[2] = v11;
    UnknownStorage.init()();
    *((_BYTE *)v9 + v6[8]) = 2;
    v12 = (char *)v9 + v6[9];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = (char *)v9 + v6[10];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = (char *)v9 + v6[11];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = (char *)v9 + v6[12];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = (char *)v9 + v6[13];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    v17 = (char *)v9 + v6[14];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  }
  return CLP_LogEntry_AONLoc_Request.resultOptions.modify;
}

void CLP_LogEntry_AONLoc_Request.resultOptions.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

BOOL CLP_LogEntry_AONLoc_Request.hasResultOptions.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearResultOptions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Request.gpsdRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v7 = type metadata accessor for Proto_Gpsd_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for Proto_Gpsd_Request);
  Proto_Gpsd_Request.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
}

uint64_t outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t CLP_LogEntry_AONLoc_Request.gpsdRequest.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for Proto_Gpsd_Request);
  v4 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_Request.gpsdRequest.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Request(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Request.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Request);
  }
  return CLP_LogEntry_AONLoc_Request.gpsdRequest.modify;
}

void CLP_LogEntry_AONLoc_Request.gpsdRequest.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gpsd_Request?, type metadata accessor for Proto_Gpsd_Request);
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL CLP_LogEntry_AONLoc_Request.hasGpsdRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 40), (uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v5 = type metadata accessor for Proto_Gpsd_Request(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.clearGpsdRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v2 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t (*CLP_LogEntry_AONLoc_Request.unknownFields.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

ALProtobuf::CLP_LogEntry_AONLoc_Request::TypeEnum __swiftcall CLP_LogEntry_AONLoc_Request.TypeEnum.init()()
{
  return 0;
}

uint64_t CLP_LogEntry_AONLoc_Request.TypeEnum.rawValue.getter(char a1)
{
  return qword_235BB6C10[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(char *a1, char *a2)
{
  return qword_235BB6C10[*a1] == qword_235BB6C10[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
  return Enum.hash(into:)();
}

void protocol witness for Enum.init() in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  char *v0;

  return qword_235BB6C10[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BB6C10[*v1];
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) & 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeat.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearRepeat()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasBatchSize.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearBatchSize()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 36);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

float CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 40);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearRepeatIntervalSec()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 40);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

float CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 44);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)result + *(int *)(result + 12);
  *(_DWORD *)v1 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasMaxAgeSec.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearMaxAgeSec()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 44);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 48);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.minimalRssiDb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasMinimalRssiDb.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearMinimalRssiDb()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 48);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.btTypes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.wifiBands.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.channels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.channels.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.channels.modify())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

double CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 52);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasStartCfaTimeSec.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearStartCfaTimeSec()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 52);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v4 = v1 + *(int *)(result + 56);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8) + *(int *)(result + 16);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

BOOL CLP_LogEntry_AONLoc_Request.ResultOptions.hasEndCfaTimeSec.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Request.ResultOptions.clearEndCfaTimeSec()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 56);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_AONLoc_Request.ResultOptions.unknownFields.modify())()
{
  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions._repeat()
{
  return 2;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request.ResultOptions._startCfaTimeSec()
{
  return 0;
}

uint64_t CLP_LogEntry_AONLoc_Request.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + v2[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + v2[8]) = 5;
  v6 = a1 + v2[9];
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[10];
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._processID()
{
  return 0x100000000;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._type()
{
  return 5;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._gpsdRequest@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for Proto_Gpsd_Request, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

void *static CLP_LogEntry_AONLoc_Request.TypeEnum.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Request.TypeEnum.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
}

uint64_t CLP_LogEntry_AONLoc_Response.requestType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_AONLoc_Response.requestType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Response.requestType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasRequestType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearRequestType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t (*CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t CLP_LogEntry_AONLoc_Response.resultCode.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28));
  if (v1 == 10)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_AONLoc_Response.resultCode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_Response.resultCode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 10)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_Response.hasResultCode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) != 10;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Response.clearResultCode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Response(0) + 28)) = 10;
}

int *CLP_LogEntry_AONLoc_Response.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 10;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Response._resultCode()
{
  return 10;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 24));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 24);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.machContinuousTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_WiFiIndication.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

BOOL CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_WiFiIndication.clearMachContinuousTimeNs()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 24);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_WiFiIndication.hasIsLastBatch.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_WiFiIndication.clearIsLastBatch()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.modify())()
{
  type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.init()(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Response.machContinuousTimeNs.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.machContinuousTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_AONLoc_BtIndication.hasMachContinuousTimeNs.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_BtIndication.clearMachContinuousTimeNs()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.isLastBatch.getter()
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  return (v2 == 2) | v2 & 1u;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.isLastBatch.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.isLastBatch.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28);
  *(_BYTE *)(a1 + 12) = (*(_BYTE *)(v1 + v3) == 2) | *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_AONLoc_BtIndication.hasIsLastBatch.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_BtIndication.clearIsLastBatch()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*CLP_LogEntry_AONLoc_BtIndication.unknownFields.modify())()
{
  type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.init()(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char *v5;

  *a2 = MEMORY[0x24BEE4AF8];
  v3 = a1(0);
  result = UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(v3 + 24);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a2 + *(int *)(v3 + 28)) = 2;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 24))
    return 0;
  else
    return *(_QWORD *)(v1 + 16);
}

uint64_t CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0;
  v3[9] = v6;
  return CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify;
}

void CLP_LogEntry_AONLoc_Indication.machContinuousTimeNs.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasMachContinuousTimeNs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearMachContinuousTimeNs()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Indication.transactionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 32))
    return 0;
  else
    return *(unsigned int *)(v1 + 28);
}

uint64_t CLP_LogEntry_AONLoc_Indication.transactionID.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_DWORD *)(v6 + 28) = a1;
  *(_BYTE *)(v6 + 32) = 0;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.transactionID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 28);
  if (*(_BYTE *)(v5 + 32))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_AONLoc_Indication.transactionID.modify;
}

void CLP_LogEntry_AONLoc_Indication.transactionID.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 28) = v4;
  *(_BYTE *)(v10 + 32) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasTransactionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 32) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearTransactionID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 28) = 0;
  *(_BYTE *)(v4 + 32) = 1;
}

uint64_t CLP_LogEntry_AONLoc_Indication.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 33) == 7)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 33);
}

uint64_t CLP_LogEntry_AONLoc_Indication.type.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 33) = a1;
  return result;
}

void (*CLP_LogEntry_AONLoc_Indication.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 33);
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_AONLoc_Indication.type.modify;
}

void CLP_LogEntry_AONLoc_Indication.type.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 33);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 33) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 33) = 7;
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response, (void (*)(void))Proto_Gpsd_Response.init(), a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Response.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, type metadata accessor for Proto_Gpsd_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for Proto_Gpsd_Response?, type metadata accessor for Proto_Gpsd_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdIndication.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Indication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication, (void (*)(void))Proto_Gpsd_Indication.init(), a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a5, a3);
  a4();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void (*CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_Indication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_Indication.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_Indication);
  }
  return CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.gpsdIndication.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

void CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, (uint64_t)v9, a4);
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v9, a3, a4, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, a4);
  }
  else
  {
    CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for Proto_Gpsd_Indication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, type metadata accessor for Proto_Gpsd_Indication);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearGpsdIndication()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for Proto_Gpsd_Indication?, type metadata accessor for Proto_Gpsd_Indication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v12);
    *(_QWORD *)(v3 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v3 + v10);
  v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.getter(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.wifiResponse.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.wifiResponse.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasWifiResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearWifiResponse()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.getter@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

void (*CLP_LogEntry_AONLoc_Indication.wifiIndication.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  }
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.wifiIndication.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasWifiIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearWifiIndication()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiResponse.getter(&OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiResponse.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  UnknownStorage.init()();
  *(_BYTE *)(a2 + v9[5]) = 5;
  v10 = a2 + v9[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + v9[7]) = 10;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btResponse.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

void (*CLP_LogEntry_AONLoc_Indication.btResponse.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[7]] = 10;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  }
  return CLP_LogEntry_AONLoc_Indication.btResponse.modify;
}

void CLP_LogEntry_AONLoc_Indication.btResponse.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasBtResponse.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearBtResponse()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, type metadata accessor for CLP_LogEntry_AONLoc_Response, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btIndication.getter@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.wifiIndication.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, (uint64_t)a4, a3);
  *a4 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v14 = (char *)a4 + *(int *)(v13 + 24);
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  *((_BYTE *)a4 + *(int *)(v13 + 28)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t CLP_LogEntry_AONLoc_Indication.btIndication.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.gpsdResponse.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v16 = swift_allocObject();
    v17 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v17);
    *(_QWORD *)(v4 + v15) = v16;
    swift_release();
  }
  v18 = *(_QWORD *)(v4 + v15);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v14, a3);
  v19 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 0, 1, v19);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v14, (uint64_t)v12, a2);
  v20 = v18 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v12, v20, a2);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_AONLoc_Indication.btIndication.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    *((_BYTE *)v9 + *(int *)(v6 + 28)) = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  }
  return CLP_LogEntry_AONLoc_Indication.btIndication.modify;
}

void CLP_LogEntry_AONLoc_Indication.btIndication.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Indication.gpsdResponse.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

BOOL CLP_LogEntry_AONLoc_Indication.hasBtIndication.getter()
{
  return CLP_LogEntry_AONLoc_Indication.hasGpsdResponse.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_Indication.clearBtIndication()()
{
  CLP_LogEntry_AONLoc_Indication.clearGpsdResponse()(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication);
}

uint64_t CLP_LogEntry_AONLoc_Indication.TypeEnum.rawValue.getter(char a1)
{
  return qword_235BB6BD8[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(char *a1, char *a2)
{
  return qword_235BB6BD8[*a1] == qword_235BB6BD8[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  char *v0;

  return qword_235BB6BD8[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BB6BD8[*v1];
}

uint64_t CLP_LogEntry_AONLoc_Indication.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_Indication._storage()
{
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  return swift_retain();
}

void *static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_AONLoc_Indication.TypeEnum.allCases.getter;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.request.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 5;
  v11 = a1 + v7[9];
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + v7[10];
  v14 = type metadata accessor for Proto_Gpsd_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.request.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_LogEntry.request.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 5;
    v14 = &v9[v6[9]];
    v15 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    v16 = &v9[v6[10]];
    v17 = type metadata accessor for Proto_Gpsd_Request(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  }
  return CLP_LogEntry_AONLoc_LogEntry.request.modify;
}

void CLP_LogEntry_AONLoc_LogEntry.request.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

BOOL CLP_LogEntry_AONLoc_LogEntry.hasRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 20), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_LogEntry.clearRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.indication.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.indication.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_AONLoc_LogEntry.indication.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  }
  return CLP_LogEntry_AONLoc_LogEntry.indication.modify;
}

void CLP_LogEntry_AONLoc_LogEntry.indication.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

void CLP_LogEntry_AONLoc_Request.resultOptions.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = *(void **)a1;
  v7 = *(int *)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v12 = *(void **)(*(_QWORD *)a1 + 8);
  v13 = **(_QWORD **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v8, a4);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v13, a3);
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a4);
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(**(_QWORD **)a1 + v7, a3);
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL CLP_LogEntry_AONLoc_LogEntry.hasIndication.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_AONLoc_LogEntry.clearIndication()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Request.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CLP_LogEntry_AONLoc_Request.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_LogEntry._request@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Request, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_AONLoc_LogEntry._indication@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_AONLoc_Indication, a1);
}

void *CLP_LogEntry_AONLoc_Request.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Request.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Request.protoMessageName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "process_id";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "transaction_id";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "type";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "result_options";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 11;
  *(_QWORD *)v19 = "gpsd_request";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "UPDATE_RESULT_OPTIONS";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 11;
  *(_QWORD *)v13 = "GNSS_REQUEST";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 21;
  *(_QWORD *)v15 = "WIFI_RESULT";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 31;
  *(_QWORD *)v16 = "BT_RESULT";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_235BB5CC0;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "repeat";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v27 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "batch_size";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v27 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "repeat_interval_sec";
  *((_QWORD *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v27 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "max_age_sec";
  *((_QWORD *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v27 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "minimal_rssi_db";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v27 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "bt_types";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v27 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "wifi_bands";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v27 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "channels";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v27 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 11;
  *(_QWORD *)v23 = "start_cfa_time_sec";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v27 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 12;
  *(_QWORD *)v25 = "end_cfa_time_sec";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request_type";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mach_continuous_time_ns";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "result_code";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "mach_continuous_time_ns";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "transaction_id";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "type";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 11;
  *(_QWORD *)v14 = "gpsd_response";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 12;
  *(_QWORD *)v16 = "gpsd_indication";
  *((_QWORD *)v16 + 1) = 15;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 21;
  *(_QWORD *)v18 = "wifi_response";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 22;
  *(_QWORD *)v20 = "wifi_indication";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 31;
  *(_QWORD *)v22 = "bt_response";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 32;
  *(_QWORD *)v23 = "bt_indication";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ERROR_MESSAGE";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 11;
  *(_QWORD *)v11 = "GNSS_RESPONSE";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 12;
  *(_QWORD *)v13 = "GNSS_INDICATION";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 21;
  *(_QWORD *)v15 = "WIFI_RESPONSE";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 22;
  *(_QWORD *)v17 = "WIFI_INDICATION";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 31;
  *(_QWORD *)v19 = "BT_RESPONSE";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "BT_INDICATION";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 3;
  *(_QWORD *)v11 = "indication";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GLONASS_SLOT_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GLONASS_SLOT_SOURCE_UNSET";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GLONASS_SLOT_SOURCE_UNCLEAR";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GLONASS_SLOT_SOURCE_DECODED_OVER_THE_AIR";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "GLONASS_SLOT_SOURCE_POSITION_KNOWLEDGE";
  *(_QWORD *)(v16 + 8) = 38;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SATELLITE_SYSTEM_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SATELLITE_SYSTEM_GPS";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SATELLITE_SYSTEM_GLONASS";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "SATELLITE_SYSTEM_BEIDOU";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "SATELLITE_SYSTEM_GALILEO";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 16;
  *(_QWORD *)v19 = "SATELLITE_SYSTEM_QZSS";
  *((_QWORD *)v19 + 1) = 21;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "SATELLITE_SYSTEM_SBAS";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 64;
  *(_QWORD *)v23 = "SATELLITE_SYSTEM_NAVIC";
  *((_QWORD *)v23 + 1) = 22;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 0;
  *(_QWORD *)v6 = "BAND_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 21;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v33 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "BAND_UNSET";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v33 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "BAND_GPS_QZSS_L1CA";
  *((_QWORD *)v12 + 1) = 18;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v33 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "BAND_GPS_QZSS_L2C";
  *((_QWORD *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v33 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "BAND_GPS_QZSS_L5";
  *((_QWORD *)v16 + 1) = 16;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v33 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "BAND_GLONASS_L1F";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v33 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "BAND_BEIDOU_B1i";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v33 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "BAND_BEIDOU_B2a";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v33 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "BAND_GALILEO_E1";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v33 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "BAND_GALILEO_E5a";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v33 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "BAND_SBAS_L1";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v33 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "BAND_BEIDOU_B1c";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v33 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "BAND_NAVIC_L5";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FULL_SV_TIME_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FULL_SV_TIME_SOURCE_UNSET";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FULL_SV_TIME_SOURCE_NEWLY_DECODED_FROM_SV";
  *((_QWORD *)v13 + 1) = 41;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FULL_SV_TIME_SOURCE_PREV_DECODED_FROM_SV";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "FULL_SV_TIME_SOURCE_POSITION_AND_OTHER_SV_TIME";
  *((_QWORD *)v17 + 1) = 46;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "FULL_SV_TIME_SOURCE_POSITION_ONLY";
  *((_QWORD *)v19 + 1) = 33;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MEASUREMENT_DETECTION_METHOD_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 45;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MEASUREMENT_DETECTION_METHOD_UNSET";
  *(_QWORD *)(v11 + 8) = 34;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MEASUREMENT_DETECTION_METHOD_NOT_DETECTED";
  *((_QWORD *)v13 + 1) = 41;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MEASUREMENT_DETECTION_METHOD_ENERGY_BINS";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "MEASUREMENT_DETECTION_METHOD_CODE_TRACKING";
  *((_QWORD *)v17 + 1) = 42;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "MEASUREMENT_DETECTION_METHOD_FREQUENCY_TRACKING";
  *((_QWORD *)v19 + 1) = 47;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "MEASUREMENT_DETECTION_METHOD_PHASE_TRACKING";
  *((_QWORD *)v21 + 1) = 43;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MULTIPATH_INDICATOR_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MULTIPATH_INDICATOR_UNSET";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MULTIPATH_INDICATOR_UNKNOWN";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MULTIPATH_INDICATOR_PRESENT";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "MULTIPATH_INDICATOR_NOT_PRESENT";
  *(_QWORD *)(v16 + 8) = 31;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SV_POSITION_SOURCE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 35;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SV_POSITION_SOURCE_UNSET";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SV_POSITION_SOURCE_EPHEMERIS_OVER_THE_AIR";
  *((_QWORD *)v13 + 1) = 41;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SV_POSITION_SOURCE_BROADCAST_EPHEMERIS_FILE";
  *((_QWORD *)v15 + 1) = 43;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SV_POSITION_SOURCE_LONG_TERM_ORBIT_MOBILE_CALC_deprecated";
  *((_QWORD *)v17 + 1) = 57;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "SV_POSITION_SOURCE_LONG_TERM_PREDICTIONS_FILE";
  *((_QWORD *)v19 + 1) = 45;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "SV_POSITION_SOURCE_SHORT_TERM_PREDICTIONS_FILE";
  *((_QWORD *)v21 + 1) = 46;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SV_HEALTH_INDICATION_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 37;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SV_HEALTH_INDICATION_UNSET";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SV_HEALTH_INDICATION_UNKNOWN";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SV_HEALTH_INDICATION_HEALTHY";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "SV_HEALTH_INDICATION_UNHEALTHY";
  *(_QWORD *)(v16 + 8) = 30;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "IONO_CORR_SOURCE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "IONO_CORR_SOURCE_KLOBUCHAR_MODEL";
  *((_QWORD *)v11 + 1) = 32;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "IONO_CORR_SOURCE_GLOBAL_PREDICTIONS";
  *(_QWORD *)(v12 + 8) = 35;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 45;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNSET";
  *(_QWORD *)(v11 + 8) = 43;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_UNKNOWN";
  *((_QWORD *)v13 + 1) = 45;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_NOT_CHANGING";
  *((_QWORD *)v15 + 1) = 50;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "LEAP_SECOND_CHANGE_KNOWLEDGE_PROTOBUF_CHANGING";
  *(_QWORD *)(v16 + 8) = 46;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GLONASS_LEAP_SECOND_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GLONASS_LEAP_SECOND_UNSET";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GLONASS_LEAP_SECOND_NONE";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GLONASS_LEAP_SECOND_POSITIVE";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GLONASS_LEAP_SECOND_NEGATIVE";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GLONASS_LEAP_SECOND_NOT_YET_DEFINED";
  *((_QWORD *)v19 + 1) = 35;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SV_REFERENCE_POINT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SV_REFERENCE_POINT_CENTER_OF_MASS";
  *(_QWORD *)(v11 + 8) = 33;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SV_REFERENCE_POINT_L1_ANTENNA";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SV_REFERENCE_POINT_L5_ANTENNA";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gps_prn";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "glonass_id";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "beidou_ranging_code";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "galileo_spreading_code";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "qzss_prn";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "sbas_prn";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "navic_prn";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "system";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "constel_id";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "cm_code_lock";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "cl_code_lock";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "c_nav_bit";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "c_nav_frame";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "tow_decoded";
  *(_QWORD *)(v16 + 8) = 11;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "code_lock";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "c_nav_bit";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "c_nav_frame";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tow_decoded";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "code_lock";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "symbol";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "nav_bit";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "string";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "tod_decoded";
  *(_QWORD *)(v16 + 8) = 11;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "e1bc_code_lock";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "e1c_code_lock";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "e1b_page";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tow_decoded";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "e5b_prim_code_lock";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "e5a_prim_code_lock";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "e5_alt_boc_prim_code_lock";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "e5b_data_bit";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "e5a_data_bit";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "e5b_sec_code_lock";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "e5a_sec_code_lock";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "e5b_page_sync";
  *((_QWORD *)v23 + 1) = 13;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "e5a_page_sync";
  *(_QWORD *)(v24 + 8) = 13;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "tow_decoded";
  *((_QWORD *)v26 + 1) = 11;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "code_lock";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "symbol";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "message";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235BB6C90;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "band";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "gps_l1";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "gps_l2c";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "gps_l5";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "glonass_l1f";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "beidou_b1";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "beidou_b2";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "galileo_e1";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "galileo_e5";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "sbas_l1";
  *((_QWORD *)v25 + 1) = 7;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "navic_l5";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "time_unc_nanoseconds";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "uncertainty_adjusted_by_external_tool";
  *(_QWORD *)(v12 + 8) = 37;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "frequency_offset_ppb";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "frequency_offset_unc_ppb";
  *((_QWORD *)v11 + 1) = 24;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "uncertainty_adjusted_by_external_tool";
  *(_QWORD *)(v12 + 8) = 37;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "frequency_offset_ppb";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "frequency_offset_unc_ppb";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cycle_slip_detected";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "uncertainty_adjusted_by_external_tool";
  *((_QWORD *)v15 + 1) = 37;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "phase_start_time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "phase_end_time_nanoseconds";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "accumulated_phase_nanoseconds";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "accumulated_phase_unc_nanoseconds";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "cycle_slips_detected";
  *(_QWORD *)(v16 + 8) = 20;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "sv_time";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "frequency_offset";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "cn0_dbhz";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "derived_full_sv_time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 32;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "derived_full_sv_time_unc_nanoseconds";
  *((_QWORD *)v11 + 1) = 36;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "full_sv_time_source";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "innovation";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "residual";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "final_uncertainty";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_235BB6CA0;
  v5 = v39 + v4;
  v6 = v39 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v39 + v4) = 1;
  *(_QWORD *)v6 = "jammer_cn0_dbHz";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "snr_at_correlator_output";
  *(_QWORD *)(v10 + 8) = 24;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "full_sv_time";
  *((_QWORD *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "sv_time_usage_nanoseconds";
  *((_QWORD *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "frequency_offset_usage_ppb";
  *((_QWORD *)v16 + 1) = 26;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "carrier_phase_usage_nanoseconds";
  *((_QWORD *)v18 + 1) = 31;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "noncoherent_interval_count";
  *((_QWORD *)v20 + 1) = 26;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "coherent_integration_ms";
  *((_QWORD *)v22 + 1) = 23;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "sv_time_detection_method";
  *(_QWORD *)(v23 + 8) = 24;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "frequency_detection_method";
  *((_QWORD *)v25 + 1) = 26;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "channel_id";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "code_lock_duration_seconds";
  *((_QWORD *)v29 + 1) = 26;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "frequency_lock_duration_seconds";
  *((_QWORD *)v31 + 1) = 31;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "metadata";
  *((_QWORD *)v33 + 1) = 8;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "metadata_format";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "top_correlation_peaks";
  *((_QWORD *)v37 + 1) = 21;
  v37[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_235BB6CB0;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "id";
  *(_QWORD *)(v6 + 8) = 2;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "sync_state";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "start_time_nanoseconds";
  *((_QWORD *)v12 + 1) = 22;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "end_time_nanoseconds";
  *((_QWORD *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "applicability_time_nanoseconds";
  *((_QWORD *)v16 + 1) = 30;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "sv_time";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "frequency_offset";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "phase_tracking";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "extension";
  *(_QWORD *)(v23 + 8) = 9;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "cn0_dbHz";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "multipath_indicator";
  *((_QWORD *)v27 + 1) = 19;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "averaged_frequency_offset";
  *((_QWORD *)v29 + 1) = 25;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "is_usable";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "averaged_frequency_offset_from_phase_tracking";
  *((_QWORD *)v33 + 1) = 45;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "frequency_noise_ppb_per_second_per_rtHz";
  *(_QWORD *)(v7 + 8) = 39;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "phase_noise_ppb_per_rtHz";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "frequency_variance_ppb2";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "phase_variance_nanoseconds2";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "clock_jump_detected";
  *(_QWORD *)(v16 + 8) = 19;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "frequency_correction_ppb";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "cummulative_phase_correction_nanoseconds";
  *(_QWORD *)(v11 + 8) = 40;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "current_temperature_degrees_celsius";
  *((_QWORD *)v13 + 1) = 35;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "current_temperature_rate_degrees_per_second";
  *((_QWORD *)v15 + 1) = 43;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "avg_temperature_over_last_epoch_degrees_celsius";
  *(_QWORD *)(v16 + 8) = 47;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "offset_nanoseconds";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "sub_nanosecond_offset_nanoseconds";
  *(_QWORD *)(v11 + 8) = 33;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "offset_uncertainty_nanoseconds";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "drift_ppb";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "drift_uncertainty_ppb";
  *(_QWORD *)(v16 + 8) = 21;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "clock_nanoseconds";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "model";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "corrections";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "receiver_to_gps_time";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "clock";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "measurements";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "z";
  *(_QWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "band";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "tropospheric_nanoseconds";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ionospheric_nanoseconds";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tx_group_delay_nanoseconds";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "ionospheric_model";
  *(_QWORD *)(v16 + 8) = 17;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "applicable_time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "position";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 2;
  *(_QWORD *)v7 = "fit_validity_start_time_ns";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 3;
  *(_QWORD *)v11 = "fit_validity_end_time_ns";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "x_position_ecef_coefficients";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "y_position_ecef_coefficients";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 6;
  *(_QWORD *)v16 = "z_position_ecef_coefficients";
  *(_QWORD *)(v16 + 8) = 28;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v52;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_235BB6CC0;
  v5 = v52 + v4;
  v6 = v52 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v52 + v4) = 1;
  *(_QWORD *)v6 = "id";
  *(_QWORD *)(v6 + 8) = 2;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v52 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "reference_time_nanoseconds";
  *(_QWORD *)(v10 + 8) = 26;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v52 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "position_source";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v52 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "anchor_positions";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v52 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "clock_bias_correction_nanoseconds";
  *((_QWORD *)v16 + 1) = 33;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v52 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "clock_frequency_correction_ppb";
  *((_QWORD *)v18 + 1) = 30;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v52 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "clock_frequency_change_correction_ppb_per_sec";
  *((_QWORD *)v20 + 1) = 45;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v52 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "range_accuracy_position_m";
  *((_QWORD *)v22 + 1) = 25;
  v22[16] = 2;
  v9();
  v23 = v52 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "range_accuracy_clock_nanoseconds";
  *(_QWORD *)(v23 + 8) = 32;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v52 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "over_the_air_from_sv_health_l1";
  *((_QWORD *)v25 + 1) = 30;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v52 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "over_the_air_from_other_sv_health_l1";
  *((_QWORD *)v27 + 1) = 36;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v52 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "assistance_file_health_l1";
  *((_QWORD *)v29 + 1) = 25;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v52 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "ms_based_health_l1";
  *((_QWORD *)v31 + 1) = 18;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v52 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "integrity_health_l1";
  *((_QWORD *)v33 + 1) = 19;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v52 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "sv_band_corrections";
  *((_QWORD *)v35 + 1) = 19;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v52 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "polynomial_orbit";
  *((_QWORD *)v37 + 1) = 16;
  v37[16] = 2;
  v9();
  v38 = v52 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 18;
  *(_QWORD *)v38 = "over_the_air_from_sv_health_l5";
  *(_QWORD *)(v38 + 8) = 30;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v52 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 19;
  *(_QWORD *)v40 = "over_the_air_from_other_sv_health_l5";
  *((_QWORD *)v40 + 1) = 36;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v52 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 20;
  *(_QWORD *)v42 = "assistance_file_health_l5";
  *((_QWORD *)v42 + 1) = 25;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v52 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 21;
  *(_QWORD *)v44 = "ms_based_health_l5";
  *((_QWORD *)v44 + 1) = 18;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v52 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 22;
  *(_QWORD *)v46 = "integrity_health_l5";
  *((_QWORD *)v46 + 1) = 19;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v52 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 23;
  *(_QWORD *)v48 = "clock_frequency_accel_correction_ppb_per_sec_per_sec";
  *((_QWORD *)v48 + 1) = 52;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v52 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 24;
  *(_QWORD *)v50 = "sv_reference_point";
  *((_QWORD *)v50 + 1) = 18;
  v50[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "band";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "rf_time_bias_nanoseconds";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "rf_time_bias_uncertainty_nanoseconds";
  *((_QWORD *)v13 + 1) = 36;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "automatic_gain_control_db";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "time_of_change";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "new_leap_second";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "current_leap_second";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "change_knowledge";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "new_leap_second";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "offset_nanoseconds";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "drift_ppb";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "accel_ppb_per_second";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "week";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "leap_second";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "conversion";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "collection_time_nanoseconds";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "offset_time_nanoseconds";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "four_week_period";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "day";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "leap_second_deprecated";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gps_time_conversion";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "utc_conversion_deprecated";
  *(_QWORD *)(v16 + 8) = 25;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "applicable_time_nanoSeconds";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "offset_nanoSeconds";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "drift_ppb";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "week";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "leap_second_deprecated";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "gps_time_conversion";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "glonass_time_conversion";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "galileo_time_conversion";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "utc_time_conversion_deprecated";
  *((_QWORD *)v19 + 1) = 30;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "week";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "leap_second_deprecated";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "gps_time_conversion";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "utc_time_conversion_deprecated";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gps_time_conversion";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "week";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gps";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "glonass";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "beidou";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "galileo";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "navic";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "decode_time_full_gps_ns";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "alpha0";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "alpha1";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "alpha2";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "alpha3";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "beta0";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "beta1";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "beta2";
  *((_QWORD *)v22 + 1) = 5;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "beta3";
  *(_QWORD *)(v23 + 8) = 5;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "z";
  *(_QWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "band";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sv_reference_point";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "offset_xyz_m";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ios_absolute_sec";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mach_absolute_sec";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "mach_continuous_sec";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "received_timestamp";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "meas_report";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "sv_info";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "rx_band_corrections";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "time_conversion";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "meas_applicability_time_mach_continuous_sec";
  *((_QWORD *)v19 + 1) = 43;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "meas_applicability_time_uncertainty_sec";
  *((_QWORD *)v21 + 1) = 39;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "klobuchar_model";
  *((_QWORD *)v23 + 1) = 15;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "apc_sv_offset";
  *(_QWORD *)(v24 + 8) = 13;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_record_time";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 4;
  *(_QWORD *)v11 = "private_data_capture";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "cf_absolute_time_s";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "mach_absolute_time_s";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "mach_continuous_time_s";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "pipelined_monotonic_time_ns";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1004;
  *(_QWORD *)v7 = "gpsd_log_entry";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1018;
  *(_QWORD *)v11 = "aonloc_log_entry";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "CLRF_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "CLRF_WGS84";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "CLRF_CHINA_SHIFTED";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_235BB6CB0;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 0;
  *(_QWORD *)v6 = "LT_UNKNOWN";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "LT_GPS";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "LT_NMEA";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "LT_ACCESSORY";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "LT_WIFI";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "LT_SKYHOOK_OBSOLETE";
  *((_QWORD *)v18 + 1) = 19;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "LT_CELL";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "LT_LAC";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "LT_MCC";
  *(_QWORD *)(v23 + 8) = 6;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "LT_GPS_COARSE";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "LT_PIPELINE";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "LT_WIFI2";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "LT_COMPENSATED";
  *((_QWORD *)v31 + 1) = 14;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "LT_LOIOVERRIDE";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "CLIENT_SATELLITE_CONSTELLATION_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 38;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CLIENT_SATELLITE_CONSTELLATION_GPS";
  *(_QWORD *)(v11 + 8) = 34;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CLIENT_SATELLITE_CONSTELLATION_GLONASS";
  *((_QWORD *)v13 + 1) = 38;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CLIENT_SATELLITE_CONSTELLATION_BEIDOU";
  *((_QWORD *)v15 + 1) = 37;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CLIENT_SATELLITE_CONSTELLATION_GALILEO";
  *((_QWORD *)v17 + 1) = 38;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CLIENT_SATELLITE_CONSTELLATION_QZSS";
  *((_QWORD *)v19 + 1) = 35;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CLIENT_SATELLITE_CONSTELLATION_NAVIC";
  *((_QWORD *)v21 + 1) = 36;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "BATCHED_LOCATION_FIX_TYPE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "BATCHED_LOCATION_FIX_TYPE_SCALED_INTERPOLATED";
  *(_QWORD *)(v11 + 8) = 45;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_INTERPOLATED";
  *((_QWORD *)v13 + 1) = 50;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BATCHED_LOCATION_FIX_TYPE_MAP_MATCHED_GNSS_FIX";
  *((_QWORD *)v15 + 1) = 46;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "BATCHED_LOCATION_FIX_TYPE_GNSS_FIX";
  *(_QWORD *)(v16 + 8) = 34;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "GNSS_MODE_OF_OPERATION_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "GNSS_MODE_OF_OPERATION_1HZ";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "GNSS_MODE_OF_OPERATION_RHYTHMIC";
  *(_QWORD *)(v12 + 8) = 31;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 35;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_INVALID";
  *(_QWORD *)(v11 + 8) = 35;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_NON_WAKING";
  *((_QWORD *)v13 + 1) = 38;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "RHYTHMIC_GNSS_BEST_RHYTHMIC_WAKING";
  *((_QWORD *)v15 + 1) = 34;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "RHYTHMIC_GNSS_PROACTIVE_NON_WAKING";
  *(_QWORD *)(v16 + 8) = 34;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "BATCH_MODE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "BATCH_MODE_DISABLE_ON_WAKE";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "BATCH_MODE_ALLOW_DARK_WAKE";
  *(_QWORD *)(v12 + 8) = 26;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "OPERATING_MODE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "OPERATING_MODE_NORMAL";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "OPERATING_MODE_TIME";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "OPERATING_MODE_SKIP_DEBOUNCE";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PIPELINE_OPERATING_MODE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PIPELINE_OPERATING_MODE_INDOOR";
  *((_QWORD *)v11 + 1) = 30;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "PIPELINE_OPERATING_MODE_REGIONAL";
  *(_QWORD *)(v12 + 8) = 32;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  _QWORD *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  _QWORD *v139;
  char *v140;
  _QWORD *v141;
  char *v142;
  _QWORD *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v148;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v148 = swift_allocObject();
  *(_OWORD *)(v148 + 16) = xmmword_235BBD6A0;
  v5 = v148 + v4;
  v6 = v148 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v148 + v4) = 0;
  *(_QWORD *)v6 = "DM_UNKNOWN";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v148 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "DM_FROZEN";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v148 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "DM_STATIC";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v148 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "DM_MOVING";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v148 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "DM_WALKING";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v148 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "DM_DRIVING";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v148 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "DM_CYCLING";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v148 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "DM_SEMI_STATIONARY";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v9();
  v23 = v148 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "DM_RUNNING";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v148 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "DM_MOVING_COARSE";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v148 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "DM_IN_VEHICLE_FROZEN";
  *((_QWORD *)v27 + 1) = 20;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v148 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "DM_IN_VEHICLE_STATIC";
  *((_QWORD *)v29 + 1) = 20;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v148 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 41;
  *(_QWORD *)v31 = "DM_WALKING_SLOW";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v148 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 52;
  *(_QWORD *)v33 = "DM_VEHICULAR_IN_HAND";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v148 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 56;
  *(_QWORD *)v35 = "DM_DRIVING_OTHER";
  *((_QWORD *)v35 + 1) = 16;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v148 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 61;
  *(_QWORD *)v37 = "DM_MACHINE_WORKOUT";
  *((_QWORD *)v37 + 1) = 18;
  v37[16] = 2;
  v9();
  v38 = v148 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 62;
  *(_QWORD *)v38 = "DM_WORKOUT";
  *(_QWORD *)(v38 + 8) = 10;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v148 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 63;
  *(_QWORD *)v40 = "DM_MULTI_SPORT_TRANSITION";
  *((_QWORD *)v40 + 1) = 25;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v148 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 64;
  *(_QWORD *)v42 = "DM_INDOOR_SOCCER";
  *((_QWORD *)v42 + 1) = 16;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v148 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 65;
  *(_QWORD *)v44 = "DM_AUSTRALIAN_FOOTBALL";
  *((_QWORD *)v44 + 1) = 22;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v148 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 66;
  *(_QWORD *)v46 = "DM_PICKLEBALL";
  *((_QWORD *)v46 + 1) = 13;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v148 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 100;
  *(_QWORD *)v48 = "DM_CYCLING_LEG";
  *((_QWORD *)v48 + 1) = 14;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v148 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 2010;
  *(_QWORD *)v50 = "DM_STATIONARY_CYCLING";
  *((_QWORD *)v50 + 1) = 21;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v148 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 2020;
  *(_QWORD *)v52 = "DM_CALISTHENICS";
  *((_QWORD *)v52 + 1) = 15;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v148 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 2022;
  *(_QWORD *)v54 = "DM_FUNCTIONAL_STRENGTH";
  *((_QWORD *)v54 + 1) = 22;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v148 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 2024;
  *(_QWORD *)v56 = "DM_CORE_TRAINING";
  *((_QWORD *)v56 + 1) = 16;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v148 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 2048;
  *(_QWORD *)v58 = "DM_ELLIPTICAL";
  *((_QWORD *)v58 + 1) = 13;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v148 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 2061;
  *(_QWORD *)v60 = "DM_CROSS_TRAINING";
  *((_QWORD *)v60 + 1) = 17;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v148 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 2065;
  *(_QWORD *)v62 = "DM_STAIR_CLIMBING";
  *((_QWORD *)v62 + 1) = 17;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v148 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 2068;
  *(_QWORD *)v64 = "DM_JUMP_ROPE";
  *((_QWORD *)v64 + 1) = 12;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v148 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 2071;
  *(_QWORD *)v66 = "DM_ROWING";
  *((_QWORD *)v66 + 1) = 9;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v148 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 2101;
  *(_QWORD *)v68 = "DM_COOL_DOWN";
  *((_QWORD *)v68 + 1) = 12;
  v68[16] = 2;
  v9();
  v69 = v148 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 2105;
  *(_QWORD *)v69 = "DM_PILATES";
  *(_QWORD *)(v69 + 8) = 10;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v148 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 2150;
  *(_QWORD *)v71 = "DM_YOGA";
  *((_QWORD *)v71 + 1) = 7;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v148 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 3015;
  *(_QWORD *)v73 = "DM_DANCING";
  *((_QWORD *)v73 + 1) = 10;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v148 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 3016;
  *(_QWORD *)v75 = "DM_STEP_TRAINING";
  *((_QWORD *)v75 + 1) = 16;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v148 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 11805;
  *(_QWORD *)v77 = "DM_PUSHING_WHEELCHAIR";
  *((_QWORD *)v77 + 1) = 21;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v148 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 12150;
  *(_QWORD *)v79 = "DM_INDOOR_RUNNING";
  *((_QWORD *)v79 + 1) = 17;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v148 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 15030;
  *(_QWORD *)v81 = "DM_BADMINTON";
  *((_QWORD *)v81 + 1) = 12;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v148 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 15055;
  *(_QWORD *)v83 = "DM_BASKETBALL";
  *((_QWORD *)v83 + 1) = 13;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v148 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 15100;
  *(_QWORD *)v85 = "DM_BOXING";
  *((_QWORD *)v85 + 1) = 9;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v148 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 15110;
  *(_QWORD *)v87 = "DM_KICKBOXING";
  *((_QWORD *)v87 + 1) = 13;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v148 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 15150;
  *(_QWORD *)v89 = "DM_CRICKET";
  *((_QWORD *)v89 + 1) = 10;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v148 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 15230;
  *(_QWORD *)v91 = "DM_AMERICAN_FOOTBALL";
  *((_QWORD *)v91 + 1) = 20;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v148 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 15240;
  *(_QWORD *)v93 = "DM_DISC_SPORTS";
  *((_QWORD *)v93 + 1) = 14;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v148 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 15255;
  *(_QWORD *)v95 = "DM_GOLFING";
  *((_QWORD *)v95 + 1) = 10;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v148 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 15330;
  *(_QWORD *)v97 = "DM_HANDBALL";
  *((_QWORD *)v97 + 1) = 11;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v148 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 15350;
  *(_QWORD *)v99 = "DM_OUTDOOR_HOCKEY";
  *((_QWORD *)v99 + 1) = 17;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v148 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 15360;
  *(_QWORD *)v101 = "DM_INDOOR_HOCKEY";
  *((_QWORD *)v101 + 1) = 16;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v148 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 15460;
  *(_QWORD *)v103 = "DM_LACROSSE";
  *((_QWORD *)v103 + 1) = 11;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v148 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 15562;
  *(_QWORD *)v105 = "DM_RUGBY";
  *((_QWORD *)v105 + 1) = 8;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v148 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 15592;
  *(_QWORD *)v107 = "DM_OUTDOOR_SKATING_SPORTS";
  *((_QWORD *)v107 + 1) = 25;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v148 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 15610;
  *(_QWORD *)v109 = "DM_OUTDOOR_SOCCER";
  *((_QWORD *)v109 + 1) = 17;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v148 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 15620;
  *(_QWORD *)v111 = "DM_SOFTBALL";
  *((_QWORD *)v111 + 1) = 11;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v148 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 15652;
  *(_QWORD *)v113 = "DM_SQUASH";
  *((_QWORD *)v113 + 1) = 9;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v148 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 15660;
  *(_QWORD *)v115 = "DM_TABLE_TENNIS";
  *((_QWORD *)v115 + 1) = 15;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v148 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 15670;
  *(_QWORD *)v117 = "DM_TAI_CHI";
  *((_QWORD *)v117 + 1) = 10;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v148 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 15675;
  *(_QWORD *)v119 = "DM_TENNIS";
  *((_QWORD *)v119 + 1) = 9;
  v119[16] = 2;
  v9();
  v120 = (_QWORD *)(v148 + v4 + 58 * v3);
  v121 = (char *)v120 + *(int *)(v1 + 48);
  *v120 = 15710;
  *(_QWORD *)v121 = "DM_VOLLEYBALL";
  *((_QWORD *)v121 + 1) = 13;
  v121[16] = 2;
  v9();
  v122 = (_QWORD *)(v148 + v4 + 59 * v3);
  v123 = (char *)v122 + *(int *)(v1 + 48);
  *v122 = 15733;
  *(_QWORD *)v123 = "DM_TRACK_AND_FIELD";
  *((_QWORD *)v123 + 1) = 18;
  v123[16] = 2;
  v9();
  v124 = (_QWORD *)(v148 + v4 + 60 * v3);
  v125 = (char *)v124 + *(int *)(v1 + 48);
  *v124 = 17150;
  *(_QWORD *)v125 = "DM_INDOOR_WALKING";
  *((_QWORD *)v125 + 1) = 17;
  v125[16] = 2;
  v9();
  v126 = (_QWORD *)(v148 + v4 + 61 * v3);
  v127 = (char *)v126 + *(int *)(v1 + 48);
  *v126 = 18070;
  *(_QWORD *)v127 = "DM_OUTDOOR_ROWING";
  *((_QWORD *)v127 + 1) = 17;
  v127[16] = 2;
  v9();
  v128 = (_QWORD *)(v148 + v4 + 62 * v3);
  v129 = (char *)v128 + *(int *)(v1 + 48);
  *v128 = 18200;
  *(_QWORD *)v129 = "DM_SCUBA_DIVING";
  *((_QWORD *)v129 + 1) = 15;
  v129[16] = 2;
  v9();
  v130 = (_QWORD *)(v148 + v4 + 63 * v3);
  v131 = (char *)v130 + *(int *)(v1 + 48);
  *v130 = 18225;
  *(_QWORD *)v131 = "DM_PADDLE_SPORTS";
  *((_QWORD *)v131 + 1) = 16;
  v131[16] = 2;
  v9();
  v132 = v148 + v4 + (v3 << 6) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 6)) = 18240;
  *(_QWORD *)v132 = "DM_SWIMMING";
  *(_QWORD *)(v132 + 8) = 11;
  *(_BYTE *)(v132 + 16) = 2;
  v9();
  v133 = (_QWORD *)(v148 + v4 + 65 * v3);
  v134 = (char *)v133 + *(int *)(v1 + 48);
  *v133 = 19030;
  *(_QWORD *)v134 = "DM_INDOOR_SKATING_SPORTS";
  *((_QWORD *)v134 + 1) = 24;
  v134[16] = 2;
  v9();
  v135 = (_QWORD *)(v148 + v4 + 66 * v3);
  v136 = (char *)v135 + *(int *)(v1 + 48);
  *v135 = 19090;
  *(_QWORD *)v136 = "DM_CROSS_COUNTRY_SKIING";
  *((_QWORD *)v136 + 1) = 23;
  v136[16] = 2;
  v9();
  v137 = (_QWORD *)(v148 + v4 + 67 * v3);
  v138 = (char *)v137 + *(int *)(v1 + 48);
  *v137 = 19150;
  *(_QWORD *)v138 = "DM_DOWNHILL_SKIING";
  *((_QWORD *)v138 + 1) = 18;
  v138[16] = 2;
  v9();
  v139 = (_QWORD *)(v148 + v4 + 68 * v3);
  v140 = (char *)v139 + *(int *)(v1 + 48);
  *v139 = 19160;
  *(_QWORD *)v140 = "DM_SNOWBOARDING";
  *((_QWORD *)v140 + 1) = 15;
  v140[16] = 2;
  v9();
  v141 = (_QWORD *)(v148 + v4 + 69 * v3);
  v142 = (char *)v141 + *(int *)(v1 + 48);
  *v141 = 90603;
  *(_QWORD *)v142 = "DM_OUTDOOR_WHEELCHAIR";
  *((_QWORD *)v142 + 1) = 21;
  v142[16] = 2;
  v9();
  v143 = (_QWORD *)(v148 + v4 + 70 * v3);
  v144 = (char *)v143 + *(int *)(v1 + 48);
  *v143 = 515621;
  *(_QWORD *)v144 = "DM_BASEBALL";
  *((_QWORD *)v144 + 1) = 11;
  v144[16] = 2;
  v9();
  v145 = (_QWORD *)(v148 + v4 + 71 * v3);
  v146 = (char *)v145 + *(int *)(v1 + 48);
  *v145 = 515652;
  *(_QWORD *)v146 = "DM_RACQUETBALL";
  *((_QWORD *)v146 + 1) = 14;
  v146[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "RT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RT_UNAVAILABLE";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "RT_SMALL";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "RT_LARGE";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 1001;
  *(_QWORD *)v16 = "RT_UNACHIEVABLE";
  *(_QWORD *)(v16 + 8) = 15;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "BC_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "BC_NONE";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BC_USB";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BC_EXTERNAL";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "BC_ARCAS";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SE_FIDELITY_LEVEL_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SE_FIDELITY_LEVEL_UNAVAILABLE";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SE_FIDELITY_LEVEL_COARSE";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SE_FIDELITY_LEVEL_HIGH_RESOLUTION";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = -1;
  *(_QWORD *)v7 = "CC_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 0;
  *(_QWORD *)v11 = "CC_UNRELIABLE";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 1;
  *(_QWORD *)v13 = "CC_2DWEAK";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "CC_2DSTRONG";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "CC_3DWEAK";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "CC_3D";
  *((_QWORD *)v19 + 1) = 5;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "CC_3DSTRONG";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "CC_MAX";
  *((_QWORD *)v23 + 1) = 6;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FM_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FM_DEFAULT";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FM_NAVIGATION";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FM_SWIM";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "FM_GAMING";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AP_MODE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AP_MODE_IBSS";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AP_MODE_INFRA";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AP_MODE_ANY";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "BAND_2GHz";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BAND_5GHz";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BAND_6GHz";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_235BBD6B0;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 0;
  *(_QWORD *)v6 = "WS_UNKNOWN";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v37 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "WS_HARVEST_2_GHZ_SET1";
  *(_QWORD *)(v10 + 8) = 21;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v37 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "WS_HARVEST_2_GHZ_SET2";
  *((_QWORD *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v37 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "WS_HARVEST_5_GHZ_SET1";
  *((_QWORD *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v37 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "WS_HARVEST_5_GHZ_SET2";
  *((_QWORD *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v37 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "WS_HARVEST_5_GHZ_SET3";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v37 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "WS_CACHED";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v37 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "WS_LOW_PRIORITY";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v37 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "WS_CHANNEL";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v37 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "WS_FAST";
  *((_QWORD *)v25 + 1) = 7;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v37 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "WS_STAGE1";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v37 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "WS_STAGE2";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v37 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "WS_NORMAL";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v37 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "WS_CUSTOM_SCAN_PARAMETERS";
  *((_QWORD *)v33 + 1) = 25;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v37 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "WS_5GHZ_STAGE1";
  *((_QWORD *)v35 + 1) = 14;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_235BBD6B0;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 0;
  *(_QWORD *)v6 = "WN_UNKNOWN";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v37 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "WN_AVAILABLE";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v37 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "WN_POWER";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v37 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "WN_SCAN_READY";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v37 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "WN_SCAN";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v37 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "WN_SCAN_ERROR";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v37 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "WN_SCAN_ERROR_BUSY";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v37 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "WN_LINK_STATUS";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v37 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "WN_ROAM";
  *(_QWORD *)(v23 + 8) = 7;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v37 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "WN_BACKGROUND_ENTRY";
  *((_QWORD *)v25 + 1) = 19;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v37 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "WN_BACKGROUND_EXIT";
  *((_QWORD *)v27 + 1) = 18;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v37 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "WN_TRACKING_AVAILABLE";
  *((_QWORD *)v29 + 1) = 21;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v37 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "WN_WOW";
  *((_QWORD *)v31 + 1) = 6;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v37 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "WN_SCAN_CACHE";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v37 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "WN_PEER_RANGING";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LOCATION_SERVICES_ENABLED_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LOCATION_SERVICES_ENABLED_NO";
  *(_QWORD *)(v11 + 8) = 28;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LOCATION_SERVICES_ENABLED_YES";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LOCATION_SERVICES_ENABLED_UNAVAILABLE";
  *((_QWORD *)v15 + 1) = 37;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "DATA_AVAILABILITY_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "DATA_AVAILABILITY_UNAVAILABLE";
  *((_QWORD *)v11 + 1) = 29;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "DATA_AVAILABILITY_AVAILABLE";
  *(_QWORD *)(v12 + 8) = 27;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "INDOOR_OUTDOOR_TYPE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "INDOOR_OUTDOOR_TYPE_INDOOR";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "INDOOR_OUTDOOR_TYPE_OUTDOOR";
  *(_QWORD *)(v12 + 8) = 27;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "INDOOR_OUTDOOR_CONFIDENCE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "INDOOR_OUTDOOR_CONFIDENCE_LOW";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "INDOOR_OUTDOOR_CONFIDENCE_MEDIUM";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "INDOOR_OUTDOOR_CONFIDENCE_HIGH";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cf_absolute_time_s";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mach_absolute_time_s";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "mach_continuous_time_s";
  *(_QWORD *)(v12 + 8) = 22;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "x_mps2";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "y_mps2";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "z_mps2";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "x_radps";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "y_radps";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "z_radps";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pressure";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "temperature";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "latitude";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "longitude";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v50;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_235BBD6C0;
  v5 = v50 + v4;
  v6 = v50 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v50 + v4) = 1;
  *(_QWORD *)v6 = "suitability";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v50 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "coordinate";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v50 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "horizontal_accuracy";
  *((_QWORD *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v50 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "altitude";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v50 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "vertical_accuracy";
  *((_QWORD *)v16 + 1) = 17;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v50 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "speed";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v50 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "speed_accuracy";
  *((_QWORD *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v50 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "course";
  *((_QWORD *)v22 + 1) = 6;
  v22[16] = 2;
  v9();
  v23 = v50 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "course_accuracy";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v50 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "timestamp";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v50 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "confidence";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v50 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "lifespan";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v50 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "type";
  *((_QWORD *)v31 + 1) = 4;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v50 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "raw_coordinate";
  *((_QWORD *)v33 + 1) = 14;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v50 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "raw_course";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v50 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "floor";
  *((_QWORD *)v37 + 1) = 5;
  v37[16] = 2;
  v9();
  v38 = v50 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "integrity";
  *(_QWORD *)(v38 + 8) = 9;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v50 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "reference_frame";
  *((_QWORD *)v40 + 1) = 15;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v50 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "raw_reference_frame";
  *((_QWORD *)v42 + 1) = 19;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v50 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "signal_environment_type";
  *((_QWORD *)v44 + 1) = 23;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v50 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "ellipsoidal_altitude";
  *((_QWORD *)v46 + 1) = 20;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v50 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "from_simulation_controller";
  *((_QWORD *)v48 + 1) = 26;
  v48[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ST_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ST_ROUTE_GUIDANCE";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ST_OTHER";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 0xFFFFLL;
  *(_QWORD *)v15 = "ST_ANY";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = -1;
  *(_QWORD *)v7 = "LI_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 0;
  *(_QWORD *)v11 = "LI_NONE";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 25;
  *(_QWORD *)v13 = "LI_LOW";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 50;
  *(_QWORD *)v15 = "LI_MEDIUM";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 75;
  *(_QWORD *)v16 = "LI_HIGH";
  *(_QWORD *)(v16 + 8) = 7;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "raw_unmodified_course";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "raw_unmodified_course_unc";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_static";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_mounted";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "value";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "std";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "constellation";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "sat_id";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "elevation_deg";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "azimuth_deg";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "l1_cn0";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "l5_cn0";
  *((_QWORD *)v19 + 1) = 6;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_tracked";
  *((_QWORD *)v21 + 1) = 10;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "is_phase_tracked";
  *((_QWORD *)v23 + 1) = 16;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  uint64_t v117;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_235BBD6D0;
  v5 = v117 + v4;
  v6 = v117 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v117 + v4) = 1;
  *(_QWORD *)v6 = "odometer";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "delta_distance";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "delta_distance_accuracy";
  *((_QWORD *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "timestamp_gps";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "mach_time";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "horz_unc_semi_maj";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "horz_unc_semi_min";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "horz_unc_semi_maj_az";
  *((_QWORD *)v22 + 1) = 20;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "is_fitness_match";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "match_quality";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "match_coordinate";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "match_course";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "match_form_of_way";
  *((_QWORD *)v31 + 1) = 17;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "match_road_class";
  *((_QWORD *)v33 + 1) = 16;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "match_shifted";
  *((_QWORD *)v35 + 1) = 13;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "pressure";
  *((_QWORD *)v37 + 1) = 8;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "undulation_model";
  *(_QWORD *)(v38 + 8) = 16;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "undulation";
  *((_QWORD *)v40 + 1) = 10;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "special_coordinate";
  *((_QWORD *)v42 + 1) = 18;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "special_horizontal_accuracy";
  *((_QWORD *)v44 + 1) = 27;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "mach_continuous_time";
  *((_QWORD *)v46 + 1) = 20;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "origin_device";
  *((_QWORD *)v48 + 1) = 13;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "is_matcher_propagated_coordinates";
  *((_QWORD *)v50 + 1) = 33;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "map_matcher_data";
  *((_QWORD *)v52 + 1) = 16;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "slope";
  *((_QWORD *)v54 + 1) = 5;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v5 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "max_abs_slope";
  *((_QWORD *)v56 + 1) = 13;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v5 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "ground_altitude";
  *((_QWORD *)v58 + 1) = 15;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v5 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "ground_altitude_uncertainty";
  *((_QWORD *)v60 + 1) = 27;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v5 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 29;
  *(_QWORD *)v62 = "smoothed_gps_altitude";
  *((_QWORD *)v62 + 1) = 21;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v5 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 30;
  *(_QWORD *)v64 = "smoothed_gps_altitude_uncertainty";
  *((_QWORD *)v64 + 1) = 33;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v5 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 31;
  *(_QWORD *)v66 = "is_simulated_or_spoofed";
  *((_QWORD *)v66 + 1) = 23;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v5 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 32;
  *(_QWORD *)v68 = "raw_horizontal_accuracy";
  *((_QWORD *)v68 + 1) = 23;
  v68[16] = 2;
  v9();
  v69 = v5 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v69 = "raw_course_accuracy";
  *(_QWORD *)(v69 + 8) = 19;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v5 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 34;
  *(_QWORD *)v71 = "is_coordinate_fused";
  *((_QWORD *)v71 + 1) = 19;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v5 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 35;
  *(_QWORD *)v73 = "fused_coordinate";
  *((_QWORD *)v73 + 1) = 16;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v5 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 36;
  *(_QWORD *)v75 = "fused_horizontal_accuracy";
  *((_QWORD *)v75 + 1) = 25;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v5 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 37;
  *(_QWORD *)v77 = "fused_reference_frame";
  *((_QWORD *)v77 + 1) = 21;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v5 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 38;
  *(_QWORD *)v79 = "fused_course";
  *((_QWORD *)v79 + 1) = 12;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v5 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 39;
  *(_QWORD *)v81 = "fused_course_accuracy";
  *((_QWORD *)v81 + 1) = 21;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v5 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 40;
  *(_QWORD *)v83 = "estimated_worst_case_error";
  *((_QWORD *)v83 + 1) = 26;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v5 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 41;
  *(_QWORD *)v85 = "pre_fusing_altitude";
  *((_QWORD *)v85 + 1) = 19;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v5 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 42;
  *(_QWORD *)v87 = "pre_fusing_vertical_accuracy";
  *((_QWORD *)v87 + 1) = 28;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v5 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 43;
  *(_QWORD *)v89 = "is_coordinate_fused_with_vl";
  *((_QWORD *)v89 + 1) = 27;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v5 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 44;
  *(_QWORD *)v91 = "fused_altitude";
  *((_QWORD *)v91 + 1) = 14;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v5 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 45;
  *(_QWORD *)v93 = "fused_vertical_accuracy";
  *((_QWORD *)v93 + 1) = 23;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v5 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 46;
  *(_QWORD *)v95 = "satellite_visibility_report";
  *((_QWORD *)v95 + 1) = 27;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v5 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 47;
  *(_QWORD *)v97 = "gnss_content";
  *((_QWORD *)v97 + 1) = 12;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v5 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 48;
  *(_QWORD *)v99 = "raw_altitude";
  *((_QWORD *)v99 + 1) = 12;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v5 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 49;
  *(_QWORD *)v101 = "estimated_position_context_state";
  *((_QWORD *)v101 + 1) = 32;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v5 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 50;
  *(_QWORD *)v103 = "estimated_position_context_state_probability_indoor";
  *((_QWORD *)v103 + 1) = 51;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v5 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 51;
  *(_QWORD *)v105 = "estimated_position_context_state_probability_outdoor";
  *((_QWORD *)v105 + 1) = 52;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v5 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 52;
  *(_QWORD *)v107 = "map_matcher_type";
  *((_QWORD *)v107 + 1) = 16;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v5 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 53;
  *(_QWORD *)v109 = "is_route_hints_triggered_map_matching";
  *((_QWORD *)v109 + 1) = 37;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v5 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 54;
  *(_QWORD *)v111 = "loi_location_source_accuracy";
  *((_QWORD *)v111 + 1) = 28;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v5 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 55;
  *(_QWORD *)v113 = "batched_location_fix_type";
  *((_QWORD *)v113 + 1) = 25;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v5 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 56;
  *(_QWORD *)v115 = "is_wifi_fix_with_associated_ap";
  *((_QWORD *)v115 + 1) = 30;
  v115[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MQ_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MQ_NONE";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MQ_STRONG";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MQ_AMBIGUOUS";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = -1;
  *(_QWORD *)v7 = "UM_INVALID";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 0;
  *(_QWORD *)v11 = "UM_UNKNOWN";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 1;
  *(_QWORD *)v13 = "UM_DMA";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "UM_EGM08";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "OD_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "OD_LOCAL";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "OD_REMOTE";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "GNSS_CONTENT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "GNSS_CONTENT_NONE";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "GNSS_CONTENT_PRESENT";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PC_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PC_INDOOR";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "PC_OUTDOOR";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MM_TYPE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MM_TYPE_VEHICLE";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MM_TYPE_PEDESTRIAN";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MM_TYPE_BICYCLE";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "LOI_LOCATION_SOURCE_ACCURACY_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "LOI_LOCATION_SOURCE_ACCURACY_LOW";
  *((_QWORD *)v11 + 1) = 32;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "LOI_LOCATION_SOURCE_ACCURACY_HIGH";
  *(_QWORD *)(v12 + 8) = 33;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "altitude";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "vertical_accuracy";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "undulation";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "undulation_model";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "location_type";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "active";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "speed";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "mach_continuous_time";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "mach_absolute_time";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "true_heading";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "when";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "where";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "speed";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "uncertainty";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "event_receipt_time";
  *(_QWORD *)(v6 + 8) = 18;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "client";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "location";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "location_private";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "status";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "active";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "odometer";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "signal_quality";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "vehicle_speed";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "vehicle_heading";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "xtra_file_available";
  *((_QWORD *)v27 + 1) = 19;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "motion_detected";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "location_derived_speed";
  *((_QWORD *)v31 + 1) = 22;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "SQ_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SQ_POOR";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "SQ_GOOD";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "MD_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "MD_YES";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "MD_NO";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "locations";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "locations_private";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gnss_mode_of_operation";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "active_gnss_session";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "rhythmic_mode";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "current_modes_of_operation";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "has_subscribed_rhythmic_client";
  *(_QWORD *)(v16 + 8) = 30;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_235BBD6B0;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 1;
  *(_QWORD *)v6 = "type";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v37 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "confidence";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v37 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "mounted_state";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v37 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "mounted_confidence";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v37 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "is_standing";
  *((_QWORD *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v37 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "tilt";
  *((_QWORD *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v37 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "timestamp_DEPRECATED";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v37 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "is_vehicle_connected";
  *((_QWORD *)v22 + 1) = 20;
  v22[16] = 2;
  v9();
  v23 = v37 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "exit_state";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v37 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "est_exit_time";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v37 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "start_time_DEPRECATED";
  *((_QWORD *)v27 + 1) = 21;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v37 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "raw_type";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v37 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "raw_confidence";
  *((_QWORD *)v31 + 1) = 14;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v37 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "timestamp";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v37 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "start_time";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "MO_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "MO_NOT_MOUNTED";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "MO_MOUNTED";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "C_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "C_LOW";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "C_MEDIUM";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "C_HIGH";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "VE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "VE_NO_DETECTION";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "VE_PREHEAT";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "VE_DETECTED";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "client";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "activity";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "activity_type";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "start_time_DEPRECATED";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "start_time";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "predicted_workout_type";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "session_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "overview_id";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "workout_type";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "workout_location_type";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "workout_mode";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  _QWORD *v133;
  char *v134;
  _QWORD *v135;
  char *v136;
  uint64_t v138;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v138 = swift_allocObject();
  *(_OWORD *)(v138 + 16) = xmmword_235BBD6E0;
  v5 = v138 + v4;
  v6 = v138 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v138 + v4) = 0;
  *(_QWORD *)v6 = "WT_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 19;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v138 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "WT_NoWorkout";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v138 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "WT_Walking";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v138 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "WT_Running";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v138 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "WT_Cycling";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v138 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "WT_OutdoorCycling";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v138 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "WT_IndoorCycling";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v138 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "WT_Yoga";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v138 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "WT_Dancing";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v138 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "WT_CrossTraining";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v138 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "WT_Elliptical";
  *((_QWORD *)v27 + 1) = 13;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v138 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "WT_Climbing";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v138 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "WT_StairClimbing";
  *((_QWORD *)v31 + 1) = 16;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v138 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "WT_Rowing";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v138 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "WT_ResistanceTraining";
  *((_QWORD *)v35 + 1) = 21;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v138 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "WT_GenericWorkout";
  *((_QWORD *)v37 + 1) = 17;
  v37[16] = 2;
  v9();
  v38 = v138 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "WT_OutdoorWalking";
  *(_QWORD *)(v38 + 8) = 17;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v138 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "WT_IndoorWalking";
  *((_QWORD *)v40 + 1) = 16;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v138 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "WT_OutdoorRunning";
  *((_QWORD *)v42 + 1) = 17;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v138 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "WT_IndoorRunning";
  *((_QWORD *)v44 + 1) = 16;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v138 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "WT_Swimming";
  *((_QWORD *)v46 + 1) = 11;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v138 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "WT_OutdoorWheelchairWalk";
  *((_QWORD *)v48 + 1) = 24;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v138 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "WT_OutdoorWheelchairRun";
  *((_QWORD *)v50 + 1) = 23;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v138 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "WT_Calisthenics";
  *((_QWORD *)v52 + 1) = 15;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v138 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "WT_DownhillSkiing";
  *((_QWORD *)v54 + 1) = 17;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v138 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "WT_Hiking";
  *((_QWORD *)v56 + 1) = 9;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v138 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "WT_UndeterminedWorkout";
  *((_QWORD *)v58 + 1) = 22;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v138 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "WT_Unknown";
  *((_QWORD *)v60 + 1) = 10;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v138 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "WT_Golfing";
  *((_QWORD *)v62 + 1) = 10;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v138 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "WT_FunctionalStrength";
  *((_QWORD *)v64 + 1) = 21;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v138 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "WT_CoolDown";
  *((_QWORD *)v66 + 1) = 11;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v138 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "WT_CoreTraining";
  *((_QWORD *)v68 + 1) = 15;
  v68[16] = 2;
  v9();
  v69 = v138 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "WT_TaiChi";
  *(_QWORD *)(v69 + 8) = 9;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v138 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 33;
  *(_QWORD *)v71 = "WT_Pilates";
  *((_QWORD *)v71 + 1) = 10;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v138 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 34;
  *(_QWORD *)v73 = "WT_MultiSportTransition";
  *((_QWORD *)v73 + 1) = 23;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v138 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 35;
  *(_QWORD *)v75 = "WT_Kickboxing";
  *((_QWORD *)v75 + 1) = 13;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v138 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 36;
  *(_QWORD *)v77 = "WT_OutdoorRowing";
  *((_QWORD *)v77 + 1) = 16;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v138 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 37;
  *(_QWORD *)v79 = "WT_CrossCountrySkiing";
  *((_QWORD *)v79 + 1) = 21;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v138 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 38;
  *(_QWORD *)v81 = "WT_Snowboarding";
  *((_QWORD *)v81 + 1) = 15;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v138 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 39;
  *(_QWORD *)v83 = "WT_PaddleSports";
  *((_QWORD *)v83 + 1) = 15;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v138 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 40;
  *(_QWORD *)v85 = "WT_OutdoorSoccer";
  *((_QWORD *)v85 + 1) = 16;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v138 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 41;
  *(_QWORD *)v87 = "WT_IndoorSoccer";
  *((_QWORD *)v87 + 1) = 15;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v138 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 42;
  *(_QWORD *)v89 = "WT_AustralianFootball";
  *((_QWORD *)v89 + 1) = 21;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v138 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 43;
  *(_QWORD *)v91 = "WT_AmericanFootball";
  *((_QWORD *)v91 + 1) = 19;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v138 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 44;
  *(_QWORD *)v93 = "WT_DiscSports";
  *((_QWORD *)v93 + 1) = 13;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v138 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 45;
  *(_QWORD *)v95 = "WT_Rugby";
  *((_QWORD *)v95 + 1) = 8;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v138 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 46;
  *(_QWORD *)v97 = "WT_Lacrosse";
  *((_QWORD *)v97 + 1) = 11;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v138 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 47;
  *(_QWORD *)v99 = "WT_OutdoorSkatingSports";
  *((_QWORD *)v99 + 1) = 23;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v138 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 48;
  *(_QWORD *)v101 = "WT_IndoorSkatingSports";
  *((_QWORD *)v101 + 1) = 22;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v138 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 49;
  *(_QWORD *)v103 = "WT_IndoorHockey";
  *((_QWORD *)v103 + 1) = 15;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v138 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 50;
  *(_QWORD *)v105 = "WT_OutdoorHockey";
  *((_QWORD *)v105 + 1) = 16;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v138 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 51;
  *(_QWORD *)v107 = "WT_Basketball";
  *((_QWORD *)v107 + 1) = 13;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v138 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 52;
  *(_QWORD *)v109 = "WT_Tennis";
  *((_QWORD *)v109 + 1) = 9;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v138 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 53;
  *(_QWORD *)v111 = "WT_Badminton";
  *((_QWORD *)v111 + 1) = 12;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v138 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 54;
  *(_QWORD *)v113 = "WT_Racquetball";
  *((_QWORD *)v113 + 1) = 14;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v138 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 55;
  *(_QWORD *)v115 = "WT_Pickleball";
  *((_QWORD *)v115 + 1) = 13;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v138 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 56;
  *(_QWORD *)v117 = "WT_Volleyball";
  *((_QWORD *)v117 + 1) = 13;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v138 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 57;
  *(_QWORD *)v119 = "WT_Squash";
  *((_QWORD *)v119 + 1) = 9;
  v119[16] = 2;
  v9();
  v120 = (_QWORD *)(v138 + v4 + 58 * v3);
  v121 = (char *)v120 + *(int *)(v1 + 48);
  *v120 = 58;
  *(_QWORD *)v121 = "WT_Handball";
  *((_QWORD *)v121 + 1) = 11;
  v121[16] = 2;
  v9();
  v122 = (_QWORD *)(v138 + v4 + 59 * v3);
  v123 = (char *)v122 + *(int *)(v1 + 48);
  *v122 = 59;
  *(_QWORD *)v123 = "WT_TrackAndField";
  *((_QWORD *)v123 + 1) = 16;
  v123[16] = 2;
  v9();
  v124 = (_QWORD *)(v138 + v4 + 60 * v3);
  v125 = (char *)v124 + *(int *)(v1 + 48);
  *v124 = 60;
  *(_QWORD *)v125 = "WT_Softball";
  *((_QWORD *)v125 + 1) = 11;
  v125[16] = 2;
  v9();
  v126 = (_QWORD *)(v138 + v4 + 61 * v3);
  v127 = (char *)v126 + *(int *)(v1 + 48);
  *v126 = 61;
  *(_QWORD *)v127 = "WT_Baseball";
  *((_QWORD *)v127 + 1) = 11;
  v127[16] = 2;
  v9();
  v128 = (_QWORD *)(v138 + v4 + 62 * v3);
  v129 = (char *)v128 + *(int *)(v1 + 48);
  *v128 = 62;
  *(_QWORD *)v129 = "WT_Cricket";
  *((_QWORD *)v129 + 1) = 10;
  v129[16] = 2;
  v9();
  v130 = (_QWORD *)(v138 + v4 + 63 * v3);
  v131 = (char *)v130 + *(int *)(v1 + 48);
  *v130 = 63;
  *(_QWORD *)v131 = "WT_TableTennis";
  *((_QWORD *)v131 + 1) = 14;
  v131[16] = 2;
  v9();
  v132 = v138 + v4 + (v3 << 6) + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + (v3 << 6)) = 64;
  *(_QWORD *)v132 = "WT_JumpRope";
  *(_QWORD *)(v132 + 8) = 11;
  *(_BYTE *)(v132 + 16) = 2;
  v9();
  v133 = (_QWORD *)(v138 + v4 + 65 * v3);
  v134 = (char *)v133 + *(int *)(v1 + 48);
  *v133 = 65;
  *(_QWORD *)v134 = "WT_Boxing";
  *((_QWORD *)v134 + 1) = 9;
  v134[16] = 2;
  v9();
  v135 = (_QWORD *)(v138 + v4 + 66 * v3);
  v136 = (char *)v135 + *(int *)(v1 + 48);
  *v135 = 66;
  *(_QWORD *)v136 = "WT_StepTraining";
  *((_QWORD *)v136 + 1) = 15;
  v136[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WLT_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WLT_Unknown";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WLT_Indoor";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WLT_Outdoor";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "WLT_Tbd";
  *(_QWORD *)(v16 + 8) = 7;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "WM_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "WM_NORMAL";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "WM_TYPE_2";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "start_time";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "end_time";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "event_type";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "event_time";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "workout_settings";
  *(_QWORD *)(v16 + 8) = 16;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutEvent.EventType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BBD6F0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ET_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ET_WorkoutDidStart";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ET_WorkoutDidStop";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ET_WorkoutWillPause";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ET_WorkoutWillResume";
  *((_QWORD *)v17 + 1) = 20;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ET_WorkoutSuggestedStop";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "ET_WorkoutPredictionStartDidMute";
  *((_QWORD *)v21 + 1) = 32;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "ET_WorkoutLocationUpdate";
  *((_QWORD *)v23 + 1) = 24;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "ET_WorkoutPredictedWorkoutDetected";
  *(_QWORD *)(v24 + 8) = 34;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "ET_WorkoutPredictedWorkoutLabelUpdate";
  *((_QWORD *)v26 + 1) = 37;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "ET_WorkoutPredictedWorkoutEnded";
  *((_QWORD *)v28 + 1) = 31;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "ET_WorkoutShouldAlertUserForPredictedWorkout";
  *((_QWORD *)v30 + 1) = 44;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "ET_WorkoutRetractStopAlert";
  *((_QWORD *)v32 + 1) = 26;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "ET_WorkoutSessionDidBegin";
  *((_QWORD *)v34 + 1) = 25;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "ET_WorkoutSessionDidSetCurrentWorkoutType";
  *((_QWORD *)v36 + 1) = 41;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v6 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "ET_WorkoutSessionDidEnd";
  *((_QWORD *)v38 + 1) = 23;
  v38[16] = 2;
  v10();
  v39 = v6 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 16 * v3) = 16;
  *(_QWORD *)v39 = "ET_WorkoutSessionDidManuallyPause";
  *(_QWORD *)(v39 + 8) = 33;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v6 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 17;
  *(_QWORD *)v41 = "ET_WorkoutSessionDidManuallyResume";
  *((_QWORD *)v41 + 1) = 34;
  v41[16] = 2;
  v10();
  v42 = (_QWORD *)(v6 + 18 * v3);
  v43 = (char *)v42 + *(int *)(v1 + 48);
  *v42 = 18;
  *(_QWORD *)v43 = "ET_WorkoutSessionDetectedChangeInWorkoutType";
  *((_QWORD *)v43 + 1) = 44;
  v43[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235BB6C90;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "gender";
  *(_QWORD *)(v6 + 8) = 6;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v29 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "height_m";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v29 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "weight_kg";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v29 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "vo2max";
  *((_QWORD *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v29 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "age";
  *((_QWORD *)v16 + 1) = 3;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v29 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "hrmin";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v29 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "hrmax";
  *((_QWORD *)v20 + 1) = 5;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v29 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "hronset";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v29 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "pal";
  *(_QWORD *)(v23 + 8) = 3;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v29 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "condition";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v29 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "run_vo2max";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "NG_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "NG_MALE";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "NG_FEMALE";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UC_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "UC_ABLE_BODIED";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "UC_AMPUTATION";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "UC_SPINA_BIFIDA";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "UC_SPINAL_CORD_INJURY_HIGH";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "UC_SPINAL_CORD_INJURY_MID";
  *((_QWORD *)v19 + 1) = 25;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "UC_SPINAL_CORD_INJURY_LOW";
  *((_QWORD *)v21 + 1) = 25;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "UC_OTHER";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DigitalElevationModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ground_altitude_above_wgs84_m";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ground_altitude_above_wgs84_unc_m";
  *((_QWORD *)v13 + 1) = 33;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "undulation_m";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "slope_in_direction_of_travel";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "max_abs_slope";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "client";
  *((_QWORD *)v21 + 1) = 6;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DirectionOfTravel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_235BB6CB0;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "applicable_time";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "latitude_deg";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "longitude_deg";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "course_deg";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "course_unc_deg";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "road_width_m";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "start_latitude_deg";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "start_longitude_deg";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "road_length_m";
  *(_QWORD *)(v23 + 8) = 13;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "speed_mps";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "is_one_way";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "is_rail_way";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "is_tunnel";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "is_bridge";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TunnelBridgeAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "search_point_latitude_deg";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "search_point_longitude_deg";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "search_radius_m";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "is_close_to_tunnel";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "is_close_to_bridge";
  *((_QWORD *)v19 + 1) = 18;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_tunnel";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "is_bridge";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v37;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_235BBD6B0;
  v5 = v37 + v4;
  v6 = v37 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v37 + v4) = 1;
  *(_QWORD *)v6 = "applicable_time";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "latitude_deg";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "longitude_deg";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "horizontal_unc_m";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "altitude_m";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "vertical_unc_m";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "reference_frame";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "course_at_exit_deg";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "course_at_exit_unc_deg";
  *(_QWORD *)(v23 + 8) = 22;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "tunnel_width_at_exit_m";
  *((_QWORD *)v25 + 1) = 22;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "is_tunnel_curved";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "start_latitude_deg";
  *((_QWORD *)v29 + 1) = 18;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "start_longitude_deg";
  *((_QWORD *)v31 + 1) = 19;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "tunnel_length_m";
  *((_QWORD *)v33 + 1) = 15;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "end_point_distance_from_current_solution_m";
  *((_QWORD *)v35 + 1) = 42;
  v35[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapsRouteHintData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "road_id";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "start_latitude_deg";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "start_longitude_deg";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "end_latitude_deg";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "end_longitude_deg";
  *(_QWORD *)(v16 + 8) = 17;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "applicable_time";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "route_type";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "step_type";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "route_hint_data";
  *(_QWORD *)(v16 + 8) = 15;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "RT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "RT_PEDESTRIAN";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "RT_VEHICLE";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "RT_TRANSIT";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "RT_BICYCLE";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "RT_FERRY";
  *((_QWORD *)v19 + 1) = 8;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "RT_RIDESHARE";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "event_receipt_time";
  *(_QWORD *)(v6 + 8) = 18;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "applicable_time";
  *(_QWORD *)(v10 + 8) = 15;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "client";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "transmission_state";
  *((_QWORD *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "sample_count";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "time_offset_sec";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "speed_mps";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "slip_detected";
  *((_QWORD *)v22 + 1) = 13;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "sensor_type";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TS_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TS_PARK";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "TS_REVERSE";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TS_DRIVE";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "TS_NEUTRAL";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "ST_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "ST_COMBINED";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "previous";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "current";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "about_to_sleep";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "recently_woke";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Battery._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "level";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "charged";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "connected";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "charger_type";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "was_connected";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "charger_family";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "event_receipt_time";
  *(_QWORD *)(v6 + 8) = 18;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "client";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "notification_data";
  *((_QWORD *)v12 + 1) = 17;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "reachability";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "battery";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "airplane_mode";
  *((_QWORD *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "display_on";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "lock_screen";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "is_battery_saver_mode_enabled";
  *(_QWORD *)(v23 + 8) = 29;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "push_service_connected";
  *((_QWORD *)v25 + 1) = 22;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "wireless_modem_clients";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "thermal_level";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "restricted_mode";
  *((_QWORD *)v31 + 1) = 15;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v46;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_235BBD700;
  v5 = v46 + v4;
  v6 = v46 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v46 + v4) = 0;
  *(_QWORD *)v6 = "NT_UNKNOWN";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v46 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "NT_INIT";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v46 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "NT_SHUTDOWN";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v46 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "NT_SLEEP";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v46 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "NT_WAKE";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v46 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "NT_LINGER";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v46 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "NT_PENALTY_FREE";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v46 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "NT_REACHABILITY";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v46 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "NT_BATTERY";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v46 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "NT_AIRPLANE_MODE";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v46 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "NT_MIGRATION";
  *((_QWORD *)v27 + 1) = 12;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v46 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "NT_DISPLAY";
  *((_QWORD *)v29 + 1) = 10;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v46 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "NT_LOCKSCREEN";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v46 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "NT_PUSH_SERVICE";
  *((_QWORD *)v33 + 1) = 15;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v46 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "NT_WIRELESS_MODEM";
  *((_QWORD *)v35 + 1) = 17;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v46 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "NT_THERMAL";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v9();
  v38 = v46 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "NT_RESTRICTED_POWER_MODE";
  *(_QWORD *)(v38 + 8) = 24;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v46 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "NT_BATTERY_SAVER_MODE";
  *((_QWORD *)v40 + 1) = 21;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v46 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "NT_METRIC_HEARTBEAT";
  *((_QWORD *)v42 + 1) = 19;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v46 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "NT_BOOT_AFTER_UNCLEAN_SHUTDOWN";
  *((_QWORD *)v44 + 1) = 30;
  v44[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "coarse_signal_environment";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "high_resolution_signal_environment";
  *((_QWORD *)v13 + 1) = 34;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "client";
  *((_QWORD *)v15 + 1) = 6;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = -1;
  *(_QWORD *)v7 = "SE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 0;
  *(_QWORD *)v11 = "SE_UNAVAILABLE";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 1;
  *(_QWORD *)v13 = "SE_RURAL";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 2;
  *(_QWORD *)v15 = "SE_URBAN";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 3;
  *(_QWORD *)v17 = "SE_DENSE_URBAN";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 4;
  *(_QWORD *)v19 = "SE_DENSE_URBAN_CANYON";
  *((_QWORD *)v19 + 1) = 21;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 5;
  *(_QWORD *)v21 = "SE_MARINE";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 6;
  *(_QWORD *)v23 = "SE_FOLIAGE";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "fidelity_level";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MagSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "x_uT";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "y_uT";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "z_uT";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Magnetometer._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_AccelerometerPace._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "calibrated";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "lower_bound";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "upper_bound";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_FalseStepDetectorState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "accel_pose_x_high";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "accel_var_xyz_low";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "gyro_num_samples_sufficient";
  *((_QWORD *)v13 + 1) = 27;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gyro_var_x_high";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "consecutive_requirement";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "is_vehicular_low_confidence";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_vehicular_high_confidence";
  *((_QWORD *)v21 + 1) = 28;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "consistent_steps_protection";
  *((_QWORD *)v23 + 1) = 27;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v54;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_235BBD710;
  v5 = v54 + v4;
  v6 = v54 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v54 + v4) = 1;
  *(_QWORD *)v6 = "timestamp";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v54 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "start_time";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v54 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "first_step_time";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v54 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "count";
  *((_QWORD *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v54 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "distance_m";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v54 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "raw_distance_m";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v54 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "floors_ascended";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v54 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "floors_descended";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v9();
  v23 = v54 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "current_pace_spm";
  *(_QWORD *)(v23 + 8) = 16;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v54 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "current_cadence";
  *((_QWORD *)v25 + 1) = 15;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v54 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "active_time";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v54 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "record_id";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v54 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "source_id";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v54 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "is_odometer_distance";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v54 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "is_odometer_pace";
  *((_QWORD *)v35 + 1) = 16;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v54 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "accelerometer_pace";
  *((_QWORD *)v37 + 1) = 18;
  v37[16] = 2;
  v9();
  v38 = v54 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "push_count";
  *(_QWORD *)(v38 + 8) = 10;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v54 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "workout_type";
  *((_QWORD *)v40 + 1) = 12;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v54 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "pedometer_arm_constrainted_state";
  *((_QWORD *)v42 + 1) = 32;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v54 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "elevation_ascended_cm";
  *((_QWORD *)v44 + 1) = 21;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v54 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "elevation_descended_cm";
  *((_QWORD *)v46 + 1) = 22;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v54 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "false_steps_suppressed";
  *((_QWORD *)v48 + 1) = 22;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v54 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "distance_source";
  *((_QWORD *)v50 + 1) = 15;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v54 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "false_step_detector_state";
  *((_QWORD *)v52 + 1) = 25;
  v52[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "DS_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "DS_GPS";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "DS_ENERGY_BASED_CALIBRATED";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "DS_ENERGY_BASED_UNCALIBRATED";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "DS_CADENCE_BASED_CALIBRATED";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "DS_CADENCE_BASED_UNCALIBRATED";
  *((_QWORD *)v19 + 1) = 29;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeVector3._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "z";
  *(_QWORD *)(v12 + 8) = 1;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDoubleVector4._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "w";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "x";
  *(_QWORD *)(v11 + 8) = 1;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "y";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "z";
  *((_QWORD *)v15 + 1) = 1;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompass._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235BB6C90;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "magnetic_field";
  *(_QWORD *)(v6 + 8) = 14;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "unassisted_magnetic_field";
  *(_QWORD *)(v10 + 8) = 25;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "magnetic_heading";
  *((_QWORD *)v12 + 1) = 16;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "true_heading";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "accuracy";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "calibration_level";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "using_database_bias";
  *((_QWORD *)v20 + 1) = 19;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "magnitude";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "inclination";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "horizontal";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "quaternion";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_CompassTypeSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "timestamp";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "compass";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "compass_cal_quality";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gyro_magnitude";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "is_location_available";
  *(_QWORD *)(v16 + 8) = 21;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_Compass._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "quaternion";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "user_acceleration";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "rotation_rate";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "magnetic_field";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "magnetic_field_calibration_level";
  *((_QWORD *)v17 + 1) = 32;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "doing_yaw_correction";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "doing_bias_estimation";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "is_initialized";
  *((_QWORD *)v23 + 1) = 14;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "heading";
  *(_QWORD *)(v24 + 8) = 7;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotionSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_235BB6C60;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "timestamp";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "device_motion";
  *(_QWORD *)(v10 + 8) = 13;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "fsync";
  *((_QWORD *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "client_id";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "mode";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "status";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "accuracy";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "vision_compass_bias";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_DeviceMotion._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sample";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "x";
  *(_QWORD *)(v7 + 8) = 1;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "y";
  *(_QWORD *)(v11 + 8) = 1;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "z";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "magnitude";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "horizontal";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "declination";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "inclination";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "timestamp";
  *((_QWORD *)v23 + 1) = 9;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_235BB5CC0;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "mac";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v27 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "ssid";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v27 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "rssi_db";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v27 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "mode";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v27 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "channel";
  *((_QWORD *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v27 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "age_s";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v27 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "is_apple_personal_hotspot";
  *((_QWORD *)v20 + 1) = 25;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v27 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "is_moving";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v27 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "band";
  *(_QWORD *)(v23 + 8) = 4;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v27 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "frequency_khz";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiAssociationState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "is_associated";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ap";
  *((_QWORD *)v11 + 1) = 2;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "scan_timestamp";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "access_point";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235BB6C90;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "event_receipt_time";
  *(_QWORD *)(v6 + 8) = 18;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "client";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "type";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "scan_type";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "power";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "associated_state";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "scan";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "simulated";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "available";
  *(_QWORD *)(v23 + 8) = 9;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "is_involuntary_link_down";
  *((_QWORD *)v25 + 1) = 24;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "is_ap_awake";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "state";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "state_probability";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "measurement_source";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GA_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GA_UNKNOWN";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GA_LOW";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GA_HIGH";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MS_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MS_AMBIENT_LIGHT";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MS_PROXIMITY";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MS_FUSED_MULTIPLE";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "latitude_deg";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "longitude_deg";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "coordinates";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "base_height_above_ground_m";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "height_above_base_m";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "has_terrain_elevation";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "terrain_elevation_m";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "min_base_height_m";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "max_base_height_m";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "top_height_m";
  *((_QWORD *)v23 + 1) = 12;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureBuilding._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "sections";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "building_hash";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "building_id";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapBuildingData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "receipt_time";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "buildings";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "building_hashes_in_previous_query_but_not_current_query";
  *((_QWORD *)v13 + 1) = 55;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "query_location_coordinate";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "branch_coordinates";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "branch_type";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "branch_number";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "branch_width_mm";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "branch_length_mm";
  *(_QWORD *)(v16 + 8) = 16;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "BranchType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "BranchType_UNKNOWN";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BranchType_LEAFY";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "BranchType_NON_LEAFY";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "north_latitude_deg";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "west_longitude_deg";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "south_latitude_deg";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "east_longitude_deg";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "vertex";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "bounding_box";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "branches";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "tree_id";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tree_type";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "reliability_score_DEPRECATED";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "tree_features";
  *((_QWORD *)v19 + 1) = 13;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "branch_count";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TreeType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TreeType_UNKNOWN";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "TreeType_STANDARD_ACACIA";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TreeType_NONSTANDARD_ACACIA";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "has_branch_widths";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "has_branch_lengths";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "receipt_time";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "trees";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "contains_branch_geometry";
  *(_QWORD *)(v12 + 8) = 24;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "wrist_orientation";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "crown_orientation";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WatchOrientationType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 37;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WatchOrientationType_Unknown";
  *(_QWORD *)(v11 + 8) = 28;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WatchOrientationType_Left";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WatchOrientationType_Right";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "applicable_time";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "on_wrist";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "on_wrist_sensor";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "on_wrist_confidence";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "is_on_charger";
  *((_QWORD *)v17 + 1) = 13;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "is_forced_on_wrist_enabled";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_wrist_detection_enabled";
  *((_QWORD *)v21 + 1) = 26;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WristStateType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WristStateType_Unknown";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WristStateType_On";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WristStateType_Off";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WristStateConfidenceType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 41;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WristStateConfidenceType_None";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WristStateConfidenceType_Low";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WristStateConfidenceType_High";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_WatchState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "client";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "watch_orientation";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "wrist_state";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "user_specific_place_type";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "place_type";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "preferred_name";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "loi_uuid_identifier";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "USPT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "USPT_HOME";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "USPT_WORK";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "USPT_SCHOOL";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "USPT_GYM";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PIPT_AREA_OF_INTEREST";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PIPT_POINT_OF_INTEREST";
  *((_QWORD *)v11 + 1) = 22;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "PIPT_ADDRESS";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_RoutineVisit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "receipt_time";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "arrival_time";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "departure_time";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "detection_time";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "place_inference";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "coordinate";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "horizontal_accuracy_m";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_OutdoorUpdate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_235BB6C60;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "start_time_cfat_sec";
  *(_QWORD *)(v6 + 8) = 19;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mct_timestamp_sec";
  *(_QWORD *)(v10 + 8) = 17;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "type";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "confidence";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "estimated_state_probability_outdoor";
  *((_QWORD *)v16 + 1) = 35;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "daylight_confidence";
  *((_QWORD *)v18 + 1) = 19;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "is_astronomical_daytime";
  *((_QWORD *)v20 + 1) = 23;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "current_lux";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_235BBD730;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 1;
  *(_QWORD *)v6 = "cf_absolute_timestamp_sec";
  *(_QWORD *)(v6 + 8) = 25;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mach_continuous_timestamp_sec";
  *(_QWORD *)(v10 + 8) = 29;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "sample_interval_sec";
  *((_QWORD *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "d_pos_x_m";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "d_pos_Y_m";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "d_pos_z_m";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "d_vel_x_mps";
  *((_QWORD *)v20 + 1) = 11;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "d_vel_y_mps";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "d_vel_z_mps";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "q_x";
  *((_QWORD *)v25 + 1) = 3;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "q_y";
  *((_QWORD *)v27 + 1) = 3;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "q_z";
  *((_QWORD *)v29 + 1) = 3;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "q_w";
  *((_QWORD *)v31 + 1) = 3;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "reference_frame";
  *((_QWORD *)v33 + 1) = 15;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "is_delta_position_valid";
  *((_QWORD *)v35 + 1) = 23;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "is_delta_velocity_valid";
  *((_QWORD *)v37 + 1) = 23;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "is_attitude_valid";
  *(_QWORD *)(v38 + 8) = 17;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "RF_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "RF_X_ARBITRARY_Z_VERTICAL";
  *((_QWORD *)v11 + 1) = 25;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "RF_X_TRUE_NORTH_Z_VERTICAL";
  *(_QWORD *)(v12 + 8) = 26;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionMethod._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionMethod._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BCC020;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PositionMethod_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PositionMethod_kNoPosition";
  *(_QWORD *)(v11 + 8) = 26;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PositionMethod_kAgps_SetAssisted";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PositionMethod_kAgps_SetBased";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PositionMethod_kAgps_SetAssistedPreferred";
  *((_QWORD *)v17 + 1) = 41;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PositionMethod_kAgps_SetBasedPreferred";
  *((_QWORD *)v19 + 1) = 38;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PositionMethod_kAGnss_SetAssisted";
  *((_QWORD *)v21 + 1) = 33;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PositionMethod_kAGnss_SetBased";
  *((_QWORD *)v23 + 1) = 30;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "PositionMethod_kAGnss_SetAssistedPreferred";
  *(_QWORD *)(v24 + 8) = 42;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "PositionMethod_kAGnss_SetBasedPreferred";
  *((_QWORD *)v26 + 1) = 39;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 10;
  *(_QWORD *)v28 = "PositionMethod_kAutonomousGps";
  *((_QWORD *)v28 + 1) = 29;
  v28[16] = 2;
  v10();
  v29 = (_QWORD *)(v6 + 11 * v3);
  v30 = (char *)v29 + *(int *)(v1 + 48);
  *v29 = 11;
  *(_QWORD *)v30 = "PositionMethod_kAutonomousGnss";
  *((_QWORD *)v30 + 1) = 30;
  v30[16] = 2;
  v10();
  v31 = (_QWORD *)(v6 + 12 * v3);
  v32 = (char *)v31 + *(int *)(v1 + 48);
  *v31 = 12;
  *(_QWORD *)v32 = "PositionMethod_kAflt";
  *((_QWORD *)v32 + 1) = 20;
  v32[16] = 2;
  v10();
  v33 = (_QWORD *)(v6 + 13 * v3);
  v34 = (char *)v33 + *(int *)(v1 + 48);
  *v33 = 13;
  *(_QWORD *)v34 = "PositionMethod_kEcid";
  *((_QWORD *)v34 + 1) = 20;
  v34[16] = 2;
  v10();
  v35 = (_QWORD *)(v6 + 14 * v3);
  v36 = (char *)v35 + *(int *)(v1 + 48);
  *v35 = 14;
  *(_QWORD *)v36 = "PositionMethod_kEotd";
  *((_QWORD *)v36 + 1) = 20;
  v36[16] = 2;
  v10();
  v37 = (_QWORD *)(v6 + 15 * v3);
  v38 = (char *)v37 + *(int *)(v1 + 48);
  *v37 = 15;
  *(_QWORD *)v38 = "PositionMethod_kOtdoa";
  *((_QWORD *)v38 + 1) = 21;
  v38[16] = 2;
  v10();
  v39 = v6 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 16 * v3) = 16;
  *(_QWORD *)v39 = "PositionMethod_kHistoricalDataRetrieval";
  *(_QWORD *)(v39 + 8) = 39;
  *(_BYTE *)(v39 + 16) = 2;
  v10();
  v40 = (_QWORD *)(v6 + 17 * v3);
  v41 = (char *)v40 + *(int *)(v1 + 48);
  *v40 = 17;
  *(_QWORD *)v41 = "PositionMethod_kSessionInfoQuery";
  *((_QWORD *)v41 + 1) = 32;
  v41[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionReqType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionReqType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PositionReqType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 32;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PositionReqType_kUnknown";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PositionReqType_kCpSingleshot";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PositionReqType_kCpPeriodic";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PositionReqType_kSuplPosSingleShot";
  *((_QWORD *)v17 + 1) = 34;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PositionReqType_kSuplPosPeriodic";
  *((_QWORD *)v19 + 1) = 32;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PositionReqType_kSuplTriggerPeriodic";
  *((_QWORD *)v21 + 1) = 36;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PositionReqType_kSuplTriggerAreaEvent";
  *((_QWORD *)v23 + 1) = 37;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionSession._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionSession._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PositionSession_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 32;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PositionSession_kUnknown";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PositionSession_kControlPlane";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PositionSession_kUserPlane";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PositionProtocol_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PositionProtocol_kUnknown";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PositionProtocol_kRRLP";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PositionProtocol_kRRC";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PositionProtocol_kLPP";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PositionProtocol_kCdma";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PositionProtocol_kNrLPP";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionErrorCode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionErrorCode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_235BBD730;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 0;
  *(_QWORD *)v6 = "SessionErrorCode_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 33;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "SessionErrorCode_kUnknown";
  *(_QWORD *)(v10 + 8) = 25;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "SessionErrorCode_kSuccess";
  *((_QWORD *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "SessionErrorCode_kUeAbort";
  *((_QWORD *)v14 + 1) = 25;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "SessionErrorCode_kNetworkAbort";
  *((_QWORD *)v16 + 1) = 30;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "SessionErrorCode_kSuplSocketErr";
  *((_QWORD *)v18 + 1) = 31;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "SessionErrorCode_kSuplInputErr";
  *((_QWORD *)v20 + 1) = 30;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "SessionErrorCode_kSuplSSLFailed";
  *((_QWORD *)v22 + 1) = 31;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "SessionErrorCode_kSuplConnReadFail";
  *(_QWORD *)(v23 + 8) = 34;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "SessionErrorCode_kSuplConnWriteFail";
  *((_QWORD *)v25 + 1) = 35;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "SessionErrorCode_kSuplSessionTimeout";
  *((_QWORD *)v27 + 1) = 36;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "SessionErrorCode_kNotEnoughSats";
  *((_QWORD *)v29 + 1) = 31;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "SessionErrorCode_kAssistanceDataMissing";
  *((_QWORD *)v31 + 1) = 39;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "SessionErrorCode_kMethodNotSupported";
  *((_QWORD *)v33 + 1) = 36;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "SessionErrorCode_kNotAccomplishedGpsTimingCell";
  *((_QWORD *)v35 + 1) = 46;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "SessionErrorCode_kNotEnoughGanssSats";
  *((_QWORD *)v37 + 1) = 36;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "SessionErrorCode_kGanssAssistanceDataMissing";
  *(_QWORD *)(v38 + 8) = 44;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_TriggerType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_TriggerType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TriggerType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TriggerType_kUnknown";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "TriggerType_kPeriodic";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TriggerType_kAreaEvent";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v71;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_235BCC030;
  v5 = v71 + v4;
  v6 = v71 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v71 + v4) = 0;
  *(_QWORD *)v6 = "Status_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "Status_kNone";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "Status_kSuplInitAccepted";
  *((_QWORD *)v12 + 1) = 24;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "Status_kConnSuccess";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "Status_kConnSocketErr";
  *((_QWORD *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "Status_kConnInputErr";
  *((_QWORD *)v18 + 1) = 20;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "Status_kConnSslFailed";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "Status_kReadSocketErr";
  *((_QWORD *)v22 + 1) = 21;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "Status_kReadInputErr";
  *(_QWORD *)(v23 + 8) = 20;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "Status_kWriteSocketErr";
  *((_QWORD *)v25 + 1) = 22;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "Status_kWriteInputErr";
  *((_QWORD *)v27 + 1) = 21;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "Status_kConnClose";
  *((_QWORD *)v29 + 1) = 17;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "Status_kConnCloseFailed";
  *((_QWORD *)v31 + 1) = 23;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "Status_kGetFdSocketErr";
  *((_QWORD *)v33 + 1) = 22;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "Status_kSuplPosInitSent";
  *((_QWORD *)v35 + 1) = 23;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "Status_kNwAsstTimeReceived";
  *((_QWORD *)v37 + 1) = 26;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "Status_kNwAsstPositionReceived";
  *(_QWORD *)(v38 + 8) = 30;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "Status_kNwAsstEphemerisReceived";
  *((_QWORD *)v40 + 1) = 31;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "Status_kPositionRequestReceived";
  *((_QWORD *)v42 + 1) = 31;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "Status_kPositionResponseSuccess";
  *((_QWORD *)v44 + 1) = 31;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "Status_kPositionResponseUndefined";
  *((_QWORD *)v46 + 1) = 33;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "Status_kPositionResponseNotEnoughSats";
  *((_QWORD *)v48 + 1) = 37;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "Status_kPositionResponseAssdataMissing";
  *((_QWORD *)v50 + 1) = 38;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "Status_kPositionResponseMethodNotSupported";
  *((_QWORD *)v52 + 1) = 42;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "Status_kMeasurementRequestReceived";
  *((_QWORD *)v54 + 1) = 34;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v5 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "Status_kMeasurementResponseSuccess";
  *((_QWORD *)v56 + 1) = 34;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v5 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "Status_kMeasurementResponseUndefined";
  *((_QWORD *)v58 + 1) = 36;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v5 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "Status_kMeasurementResponseNotEnoughSats";
  *((_QWORD *)v60 + 1) = 40;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v5 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "Status_kMeasurementResponseAssdataMissing";
  *((_QWORD *)v62 + 1) = 41;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v5 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "Status_kMeasurementResponseMethodNotSupported";
  *((_QWORD *)v64 + 1) = 45;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v5 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "Status_kSuplEndSent";
  *((_QWORD *)v66 + 1) = 19;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v5 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "Status_kSuplEndReceived";
  *((_QWORD *)v68 + 1) = 23;
  v68[16] = 2;
  v9();
  v69 = v5 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "Status_kWlanMeasurementAborted";
  *(_QWORD *)(v69 + 8) = 30;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v54;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EndCause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EndCause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_235BBD710;
  v5 = v54 + v4;
  v6 = v54 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v54 + v4) = 0;
  *(_QWORD *)v6 = "EndCause_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 25;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "EndCause_kNone";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "EndCause_kUnspecified";
  *((_QWORD *)v12 + 1) = 21;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "EndCause_kSystemFailure";
  *((_QWORD *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "EndCause_kProtocolError";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "EndCause_kDataMissing";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "EndCause_kUnexpectedDataValue";
  *((_QWORD *)v20 + 1) = 29;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "EndCause_kPosMethodFailure";
  *((_QWORD *)v22 + 1) = 26;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "EndCause_kPosMethodMismatch";
  *(_QWORD *)(v23 + 8) = 27;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "EndCause_kPosProtocolMismatch";
  *((_QWORD *)v25 + 1) = 29;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "EndCause_kTargetSETnotReachable";
  *((_QWORD *)v27 + 1) = 31;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "EndCause_kVersionNotSupported";
  *((_QWORD *)v29 + 1) = 29;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "EndCause_kResourceShortage";
  *((_QWORD *)v31 + 1) = 26;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "EndCause_kInvalidSessionId";
  *((_QWORD *)v33 + 1) = 26;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "EndCause_kUnexpectedMessage";
  *((_QWORD *)v35 + 1) = 27;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "EndCause_kNonProxyModeNotSupported";
  *((_QWORD *)v37 + 1) = 34;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "EndCause_kProxyModeNotSupported";
  *(_QWORD *)(v38 + 8) = 31;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "EndCause_kPositioningNotPermitted";
  *((_QWORD *)v40 + 1) = 33;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "EndCause_kAuthNetFailure";
  *((_QWORD *)v42 + 1) = 24;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "EndCause_kAuthSuplinitFailure";
  *((_QWORD *)v44 + 1) = 29;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "EndCause_kServiceNotSupported";
  *((_QWORD *)v46 + 1) = 29;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "EndCause_kIncompatibleProtectionLevel";
  *((_QWORD *)v48 + 1) = 37;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "EndCause_kInsufficientInterval";
  *((_QWORD *)v50 + 1) = 30;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "EndCause_kNoSUPLCoverage";
  *((_QWORD *)v52 + 1) = 24;
  v52[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ConnectionStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ConnectionStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ConnectionStatus_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 33;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ConnectionStatus_kNone";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ConnectionStatus_kConnSuccess";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ConnectionStatus_kSocketErr";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ConnectionStatus_kInputErr";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ConnectionStatus_kSslFailed";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "CellType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CellType_kUnavailable";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CellType_kGSM";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CellType_kWCDMA";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CellType_kCDMA";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CellType_kHRPD";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CellType_kLTE";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_FreqMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_FreqMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FreqMode_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FreqMode_kUnknown";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FreqMode_kFDD";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FreqMode_kTDD";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SLPAddressType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SLPAddressType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SLPAddressType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SLPAddressType_kUnknown";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SLPAddressType_kIpV4";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SLPAddressType_kIpV6";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "SLPAddressType_kFQDN";
  *(_QWORD *)(v16 + 8) = 20;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ErrorCodes._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ErrorCodes._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ErrorCodes_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ErrorCodes_kSuccess";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ErrorCodes_kErrorUndefined";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ErrorCodes_kErrorNotEnoughSats";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ErrorCodes_kErrorAssdataMissing";
  *((_QWORD *)v17 + 1) = 31;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ErrorCodes_kErrorMethodNotSupported";
  *((_QWORD *)v19 + 1) = 35;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "ErrorCodes_kErrorNotAccomplishedGpsTimingCell";
  *((_QWORD *)v21 + 1) = 45;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "ErrorCodes_kErrorNotEnoughGanssSats";
  *((_QWORD *)v23 + 1) = 35;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "ErrorCodes_kErrorGanssAssdataMissing";
  *(_QWORD *)(v24 + 8) = 36;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsModemState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsModemState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ClsModemState_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ClsModemState_kUnknown";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ClsModemState_kClsCellDch";
  *((_QWORD *)v13 + 1) = 25;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ClsModemState_kClsCellFach";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "ClsModemState_kClsInvalidState";
  *(_QWORD *)(v16 + 8) = 30;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SessionProtocol_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 32;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SessionProtocol_kUnknown";
  *(_QWORD *)(v11 + 8) = 24;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SessionProtocol_kSessionCplane";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "SessionProtocol_kSessionUplane";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "SessionProtocol_kSessionUser";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "SessionProtocol_kSessionModem";
  *((_QWORD *)v19 + 1) = 29;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PosProtocol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PosProtocol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PosProtocol_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PosProtocol_kUnknown";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PosProtocol_kRrlp";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PosProtocol_kRrc";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PosProtocol_kLpp";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PosProtocol_kCdma";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PosProtocol_kNrLpp";
  *((_QWORD *)v21 + 1) = 18;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MethodType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MethodType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MethodType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MethodType_kUnknown";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MethodType_kMethodMsassisted";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MethodType_kMethodMsbased";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "MethodType_kMethodStandalone";
  *(_QWORD *)(v16 + 8) = 28;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Environment._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Environment._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "Environment_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "Environment_kBadArea";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "Environment_kNotBadArea";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "Environment_kMixedArea";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "Environment_kEnvInvalid";
  *(_QWORD *)(v16 + 8) = 23;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AdditionalInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AdditionalInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AdditionalInfo_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AdditionalInfo_kOnlyReturnInfoRequested";
  *(_QWORD *)(v11 + 8) = 39;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AdditionalInfo_kMayReturnAdditionalInfo";
  *((_QWORD *)v13 + 1) = 39;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AdditionalInfo_kAdditionalInfoInvalid";
  *((_QWORD *)v15 + 1) = 37;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GnssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GnssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GnssId_kGnssInvalid";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GnssId_kGnssGps";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GnssId_kGnssGalileo";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "GnssId_kGnssSbs";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "GnssId_kGnssModGps";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 16;
  *(_QWORD *)v19 = "GnssId_kGnssQzss";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "GnssId_kGnssGlonass";
  *((_QWORD *)v21 + 1) = 19;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SupportedGADShapes._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SupportedGADShapes._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SupportedGADShapes_kSupportGadShapesNoLocation";
  *(_QWORD *)(v7 + 8) = 46;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SupportedGADShapes_kSupportGadShapesEllipsoidPoint";
  *(_QWORD *)(v11 + 8) = 50;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SupportedGADShapes_kSupportGadShapesPointUncertainCircle";
  *((_QWORD *)v13 + 1) = 56;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "SupportedGADShapes_kSupportGadShapesPointUncertainEllipse";
  *((_QWORD *)v15 + 1) = 57;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "SupportedGADShapes_kSupportGadShapesPolygon";
  *((_QWORD *)v17 + 1) = 43;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 16;
  *(_QWORD *)v19 = "SupportedGADShapes_kSupportGadShapesPointAltitude";
  *((_QWORD *)v19 + 1) = 49;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "SupportedGADShapes_kSupportGadShapesPointAltitudeUncertainEllipsoid";
  *((_QWORD *)v21 + 1) = 67;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 64;
  *(_QWORD *)v23 = "SupportedGADShapes_kSupportGadShapesEllipsoidArc";
  *((_QWORD *)v23 + 1) = 48;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_FixType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_FixType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "FixType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "FixType_kUnknown";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "FixType_kFixType2d";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "FixType_kFixType3d";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsNetworkType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsNetworkType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ClsNetworkType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 31;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ClsNetworkType_kClsGeranNetwork";
  *(_QWORD *)(v11 + 8) = 31;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ClsNetworkType_kClsUtranNetwork";
  *((_QWORD *)v13 + 1) = 31;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ClsNetworkType_kClsEutranNetwork";
  *((_QWORD *)v15 + 1) = 32;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ClsNetworkType_kClsInvalidNetwork";
  *((_QWORD *)v17 + 1) = 33;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ClsNetworkType_kClsCdmaNetwork";
  *((_QWORD *)v19 + 1) = 30;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GnssTimeId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GnssTimeId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GnssTimeId_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GnssTimeId_kGnssTimeIdGps";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GnssTimeId_kGnssTimeIdQzss";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GnssTimeId_kGnssTimeIdGlonass";
  *((_QWORD *)v15 + 1) = 29;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GnssTimeId_kGnssTimeIdGalileo";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GnssTimeId_kGnssTimeInvalid";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ShapeType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ShapeType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CE0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "ShapeType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ShapeType_kShapeTypeEllipsoidPoint";
  *(_QWORD *)(v11 + 8) = 34;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "ShapeType_kShapeTypePointUncertainCircle";
  *((_QWORD *)v13 + 1) = 40;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "ShapeType_kShapeTypePointUncertainEllipse";
  *((_QWORD *)v15 + 1) = 41;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "ShapeType_kShapeTypePolygon";
  *((_QWORD *)v17 + 1) = 27;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "ShapeType_kShapeTypePointAltitude";
  *((_QWORD *)v19 + 1) = 33;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "ShapeType_kShapeTypePointAltitudeUncertainEllipsoid";
  *((_QWORD *)v21 + 1) = 51;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "ShapeType_kShapeTypeEllipsoidArc";
  *((_QWORD *)v23 + 1) = 32;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "ShapeType_kShapeTypeNoLocation";
  *(_QWORD *)(v24 + 8) = 30;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "VelocityType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 29;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "VelocityType_kVelocityTypeHorizontalVelocity";
  *(_QWORD *)(v11 + 8) = 44;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "VelocityType_kVelocityTypeHorizontalWithVerticalVelocity";
  *((_QWORD *)v13 + 1) = 56;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "VelocityType_kVelocityTypeHorizontalVelocityWithUncertainty";
  *((_QWORD *)v15 + 1) = 59;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "VelocityType_kVelocityTypeHorizontalWithVerticalVelocityAndUncertainty";
  *((_QWORD *)v17 + 1) = 70;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "VelocityType_kVelocityTypeInvalid";
  *((_QWORD *)v19 + 1) = 33;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MultipathIndicator._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MultipathIndicator._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MultipathIndicator_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 35;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MultipathIndicator_kMultiPathNotMeasured";
  *(_QWORD *)(v11 + 8) = 40;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MultipathIndicator_kMultiPathLow";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MultipathIndicator_kMultiPathMedium";
  *((_QWORD *)v15 + 1) = 35;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "MultipathIndicator_kMultiPathHigh";
  *((_QWORD *)v17 + 1) = 33;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "MultipathIndicator_kMultiPathInvalid";
  *((_QWORD *)v19 + 1) = 36;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GanssId_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GanssId_kGanssIdSbas";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GanssId_kGanssIdModernisedGps";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GanssId_kGanssIdQzss";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GanssId_kGanssIdGlonass";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GanssId_kGanssIdGalileo";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "GanssId_kGanssIdInvalid";
  *((_QWORD *)v21 + 1) = 23;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementsResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementsResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MeasurementsResult_kMeasurementsResultNone";
  *(_QWORD *)(v7 + 8) = 42;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MeasurementsResult_kMeasurementsResultGps";
  *(_QWORD *)(v11 + 8) = 41;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MeasurementsResult_kMeasurementsResultGanss";
  *((_QWORD *)v13 + 1) = 43;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "MeasurementsResult_kMeasurementsResultError";
  *((_QWORD *)v15 + 1) = 43;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LcsGanssId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LcsGanssId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LcsGanssId_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LcsGanssId_kLcsGanssIdGalileo";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LcsGanssId_kLcsGanssIdSbas";
  *((_QWORD *)v13 + 1) = 26;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LcsGanssId_kLcsGanssIdModGps";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "LcsGanssId_kLcsGanssIdQzss";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "LcsGanssId_kLcsGanssIdGlonass";
  *((_QWORD *)v19 + 1) = 29;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "LcsGanssId_kLcsGanssIdInvalid";
  *((_QWORD *)v21 + 1) = 29;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AidMask_kAidmaskNone";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AidMask_kAidmaskAlmanac";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AidMask_kAidmaskUtcmodel";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "AidMask_kAidmaskIonosmodel";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "AidMask_kAidmaskNavigation";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 16;
  *(_QWORD *)v19 = "AidMask_kAidmaskDgpsCorrections";
  *((_QWORD *)v19 + 1) = 31;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "AidMask_kAidmaskRefloc";
  *((_QWORD *)v21 + 1) = 22;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 64;
  *(_QWORD *)v23 = "AidMask_kAidmaskReftime";
  *((_QWORD *)v23 + 1) = 23;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 128;
  *(_QWORD *)v24 = "AidMask_kAidmaskAcqassistance";
  *(_QWORD *)(v24 + 8) = 29;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 256;
  *(_QWORD *)v26 = "AidMask_kAidmaskTimeintegrity";
  *((_QWORD *)v26 + 1) = 29;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssCommonAidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssCommonAidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GanssCommonAidMask_kNone";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GanssCommonAidMask_kRefTime";
  *(_QWORD *)(v11 + 8) = 27;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GanssCommonAidMask_kRefLocation";
  *((_QWORD *)v13 + 1) = 31;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "GanssCommonAidMask_kAddIonosModel";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssGenericAidMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssGenericAidMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GanssGenericAidMask_kNone";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GanssGenericAidMask_kRealTimeIntegrity";
  *(_QWORD *)(v11 + 8) = 38;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GanssGenericAidMask_kAlmanac";
  *((_QWORD *)v13 + 1) = 28;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "GanssGenericAidMask_kNavigationModel";
  *((_QWORD *)v15 + 1) = 36;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 8;
  *(_QWORD *)v17 = "GanssGenericAidMask_kRefMeasInfo";
  *((_QWORD *)v17 + 1) = 32;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 16;
  *(_QWORD *)v19 = "GanssGenericAidMask_kUtcModel";
  *((_QWORD *)v19 + 1) = 29;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 32;
  *(_QWORD *)v21 = "GanssGenericAidMask_kTimeModelGnss";
  *((_QWORD *)v21 + 1) = 34;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 64;
  *(_QWORD *)v23 = "GanssGenericAidMask_kDataBitAssist";
  *((_QWORD *)v23 + 1) = 34;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 128;
  *(_QWORD *)v24 = "GanssGenericAidMask_kAuxillaryInfo";
  *(_QWORD *)(v24 + 8) = 34;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 256;
  *(_QWORD *)v26 = "GanssGenericAidMask_kAddAssistDataChoices";
  *((_QWORD *)v26 + 1) = 41;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssSignalIdMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssSignalIdMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GanssSignalIdMask_kGanssSignalIdNone";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GanssSignalIdMask_kGanssSignalId1";
  *(_QWORD *)(v11 + 8) = 33;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GanssSignalIdMask_kGanssSignalId2";
  *((_QWORD *)v13 + 1) = 33;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "GanssSignalIdMask_kGanssSignalId3";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "AssistanceRequest_kAssistanceRequestNone";
  *(_QWORD *)(v7 + 8) = 40;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "AssistanceRequest_kAssistanceRequestGps";
  *((_QWORD *)v11 + 1) = 39;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "AssistanceRequest_kAssistanceRequestGanss";
  *(_QWORD *)(v12 + 8) = 41;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranSfnGpsUncertainty._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranSfnGpsUncertainty._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UtranSfnGpsUncertainty_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 39;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyLessThan10ms";
  *(_QWORD *)(v11 + 8) = 58;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyMoreThan10ms";
  *((_QWORD *)v13 + 1) = 58;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "UtranSfnGpsUncertainty_kUtranSfnGpsUncertaintyNotPresent";
  *((_QWORD *)v15 + 1) = 56;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsDopplerUncMpsExt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsDopplerUncMpsExt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GpsDopplerUncMpsExt_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 36;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GpsDopplerUncMpsExt_k60";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GpsDopplerUncMpsExt_k80";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GpsDopplerUncMpsExt_k100";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GpsDopplerUncMpsExt_k120";
  *((_QWORD *)v17 + 1) = 24;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GpsDopplerUncMpsExt_kNoInfo";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "GpsDopplerUncMpsExt_kNotPresent";
  *((_QWORD *)v21 + 1) = 31;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementAndEstimateResponseType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MeasurementAndEstimateResponseType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 51;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MeasurementAndEstimateResponseType_kInvalid";
  *(_QWORD *)(v11 + 8) = 43;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MeasurementAndEstimateResponseType_kGpsMeasAvailable";
  *((_QWORD *)v13 + 1) = 52;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MeasurementAndEstimateResponseType_kLocationEstimateAvailable";
  *((_QWORD *)v15 + 1) = 61;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AfltAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AfltAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "AfltAction_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "AfltAction_kInvalid";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "AfltAction_kDoNotSend";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "AfltAction_kSend";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "WlanMeasurementResult_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 38;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "WlanMeasurementResult_kUnknown";
  *(_QWORD *)(v11 + 8) = 30;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "WlanMeasurementResult_kSuccess";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "WlanMeasurementResult_kRequestInvalid";
  *((_QWORD *)v15 + 1) = 37;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "WlanMeasurementResult_kRequestTimeout";
  *((_QWORD *)v17 + 1) = 37;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "WlanMeasurementResult_kRequestFailed";
  *((_QWORD *)v19 + 1) = 36;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Configuration._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Configuration._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "helo_enabled";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "early_return_enabled";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "target_vertical_uncertainty_m";
  *(_QWORD *)(v12 + 8) = 29;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v44;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SummaryReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SummaryReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_235BBD6F0;
  v5 = v44 + v4;
  v6 = v44 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v44 + v4) = 1;
  *(_QWORD *)v6 = "latitude_degrees";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v44 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "longitude_degrees";
  *(_QWORD *)(v10 + 8) = 17;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v44 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "altitude_meters";
  *((_QWORD *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v44 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "achieved_horizontal_uncertainty_meters";
  *((_QWORD *)v14 + 1) = 38;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v44 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "achieved_vertical_uncertainty_meters";
  *((_QWORD *)v16 + 1) = 36;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v44 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "ttff_seconds";
  *((_QWORD *)v18 + 1) = 12;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v44 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "technology_source";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v44 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "method_type";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  v23 = v44 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "session_type";
  *(_QWORD *)(v23 + 8) = 12;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v44 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "protocol_type";
  *((_QWORD *)v25 + 1) = 13;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v44 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "requested_response_timeout_seconds";
  *((_QWORD *)v27 + 1) = 34;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v44 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "requested_horizontal_accuracy_meters";
  *((_QWORD *)v29 + 1) = 36;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v44 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "requested_vertical_accuracy_meters";
  *((_QWORD *)v31 + 1) = 34;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v44 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "pos_req_type";
  *((_QWORD *)v33 + 1) = 12;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v44 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "error_code";
  *((_QWORD *)v35 + 1) = 10;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v44 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "helo_enabled";
  *((_QWORD *)v37 + 1) = 12;
  v37[16] = 2;
  v9();
  v38 = v44 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "helo_injected";
  *(_QWORD *)(v38 + 8) = 13;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v44 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "assistance_used";
  *((_QWORD *)v40 + 1) = 15;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v44 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "session_id";
  *((_QWORD *)v42 + 1) = 10;
  v42[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "supl_port";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "supl_server";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "enable_msa";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "enable_lpp_rel13_wlan_meas";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "supports_lpp_rel13_wlan_meas_type_rssi";
  *((_QWORD *)v17 + 1) = 38;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "supports_lpp_rel13_location_source";
  *((_QWORD *)v19 + 1) = 34;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LteCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LteCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_235BB5CC0;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 1;
  *(_QWORD *)v6 = "is_serving_cell";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v27 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mcc";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v27 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "mnc";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v27 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "tac";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v27 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "cellid";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v27 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "pci";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v27 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "rsrp";
  *((_QWORD *)v20 + 1) = 4;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v27 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "rsrq";
  *((_QWORD *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  v23 = v27 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "ta";
  *(_QWORD *)(v23 + 8) = 2;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v27 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "dlearfcn";
  *((_QWORD *)v25 + 1) = 8;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GsmCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GsmCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_serving_cell";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "mcc";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "mnc";
  *((_QWORD *)v13 + 1) = 3;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "lac";
  *((_QWORD *)v15 + 1) = 3;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "cellid";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WcdmaCellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WcdmaCellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_235BB6C60;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "is_serving_cell";
  *(_QWORD *)(v6 + 8) = 15;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mcc";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "mnc";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "lac";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "cellid";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "psc";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "freq_mode";
  *((_QWORD *)v20 + 1) = 9;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "dluarfcn";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocationId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocationId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "cell_type";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "lte_cell_info_vect";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "gsm_cell_info_vect";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "wcdma_cell_info_vect";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "response_time_seconds";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "is_rssi_requested";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "bssid";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "is_serving_flag_present";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "serving_flag";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ap_channel_frequency_number";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "rssi_dbm";
  *(_QWORD *)(v16 + 8) = 8;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_WlanMeasurementList._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_WlanMeasurementList._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "meas";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_QoP._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_QoP._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_valid";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "horizontal_accuracy";
  *(_QWORD *)(v11 + 8) = 19;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "vertical_accuracy";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "max_location_age";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "delay";
  *(_QWORD *)(v16 + 8) = 5;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SLPAddress._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SLPAddress._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_valid";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "slp_address_type";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "f_qdn";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "_ipaddress";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Notification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Notification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "is_valid";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "emergency_call_location_present";
  *((_QWORD *)v11 + 1) = 31;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplInitVer2Extension._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplInitVer2Extension._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "e_slpaddress";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "trigger_type";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Init._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Init._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_235BB5CB0;
  v5 = v17 + v4;
  v6 = v17 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v17 + v4) = 1;
  *(_QWORD *)v6 = "pos_method";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "qop";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "slp_address";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "notification";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = v5 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 4 * v3) = 5;
  *(_QWORD *)v15 = "supl_initv2_extension";
  *(_QWORD *)(v15 + 8) = 21;
  *(_BYTE *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SuplContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SuplContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "supl_port";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "supl_server";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "enable_msa";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "imsi";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "config";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "nsuuid";
  *((_QWORD *)v18 + 1) = 6;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "enable_lpp_rel13_wlan_meas";
  *((_QWORD *)v20 + 1) = 26;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "supports_lpp_rel13_wlan_meas_type_rssi";
  *((_QWORD *)v22 + 1) = 38;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "supports_lpp_rel13_location_source";
  *(_QWORD *)(v23 + 8) = 34;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v39;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_235BB6CA0;
  v5 = v39 + v4;
  v6 = v39 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v39 + v4) = 1;
  *(_QWORD *)v6 = "session_id";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "pos_method";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "status";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "end_cause";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "horz_accuracy_requested";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "lat";
  *((_QWORD *)v18 + 1) = 3;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "lon";
  *((_QWORD *)v20 + 1) = 3;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "alt";
  *((_QWORD *)v22 + 1) = 3;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "unc_semi_major";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "unc_semi_minor";
  *((_QWORD *)v25 + 1) = 14;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "unc_alt";
  *((_QWORD *)v27 + 1) = 7;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "eph_provided";
  *((_QWORD *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "reference_time_provided";
  *((_QWORD *)v31 + 1) = 23;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "reference_location_provided";
  *((_QWORD *)v33 + 1) = 27;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "nw_ref_location";
  *((_QWORD *)v35 + 1) = 15;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "nw_ref_time";
  *((_QWORD *)v37 + 1) = 11;
  v37[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsGpsCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsGpsCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ms_part";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ls_part";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsUtranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsUtranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "utran_gps_timing_cell_frames";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ref_cell_sfn";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ref_cell_psc";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "round_trip_time";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "modem_state";
  *(_QWORD *)(v16 + 8) = 11;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Plmn._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Plmn._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mcc";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mnc";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "three_digit_mnc";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_SessionInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_SessionInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "session_protocol";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pos_protocol";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "session_id";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_235BBD730;
  v5 = v40 + v4;
  v6 = v40 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v40 + v4) = 1;
  *(_QWORD *)v6 = "interval";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "method";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "response_time";
  *((_QWORD *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "horizontal_accuracy";
  *((_QWORD *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "velocity_requested";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "horizontal_confidence";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "vertical_accuracy";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "vertical_confidence";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "vertical_requested";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "assistance_availability";
  *((_QWORD *)v25 + 1) = 23;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "requested_gnss";
  *((_QWORD *)v27 + 1) = 14;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "loc_cordinate_type_allowed";
  *((_QWORD *)v29 + 1) = 26;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "velocity_types";
  *((_QWORD *)v31 + 1) = 14;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "report_amount";
  *((_QWORD *)v33 + 1) = 13;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "pos_protocol";
  *((_QWORD *)v35 + 1) = 12;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "session_id";
  *((_QWORD *)v37 + 1) = 10;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "horizontal_accuracy_meters";
  *(_QWORD *)(v38 + 8) = 26;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranGpsTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranGpsTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ue_utran_cell_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_umts_time_difference";
  *((_QWORD *)v11 + 1) = 24;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGpsTimeMeasuredBased._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ref_frame_msb";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_tow_subms";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGpsTimeMeasuredAssisted._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ref_frame_msb";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "delta_tow";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "utran_time";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "geran_time_based";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "geran_time_assisted";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTimeMeasuredParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTimeMeasuredParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gps_time_measured_type";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_time_measured";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTOD._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTOD._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gps_todmsec";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_todfrac";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "gps_todunc";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocationInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocationInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gps_tow";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_week";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "gps_time_uncertainty";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "fix_type";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "gps_todpresent";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "gps_tod";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "cell_info_present";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "lac";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cell_id";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "plmn";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_UtranGanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_UtranGanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "utran_timing_of_cell_frames";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ref_sfn";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ref_psc";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "cell_info";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GeranGanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GeranGanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ref_frame_msb";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ref_frame_number";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "cell_info";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v29;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsEutranCell._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsEutranCell._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_235BB6C90;
  v5 = v29 + v4;
  v6 = v29 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v29 + v4) = 1;
  *(_QWORD *)v6 = "physical_cell_id";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "earfcn";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "sfn";
  *((_QWORD *)v12 + 1) = 3;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "cgi_info_present";
  *((_QWORD *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "plmn";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "eutran_cell_id";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "sec_from_frame_start";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "frac_sec_from_frame_start";
  *((_QWORD *)v22 + 1) = 25;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "frame_drift";
  *(_QWORD *)(v23 + 8) = 11;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "ref_time_uncertainty";
  *((_QWORD *)v25 + 1) = 20;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "bs_align";
  *((_QWORD *)v27 + 1) = 8;
  v27[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeMeasured._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeMeasured._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "utran_time";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "geran_time";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "eutran_time";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeMeasuredParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeMeasuredParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ganss_time_measured_type";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_time_measured";
  *((_QWORD *)v11 + 1) = 19;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssLocationInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssLocationInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "time_id";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_tod";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_tod_frac";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ganss_tod_uncertainty";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "fix_type";
  *((_QWORD *)v17 + 1) = 8;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "reference_gnss";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EllipsoidPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EllipsoidPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "latitude";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "longitude";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointUncertainCircle._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointUncertainCircle._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "point";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "uncertain_radius";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointUncertainEllipse._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointUncertainEllipse._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "point";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "semi_major_axis";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "semi_minor_axis";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "orientation_angle";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "confidence";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_235BB5CF0;
  v5 = v21 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4) = 1;
  *(_QWORD *)v5 = "point";
  *(_QWORD *)(v5 + 8) = 5;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  v8 = *(void (**)(void))(*(_QWORD *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  v9 = v21 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v21 + v4 + v3) = 2;
  *(_QWORD *)v9 = "altitude";
  *(_QWORD *)(v9 + 8) = 8;
  *(_BYTE *)(v9 + 16) = 2;
  v8();
  v10 = (_QWORD *)(v21 + v4 + 2 * v3);
  v11 = (char *)v10 + *(int *)(v1 + 48);
  *v10 = 3;
  *(_QWORD *)v11 = "semi_major_axis";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  v12 = (_QWORD *)(v21 + v4 + 3 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "semi_minor_axis";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v8();
  v14 = (_QWORD *)(v21 + v4 + 4 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "orientation_angle";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v8();
  v16 = (_QWORD *)(v21 + v4 + 5 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 6;
  *(_QWORD *)v17 = "uncertain_altitude";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v8();
  v18 = (_QWORD *)(v21 + v4 + 6 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 7;
  *(_QWORD *)v19 = "confidence";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EllipsoidArc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EllipsoidArc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "point";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "inner_radius";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "uncertain_radius";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "offset_angle";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "included_angle";
  *((_QWORD *)v17 + 1) = 14;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "confidence";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PointAltitude._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PointAltitude._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "point";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "altitude";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Polygon._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Polygon._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "no_of_points";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "points";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ShapeInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ShapeInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "point_uncertain_circle";
  *(_QWORD *)(v7 + 8) = 22;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "point_uncertain_ellipse";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "point_altitude_uncertain_ellipsoid";
  *((_QWORD *)v13 + 1) = 34;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ellipsoid_arc";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ellipsoid_point";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "point_altitude";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "polygon";
  *((_QWORD *)v21 + 1) = 7;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "no_location";
  *((_QWORD *)v23 + 1) = 11;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_LocEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_LocEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "shape_type";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "shape";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizontalVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizontalVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "bearing";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "horizontal_speed";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithVertVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithVertVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "bearing";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "horizontal_speed";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "vertical_speed";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "vertical_speed_direction";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithUncertaintyVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithUncertaintyVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "bearing";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "horizontal_speed";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "uncertainty_speed";
  *(_QWORD *)(v12 + 8) = 17;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_HorizWithVertUncertaintyVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "bearing";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "horizontal_speed";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "vertical_speed";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "vertical_speed_direction";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "horiz_uncertainty_speed";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "vert_uncertainty_speed";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "_horizontal";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "_horiz_with_vert";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "_horiz_with_uncertainty";
  *((_QWORD *)v13 + 1) = 23;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "_horiz_with_vert_uncertainty";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_VelocityEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_VelocityEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "velocity_type";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "velocity";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_PositionReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_PositionReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "response_type";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "session_info";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "location_info";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_location_info";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "loc_estimate";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "velocity_estimate";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "technology_source";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "doppler";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "satellite_id";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "cn_ratio";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "pseudo_range_rms_error";
  *((_QWORD *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "multi_path";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "code_phase";
  *((_QWORD *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "integer_code_phase";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "carrier_quality_ind";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "adr";
  *(_QWORD *)(v23 + 8) = 3;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssSignalMeasurementInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssSignalMeasurementInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "signal_id";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "code_phase_ambiguity";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "measurement_count";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "measurement";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurementsForSingleGanss._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ganss_id";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "signal_measurement_info";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssMeasurements._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssMeasurements._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "time_id";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_tod";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_tod_frac";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "tod_delta";
  *((_QWORD *)v15 + 1) = 9;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_tod_uncertainity";
  *((_QWORD *)v17 + 1) = 22;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "measured_time_params";
  *((_QWORD *)v19 + 1) = 20;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "ganss_measurements_count";
  *((_QWORD *)v21 + 1) = 24;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "ganss_measurement";
  *((_QWORD *)v23 + 1) = 17;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsMeasurementElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsMeasurementElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "doppler";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "whole_chips";
  *(_QWORD *)(v10 + 8) = 11;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "frac_chips";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "satellite_id";
  *((_QWORD *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "cn_ratio";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "pseudo_range_rms_error";
  *((_QWORD *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "multi_path";
  *((_QWORD *)v20 + 1) = 10;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "code_phase";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "integer_code_phase";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsMeasurements._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsMeasurements._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "gps_tow";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v25 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "gps_week";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v25 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "gps_time_uncertainty";
  *((_QWORD *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v25 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "nr_of_sats";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v25 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "measurements";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v25 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "measured_time_params";
  *((_QWORD *)v18 + 1) = 20;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v25 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "code_phase_ambiguity";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v25 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "gps_todpresent";
  *((_QWORD *)v22 + 1) = 14;
  v22[16] = 2;
  v9();
  v23 = v25 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "gps_tod";
  *(_QWORD *)(v23 + 8) = 7;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "response_type";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "session_info";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gps_measurements";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_measurements";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "more_ganss_measurements";
  *((_QWORD *)v19 + 1) = 23;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_meas_in_cdma_time";
  *((_QWORD *)v21 + 1) = 20;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "aid_mask";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "g_week";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "g_toe";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "num_of_sats";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "sat_id";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "iode";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "toe_limit";
  *((_QWORD *)v21 + 1) = 9;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssTimeModelElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssTimeModelElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ganss_to_ids";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "delta_t";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssDataBitAssist._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssDataBitAssist._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ganss_tod";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_tod_frac";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_signal_id";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ganss_data_bit_interval_k";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_data_bit_no_of_sats";
  *((_QWORD *)v17 + 1) = 25;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "ganss_sat_id_info";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssStoredSatDataElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssStoredSatDataElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ganss_sat_id";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_sat_iod";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssNavModelAddData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssNavModelAddData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ganss_week_day";
  *(_QWORD *)(v7 + 8) = 14;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_toe";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_ttoe_limit";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ganss_sat_related_data_info_array_count";
  *((_QWORD *)v15 + 1) = 39;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "ganss_sat_related_data_info_array";
  *(_QWORD *)(v16 + 8) = 33;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAddAssistDataChoices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAddAssistDataChoices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ganss_orbit_model_id";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_clock_model_id";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_utc_model_id";
  *((_QWORD *)v13 + 1) = 18;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ganss_almanac_model_id";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAidRequestPerGanss._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAidRequestPerGanss._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ganss_id";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_generic_aid_mask";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_time_model_info_array_count";
  *((_QWORD *)v13 + 1) = 33;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ganss_time_model_info_array";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_data_bit_assist";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "ganss_nav_model_add_data";
  *((_QWORD *)v19 + 1) = 24;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "ganss_add_assist_data_choices";
  *((_QWORD *)v21 + 1) = 29;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GanssAssistanceRequest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GanssAssistanceRequest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ganss_common_aid_mask";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ganss_time_req_pref_info_array_count";
  *(_QWORD *)(v11 + 8) = 36;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "ganss_time_req_pref_info_array";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "glonass_not_of_leap_sec_requested";
  *((_QWORD *)v15 + 1) = 33;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ganss_add_ionos_model";
  *((_QWORD *)v17 + 1) = 21;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "ganss_aid_data_req_array_count";
  *((_QWORD *)v19 + 1) = 30;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "ganss_aid_data_req_array";
  *((_QWORD *)v21 + 1) = 24;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_AssistanceNeededReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_AssistanceNeededReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "response_type";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "session_info";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "assistance_request";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "ganss_assistance_request";
  *(_QWORD *)(v16 + 8) = 24;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EutranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EutranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "no_of_cells";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "eutran_cell_info";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ClsGeranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ClsGeranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "bsic";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "time_slot";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "bit_number";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "bcch_carrier";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "ref_frame";
  *((_QWORD *)v17 + 1) = 9;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "timing_advance";
  *((_QWORD *)v19 + 1) = 14;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "obit_number";
  *((_QWORD *)v21 + 1) = 11;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsTowCdmaCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsTowCdmaCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "int_part";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "frac_part";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CtsEutranCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CtsEutranCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "physical_cell_id";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "earfcn";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "sfnk";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CtsCdmaCellTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CtsCdmaCellTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cdma_tow";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "week_num";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "absolute_rms_acc";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellTimeData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellTimeData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "eutran_time";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cdma_time";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellTimeAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellTimeAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "cell_time_assistance_type";
  *(_QWORD *)(v7 + 8) = 25;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cell_time_data";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_TowAssist._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_TowAssist._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tlm_msg";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "sat_id";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "anti_spoof";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "alert";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "tlm_reserved";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsReferenceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsReferenceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "gps_tow";
  *(_QWORD *)(v6 + 8) = 7;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "gps_week";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "gps_time_uncertainty";
  *((_QWORD *)v12 + 1) = 20;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "nr_of_sats";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "tow_assist";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "gps_week_cycle_number";
  *((_QWORD *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "session_protocol";
  *((_QWORD *)v20 + 1) = 16;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "pos_protocol";
  *((_QWORD *)v22 + 1) = 12;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "session_id";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v35;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_ReferenceLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_ReferenceLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_235BB6CB0;
  v5 = v35 + v4;
  v6 = v35 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v35 + v4) = 1;
  *(_QWORD *)v6 = "shape_type";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "hemisphere";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "altitude";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "latitude";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "longitude";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "direction_of_alt";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "semi_major_uncert";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "semi_minor_uncert";
  *((_QWORD *)v22 + 1) = 17;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "major_axis";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "alt_uncert";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "confidence";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "session_protocol";
  *((_QWORD *)v29 + 1) = 16;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "pos_protocol";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "session_id";
  *((_QWORD *)v33 + 1) = 10;
  v33[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v73;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsEphemeris._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsEphemeris._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_235BCC040;
  v5 = v73 + v4;
  v6 = v73 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v73 + v4) = 1;
  *(_QWORD *)v6 = "ephem_af0";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "ephem_m0";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "ephem_e";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "ephem_apower_half";
  *((_QWORD *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "ephem_omega_a0";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "ephem_i0";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "ephem_w";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "ephem_omega_dot";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "ephem_iodc";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "ephem_toc";
  *((_QWORD *)v25 + 1) = 9;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "ephem_af1";
  *((_QWORD *)v27 + 1) = 9;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "ephem_crs";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "ephem_delta_n";
  *((_QWORD *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v5 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "ephem_cuc";
  *((_QWORD *)v33 + 1) = 9;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v5 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "ephem_cus";
  *((_QWORD *)v35 + 1) = 9;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v5 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "toe";
  *((_QWORD *)v37 + 1) = 3;
  v37[16] = 2;
  v9();
  v38 = v5 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "ephem_cic";
  *(_QWORD *)(v38 + 8) = 9;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v5 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "ephem_cis";
  *((_QWORD *)v40 + 1) = 9;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v5 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "ephem_crc";
  *((_QWORD *)v42 + 1) = 9;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v5 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "ephem_idot";
  *((_QWORD *)v44 + 1) = 10;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v5 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "sat_id";
  *((_QWORD *)v46 + 1) = 6;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v5 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "ephem_ura";
  *((_QWORD *)v48 + 1) = 9;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v5 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "ephem_sv_health";
  *((_QWORD *)v50 + 1) = 15;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v5 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "ephem_af2";
  *((_QWORD *)v52 + 1) = 9;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v5 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "sat_status";
  *((_QWORD *)v54 + 1) = 10;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v5 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "ephem_code_on_l2";
  *((_QWORD *)v56 + 1) = 16;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v5 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "ephem_l2_pflag";
  *((_QWORD *)v58 + 1) = 14;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v5 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "ephem_tgd";
  *((_QWORD *)v60 + 1) = 9;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v5 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 29;
  *(_QWORD *)v62 = "ephem_fit_flag";
  *((_QWORD *)v62 + 1) = 14;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v5 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 30;
  *(_QWORD *)v64 = "ephem_aodo";
  *((_QWORD *)v64 + 1) = 10;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v5 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 31;
  *(_QWORD *)v66 = "reserved1";
  *((_QWORD *)v66 + 1) = 9;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v5 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 32;
  *(_QWORD *)v68 = "reserved2";
  *((_QWORD *)v68 + 1) = 9;
  v68[16] = 2;
  v9();
  v69 = v5 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 33;
  *(_QWORD *)v69 = "reserved3";
  *(_QWORD *)(v69 + 8) = 9;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v5 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 34;
  *(_QWORD *)v71 = "reserved4";
  *((_QWORD *)v71 + 1) = 9;
  v71[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsNavigationModel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsNavigationModel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "nr_of_sats";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ephemeris";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "session_protocol";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "pos_protocol";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "session_id";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CplaneContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CplaneContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "config";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "cdma_context";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_EmergConfig._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_EmergConfig._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "helo_enabled";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "imsi";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cplane_config";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "supl_config";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAcqElement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAcqElement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "code_phase";
  *(_QWORD *)(v6 + 8) = 10;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "doppler0";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "doppler1";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "doppler_uncer";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "int_code_phase";
  *((_QWORD *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "gps_bit_number";
  *((_QWORD *)v18 + 1) = 14;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "code_phase_search_window";
  *((_QWORD *)v20 + 1) = 24;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "azimuth";
  *((_QWORD *)v22 + 1) = 7;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "elevation";
  *(_QWORD *)(v23 + 8) = 9;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "sat_id";
  *((_QWORD *)v25 + 1) = 6;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "azimuth_lsb";
  *((_QWORD *)v27 + 1) = 11;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "elevation_lsb";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "doppler_uncer_ext";
  *((_QWORD *)v31 + 1) = 17;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_GpsAcqAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_GpsAcqAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gps_tow";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "nr_of_sats";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "cell_time_assistance";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "acquisition";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "confidence";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "session_protocol";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "pos_protocol";
  *((_QWORD *)v21 + 1) = 12;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "session_id";
  *((_QWORD *)v23 + 1) = 10;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_CellFTAssistance._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_CellFTAssistance._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "network_type";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "cell_time";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_NetworkReferenceLocation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_NetworkReferenceLocation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "latitude_degrees";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "longitude_degrees";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "altitude_meters";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "ver_uncert_meters";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "horz_uncert_meters";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "horz_confidence";
  *((_QWORD *)v19 + 1) = 15;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "vert_confidence";
  *((_QWORD *)v21 + 1) = 15;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_NetworkReferenceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_NetworkReferenceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gps_tow_seconds";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "gps_week";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "gps_time_uncertainty";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801VelocityInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801VelocityInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "horz";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "heading";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "vertical";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801ClockInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801ClockInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "bias";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "drift";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801HeightInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801HeightInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "altitude";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "altitude_unc";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Is801LocationInd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Is801LocationInd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235BCC050;
  v5 = v31 + v4;
  v6 = v31 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v31 + v4) = 1;
  *(_QWORD *)v6 = "latitude";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "longitude";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "loc_unc_ang";
  *((_QWORD *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "loc_unc_a";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "loc_unc_p";
  *((_QWORD *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "fix_type";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "velocity_included";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "velocity";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "clock_included";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "clock";
  *((_QWORD *)v25 + 1) = 5;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "altitude_included";
  *((_QWORD *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "altitude";
  *((_QWORD *)v29 + 1) = 8;
  v29[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_MeasurementReportWithEstimate._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_MeasurementReportWithEstimate._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "result";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "response_type";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "session_info";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "gps_measurements";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "location_indication";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "aflt_action";
  *((_QWORD *)v19 + 1) = 11;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "is_meas_in_cdma_time";
  *((_QWORD *)v21 + 1) = 20;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Emergency_Cdma1xContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Emergency_Cdma1xContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "include1x_msb";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "optimize_gnss_meas_with1x_msb";
  *(_QWORD *)(v11 + 8) = 29;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "optimize_aflt_meas_with1x_msb";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "use_cdma_time_for_meas";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v27;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Result._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Result._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_235BB5CC0;
  v5 = v27 + v4;
  v6 = v27 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v27 + v4) = 0;
  *(_QWORD *)v6 = "RESULT_PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "kSuccess";
  *(_QWORD *)(v10 + 8) = 8;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "kAborted";
  *((_QWORD *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "kDropped";
  *((_QWORD *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "kInUse";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "kInvalidArgument";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "kPermissionDenied";
  *((_QWORD *)v20 + 1) = 17;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "kTimeout";
  *((_QWORD *)v22 + 1) = 8;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "kUnavailable";
  *(_QWORD *)(v23 + 8) = 12;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "kCompletedWithFailure";
  *((_QWORD *)v25 + 1) = 21;
  v25[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_GnssContent._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_GnssContent._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "GnssContent_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "GnssContent_kNone";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "GnssContent_kSomeInsignificant";
  *((_QWORD *)v13 + 1) = 30;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "GnssContent_kSomeSignificant";
  *((_QWORD *)v15 + 1) = 28;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "GnssContent_kSufficientFor2DFix";
  *((_QWORD *)v17 + 1) = 31;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "GnssContent_kSufficientFor3DFix";
  *((_QWORD *)v19 + 1) = 31;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_EstimationTechnology._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_EstimationTechnology._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "EstimationTechnology_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 37;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "EstimationTechnology_kNotInitialized";
  *(_QWORD *)(v11 + 8) = 36;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "EstimationTechnology_kSingleShot";
  *((_QWORD *)v13 + 1) = 32;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "EstimationTechnology_kFiltered";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "EstimationTechnology_kFilteredIns";
  *(_QWORD *)(v16 + 8) = 33;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeQuality._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeQuality._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "TimeQuality_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "TimeQuality_kUnknown";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "TimeQuality_kTimeFromSyncCellNetwork";
  *((_QWORD *)v13 + 1) = 36;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "TimeQuality_kTimeFromAssistance";
  *((_QWORD *)v15 + 1) = 31;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "TimeQuality_kTimeFromPosition";
  *((_QWORD *)v17 + 1) = 29;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "TimeQuality_kTimeFromTOW";
  *((_QWORD *)v19 + 1) = 24;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "TimeQuality_kTimeFromTOWConfirmed";
  *((_QWORD *)v21 + 1) = 33;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PositionAssistType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PositionAssistType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PositionAssistType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 35;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PositionAssistType_kNormalReference";
  *(_QWORD *)(v11 + 8) = 35;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PositionAssistType_kNormalSuitableForTightCoupling";
  *((_QWORD *)v13 + 1) = 50;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PositionAssistType_kTunnelExit";
  *((_QWORD *)v15 + 1) = 30;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_MotionActivityContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_MotionActivityContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CC0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MAC_kUnknown";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MAC_kRunning";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MAC_kMoving";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MAC_kWalking";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "MAC_kDriving";
  *((_QWORD *)v17 + 1) = 12;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "MAC_kCycling";
  *((_QWORD *)v19 + 1) = 12;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "MAC_kSwimming";
  *((_QWORD *)v21 + 1) = 13;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "MAC_kWheelchair";
  *((_QWORD *)v23 + 1) = 15;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 8;
  *(_QWORD *)v24 = "MAC_PROTOBUF_DEFAULT";
  *(_QWORD *)(v24 + 8) = 20;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 9;
  *(_QWORD *)v26 = "MAC_kAirborne";
  *((_QWORD *)v26 + 1) = 13;
  v26[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_MovingState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_MovingState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "MS_kUnknown";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "MS_kFrozen";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "MS_kNotMoving";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "MS_kMoving";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "MS_PROTOBUF_DEFAULT";
  *(_QWORD *)(v16 + 8) = 19;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Reliability._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Reliability._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "REL_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "REL_kNotSet";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 10;
  *(_QWORD *)v13 = "REL_kVeryLow";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 25;
  *(_QWORD *)v15 = "REL_kLow";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 50;
  *(_QWORD *)v17 = "REL_kMedium";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 75;
  *(_QWORD *)v19 = "REL_kHigh";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DeviceMountState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DeviceMountState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "DMS_kUnknown";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "DMS_kMounted";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "DMS_kNotMounted";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "DMS_PROTOBUF_DEFAULT";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SignalEnvironmentType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SignalEnvironmentType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "kSignalEnvUnavailable";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "kSignalEnvRural";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "kSignalEnvUrban";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "kSignalEnvDenseUrban";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "kSignalEnvDenseUrbanCanyon";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "kSignalEnvMarine";
  *((_QWORD *)v19 + 1) = 16;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "kSignalEnvFoliage";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 15;
  *(_QWORD *)v23 = "SIGNAL_ENV_PROTOBUF_DEFAULT";
  *((_QWORD *)v23 + 1) = 27;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DeleteGnssDataBitMask._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DeleteGnssDataBitMask._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "DeleteGnssDataBitMask_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 38;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "DeleteGnssDataBitMask_UeReset";
  *((_QWORD *)v11 + 1) = 29;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v31;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Position._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Position._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_235BCC050;
  v5 = v31 + v4;
  v6 = v31 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v31 + v4) = 1;
  *(_QWORD *)v6 = "latitude";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v31 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "longitude";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v31 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "alt_wgs84";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v31 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "undulation";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v31 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "vertical_uncertainty";
  *((_QWORD *)v16 + 1) = 20;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v31 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "semi_major_horizontal_uncertainty";
  *((_QWORD *)v18 + 1) = 33;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v31 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "semi_minor_horizontal_uncertainty";
  *((_QWORD *)v20 + 1) = 33;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v31 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "semi_major_azimuth_horizontal_uncertainty";
  *((_QWORD *)v22 + 1) = 41;
  v22[16] = 2;
  v9();
  v23 = v31 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "source";
  *(_QWORD *)(v23 + 8) = 6;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v31 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "reliability";
  *((_QWORD *)v25 + 1) = 11;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v31 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "assistance_used";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v31 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "gnss_content_in_fix";
  *((_QWORD *)v29 + 1) = 19;
  v29[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Velocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Velocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "horiz_speed";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "horiz_speed_unc";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "vert_velocity";
  *((_QWORD *)v13 + 1) = 13;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "vert_velocity_unc";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "course";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "course_unc";
  *((_QWORD *)v19 + 1) = 10;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Time._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Time._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_235BB5CE0;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "gps_nano_seconds";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "gps_time_uncertainty_nano_seconds";
  *(_QWORD *)(v10 + 8) = 33;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "leap_seconds_from_gps_start_valid";
  *((_QWORD *)v12 + 1) = 33;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "leap_seconds_from_gps_start";
  *((_QWORD *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "clock_nano_seconds";
  *((_QWORD *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "mach_continuous_seconds";
  *((_QWORD *)v18 + 1) = 23;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "mach_continuous_uncertainty_seconds";
  *((_QWORD *)v20 + 1) = 35;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "baseband_system_time_ns";
  *((_QWORD *)v22 + 1) = 23;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "baseband_system_time_unc_ns";
  *(_QWORD *)(v23 + 8) = 27;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_Fix._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_Fix._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "time";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "position";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "velocity";
  *((_QWORD *)v13 + 1) = 8;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "spoofing_flags";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "estimation_technology";
  *(_QWORD *)(v16 + 8) = 21;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeTransferData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeTransferData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_gps_week_valid";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "time";
  *(_QWORD *)(v11 + 8) = 4;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "quality";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "constellations_used";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "baseband_system_time_ns";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "baseband_system_time_unc_ns";
  *((_QWORD *)v19 + 1) = 27;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_TimeTransferDataExtend._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_TimeTransferDataExtend._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "data";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "time_mark_before_mach_abs_tick";
  *(_QWORD *)(v11 + 8) = 30;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "time_mark_after_mach_abs_tick";
  *((_QWORD *)v13 + 1) = 29;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "current_mach_cont_minus_mach_abs_ns";
  *((_QWORD *)v15 + 1) = 35;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "time_mark_center_mach_abs_time_ns";
  *(_QWORD *)(v16 + 8) = 33;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_RawPressureSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_RawPressureSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pressure";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SensorSample3Axis._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SensorSample3Axis._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "x";
  *((_QWORD *)v11 + 1) = 1;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "y";
  *((_QWORD *)v13 + 1) = 1;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)((char *)v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "z";
  *((_QWORD *)v15 + 1) = 1;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_SvId._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_SvId._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "satellite_system";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "prn";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "glo_slot_number";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "glo_slot_source";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "glo_frequency_number";
  *(_QWORD *)(v16 + 8) = 20;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PwrMeasurement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PwrMeasurement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "local_time";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "meas_interval_sec";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "active_interval_sec";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "avg_pwr_mw";
  *((_QWORD *)v15 + 1) = 10;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "status";
  *(_QWORD *)(v16 + 8) = 6;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_PwrMeasurement.PowerLoggingStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_PwrMeasurement.PowerLoggingStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "PowerLoggingStatus_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 35;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "PowerLoggingStatus_kPowerNormal";
  *((_QWORD *)v11 + 1) = 31;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DecodedRti._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DecodedRti._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "m_time_of_file_generation_in_seconds_since_gps_epoch";
  *(_QWORD *)(v7 + 8) = 52;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "m_is_data_integrity_valid";
  *((_QWORD *)v11 + 1) = 25;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gnss_DecodedExtendedEphemeris._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gnss_DecodedExtendedEphemeris._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "m_time_of_gps_data_start_in_seconds_since_gps_epoch";
  *(_QWORD *)(v7 + 8) = 51;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "m_is_data_integrity_valid";
  *(_QWORD *)(v11 + 8) = 25;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "m_time_of_gps_data_end_in_seconds_since_gps_epoch";
  *((_QWORD *)v13 + 1) = 49;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "assistance_file_type";
  *((_QWORD *)v15 + 1) = 20;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtAdvertisement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtAdvertisement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "mach_cont_time_ns";
  *(_QWORD *)(v6 + 8) = 17;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "mac";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "rssi_db";
  *((_QWORD *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "channel";
  *((_QWORD *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "antenna_index";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "payload";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 8;
  *(_QWORD *)v20 = "bt_type";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 9;
  *(_QWORD *)v22 = "device_flags";
  *((_QWORD *)v22 + 1) = 12;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 10;
  *(_QWORD *)v23 = "discovery_flags";
  *(_QWORD *)(v23 + 8) = 15;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v5 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 11;
  *(_QWORD *)v25 = "product_ID";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v5 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 12;
  *(_QWORD *)v27 = "identifier";
  *((_QWORD *)v27 + 1) = 10;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v5 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 13;
  *(_QWORD *)v29 = "ids_device_ID";
  *((_QWORD *)v29 + 1) = 13;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v5 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 31;
  *(_QWORD *)v31 = "type7_info";
  *((_QWORD *)v31 + 1) = 10;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtAdvertisement.BtType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtAdvertisement.BtType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "BT_TYPE_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 7;
  *(_QWORD *)v11 = "BT_TYPE_TYPE7";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 18;
  *(_QWORD *)v12 = "BT_TYPE_TYPE18";
  *(_QWORD *)(v12 + 8) = 14;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtDeviceInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtDeviceInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_235BBD720;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "cb_device_bytes";
  *(_QWORD *)(v5 + 8) = 15;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_BtNotification._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_BtNotification._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "event_receipt_time";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "advertisements";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 4;
  *(_QWORD *)v13 = "is_simulated";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 5;
  *(_QWORD *)v15 = "is_ap_on";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 6;
  *(_QWORD *)v16 = "is_screen_on";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Type7Info._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Type7Info._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "is_same_account";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "is_family";
  *(_QWORD *)(v11 + 8) = 9;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_shared_home";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_left_bud";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "is_case";
  *((_QWORD *)v17 + 1) = 7;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "placement";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static CLP_LogEntry_AONLoc_Type7Info.Placement._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_AONLoc_Type7Info.Placement._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "PLACEMENT_UNKNOWN";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "PLACEMENT_IN_EAR";
  *(_QWORD *)(v11 + 8) = 16;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "PLACEMENT_OUT_OF_EAR";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "PLACEMENT_IN_CASE";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "PLACEMENT_ON_EAR";
  *((_QWORD *)v17 + 1) = 16;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "PLACEMENT_OFF_EAR";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "PLACEMENT_ON_NECK";
  *((_QWORD *)v21 + 1) = 17;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 7;
  *(_QWORD *)v23 = "PLACEMENT_DISABLED";
  *((_QWORD *)v23 + 1) = 18;
  v23[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SuplInitDecodeResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SuplInitDecodeResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "SuplInit_None";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SuplInit_DecodeSuccess";
  *(_QWORD *)(v11 + 8) = 22;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "SuplInit_DecodeFailure";
  *((_QWORD *)v13 + 1) = 22;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "SuplInit_Timeout";
  *((_QWORD *)v15 + 1) = 16;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_CompressionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_CompressionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "CompressionType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 32;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "CompressionType_None";
  *((_QWORD *)v11 + 1) = 20;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 2;
  *(_QWORD *)v12 = "CompressionType_LZMA";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfoType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfoType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "LtlInfoType_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "LtlInfoType_kInvalid";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "LtlInfoType_kInitial";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LtlInfoType_kLtlRefitted";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "LtlInfoType_kLearntArray";
  *(_QWORD *)(v16 + 8) = 24;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_CntinStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_CntinStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "CntinStatus_PROTOBUF_DEFAULT";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "CntinStatus_kDisabled";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "CntinStatus_kEnabled";
  *((_QWORD *)v13 + 1) = 20;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "CntinStatus_kEnableFailed";
  *((_QWORD *)v15 + 1) = 25;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "CntinStatus_kDisableFailed";
  *((_QWORD *)v17 + 1) = 26;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "CntinStatus_kInterfaceOn";
  *((_QWORD *)v19 + 1) = 24;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 6;
  *(_QWORD *)v21 = "CntinStatus_kInterfaceOff";
  *((_QWORD *)v21 + 1) = 25;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  uint64_t v101;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Request._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Request._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_235BDCA20;
  v5 = v101 + v4;
  v6 = v101 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v101 + v4) = 1;
  *(_QWORD *)v6 = "mach_continuous_time_ns";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v101 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "transaction_id";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v101 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "type";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v101 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "inject_assistance_position";
  *((_QWORD *)v14 + 1) = 26;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v101 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "inject_assistance_time";
  *((_QWORD *)v16 + 1) = 22;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v101 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "set_assistance_pressure";
  *((_QWORD *)v18 + 1) = 23;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v101 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "set_assistance_accel";
  *((_QWORD *)v20 + 1) = 20;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v101 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "set_assistance_gyro";
  *((_QWORD *)v22 + 1) = 19;
  v22[16] = 2;
  v9();
  v23 = v101 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "set_assistance_dem";
  *(_QWORD *)(v23 + 8) = 18;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v101 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "set_assistance_map_vector";
  *((_QWORD *)v25 + 1) = 25;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v101 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "set_assistance_motion_activity_context";
  *((_QWORD *)v27 + 1) = 38;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v101 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "set_assistance_mount_state";
  *((_QWORD *)v29 + 1) = 26;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v101 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "set_assistance_signal_environment";
  *((_QWORD *)v31 + 1) = 33;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v101 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 14;
  *(_QWORD *)v33 = "set_assistance_speed_constraint";
  *((_QWORD *)v33 + 1) = 31;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v101 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 15;
  *(_QWORD *)v35 = "set_assistance_along_track_velocity";
  *((_QWORD *)v35 + 1) = 35;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v101 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 16;
  *(_QWORD *)v37 = "inject_assistance_file";
  *((_QWORD *)v37 + 1) = 22;
  v37[16] = 2;
  v9();
  v38 = v101 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 17;
  *(_QWORD *)v38 = "inject_rti_file";
  *(_QWORD *)(v38 + 8) = 15;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v101 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "inject_svid_blocklist";
  *((_QWORD *)v40 + 1) = 21;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v101 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 19;
  *(_QWORD *)v42 = "delete_gnss_data";
  *((_QWORD *)v42 + 1) = 16;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v101 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 20;
  *(_QWORD *)v44 = "set_pvtm_report";
  *((_QWORD *)v44 + 1) = 15;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v101 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 21;
  *(_QWORD *)v46 = "set_nmea_handler";
  *((_QWORD *)v46 + 1) = 16;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v101 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 22;
  *(_QWORD *)v48 = "set_config_simulator_mode";
  *((_QWORD *)v48 + 1) = 25;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v101 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "set_config_enable_gnss_constellations";
  *((_QWORD *)v50 + 1) = 37;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v101 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 24;
  *(_QWORD *)v52 = "set_config_duty_cycling";
  *((_QWORD *)v52 + 1) = 23;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v101 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 25;
  *(_QWORD *)v54 = "termination_imminent";
  *((_QWORD *)v54 + 1) = 20;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v101 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "exit_message";
  *((_QWORD *)v56 + 1) = 12;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v101 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 27;
  *(_QWORD *)v58 = "inject_ltl_info";
  *((_QWORD *)v58 + 1) = 15;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v101 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 28;
  *(_QWORD *)v60 = "start_context";
  *((_QWORD *)v60 + 1) = 13;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v101 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 29;
  *(_QWORD *)v62 = "cntin_status_update";
  *((_QWORD *)v62 + 1) = 19;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v101 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 30;
  *(_QWORD *)v64 = "set_thermal_risk_state";
  *((_QWORD *)v64 + 1) = 22;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v101 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 31;
  *(_QWORD *)v66 = "set_config_rf_band_enable";
  *((_QWORD *)v66 + 1) = 25;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v101 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 50;
  *(_QWORD *)v68 = "emerg_config";
  *((_QWORD *)v68 + 1) = 12;
  v68[16] = 2;
  v9();
  v69 = v101 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 60;
  *(_QWORD *)v69 = "position_request";
  *(_QWORD *)(v69 + 8) = 16;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v101 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 61;
  *(_QWORD *)v71 = "session_id";
  *((_QWORD *)v71 + 1) = 10;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v101 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 62;
  *(_QWORD *)v73 = "gps_reference_time";
  *((_QWORD *)v73 + 1) = 18;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v101 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 63;
  *(_QWORD *)v75 = "reference_location";
  *((_QWORD *)v75 + 1) = 18;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v101 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 64;
  *(_QWORD *)v77 = "gps_navigation_model";
  *((_QWORD *)v77 + 1) = 20;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v101 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 65;
  *(_QWORD *)v79 = "gps_acq_assistance";
  *((_QWORD *)v79 + 1) = 18;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v101 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 66;
  *(_QWORD *)v81 = "cell_ft_assistance";
  *((_QWORD *)v81 + 1) = 18;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v101 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 67;
  *(_QWORD *)v83 = "cplane_context";
  *((_QWORD *)v83 + 1) = 14;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v101 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 70;
  *(_QWORD *)v85 = "supl_init_vec";
  *((_QWORD *)v85 + 1) = 13;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v101 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 71;
  *(_QWORD *)v87 = "location_id";
  *((_QWORD *)v87 + 1) = 11;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v101 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 72;
  *(_QWORD *)v89 = "supl_init_index";
  *((_QWORD *)v89 + 1) = 15;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v101 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 73;
  *(_QWORD *)v91 = "supl_cert";
  *((_QWORD *)v91 + 1) = 9;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v101 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 74;
  *(_QWORD *)v93 = "serving_cell_lte";
  *((_QWORD *)v93 + 1) = 16;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v101 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 75;
  *(_QWORD *)v95 = "sim_instance";
  *((_QWORD *)v95 + 1) = 12;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v101 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 76;
  *(_QWORD *)v97 = "supl_context";
  *((_QWORD *)v97 + 1) = 12;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v101 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 77;
  *(_QWORD *)v99 = "wlan_measurement_list";
  *((_QWORD *)v99 + 1) = 21;
  v99[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  _QWORD *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  _QWORD *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v127;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Request.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Request.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v127 = swift_allocObject();
  *(_OWORD *)(v127 + 16) = xmmword_235BDCA30;
  v5 = v127 + v4;
  v6 = v127 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v127 + v4) = 0;
  *(_QWORD *)v6 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v127 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "START";
  *(_QWORD *)(v10 + 8) = 5;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v127 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "STOP";
  *((_QWORD *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v127 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "RESET";
  *((_QWORD *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v127 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "CLEAR";
  *((_QWORD *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v127 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "DELETE_GNSS_DATA";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v127 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "SET_PVTM_REPORT";
  *((_QWORD *)v20 + 1) = 15;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v127 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 7;
  *(_QWORD *)v22 = "SET_NMEA_HANDLER";
  *((_QWORD *)v22 + 1) = 16;
  v22[16] = 2;
  v9();
  v23 = v127 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 8;
  *(_QWORD *)v23 = "INJECT_ASSISTANCE_POSITION";
  *(_QWORD *)(v23 + 8) = 26;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v127 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 9;
  *(_QWORD *)v25 = "INJECT_ASSISTANCE_TIME";
  *((_QWORD *)v25 + 1) = 22;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v127 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "INJECT_ASSISTANCE_FILE";
  *((_QWORD *)v27 + 1) = 22;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v127 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "INJECT_RTI_FILE";
  *((_QWORD *)v29 + 1) = 15;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v127 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 12;
  *(_QWORD *)v31 = "INJECT_SVID_BLOCKLIST";
  *((_QWORD *)v31 + 1) = 21;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v127 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 13;
  *(_QWORD *)v33 = "SET_ASSISTANCE_PRESSURE";
  *((_QWORD *)v33 + 1) = 23;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v127 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 14;
  *(_QWORD *)v35 = "SET_ASSISTANCE_ACCEL";
  *((_QWORD *)v35 + 1) = 20;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v127 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 15;
  *(_QWORD *)v37 = "SET_ASSISTANCE_GYRO";
  *((_QWORD *)v37 + 1) = 19;
  v37[16] = 2;
  v9();
  v38 = v127 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 16;
  *(_QWORD *)v38 = "SET_ASSISTANCE_DEM";
  *(_QWORD *)(v38 + 8) = 18;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v127 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 17;
  *(_QWORD *)v40 = "SET_ASSISTANCE_MAP_VECTOR";
  *((_QWORD *)v40 + 1) = 25;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v127 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 18;
  *(_QWORD *)v42 = "SET_ASSISTANCE_MOTION_ACTIVITY_CONTEXT";
  *((_QWORD *)v42 + 1) = 38;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v127 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 19;
  *(_QWORD *)v44 = "SET_ASSISTANCE_MOUNT_STATE";
  *((_QWORD *)v44 + 1) = 26;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v127 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "SET_ASSISTANCE_SIGNAL_ENVIRONMENT";
  *((_QWORD *)v46 + 1) = 33;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v127 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "SET_ASSISTANCE_SPEED_CONSTRAINT";
  *((_QWORD *)v48 + 1) = 31;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v127 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 22;
  *(_QWORD *)v50 = "SET_ASSISTANCE_ALONG_TRACK_VELOCITY";
  *((_QWORD *)v50 + 1) = 35;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v127 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 23;
  *(_QWORD *)v52 = "SET_POWER_REPORT";
  *((_QWORD *)v52 + 1) = 16;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v127 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "SET_CONFIG_SIMULATOR_MODE";
  *((_QWORD *)v54 + 1) = 25;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v127 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 25;
  *(_QWORD *)v56 = "SET_CONFIG_ENABLE_GNSS_CONSTELLATIONS";
  *((_QWORD *)v56 + 1) = 37;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v127 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 26;
  *(_QWORD *)v58 = "SET_CONFIG_DUTY_CYCLING";
  *((_QWORD *)v58 + 1) = 23;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v127 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 27;
  *(_QWORD *)v60 = "SET_TIME_TRANSFER_PULSE";
  *((_QWORD *)v60 + 1) = 23;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v127 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 28;
  *(_QWORD *)v62 = "CLEAN_TIME_TRANSFER_PULSE";
  *((_QWORD *)v62 + 1) = 25;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v127 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 29;
  *(_QWORD *)v64 = "INJECT_LTL_INFO";
  *((_QWORD *)v64 + 1) = 15;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v127 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 30;
  *(_QWORD *)v66 = "CNTIN_STATUS_UPDATE";
  *((_QWORD *)v66 + 1) = 19;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v127 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 31;
  *(_QWORD *)v68 = "SET_THERMAL_RISK_STATE";
  *((_QWORD *)v68 + 1) = 22;
  v68[16] = 2;
  v9();
  v69 = v127 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "PING";
  *(_QWORD *)(v69 + 8) = 4;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v127 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 34;
  *(_QWORD *)v71 = "BUILD_DEVICE";
  *((_QWORD *)v71 + 1) = 12;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v127 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 35;
  *(_QWORD *)v73 = "TERMINATION_IMMINENT";
  *((_QWORD *)v73 + 1) = 20;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v127 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 36;
  *(_QWORD *)v75 = "EXIT";
  *((_QWORD *)v75 + 1) = 4;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v127 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 37;
  *(_QWORD *)v77 = "FORCE_CLEAR_ALL_NV";
  *((_QWORD *)v77 + 1) = 18;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v127 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 38;
  *(_QWORD *)v79 = "SET_CONFIG_RF_BAND_ENABLE";
  *((_QWORD *)v79 + 1) = 25;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v127 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 51;
  *(_QWORD *)v81 = "START_EMERGENCY_PREEMPTIVE_SESSION";
  *((_QWORD *)v81 + 1) = 34;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v127 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 52;
  *(_QWORD *)v83 = "STOP_EMERGENCY_PREEMPTIVE_SESSION";
  *((_QWORD *)v83 + 1) = 33;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v127 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 53;
  *(_QWORD *)v85 = "SET_EMERGENCY_CONFIG";
  *((_QWORD *)v85 + 1) = 20;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v127 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 54;
  *(_QWORD *)v87 = "SET_EMERGENCY_SESSION_SUMMARY_REPORT";
  *((_QWORD *)v87 + 1) = 36;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v127 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 55;
  *(_QWORD *)v89 = "ENTER_EMERGENCY_MODE";
  *((_QWORD *)v89 + 1) = 20;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v127 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 56;
  *(_QWORD *)v91 = "EXIT_EMERGENCY_MODE";
  *((_QWORD *)v91 + 1) = 19;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v127 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 60;
  *(_QWORD *)v93 = "START_EMERGENCY_POSITION";
  *((_QWORD *)v93 + 1) = 24;
  v93[16] = 2;
  v9();
  v94 = (_QWORD *)(v127 + v4 + 45 * v3);
  v95 = (char *)v94 + *(int *)(v1 + 48);
  *v94 = 61;
  *(_QWORD *)v95 = "STOP_EMERGENCY_POSITION";
  *((_QWORD *)v95 + 1) = 23;
  v95[16] = 2;
  v9();
  v96 = (_QWORD *)(v127 + v4 + 46 * v3);
  v97 = (char *)v96 + *(int *)(v1 + 48);
  *v96 = 62;
  *(_QWORD *)v97 = "SET_EMERGENCY_POSITION_REPORT";
  *((_QWORD *)v97 + 1) = 29;
  v97[16] = 2;
  v9();
  v98 = (_QWORD *)(v127 + v4 + 47 * v3);
  v99 = (char *)v98 + *(int *)(v1 + 48);
  *v98 = 63;
  *(_QWORD *)v99 = "SET_EMERGENCY_MEASUREMENT_REPORT";
  *((_QWORD *)v99 + 1) = 32;
  v99[16] = 2;
  v9();
  v100 = (_QWORD *)(v127 + v4 + 48 * v3);
  v101 = (char *)v100 + *(int *)(v1 + 48);
  *v100 = 64;
  *(_QWORD *)v101 = "SET_NW_ASSISTANCE_NEEDED_REPORT";
  *((_QWORD *)v101 + 1) = 31;
  v101[16] = 2;
  v9();
  v102 = (_QWORD *)(v127 + v4 + 49 * v3);
  v103 = (char *)v102 + *(int *)(v1 + 48);
  *v102 = 65;
  *(_QWORD *)v103 = "SET_NW_ASSISTANCE_GPS_REF_TIME";
  *((_QWORD *)v103 + 1) = 30;
  v103[16] = 2;
  v9();
  v104 = (_QWORD *)(v127 + v4 + 50 * v3);
  v105 = (char *)v104 + *(int *)(v1 + 48);
  *v104 = 66;
  *(_QWORD *)v105 = "SET_NW_ASSISTANCE_REF_POSITION";
  *((_QWORD *)v105 + 1) = 30;
  v105[16] = 2;
  v9();
  v106 = (_QWORD *)(v127 + v4 + 51 * v3);
  v107 = (char *)v106 + *(int *)(v1 + 48);
  *v106 = 67;
  *(_QWORD *)v107 = "SET_NW_ASSISTANCE_GPS_EPHEMERIS";
  *((_QWORD *)v107 + 1) = 31;
  v107[16] = 2;
  v9();
  v108 = (_QWORD *)(v127 + v4 + 52 * v3);
  v109 = (char *)v108 + *(int *)(v1 + 48);
  *v108 = 68;
  *(_QWORD *)v109 = "SET_NW_ASSISTANCE_GPS_ACQUISITION";
  *((_QWORD *)v109 + 1) = 33;
  v109[16] = 2;
  v9();
  v110 = (_QWORD *)(v127 + v4 + 53 * v3);
  v111 = (char *)v110 + *(int *)(v1 + 48);
  *v110 = 69;
  *(_QWORD *)v111 = "INJECT_FT_ASSISTANCE";
  *((_QWORD *)v111 + 1) = 20;
  v111[16] = 2;
  v9();
  v112 = (_QWORD *)(v127 + v4 + 54 * v3);
  v113 = (char *)v112 + *(int *)(v1 + 48);
  *v112 = 70;
  *(_QWORD *)v113 = "DECODE_SUPL_INIT";
  *((_QWORD *)v113 + 1) = 16;
  v113[16] = 2;
  v9();
  v114 = (_QWORD *)(v127 + v4 + 55 * v3);
  v115 = (char *)v114 + *(int *)(v1 + 48);
  *v114 = 71;
  *(_QWORD *)v115 = "SET_SUPL_INIT";
  *((_QWORD *)v115 + 1) = 13;
  v115[16] = 2;
  v9();
  v116 = (_QWORD *)(v127 + v4 + 56 * v3);
  v117 = (char *)v116 + *(int *)(v1 + 48);
  *v116 = 72;
  *(_QWORD *)v117 = "SET_SUPL_LOCATIONID_NEEDED_REPORT";
  *((_QWORD *)v117 + 1) = 33;
  v117[16] = 2;
  v9();
  v118 = (_QWORD *)(v127 + v4 + 57 * v3);
  v119 = (char *)v118 + *(int *)(v1 + 48);
  *v118 = 73;
  *(_QWORD *)v119 = "SET_SUPL_LOCATIONID";
  *((_QWORD *)v119 + 1) = 19;
  v119[16] = 2;
  v9();
  v120 = (_QWORD *)(v127 + v4 + 58 * v3);
  v121 = (char *)v120 + *(int *)(v1 + 48);
  *v120 = 74;
  *(_QWORD *)v121 = "ABORT_SUPL_SESSION";
  *((_QWORD *)v121 + 1) = 18;
  v121[16] = 2;
  v9();
  v122 = (_QWORD *)(v127 + v4 + 59 * v3);
  v123 = (char *)v122 + *(int *)(v1 + 48);
  *v122 = 75;
  *(_QWORD *)v123 = "SET_SUPL_SESSION_STATUS_REPORT";
  *((_QWORD *)v123 + 1) = 30;
  v123[16] = 2;
  v9();
  v124 = (_QWORD *)(v127 + v4 + 60 * v3);
  v125 = (char *)v124 + *(int *)(v1 + 48);
  *v124 = 76;
  *(_QWORD *)v125 = "SET_SUPL_WLAN_MEAS";
  *((_QWORD *)v125 + 1) = 18;
  v125[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Response._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Response._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request_type";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mach_continuous_time_ns";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "result_code";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v64;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Indication._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Indication._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_235BDCA40;
  v5 = v64 + v4;
  v6 = v64 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v64 + v4) = 1;
  *(_QWORD *)v6 = "type";
  *(_QWORD *)(v6 + 8) = 4;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v64 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "request_type";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v64 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "mach_continuous_time_ns";
  *((_QWORD *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v64 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "fix";
  *((_QWORD *)v14 + 1) = 3;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v64 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "meas";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v64 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "power_measurement";
  *((_QWORD *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v64 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 9;
  *(_QWORD *)v20 = "status";
  *((_QWORD *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v64 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 10;
  *(_QWORD *)v22 = "time_transfer_data_extend";
  *((_QWORD *)v22 + 1) = 25;
  v22[16] = 2;
  v9();
  v23 = v64 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 16;
  *(_QWORD *)v23 = "recovery_statistics";
  *(_QWORD *)(v23 + 8) = 19;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v64 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 17;
  *(_QWORD *)v25 = "ltl_info_request";
  *((_QWORD *)v25 + 1) = 16;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v64 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 18;
  *(_QWORD *)v27 = "decoded_extended_ephemeris";
  *((_QWORD *)v27 + 1) = 26;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v64 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 19;
  *(_QWORD *)v29 = "decoded_rti";
  *((_QWORD *)v29 + 1) = 11;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v64 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 22;
  *(_QWORD *)v31 = "start_status";
  *((_QWORD *)v31 + 1) = 12;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v64 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 20;
  *(_QWORD *)v33 = "stop_status";
  *((_QWORD *)v33 + 1) = 11;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v64 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 21;
  *(_QWORD *)v35 = "cntin_clock_control";
  *((_QWORD *)v35 + 1) = 19;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v64 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 23;
  *(_QWORD *)v37 = "exception";
  *((_QWORD *)v37 + 1) = 9;
  v37[16] = 2;
  v9();
  v38 = v64 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 25;
  *(_QWORD *)v38 = "ask_baseband_reset";
  *(_QWORD *)(v38 + 8) = 18;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v64 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 30;
  *(_QWORD *)v40 = "summary_report";
  *((_QWORD *)v40 + 1) = 14;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v64 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 40;
  *(_QWORD *)v42 = "position_report";
  *((_QWORD *)v42 + 1) = 15;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v64 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 41;
  *(_QWORD *)v44 = "cplane_measurement_report";
  *((_QWORD *)v44 + 1) = 25;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v64 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 42;
  *(_QWORD *)v46 = "assistance_needed_report";
  *((_QWORD *)v46 + 1) = 24;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v64 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 43;
  *(_QWORD *)v48 = "cell_ft_assistance_request";
  *((_QWORD *)v48 + 1) = 26;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v64 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 44;
  *(_QWORD *)v50 = "cplane_measurement_report_with_estimate";
  *((_QWORD *)v50 + 1) = 39;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v64 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 50;
  *(_QWORD *)v52 = "supl_session_status";
  *((_QWORD *)v52 + 1) = 19;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v64 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 51;
  *(_QWORD *)v54 = "decoded_supl_init";
  *((_QWORD *)v54 + 1) = 17;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v64 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 52;
  *(_QWORD *)v56 = "supl_init_index";
  *((_QWORD *)v56 + 1) = 15;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v64 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 53;
  *(_QWORD *)v58 = "supl_init_decode_result";
  *((_QWORD *)v58 + 1) = 23;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v64 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 54;
  *(_QWORD *)v60 = "sim_instance";
  *((_QWORD *)v60 + 1) = 12;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v64 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 55;
  *(_QWORD *)v62 = "wlan_measurement_request";
  *((_QWORD *)v62 + 1) = 24;
  v62[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v54;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Indication.TypeEnum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Indication.TypeEnum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_235BBD710;
  v5 = v54 + v4;
  v6 = v54 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v54 + v4) = 0;
  *(_QWORD *)v6 = "PROTOBUF_DEFAULT";
  *(_QWORD *)(v6 + 8) = 16;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v54 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 1;
  *(_QWORD *)v10 = "PVTM";
  *(_QWORD *)(v10 + 8) = 4;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v54 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "STATUS";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v54 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "POWER_MEASUREMENT";
  *((_QWORD *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v54 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "RECOVERY_STATISTICS";
  *((_QWORD *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v54 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "LTL_INFO_REQUEST";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v54 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 9;
  *(_QWORD *)v20 = "TIME_TRANSFER_DATA";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v54 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 10;
  *(_QWORD *)v22 = "EMERG_SUMMARY_REPORT";
  *((_QWORD *)v22 + 1) = 20;
  v22[16] = 2;
  v9();
  v23 = v54 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 11;
  *(_QWORD *)v23 = "EMERG_POSITION_REPORT";
  *(_QWORD *)(v23 + 8) = 21;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v54 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 12;
  *(_QWORD *)v25 = "EMERG_MEASUREMENT_REPORT";
  *((_QWORD *)v25 + 1) = 24;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v54 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 13;
  *(_QWORD *)v27 = "EMERG_ASSISTANCE_NEEDED_REPORT";
  *((_QWORD *)v27 + 1) = 30;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v54 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 14;
  *(_QWORD *)v29 = "EMERG_SUPL_SESSION_STATUS_REPORT";
  *((_QWORD *)v29 + 1) = 32;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v54 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 15;
  *(_QWORD *)v31 = "EMERG_SUPL_LOCATION_ID_NEEDED_REPORT";
  *((_QWORD *)v31 + 1) = 36;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v54 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 16;
  *(_QWORD *)v33 = "EMERG_DECODED_SUPL_INIT";
  *((_QWORD *)v33 + 1) = 23;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v54 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 17;
  *(_QWORD *)v35 = "EMERG_FT_ASSISTANCE_NEEDED_REPORT";
  *((_QWORD *)v35 + 1) = 33;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v54 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 18;
  *(_QWORD *)v37 = "DECODED_EXTENDED_EPHEMERIS";
  *((_QWORD *)v37 + 1) = 26;
  v37[16] = 2;
  v9();
  v38 = v54 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 19;
  *(_QWORD *)v38 = "DECODED_RTI";
  *(_QWORD *)(v38 + 8) = 11;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v54 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 20;
  *(_QWORD *)v40 = "STOP_COMPLETED";
  *((_QWORD *)v40 + 1) = 14;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v54 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 21;
  *(_QWORD *)v42 = "CNTIN_CLOCK_CONTROL";
  *((_QWORD *)v42 + 1) = 19;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v54 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 22;
  *(_QWORD *)v44 = "START_COMPLETED";
  *((_QWORD *)v44 + 1) = 15;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v54 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 23;
  *(_QWORD *)v46 = "EXCEPTION";
  *((_QWORD *)v46 + 1) = 9;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v54 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 24;
  *(_QWORD *)v48 = "EMERG_SUPL_WLAN_MEAS_NEEDED_REPORT";
  *((_QWORD *)v48 + 1) = 34;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v54 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 25;
  *(_QWORD *)v50 = "ASK_BASEBAND_RESET";
  *((_QWORD *)v50 + 1) = 18;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v54 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 26;
  *(_QWORD *)v52 = "EMERG_MEASUREMENT_REPORT_WITH_ESTIMATE";
  *((_QWORD *)v52 + 1) = 38;
  v52[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Status._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Status._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "gpsd_uptime";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "device_uptime";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "is_device_initialized";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "is_device_interface_busy";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "is_device_active";
  *(_QWORD *)(v16 + 8) = 16;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetPvtmReport._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetPvtmReport._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CA0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "report_pvt";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "report_measurement";
  *(_QWORD *)(v11 + 8) = 18;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "include_extended_measurement_info";
  *((_QWORD *)v13 + 1) = 33;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "report_sv_info";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "report_band_corrections";
  *((_QWORD *)v17 + 1) = 23;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "report_time_conversion";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistanceFile._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistanceFile._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "predictions_file";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "compression_type";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistancePosition._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistancePosition._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "position";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "position_assist_type";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "altitude_valid";
  *((_QWORD *)v13 + 1) = 14;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 10;
  *(_QWORD *)v15 = "mach_continuous_time_ns";
  *((_QWORD *)v15 + 1) = 23;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_InjectAssistanceTime._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_InjectAssistanceTime._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "gps_nanoseconds";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "uncertainty_nanoseconds";
  *((_QWORD *)v11 + 1) = 23;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "mach_continuous_time_ns";
  *(_QWORD *)(v12 + 8) = 23;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceDem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceDem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ellipsoidal_altitude_wgs84";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "altitude_uncertainty";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v33;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMapVector._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMapVector._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_235BB6C70;
  v5 = v33 + v4;
  v6 = v33 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v33 + v4) = 1;
  *(_QWORD *)v6 = "mach_continuous_time_ns";
  *(_QWORD *)(v6 + 8) = 23;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C328];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v33 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "segment_start_latitude";
  *(_QWORD *)(v10 + 8) = 22;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v33 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "segment_start_longitude";
  *((_QWORD *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v33 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "altitude_valid";
  *((_QWORD *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v33 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "segment_start_alt_wgs84";
  *((_QWORD *)v16 + 1) = 23;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v33 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "segment_length_m";
  *((_QWORD *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v33 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "segment_direction_deg";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v33 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "segment_width_m";
  *((_QWORD *)v22 + 1) = 15;
  v22[16] = 2;
  v9();
  v23 = v33 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "is_freeway";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v33 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 10;
  *(_QWORD *)v25 = "is_railway";
  *((_QWORD *)v25 + 1) = 10;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v33 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 11;
  *(_QWORD *)v27 = "is_one_way_road";
  *((_QWORD *)v27 + 1) = 15;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v33 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 12;
  *(_QWORD *)v29 = "is_tunnel";
  *((_QWORD *)v29 + 1) = 9;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v33 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 13;
  *(_QWORD *)v31 = "is_bridge";
  *((_QWORD *)v31 + 1) = 9;
  v31[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMotionActivityContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMotionActivityContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "context";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "moving_state";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "motion_reliability";
  *((_QWORD *)v15 + 1) = 18;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceMountState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceMountState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "mount_state";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceSpeedConstraint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceSpeedConstraint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "duration";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "speed_lower_bound";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "speed_upper_bound";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetAssistanceAlongTrackVelocity._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetAssistanceAlongTrackVelocity._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "vel_along_track";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "vel_along_track_uncertainty";
  *(_QWORD *)(v12 + 8) = 27;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetThermalRiskState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetThermalRiskState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_time_ns";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "thermal_risk_scale";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigSimulatorMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigSimulatorMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "is_enabled";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "default_gps_week";
  *((_QWORD *)v11 + 1) = 16;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigEnableGnssConstellations._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigEnableGnssConstellations._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "enable_flags";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "disable_flags";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_SetConfigRfBandEnable._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_SetConfigRfBandEnable._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "enable_l1";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "enable_l5";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "recovery_point_vector";
  *(_QWORD *)(v7 + 8) = 21;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "recovery_status";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics.RecoveryStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics.RecoveryStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "recovery_attempted";
  *(_QWORD *)(v7 + 8) = 18;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "num_recovery_attempts";
  *(_QWORD *)(v11 + 8) = 21;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "recovered";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "in_out_recovery";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_RecoveryStatistics.RecoveryPoint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_RecoveryStatistics.RecoveryPoint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "file";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "line_number";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "function";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CF0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "success";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "error_code";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "info_type";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "initial_params";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "lut_params";
  *((_QWORD *)v17 + 1) = 10;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "current_src_calib";
  *((_QWORD *)v19 + 1) = 17;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "rac_pmic_adcr_pre_cal";
  *((_QWORD *)v21 + 1) = 21;
  v21[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlLutParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlLutParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C80;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ltl_update_count";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ltl_cleanup_count";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "s_curve_val";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "s_curve_history";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "correction_factor";
  *(_QWORD *)(v7 + 8) = 17;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "prod_version";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "post_cal_version";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5D00;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "adc_gain";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "adc_offset";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  char *v28;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LtlInfo.LtlInitialParams._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LtlInfo.LtlInitialParams._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB6C90;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "c5";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "c4";
  *(_QWORD *)(v11 + 8) = 2;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "c3";
  *((_QWORD *)v13 + 1) = 2;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "c2";
  *((_QWORD *)v15 + 1) = 2;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "c1";
  *((_QWORD *)v17 + 1) = 2;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "c0";
  *((_QWORD *)v19 + 1) = 2;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "coeff_calibrated";
  *((_QWORD *)v21 + 1) = 16;
  v21[16] = 2;
  v10();
  v22 = (_QWORD *)(v6 + 7 * v3);
  v23 = (char *)v22 + *(int *)(v1 + 48);
  *v22 = 8;
  *(_QWORD *)v23 = "ref_temp";
  *((_QWORD *)v23 + 1) = 8;
  v23[16] = 2;
  v10();
  v24 = v6 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 8 * v3) = 9;
  *(_QWORD *)v24 = "ltl_cleanup_factor";
  *(_QWORD *)(v24 + 8) = 18;
  *(_BYTE *)(v24 + 16) = 2;
  v10();
  v25 = (_QWORD *)(v6 + 9 * v3);
  v26 = (char *)v25 + *(int *)(v1 + 48);
  *v25 = 10;
  *(_QWORD *)v26 = "hw_id";
  *((_QWORD *)v26 + 1) = 5;
  v26[16] = 2;
  v10();
  v27 = (_QWORD *)(v6 + 10 * v3);
  v28 = (char *)v27 + *(int *)(v1 + 48);
  *v27 = 11;
  *(_QWORD *)v28 = "clock_id";
  *((_QWORD *)v28 + 1) = 8;
  v28[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_Exception._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_Exception._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "type_deprecated";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "payload";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "type_integer";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_AskBasebandReset._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_AskBasebandReset._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "mach_continuous_seconds";
  *(_QWORD *)(v7 + 8) = 23;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "reason_code";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "reason_string";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_LogEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_LogEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CB0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "print_time_mach_continuous_ns";
  *(_QWORD *)(v7 + 8) = 29;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "comment";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 5;
  *(_QWORD *)v13 = "request";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 6;
  *(_QWORD *)v15 = "response";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 7;
  *(_QWORD *)v16 = "indication";
  *(_QWORD *)(v16 + 8) = 10;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static Proto_Gpsd_StartContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static Proto_Gpsd_StartContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_235BB5CD0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "enable_lte_band13_filter";
  *(_QWORD *)(v7 + 8) = 24;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "enable_benign_environment_power_saving";
  *((_QWORD *)v11 + 1) = 38;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "in_region_where_cold_searches_should_prioritize_beidou";
  *(_QWORD *)(v12 + 8) = 54;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Request.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_6;
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_6;
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_6;
        case 6:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
          goto LABEL_5;
        case 11:
          type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
          type metadata accessor for Proto_Gpsd_Request(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Request);
LABEL_5:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_6:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v10 = (int *)result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + v10[8]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #5 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #6 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t closure #6 in CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Gpsd_Request(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 40), (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Request);
}

Swift::Int CLP_LogEntry_AONLoc_Request.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_Request, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Request@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_BYTE *)(v8 + 4) = 1;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(a2 + v7) = 5;
  v9 = a2 + a1[9];
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a2 + a1[10];
  v12 = type metadata accessor for Proto_Gpsd_Request(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Request()
{
  return CLP_LogEntry_AONLoc_Request.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_Request.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Request()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Request()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap);
}

uint64_t CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap, a1);
}

uint64_t static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request.TypeEnum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.TypeEnum._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

void one-time initialization function for protoMessageName()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x4F746C757365522ELL;
  v0._object = (void *)0xEE00736E6F697470;
  String.append(_:)(v0);
  static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName = 0xD00000000000001BLL;
  *(_QWORD *)algn_256372BC8 = 0x8000000235BE8650;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x617453656D69542ELL;
  v0._object = (void *)0xEA0000000000706DLL;
  String.append(_:)(v0);
  static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName = 0xD000000000000015;
  *(_QWORD *)algn_256373268 = 0x8000000235BEBDF0;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x64757469746C412ELL;
  v0._object = (void *)0xED00006F666E4965;
  String.append(_:)(v0);
  static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName = 0xD00000000000002ELL;
  unk_2563736E0 = 0x8000000235BEC230;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x616546656572542ELL;
  v0._object = (void *)0xED00007365727574;
  String.append(_:)(v0);
  static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.protoMessageName = 0xD000000000000035;
  unk_256373F00 = 0x8000000235BECEE0;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEF73757461745379;
  String.append(_:)(v0);
  static Proto_Gpsd_RecoveryStatistics.RecoveryStatus.protoMessageName = 0xD00000000000001DLL;
  unk_256375350 = 0x8000000235BFA890;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x7265766F6365522ELL;
  v0._object = (void *)0xEE00746E696F5079;
  String.append(_:)(v0);
  static Proto_Gpsd_RecoveryStatistics.RecoveryPoint.protoMessageName = 0xD00000000000001DLL;
  *(_QWORD *)algn_256375378 = 0x8000000235BFA890;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0x5074754C6C744C2ELL;
  v0._object = (void *)0xED0000736D617261;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlLutParams.protoMessageName = 0xD000000000000012;
  unk_2563753D0 = 0x8000000235BFA8D0;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000017;
  v0._object = (void *)0x8000000235BFB430;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData.protoMessageName = 0xD000000000000012;
  *(_QWORD *)algn_2563753F8 = 0x8000000235BFA8D0;
}

{
  Swift::String v0;

  v0._countAndFlagsBits = 0xD000000000000018;
  v0._object = (void *)0x8000000235BFB3D0;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData.protoMessageName = 0xD000000000000012;
  unk_256375420 = 0x8000000235BFA8D0;
}

{
  Swift::String v0;

  v0._object = (void *)0x8000000235BFB3A0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  static Proto_Gpsd_LtlInfo.LtlInitialParams.protoMessageName = 0xD000000000000012;
  *(_QWORD *)algn_256375448 = 0x8000000235BFA8D0;
}

uint64_t *CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName;
}

uint64_t static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName.getter()
{
  uint64_t v0;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v0 = static CLP_LogEntry_AONLoc_Request.ResultOptions.protoMessageName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 2:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_14;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_14;
        case 5:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularSInt32Field(value:)();
          goto LABEL_14;
        case 6:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType();
          goto LABEL_11;
        case 7:
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
          goto LABEL_14;
        case 8:
          v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedInt32Field(value:)();
          goto LABEL_14;
        case 11:
        case 12:
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_14:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v3 = (int *)result;
  if (*((_BYTE *)v0 + *(int *)(result + 32)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*((_BYTE *)v0 + v3[9] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if ((*((_BYTE *)v0 + v3[10] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*((_BYTE *)v0 + v3[11] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    if (*(_QWORD *)(*v0 + 16))
    {
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v0[1] + 16))
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
      dispatch thunk of Visitor.visitRepeatedEnumField<A>(value:fieldNumber:)();
    }
    if (*(_QWORD *)(v0[2] + 16))
      dispatch thunk of Visitor.visitRepeatedInt32Field(value:fieldNumber:)();
    closure #6 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    closure #7 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)((uint64_t)v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularSInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 56) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_AONLoc_Request.ResultOptions.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  a2[2] = v4;
  result = UnknownStorage.init()();
  v6 = a1[9];
  *((_BYTE *)a2 + a1[8]) = 2;
  v7 = (char *)a2 + v6;
  *(_DWORD *)v7 = 0;
  v7[4] = 1;
  v8 = a1[11];
  v9 = (char *)a2 + a1[10];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = (char *)a2 + v8;
  *(_DWORD *)v10 = 0;
  v10[4] = 1;
  v11 = a1[13];
  v12 = (char *)a2 + a1[12];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = (char *)a2 + a1[14];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  return result;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_AONLoc_Request.ResultOptions())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return CLP_LogEntry_AONLoc_Request.ResultOptions.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return CLP_LogEntry_AONLoc_Request.ResultOptions.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Request.ResultOptions._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  return Message.hash(into:)();
}

void *CLP_LogEntry_AONLoc_Response.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Response.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Response.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t CLP_LogEntry_AONLoc_Response._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Response._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_Response.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
        goto LABEL_5;
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
    lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
LABEL_5:
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Response.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + *(int *)(v3 + 28)) != 10)
    {
      lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_AONLoc_Response.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_Response, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Response@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 5;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a2 + a1[7]) = 10;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Response()
{
  return CLP_LogEntry_AONLoc_Response.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Response()
{
  return CLP_LogEntry_AONLoc_Response.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Response()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Response@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Response._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Response()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Response()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
  return Message.hash(into:)();
}

void *CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_WiFiIndication.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, (uint64_t)"wifi_notifications", 18);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, (uint64_t)"bt_notifications", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, (uint64_t)"slot_num", (uint64_t)"slot_source", 11);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, (uint64_t)"freq_num", (uint64_t)"slot_info", 9);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, (uint64_t)"allow_streaming", 15, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MotionStateObserver._protobuf_nameMap, (uint64_t)"workout_update", 14);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MotionStateMediator._protobuf_nameMap, (uint64_t)"workout_event", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Natalimetry._protobuf_nameMap, (uint64_t)"body_metrics", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Timer._protobuf_nameMap, (uint64_t)"event_receipt_time", 18, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_MapVector._protobuf_nameMap, (uint64_t)"dot_data", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_TunnelBridgeNotification._protobuf_nameMap, (uint64_t)"tunnel_bridge_data", 18);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_TunnelEndPoint._protobuf_nameMap, (uint64_t)"tunnel_end_point_data", 21);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_Reset._protobuf_nameMap, (uint64_t)"event_receipt_time", 18, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_StepCount._protobuf_nameMap, (uint64_t)"step_count_entry", 16);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_SensorFusionStatus._protobuf_nameMap, (uint64_t)"bits", 4, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static CLP_LogEntry_PrivateData_GeomagneticModelData._protobuf_nameMap, (uint64_t)"data", 4, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gnss_Emergency_CplaneConfig._protobuf_nameMap, (uint64_t)"early_return_enabled", 20);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gnss_Emergency_CellFTAssistanceRequest._protobuf_nameMap, (uint64_t)"network_type", 12);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_InjectRtiFile._protobuf_nameMap, (uint64_t)"rti_file", 8, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_InjectSvidBlocklist._protobuf_nameMap, (uint64_t)"blocklist", 9, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_DeleteGnssData._protobuf_nameMap, (uint64_t)"delete_flags", 12, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetNmeaHandler._protobuf_nameMap, (uint64_t)"nmea_mask", 9, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistancePressure._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceAccel._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceGyro._protobuf_nameMap, (uint64_t)"samples", 7, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetAssistanceSignalEnvironment._protobuf_nameMap, (uint64_t)"signal_environment_type", 23, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_SetConfigDutyCycling._protobuf_nameMap, (uint64_t)"is_enabled", 10, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_TerminationImminent._protobuf_nameMap, (uint64_t)"reason", 6, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_ExitMessage._protobuf_nameMap, (uint64_t)"reason", 6, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_LtlInfoRequest._protobuf_nameMap, (uint64_t)"info_type", 9, MEMORY[0x24BE5C328]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_CntinStatusMessage._protobuf_nameMap, (uint64_t)"status", 6, MEMORY[0x24BE5C318]);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static Proto_Gpsd_CntinClockControl._protobuf_nameMap, (uint64_t)"enable_cntin_clock", 18, MEMORY[0x24BE5C328]);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  uint64_t v17;

  v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_235BB5CD0;
  v11 = (_QWORD *)(v10 + v9);
  v12 = v10 + v9 + *(int *)(v6 + 48);
  *v11 = 1;
  *(_QWORD *)v12 = "mach_continuous_time_ns";
  *(_QWORD *)(v12 + 8) = 23;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C328];
  v14 = type metadata accessor for _NameMap.NameDescription();
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = (char *)v11 + v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + v8) = 2;
  *(_QWORD *)v16 = "is_last_batch";
  *((_QWORD *)v16 + 1) = 13;
  v16[16] = 2;
  v15();
  v17 = (uint64_t)v11 + 2 * v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + 2 * v8) = 11;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  char *v16;
  uint64_t v17;

  v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_235BB5CD0;
  v11 = (_QWORD *)(v10 + v9);
  v12 = v10 + v9 + *(int *)(v6 + 48);
  *v11 = 1;
  *(_QWORD *)v12 = "event_receipt_time";
  *(_QWORD *)(v12 + 8) = 18;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C328];
  v14 = type metadata accessor for _NameMap.NameDescription();
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v12, v13, v14);
  v16 = (char *)v11 + v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + v8) = 2;
  *(_QWORD *)v16 = "client";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v15();
  v17 = (uint64_t)v11 + 2 * v8 + *(int *)(v6 + 48);
  *(_QWORD *)((char *)v11 + 2 * v8) = 3;
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = 2;
  v15();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_235BBD720;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C328];
  v14 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification) & 1;
}

Swift::Int CLP_LogEntry_AONLoc_WiFiIndication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_AONLoc_WiFiIndication())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_WiFiIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_WiFiIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_WiFiIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
  return Message.hash(into:)();
}

void *CLP_LogEntry_AONLoc_BtIndication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_BtIndication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_BtIndication.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  char v13;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v7)
  {
    while ((v13 & 1) == 0)
    {
      switch(result)
      {
        case 11:
          a5(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a6, a5, a7);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          a4(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 1:
          a4(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_BtIndication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t CLP_LogEntry_AONLoc_WiFiIndication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v12;

  result = a4(0);
  v12 = result;
  if ((*(_BYTE *)(v7 + *(int *)(result + 24) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v8)
  {
    if (*(_BYTE *)(v7 + *(int *)(v12 + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      a5(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a6, a5, a7);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_AONLoc_BtIndication.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification) & 1;
}

Swift::Int CLP_LogEntry_AONLoc_BtIndication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  char *v6;

  *a2 = MEMORY[0x24BEE4AF8];
  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 28);
  v6 = (char *)a2 + *(int *)(a1 + 24);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *((_BYTE *)a2 + v5) = 2;
  return result;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance CLP_LogEntry_AONLoc_WiFiIndication@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_BtIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_BtIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_BtIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_BtIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_BtIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
  return Message.hash(into:)();
}

void *CLP_LogEntry_AONLoc_Indication.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_Indication.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_Indication.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_AONLoc_Indication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap, a1);
}

uint64_t one-time initialization function for defaultInstance()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_WORD *)(v0 + 32) = 1793;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  v2 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v4 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v7(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, 1, 1, v6);
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 13;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, 1, 1, v2);
  static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v12(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, 1, 1, v11);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = MEMORY[0x24BEE4AF8];
  static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = MEMORY[0x24BEE4AF8];
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections) = v4;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, 1, 1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, 1, 1, v4);
  static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = v5;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset) = v5;
  static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  v2 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 4;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 14;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, 1, 1, v2);
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame) = 3;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType) = 8;
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController) = 2;
  static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;

  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_DWORD *)(v0 + 92) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_DWORD *)(v0 + 100) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_WORD *)(v0 + 113) = 1026;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  *(_BYTE *)(v0 + 112) = 1;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted) = 2;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel) = 4;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, 1, 1, v2);
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice) = 3;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates) = 2;
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed) = 2;
  v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused) = 2;
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, 1, 1, v2);
  v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame) = 3;
  v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  v24 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  v26 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl) = 2;
  v28 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  *(_QWORD *)v28 = 0;
  *(_BYTE *)(v28 + 8) = 1;
  v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport) = MEMORY[0x24BEE4AF8];
  v30 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent) = 3;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState) = 3;
  v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  v34 = v0
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  *(_QWORD *)v34 = 0;
  *(_BYTE *)(v34 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType) = 4;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy) = 3;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType) = 5;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp) = 2;
  static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active) = 2;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality) = 3;
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 67306568;
  *(_BYTE *)(v0 + 20) = 2;
  *(_DWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 28) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_WORD *)(v0 + 41) = 1026;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  *(_WORD *)(v0 + 73) = 1096;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame) = 3;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved) = 2;
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData) = 20;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected) = 2;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode) = 2;
  static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = (_QWORD *)(v0
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  *v13 = 0;
  v13[1] = 0;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace) = 2;
  v14 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v20 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  *(_DWORD *)v20 = 0;
  *(_BYTE *)(v20 + 4) = 1;
  v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  *(_DWORD *)v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource) = 6;
  v22 = v0
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel) = 8;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias) = 2;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  *(_DWORD *)v9 = 0;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  *(_BYTE *)(v9 + 4) = 1;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v7;

  type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, 1, 1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, 1, 1, v4);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel) = 8;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p) = 2;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type) = 15;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType) = 15;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power) = 2;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown) = 2;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake) = 2;
  static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, 1, 1, v2);
  v3(v0+ OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_Init._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 18;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__qop;
  v2 = type metadata accessor for Proto_Gnss_Emergency_QoP(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__slpAddress;
  v4 = type metadata accessor for Proto_Gnss_Emergency_SLPAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__notification;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Notification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf25Proto_Gnss_Emergency_InitP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__suplInitv2Extension;
  inited = type metadata accessor for Proto_Gnss_Emergency_SuplInitVer2Extension(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(inited - 8) + 56))(v7, 1, 1, inited);
  static Proto_Gnss_Emergency_Init._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_SessionStatus._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 1;
  *(_WORD *)(v0 + 21) = 8466;
  *(_BYTE *)(v0 + 23) = 24;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 1;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 1;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_WORD *)(v0 + 129) = 514;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefLocation;
  *(_BYTE *)(v0 + 131) = 2;
  v2 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf34Proto_Gnss_Emergency_SessionStatusP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__nwRefTime;
  v4 = type metadata accessor for Proto_Gnss_Emergency_NetworkReferenceTime(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  static Proto_Gnss_Emergency_SessionStatus._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_PositionRequest._StorageClass();
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 20) = 1281;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 1;
  *(_DWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 52) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 60) = 1;
  *(_DWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 68) = 1;
  *(_DWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 76) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 84) = 1;
  *(_DWORD *)(result + 88) = 0;
  *(_BYTE *)(result + 92) = 1;
  *(_DWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 100) = 1;
  *(_DWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 108) = 1;
  *(_DWORD *)(result + 112) = 0;
  *(_WORD *)(result + 116) = 1793;
  *(_DWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 124) = 1;
  *(_DWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 132) = 1;
  static Proto_Gnss_Emergency_PositionRequest._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__utranTime;
  v2 = type metadata accessor for Proto_Gnss_Emergency_UtranGanssTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__geranTime;
  v4 = type metadata accessor for Proto_Gnss_Emergency_GeranGanssTimeMeasured(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_GanssTimeMeasuredP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__eutranTime;
  v6 = type metadata accessor for Proto_Gnss_Emergency_ClsEutranCell(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GanssTimeMeasured._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  type metadata accessor for Proto_Gnss_Emergency_ShapeInfo._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainCircle;
  v2 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointUncertainEllipse;
  v4 = type metadata accessor for Proto_Gnss_Emergency_PointUncertainEllipse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitudeUncertainEllipsoid;
  v6 = type metadata accessor for Proto_Gnss_Emergency_PointAltitudeUncertainEllipsoid(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidArc;
  v8 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidArc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ellipsoidPoint;
  v10 = type metadata accessor for Proto_Gnss_Emergency_EllipsoidPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__pointAltitude;
  v12 = type metadata accessor for Proto_Gnss_Emergency_PointAltitude(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__polygon;
  v14 = type metadata accessor for Proto_Gnss_Emergency_Polygon(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v16 = v0
      + OBJC_IVAR____TtCV10ALProtobuf30Proto_Gnss_Emergency_ShapeInfoP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__noLocation;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  static Proto_Gnss_Emergency_ShapeInfo._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  type metadata accessor for Proto_Gnss_Emergency_PositionReport._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationInfo;
  v4 = type metadata accessor for Proto_Gnss_Emergency_LocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssLocationInfo;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssLocationInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locEstimate;
  v8 = type metadata accessor for Proto_Gnss_Emergency_LocEstimate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__velocityEstimate;
  v10 = type metadata accessor for Proto_Gnss_Emergency_VelocityEstimate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf35Proto_Gnss_Emergency_PositionReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__technologySource;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  static Proto_Gnss_Emergency_PositionReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 1;
  *(_DWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 28) = 1;
  *(_DWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 36) = 1;
  *(_DWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 44) = 1;
  *(_QWORD *)(v0 + 48) = MEMORY[0x24BEE4AF8];
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__measuredTimeParams;
  v2 = type metadata accessor for Proto_Gnss_Emergency_GpsTimeMeasuredParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__codePhaseAmbiguity;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTodpresent;
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf36Proto_Gnss_Emergency_GpsMeasurementsP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsTod;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GpsTOD(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GpsMeasurements._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for Proto_Gnss_Emergency_MeasurementReport._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssMeasurements;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssMeasurements(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__moreGanssMeasurements;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf38Proto_Gnss_Emergency_MeasurementReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime) = 2;
  static Proto_Gnss_Emergency_MeasurementReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 7;
  *(_DWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE4AF8];
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssDataBitAssist;
  v2 = type metadata accessor for Proto_Gnss_Emergency_GanssDataBitAssist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssNavModelAddData;
  v4 = type metadata accessor for Proto_Gnss_Emergency_GanssNavModelAddData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf44Proto_Gnss_Emergency_GanssAidRequestPerGanssP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAddAssistDataChoices;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAddAssistDataChoices(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_GanssAidRequestPerGanss._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__assistanceRequest;
  v4 = type metadata accessor for Proto_Gnss_Emergency_GpsAssistanceRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf43Proto_Gnss_Emergency_AssistanceNeededReportP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__ganssAssistanceRequest;
  v6 = type metadata accessor for Proto_Gnss_Emergency_GanssAssistanceRequest(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  static Proto_Gnss_Emergency_AssistanceNeededReport._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris._StorageClass();
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = 1;
  *(_DWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 1;
  *(_DWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 52) = 1;
  *(_DWORD *)(result + 56) = 0;
  *(_BYTE *)(result + 60) = 1;
  *(_DWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 68) = 1;
  *(_DWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 76) = 1;
  *(_DWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 84) = 1;
  *(_DWORD *)(result + 88) = 0;
  *(_BYTE *)(result + 92) = 1;
  *(_DWORD *)(result + 96) = 0;
  *(_BYTE *)(result + 100) = 1;
  *(_DWORD *)(result + 104) = 0;
  *(_BYTE *)(result + 108) = 1;
  *(_DWORD *)(result + 112) = 0;
  *(_BYTE *)(result + 116) = 1;
  *(_DWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 124) = 1;
  *(_DWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 132) = 1;
  *(_DWORD *)(result + 136) = 0;
  *(_BYTE *)(result + 140) = 1;
  *(_DWORD *)(result + 144) = 0;
  *(_BYTE *)(result + 148) = 1;
  *(_DWORD *)(result + 152) = 0;
  *(_BYTE *)(result + 156) = 1;
  *(_DWORD *)(result + 160) = 0;
  *(_BYTE *)(result + 164) = 1;
  *(_DWORD *)(result + 168) = 0;
  *(_BYTE *)(result + 172) = 1;
  *(_DWORD *)(result + 176) = 0;
  *(_BYTE *)(result + 180) = 1;
  *(_DWORD *)(result + 184) = 0;
  *(_BYTE *)(result + 188) = 1;
  *(_DWORD *)(result + 192) = 0;
  *(_BYTE *)(result + 196) = 1;
  *(_DWORD *)(result + 200) = 0;
  *(_BYTE *)(result + 204) = 1;
  *(_DWORD *)(result + 208) = 0;
  *(_BYTE *)(result + 212) = 1;
  *(_DWORD *)(result + 216) = 0;
  *(_BYTE *)(result + 220) = 1;
  *(_DWORD *)(result + 224) = 0;
  *(_BYTE *)(result + 228) = 1;
  *(_DWORD *)(result + 232) = 0;
  *(_BYTE *)(result + 236) = 1;
  *(_DWORD *)(result + 240) = 0;
  *(_BYTE *)(result + 244) = 1;
  *(_DWORD *)(result + 248) = 0;
  *(_BYTE *)(result + 252) = 1;
  *(_DWORD *)(result + 256) = 0;
  *(_BYTE *)(result + 260) = 1;
  *(_DWORD *)(result + 264) = 0;
  *(_BYTE *)(result + 268) = 1;
  *(_DWORD *)(result + 272) = 0;
  *(_BYTE *)(result + 276) = 1;
  *(_DWORD *)(result + 280) = 0;
  *(_BYTE *)(result + 284) = 1;
  static Proto_Gnss_Emergency_GpsEphemeris._StorageClass.defaultInstance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 9;
  *(_DWORD *)(v0 + 20) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__sessionInfo;
  v2 = type metadata accessor for Proto_Gnss_Emergency_SessionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__gpsMeasurements;
  v4 = type metadata accessor for Proto_Gnss_Emergency_GpsMeasurements(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__locationIndication;
  v6 = type metadata accessor for Proto_Gnss_Emergency_Is801LocationInd(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__afltAction) = 4;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf50Proto_Gnss_Emergency_MeasurementReportWithEstimateP33_A557130C73F8FFB56F85D28EDB16AF9913_StorageClass__isMeasInCdmaTime) = 2;
  static Proto_Gnss_Emergency_MeasurementReportWithEstimate._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  type metadata accessor for Proto_Gnss_Fix._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__time;
  v2 = type metadata accessor for Proto_Gnss_Time(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__position;
  v4 = type metadata accessor for Proto_Gnss_Position(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__velocity;
  v6 = type metadata accessor for Proto_Gnss_Velocity(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__spoofingFlags;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf14Proto_Gnss_FixP33_CE77F83568258924918786B79242136A13_StorageClass__estimationTechnology) = 5;
  static Proto_Gnss_Fix._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Proto_Gnss_TimeTransferDataExtend._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__data;
  v2 = type metadata accessor for Proto_Gnss_TimeTransferData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v4 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkBeforeMachAbsTick;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkAfterMachAbsTick;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__currentMachContMinusMachAbsNs;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf33Proto_Gnss_TimeTransferDataExtendP33_CE77F83568258924918786B79242136A13_StorageClass__timeMarkCenterMachAbsTimeNs;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  static Proto_Gnss_TimeTransferDataExtend._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = 0;
  *(_BYTE *)(v0 + 48) = 1;
  *(_DWORD *)(v0 + 52) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_DWORD *)(v0 + 60) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_OWORD *)(v0 + 72) = xmmword_235BB6C50;
  *(_BYTE *)(v0 + 88) = 3;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_OWORD *)(v0 + 152) = 0u;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf35CLP_LogEntry_AONLoc_BtAdvertisementP33_E9587737FC1639A911680431159314D113_StorageClass__type7Info;
  *(_OWORD *)(v0 + 136) = 0u;
  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  static CLP_LogEntry_AONLoc_BtAdvertisement._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t started;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_Request._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(_WORD *)(v0 + 32) = 15617;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistancePosition;
  v2 = type metadata accessor for Proto_Gpsd_InjectAssistancePosition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceTime;
  v4 = type metadata accessor for Proto_Gpsd_InjectAssistanceTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistancePressure;
  v6 = type metadata accessor for Proto_Gpsd_SetAssistancePressure(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAccel;
  v8 = type metadata accessor for Proto_Gpsd_SetAssistanceAccel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceGyro;
  v10 = type metadata accessor for Proto_Gpsd_SetAssistanceGyro(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceDem;
  v12 = type metadata accessor for Proto_Gpsd_SetAssistanceDem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMapVector;
  v14 = type metadata accessor for Proto_Gpsd_SetAssistanceMapVector(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMotionActivityContext;
  v16 = type metadata accessor for Proto_Gpsd_SetAssistanceMotionActivityContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceMountState;
  v18 = type metadata accessor for Proto_Gpsd_SetAssistanceMountState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSignalEnvironment;
  v20 = type metadata accessor for Proto_Gpsd_SetAssistanceSignalEnvironment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceSpeedConstraint;
  v22 = type metadata accessor for Proto_Gpsd_SetAssistanceSpeedConstraint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setAssistanceAlongTrackVelocity;
  v24 = type metadata accessor for Proto_Gpsd_SetAssistanceAlongTrackVelocity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectAssistanceFile;
  v26 = type metadata accessor for Proto_Gpsd_InjectAssistanceFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectRtiFile;
  v28 = type metadata accessor for Proto_Gpsd_InjectRtiFile(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectSvidBlocklist;
  v30 = type metadata accessor for Proto_Gpsd_InjectSvidBlocklist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__deleteGnssData;
  v32 = type metadata accessor for Proto_Gpsd_DeleteGnssData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setPvtmReport;
  v34 = type metadata accessor for Proto_Gpsd_SetPvtmReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setNmeaHandler;
  v36 = type metadata accessor for Proto_Gpsd_SetNmeaHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigSimulatorMode;
  v38 = type metadata accessor for Proto_Gpsd_SetConfigSimulatorMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigEnableGnssConstellations;
  v40 = type metadata accessor for Proto_Gpsd_SetConfigEnableGnssConstellations(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  v41 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigDutyCycling;
  v42 = type metadata accessor for Proto_Gpsd_SetConfigDutyCycling(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__terminationImminent;
  v44 = type metadata accessor for Proto_Gpsd_TerminationImminent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
  v45 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exitMessage;
  v46 = type metadata accessor for Proto_Gpsd_ExitMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 1, 1, v46);
  v47 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__injectLtlInfo;
  v48 = type metadata accessor for Proto_Gpsd_LtlInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
  v49 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startContext;
  started = type metadata accessor for Proto_Gpsd_StartContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(started - 8) + 56))(v49, 1, 1, started);
  v51 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinStatusUpdate;
  v52 = type metadata accessor for Proto_Gpsd_CntinStatusMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
  v53 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setThermalRiskState;
  v54 = type metadata accessor for Proto_Gpsd_SetThermalRiskState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 1, 1, v54);
  v55 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__setConfigRfBandEnable;
  v56 = type metadata accessor for Proto_Gpsd_SetConfigRfBandEnable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
  v57 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__emergConfig;
  v58 = type metadata accessor for Proto_Gnss_Emergency_EmergConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 1, 1, v58);
  v59 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionRequest;
  v60 = type metadata accessor for Proto_Gnss_Emergency_PositionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 1, 1, v60);
  v61 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__sessionID;
  *(_DWORD *)v61 = 0;
  *(_BYTE *)(v61 + 4) = 1;
  v62 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsReferenceTime;
  v63 = type metadata accessor for Proto_Gnss_Emergency_GpsReferenceTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 1, 1, v63);
  v64 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__referenceLocation;
  v65 = type metadata accessor for Proto_Gnss_Emergency_ReferenceLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v64, 1, 1, v65);
  v66 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsNavigationModel;
  v67 = type metadata accessor for Proto_Gnss_Emergency_GpsNavigationModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 1, 1, v67);
  v68 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__gpsAcqAssistance;
  v69 = type metadata accessor for Proto_Gnss_Emergency_GpsAcqAssistance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 1, 1, v69);
  v70 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistance;
  v71 = type metadata accessor for Proto_Gnss_Emergency_CellFTAssistance(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v70, 1, 1, v71);
  v72 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneContext;
  v73 = type metadata accessor for Proto_Gnss_Emergency_CplaneContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
  v74 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitVec) = MEMORY[0x24BEE4AF8];
  v75 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__locationID;
  v76 = type metadata accessor for Proto_Gnss_Emergency_LocationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  v77 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex;
  *(_DWORD *)v77 = 0;
  *(_BYTE *)(v77 + 4) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplCert) = v74;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__servingCellLte) = 2;
  v78 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance;
  *(_DWORD *)v78 = 0;
  *(_BYTE *)(v78 + 4) = 1;
  v79 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplContext;
  v80 = type metadata accessor for Proto_Gnss_Emergency_SuplContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 1, 1, v80);
  v81 = v0
      + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_RequestP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__wlanMeasurementList;
  v82 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementList(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 1, 1, v82);
  static Proto_Gpsd_Request._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_Indication._StorageClass(0);
  v0 = swift_allocObject();
  *(_WORD *)(v0 + 16) = 15640;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  v1 = v0 + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__fix;
  v2 = type metadata accessor for Proto_Gnss_Fix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__meas;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__powerMeasurement;
  v6 = type metadata accessor for Proto_Gnss_PwrMeasurement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__status;
  v8 = type metadata accessor for Proto_Gpsd_Status(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__timeTransferDataExtend;
  v10 = type metadata accessor for Proto_Gnss_TimeTransferDataExtend(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__recoveryStatistics;
  v12 = type metadata accessor for Proto_Gpsd_RecoveryStatistics(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__ltlInfoRequest;
  v14 = type metadata accessor for Proto_Gpsd_LtlInfoRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedExtendedEphemeris;
  v16 = type metadata accessor for Proto_Gnss_DecodedExtendedEphemeris(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedRti;
  v18 = type metadata accessor for Proto_Gnss_DecodedRti(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__startStatus) = 10;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__stopStatus) = 10;
  v19 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cntinClockControl;
  v20 = type metadata accessor for Proto_Gpsd_CntinClockControl(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__exception;
  v22 = type metadata accessor for Proto_Gpsd_Exception(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__askBasebandReset;
  v24 = type metadata accessor for Proto_Gpsd_AskBasebandReset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__summaryReport;
  v26 = type metadata accessor for Proto_Gnss_Emergency_SummaryReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__positionReport;
  v28 = type metadata accessor for Proto_Gnss_Emergency_PositionReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneMeasurementReport;
  v30 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__assistanceNeededReport;
  v32 = type metadata accessor for Proto_Gnss_Emergency_AssistanceNeededReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cellFtAssistanceRequest;
  v34 = type metadata accessor for Proto_Gnss_Emergency_CellFTAssistanceRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__cplaneMeasurementReportWithEstimate;
  v36 = type metadata accessor for Proto_Gnss_Emergency_MeasurementReportWithEstimate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplSessionStatus;
  v38 = type metadata accessor for Proto_Gnss_Emergency_SessionStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__decodedSuplInit;
  v40 = type metadata accessor for Proto_Gnss_Emergency_Init(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  v41 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitIndex;
  *(_DWORD *)v41 = 0;
  *(_BYTE *)(v41 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__suplInitDecodeResult) = 4;
  v42 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__simInstance;
  *(_DWORD *)v42 = 0;
  *(_BYTE *)(v42 + 4) = 1;
  v43 = v0
      + OBJC_IVAR____TtCV10ALProtobuf21Proto_Gpsd_IndicationP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__wlanMeasurementRequest;
  v44 = type metadata accessor for Proto_Gnss_Emergency_WlanMeasurementRequest(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
  static Proto_Gpsd_Indication._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  type metadata accessor for Proto_Gpsd_LtlInfo._StorageClass(0);
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = 2;
  *(_DWORD *)(v0 + 20) = 0;
  *(_WORD *)(v0 + 24) = 1281;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__initialParams;
  v2 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlInitialParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__lutParams;
  v4 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlLutParams(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__currentSrcCalib;
  v6 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlCurrentSrcCalibData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf18Proto_Gpsd_LtlInfoP33_D7E5B2DD45535F54EF008B6FDC82B89E13_StorageClass__racPmicAdcrPreCal;
  v8 = type metadata accessor for Proto_Gpsd_LtlInfo.LtlRacPmicAdcPreCalData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  static Proto_Gpsd_LtlInfo._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  MEMORY[0x24BDAC7A8](v4);
  v54 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  MEMORY[0x24BDAC7A8](v6);
  v53 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  MEMORY[0x24BDAC7A8](v10);
  v49 = (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(_WORD *)(v1 + 32) = 1793;
  v45 = v1 + 33;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  v16 = type metadata accessor for Proto_Gpsd_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v46 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  v18 = type metadata accessor for Proto_Gpsd_Indication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v47 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  v20 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v21 = *(void (**)(void))(*(_QWORD *)(v20 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v21)(v19, 1, 1, v20);
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v48 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  v23 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v50 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  v21();
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v51 = v1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  v25 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v26;
  *(_BYTE *)(v1 + 24) = v27;
  swift_beginAccess();
  v28 = *(_DWORD *)(a1 + 28);
  LOBYTE(v26) = *(_BYTE *)(a1 + 32);
  swift_beginAccess();
  *(_DWORD *)(v2 + 28) = v28;
  *(_BYTE *)(v2 + 32) = v26;
  swift_beginAccess();
  LOBYTE(v28) = *(_BYTE *)(a1 + 33);
  swift_beginAccess();
  *(_BYTE *)(v2 + 33) = v28;
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, (uint64_t)v14, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v14, v15, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  swift_endAccess();
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  v31 = v49;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v30, v49, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v32 = v46;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v31, v32, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  swift_endAccess();
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  v34 = v52;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, v52, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v35 = v47;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v34, v35, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  swift_endAccess();
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  v37 = v53;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v53, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v38 = v48;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v37, v38, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  swift_endAccess();
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v34, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v40 = v50;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v34, v40, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  swift_endAccess();
  v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  v42 = v54;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v54, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  swift_release();
  v43 = v51;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v43, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  swift_endAccess();
  return v2;
}

uint64_t CLP_LogEntry_AONLoc_Indication._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_AONLoc_Indication.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_AONLoc_Indication._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_16;
        case 2:
          swift_beginAccess();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Response(0);
          v10 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response;
          v11 = type metadata accessor for Proto_Gpsd_Response;
          v12 = &protocol conformance descriptor for Proto_Gpsd_Response;
          goto LABEL_15;
        case 12:
          swift_beginAccess();
          type metadata accessor for Proto_Gpsd_Indication(0);
          v10 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication;
          v11 = type metadata accessor for Proto_Gpsd_Indication;
          v12 = &protocol conformance descriptor for Proto_Gpsd_Indication;
          goto LABEL_15;
        case 21:
        case 31:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response;
          v11 = type metadata accessor for CLP_LogEntry_AONLoc_Response;
          v12 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_Response;
          goto LABEL_15;
        case 22:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication;
          v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
          v12 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication;
          goto LABEL_15;
        case 32:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication;
          v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
          v12 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication;
LABEL_15:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_16:
          v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v9;

  v5 = v3;
  v9 = *(_BYTE **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (v4)
    return swift_release();
  swift_beginAccess();
  if ((v9[32] & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[33] != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #4 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Gpsd_Response(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Response);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Gpsd_Indication(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_Indication);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Response);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

BOOL closure #1 in static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t *v121;
  uint64_t *v122;
  char v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v127 = *(_QWORD *)(v4 - 8);
  v128 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v124 = (uint64_t *)((char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_BtIndication?, CLP_LogEntry_AONLoc_BtIndication?));
  MEMORY[0x24BDAC7A8](v126);
  v129 = (uint64_t)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v125 = (uint64_t *)((char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v134 = (char *)&v124 - v10;
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v137 = *(_QWORD *)(v11 - 8);
  v138 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v131 = (uint64_t *)((char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_WiFiIndication?, CLP_LogEntry_AONLoc_WiFiIndication?));
  MEMORY[0x24BDAC7A8](v136);
  v139 = (uint64_t)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v133 = (uint64_t *)((char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v141 = (uint64_t)&v124 - v17;
  v146 = type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v143 = *(_QWORD *)(v146 - 8);
  MEMORY[0x24BDAC7A8](v146);
  v135 = (uint64_t)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?));
  v19 = MEMORY[0x24BDAC7A8](v145);
  v132 = (uint64_t)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v144 = (uint64_t)&v124 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v130 = (uint64_t)&v124 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v149 = (char *)&v124 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v140 = (uint64_t)&v124 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v155 = (uint64_t)&v124 - v29;
  v153 = type metadata accessor for Proto_Gpsd_Indication(0);
  v151 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v142 = (uint64_t)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Indication?, Proto_Gpsd_Indication?));
  MEMORY[0x24BDAC7A8](v150);
  v154 = (uint64_t)&v124 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v147 = (uint64_t)&v124 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v152 = (uint64_t)&v124 - v35;
  v156 = type metadata accessor for Proto_Gpsd_Response(0);
  v36 = *(_QWORD *)(v156 - 8);
  MEMORY[0x24BDAC7A8](v156);
  v148 = (uint64_t)&v124 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Response?, Proto_Gpsd_Response?));
  MEMORY[0x24BDAC7A8](v38);
  v157 = (uint64_t)&v124 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Response?);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)&v124 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v41);
  v45 = (char *)&v124 - v44;
  swift_beginAccess();
  v46 = *(_QWORD *)(a1 + 16);
  v158 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  v47 = a2;
  v48 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v46 != *(_QWORD *)(a2 + 16))
      v48 = 1;
    if ((v48 & 1) != 0)
      return 0;
  }
  v49 = v158;
  swift_beginAccess();
  v50 = *(_DWORD *)(v49 + 28);
  v51 = *(_BYTE *)(v49 + 32);
  swift_beginAccess();
  v52 = *(_BYTE *)(v47 + 32);
  if ((v51 & 1) != 0)
  {
    if (!*(_BYTE *)(v47 + 32))
      return 0;
  }
  else
  {
    if (v50 != *(_DWORD *)(v47 + 28))
      v52 = 1;
    if ((v52 & 1) != 0)
      return 0;
  }
  v53 = v158;
  swift_beginAccess();
  v54 = *(char *)(v53 + 33);
  v55 = v47;
  swift_beginAccess();
  v56 = *(char *)(v47 + 33);
  if (v54 == 7)
  {
    if ((_DWORD)v56 != 7)
      return 0;
  }
  else if ((_DWORD)v56 == 7 || qword_235BB6BD8[v54] != qword_235BB6BD8[v56])
  {
    return 0;
  }
  v57 = v53
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, (uint64_t)v45, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  v58 = v47
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdResponse;
  swift_beginAccess();
  v59 = v157;
  v60 = v157 + *(int *)(v38 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, v157, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v60, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  v62 = v156;
  if (v61(v59, 1, v156) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
    if (v61(v60, 1, v62) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
      v63 = v53;
      goto LABEL_25;
    }
LABEL_23:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for (Proto_Gpsd_Response?, Proto_Gpsd_Response?));
    goto LABEL_41;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, (uint64_t)v43, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if (v61(v60, 1, v62) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
    goto LABEL_23;
  }
  v64 = v148;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v60, v148, type metadata accessor for Proto_Gpsd_Response);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Response and conformance Proto_Gpsd_Response, type metadata accessor for Proto_Gpsd_Response, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Response);
  swift_retain();
  swift_retain();
  v65 = v59;
  v63 = v53;
  v66 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, type metadata accessor for Proto_Gpsd_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for Proto_Gpsd_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, &demangling cache variable for type metadata for Proto_Gpsd_Response?);
  if ((v66 & 1) == 0)
    goto LABEL_41;
LABEL_25:
  v67 = v63
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  v68 = v152;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v152, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v69 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__gpsdIndication;
  swift_beginAccess();
  v70 = v154;
  v71 = v154 + *(int *)(v150 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v154, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v71, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48);
  v73 = v153;
  if (v72(v70, 1, v153) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
    v74 = v72(v71, 1, v73);
    v75 = (uint64_t)v149;
    v76 = v155;
    if (v74 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
      goto LABEL_34;
    }
LABEL_30:
    v79 = &demangling cache variable for type metadata for (Proto_Gpsd_Indication?, Proto_Gpsd_Indication?);
LABEL_31:
    v80 = v70;
LABEL_40:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v79);
    goto LABEL_41;
  }
  v77 = v147;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v147, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v78 = v72(v71, 1, v73);
  v76 = v155;
  if (v78 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, type metadata accessor for Proto_Gpsd_Indication);
    goto LABEL_30;
  }
  v81 = v68;
  v82 = v77;
  v83 = v142;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v71, v142, type metadata accessor for Proto_Gpsd_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Indication and conformance Proto_Gpsd_Indication, type metadata accessor for Proto_Gpsd_Indication, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Indication);
  v84 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v83, type metadata accessor for Proto_Gpsd_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  v75 = (uint64_t)v149;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v82, type metadata accessor for Proto_Gpsd_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for Proto_Gpsd_Indication?);
  if ((v84 & 1) == 0)
  {
LABEL_41:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_34:
  v85 = v158
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, v76, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v86 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiResponse;
  swift_beginAccess();
  v87 = v144;
  v88 = v144 + *(int *)(v145 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, v144, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v88, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v89 = v76;
  v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48);
  v91 = v146;
  if (v90(v87, 1, v146) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    if (v90(v88, 1, v91) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
      goto LABEL_44;
    }
LABEL_39:
    v79 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?);
    v80 = v87;
    goto LABEL_40;
  }
  v92 = v140;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v140, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if (v90(v88, 1, v91) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_AONLoc_Response);
    goto LABEL_39;
  }
  v94 = v135;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v88, v135, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v95 = specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(v92, v94);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v94, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((v95 & 1) == 0)
    goto LABEL_41;
LABEL_44:
  v96 = v158
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  v97 = v141;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v96, v141, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v98 = v55
      + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__wifiIndication;
  swift_beginAccess();
  v70 = v139;
  v99 = v139 + *(int *)(v136 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, v139, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v99, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v100 = v138;
  v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
  if (v101(v70, 1, v138) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
    if (v101(v99, 1, v100) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
      v102 = (uint64_t)v134;
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  v103 = v133;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, (uint64_t)v133, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  v104 = v101(v99, 1, v100);
  v102 = (uint64_t)v134;
  if (v104 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v141, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
LABEL_49:
    v79 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_WiFiIndication?, CLP_LogEntry_AONLoc_WiFiIndication?);
    goto LABEL_31;
  }
  v105 = v131;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v99, (uint64_t)v131, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  v106 = specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(v103, v105, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v105, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v141, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v103, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?);
  if ((v106 & 1) == 0)
    goto LABEL_41;
LABEL_51:
  v107 = v158
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v107, v75, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v108 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btResponse;
  swift_beginAccess();
  v70 = v132;
  v109 = v132 + *(int *)(v145 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v132, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, v109, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  v110 = v146;
  if (v90(v70, 1, v146) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    if (v90(v109, 1, v110) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  v111 = v130;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v130, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if (v90(v109, 1, v110) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v111, type metadata accessor for CLP_LogEntry_AONLoc_Response);
LABEL_56:
    v79 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Response?, CLP_LogEntry_AONLoc_Response?);
    goto LABEL_31;
  }
  v112 = v111;
  v113 = v135;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, v135, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  v114 = specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(v112, v113);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v113, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v112, type metadata accessor for CLP_LogEntry_AONLoc_Response);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Response?);
  if ((v114 & 1) == 0)
    goto LABEL_41;
LABEL_58:
  v115 = v158
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, v102, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  v116 = v55
       + OBJC_IVAR____TtCV10ALProtobuf30CLP_LogEntry_AONLoc_IndicationP33_D216972680E803847292720624A2662713_StorageClass__btIndication;
  swift_beginAccess();
  v117 = v129;
  v118 = v129 + *(int *)(v126 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, v129, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, v118, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  v119 = v128;
  v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
  if (v120(v117, 1, v128) != 1)
  {
    v121 = v125;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, (uint64_t)v125, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    if (v120(v118, 1, v119) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v121, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
      goto LABEL_63;
    }
    v122 = v124;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v118, (uint64_t)v124, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    v123 = specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(v121, v122, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification);
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v122, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v121, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
    return (v123 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  if (v120(v118, 1, v119) != 1)
  {
LABEL_63:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_BtIndication?, CLP_LogEntry_AONLoc_BtIndication?));
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?);
  return 1;
}

Swift::Int CLP_LogEntry_AONLoc_Indication.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_Indication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_Indication@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static CLP_LogEntry_AONLoc_Indication._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_Indication()
{
  return CLP_LogEntry_AONLoc_Indication.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_Indication.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_Indication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Indication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_Indication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_Indication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Indication.TypeEnum@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_Indication.TypeEnum._protobuf_nameMap, a1);
}

void *CLP_LogEntry_AONLoc_LogEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_AONLoc_LogEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_AONLoc_LogEntry.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
        type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
        v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request;
        v4 = type metadata accessor for CLP_LogEntry_AONLoc_Request;
        v5 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_Request;
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication;
    v4 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v5 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(v3, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Request);
}

uint64_t closure #2 in CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
}

Swift::Int CLP_LogEntry_AONLoc_LogEntry.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

Swift::Int CLP_LogEntry_AONLoc_Request.hashValue.getter(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_AONLoc_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 24);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_AONLoc_LogEntry()
{
  return CLP_LogEntry_AONLoc_LogEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_AONLoc_LogEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_AONLoc_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_LogEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_AONLoc_LogEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_AONLoc_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CLP_LogEntry_AONLoc_Request()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_AONLoc_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CLP_LogEntry_AONLoc_Request()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v24;
  uint64_t v26;
  unint64_t *v27;

  v10 = a3(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v26 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v22 = 1;
    }
    else
    {
      v26 = a1;
      v27 = a4;
      v18 = a2;
      v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v20 = *(_QWORD *)(v14 + 72);
      v21 = v17 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v26 + v19, (uint64_t)v16, a3);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v18 + v19, (uint64_t)v13, a3);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v27, a3, a5);
        v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a3);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, a3);
        v24 = v21-- != 0;
        if ((v22 & 1) == 0)
          break;
        v19 += v20;
      }
      while (v24);
    }
  }
  else
  {
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a2 + 16))
  {
    if (!v3 || a1 == a2)
    {
      v7 = 1;
    }
    else
    {
      v4 = a1 + 32;
      v5 = a2 + 32;
      a3();
      v6 = v3 - 1;
      do
      {
        ++v4;
        ++v5;
        v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        v9 = v6-- != 0;
      }
      while ((v7 & 1) != 0 && v9);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized CLP_LogEntry_AONLoc_Request.TypeEnum.init(rawValue:)(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 11:
      result = 2;
      break;
    case 21:
      result = 3;
      break;
    case 31:
      result = 4;
      break;
    default:
      result = 5;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Response);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Indication);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_Indication._StorageClass);
}

uint64_t outlined init with take of Proto_Gpsd_Response?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Proto_Gpsd_Response?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t specialized CLP_LogEntry_AONLoc_Indication.TypeEnum.init(rawValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 10:
      result = 1;
      break;
    case 11:
      result = 2;
      break;
    case 20:
      result = 3;
      break;
    case 21:
      result = 4;
      break;
    case 30:
      result = 5;
      break;
    case 31:
      result = 6;
      break;
    default:
      result = 7;
      break;
  }
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized static CLP_LogEntry_AONLoc_WiFiIndication.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;

  v12 = type metadata accessor for UnknownStorage();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v34 - v17;
  v19 = a3(0);
  v20 = v19;
  v21 = *(int *)(v19 + 24);
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = *((_BYTE *)a1 + v21 + 8);
  v24 = (uint64_t *)((char *)a2 + v21);
  v25 = *((unsigned __int8 *)a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_14;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_14;
  }
  v26 = *(int *)(v19 + 28);
  v27 = *((unsigned __int8 *)a1 + v26);
  v28 = *((unsigned __int8 *)a2 + v26);
  if (v27 == 2)
  {
    if (v28 != 2)
    {
LABEL_14:
      v31 = 0;
      return v31 & 1;
    }
  }
  else if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
  {
    goto LABEL_14;
  }
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, a4, a5, a6) & 1) == 0)
    goto LABEL_14;
  v29 = (char *)a1 + *(int *)(v20 + 20);
  v30 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v30(v18, v29, v12);
  v30(v16, (char *)a2 + *(int *)(v20 + 20), v12);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  v32 = *(void (**)(char *, uint64_t))(v13 + 8);
  v32(v16, v12);
  v32(v18, v12);
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Response.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  char v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v27[16];

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v27[-v9];
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Response(0);
  v12 = v11[5];
  v13 = *(char *)(a1 + v12);
  v14 = *(char *)(a2 + v12);
  if (v13 == 5)
  {
    if ((_DWORD)v14 != 5)
      goto LABEL_18;
  }
  else if ((_DWORD)v14 == 5 || qword_235BB6C10[v13] != qword_235BB6C10[v14])
  {
    goto LABEL_18;
  }
  v15 = v11[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 8);
  v18 = (_QWORD *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 8);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      goto LABEL_18;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      goto LABEL_18;
  }
  v20 = v11[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 == 10)
      goto LABEL_17;
LABEL_18:
    v24 = 0;
    return v24 & 1;
  }
  v27[15] = v21;
  if (v22 == 10)
    goto LABEL_18;
  v27[14] = v22;
  lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    goto LABEL_18;
LABEL_17:
  v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v23(v10, a1, v4);
  v23(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v25(v10, v4);
  return v24 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_AONLoc_Indication(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_LogEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a1;
  v68 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v56 = (char *)&v55 - v5;
  v65 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v62 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v55 = (uint64_t)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Indication?, CLP_LogEntry_AONLoc_Indication?));
  MEMORY[0x24BDAC7A8](v61);
  v66 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v60 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t)&v55 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v64 = (uint64_t)&v55 - v13;
  v14 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request?, CLP_LogEntry_AONLoc_Request?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v55 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v55 - v28;
  v30 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67 + *(int *)(v30 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68 + *(int *)(v30 + 20), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    if (v32(v31, 1, v14) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      v35 = specialized static CLP_LogEntry_AONLoc_Request.== infix(_:_:)((uint64_t)v24, (uint64_t)v17);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      if ((v35 & 1) == 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_Request);
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request?, CLP_LogEntry_AONLoc_Request?);
    v34 = (uint64_t)v20;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_15;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
  if (v32(v31, 1, v14) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
LABEL_8:
  v36 = v67;
  v37 = v64;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67 + *(int *)(v30 + 24), v64, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v38 = v68;
  v39 = v63;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68 + *(int *)(v30 + 24), v63, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v40 = v66;
  v41 = v66 + *(int *)(v61 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, v66, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, v41, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  v43 = v65;
  if (v42(v40, 1, v65) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    if (v42(v41, 1, v43) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
LABEL_18:
      v50 = v58;
      v49 = v59;
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
      v52 = v56;
      v51(v56, v36, v59);
      v53 = v57;
      v51(v57, v38, v49);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v45 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v54(v53, v49);
      v54(v52, v49);
      return v45 & 1;
    }
    goto LABEL_13;
  }
  v44 = v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v60, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if (v42(v41, 1, v43) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
LABEL_13:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Indication?, CLP_LogEntry_AONLoc_Indication?);
    v34 = v40;
    goto LABEL_14;
  }
  v47 = v55;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v41, v55, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  v48 = specialized static CLP_LogEntry_AONLoc_Indication.== infix(_:_:)(v44, v47);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
  if ((v48 & 1) != 0)
    goto LABEL_18;
LABEL_15:
  v45 = 0;
  return v45 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Request.ResultOptions.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  char v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  double *v37;
  char v38;
  double *v39;
  int v40;
  uint64_t v41;
  double *v42;
  char v43;
  double *v44;
  int v45;
  char v46;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v51 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v12 = v11;
  v13 = v11[8];
  v14 = *((unsigned __int8 *)a1 + v13);
  v15 = *((unsigned __int8 *)a2 + v13);
  if (v14 == 2)
  {
    if (v15 != 2)
      goto LABEL_41;
  }
  else if (v15 == 2 || ((((v15 & 1) == 0) ^ v14) & 1) == 0)
  {
    goto LABEL_41;
  }
  v16 = v11[9];
  v17 = (_DWORD *)((char *)a1 + v16);
  v18 = *((_BYTE *)a1 + v16 + 4);
  v19 = (_DWORD *)((char *)a2 + v16);
  v20 = *((unsigned __int8 *)a2 + v16 + 4);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_41;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_41;
  }
  v21 = v11[10];
  v22 = (float *)((char *)a1 + v21);
  v23 = *((_BYTE *)a1 + v21 + 4);
  v24 = (float *)((char *)a2 + v21);
  v25 = *((unsigned __int8 *)a2 + v21 + 4);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_41;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_41;
  }
  v26 = v11[11];
  v27 = (float *)((char *)a1 + v26);
  v28 = *((_BYTE *)a1 + v26 + 4);
  v29 = (float *)((char *)a2 + v26);
  v30 = *((unsigned __int8 *)a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_41;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_41;
  }
  v31 = v11[12];
  v32 = (_DWORD *)((char *)a1 + v31);
  v33 = *((_BYTE *)a1 + v31 + 4);
  v34 = (_DWORD *)((char *)a2 + v31);
  v35 = *((unsigned __int8 *)a2 + v31 + 4);
  if ((v33 & 1) != 0)
  {
    if (!v35)
      goto LABEL_41;
  }
  else
  {
    if (*v32 != *v34)
      LOBYTE(v35) = 1;
    if ((v35 & 1) != 0)
      goto LABEL_41;
  }
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2, (void (*)(void))lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType) & 1) == 0|| (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1], (void (*)(void))lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand) & 1) == 0|| !specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
  {
    goto LABEL_41;
  }
  v36 = v12[13];
  v37 = (double *)((char *)a1 + v36);
  v38 = *((_BYTE *)a1 + v36 + 8);
  v39 = (double *)((char *)a2 + v36);
  v40 = *((unsigned __int8 *)a2 + v36 + 8);
  if ((v38 & 1) != 0)
  {
    if (!v40)
      goto LABEL_41;
  }
  else
  {
    if (*v37 != *v39)
      LOBYTE(v40) = 1;
    if ((v40 & 1) != 0)
      goto LABEL_41;
  }
  v41 = v12[14];
  v42 = (double *)((char *)a1 + v41);
  v43 = *((_BYTE *)a1 + v41 + 8);
  v44 = (double *)((char *)a2 + v41);
  v45 = *((unsigned __int8 *)a2 + v41 + 8);
  if ((v43 & 1) == 0)
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_41;
LABEL_46:
    v48 = (char *)a1 + v12[7];
    v49 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v49(v10, v48, v4);
    v49(v8, (char *)a2 + v12[7], v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    v50 = *(void (**)(char *, uint64_t))(v5 + 8);
    v50(v8, v4);
    v50(v10, v4);
    return v46 & 1;
  }
  if (v45)
    goto LABEL_46;
LABEL_41:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_AONLoc_Request.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  int *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  char v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  char v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;

  v4 = type metadata accessor for UnknownStorage();
  v82 = *(_QWORD *)(v4 - 8);
  v83 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v81 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v80 = (char *)&v77 - v7;
  v89 = type metadata accessor for Proto_Gpsd_Request(0);
  v86 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v79 = (uint64_t)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_Request?, Proto_Gpsd_Request?));
  MEMORY[0x24BDAC7A8](v85);
  v90 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v84 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t)&v77 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v88 = (uint64_t)&v77 - v15;
  v16 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request.ResultOptions?, CLP_LogEntry_AONLoc_Request.ResultOptions?));
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (uint64_t *)((char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v77 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)&v77 - v30;
  v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v33 = a2;
  v34 = v32;
  v35 = v32[5];
  v36 = (_QWORD *)(a1 + v35);
  v37 = *(_BYTE *)(a1 + v35 + 8);
  v38 = (_QWORD *)(v33 + v35);
  v39 = *(unsigned __int8 *)(v33 + v35 + 8);
  if ((v37 & 1) != 0)
  {
    if (!v39)
      goto LABEL_38;
  }
  else
  {
    if (*v36 != *v38)
      LOBYTE(v39) = 1;
    if ((v39 & 1) != 0)
      goto LABEL_38;
  }
  v40 = v32[6];
  v41 = (_DWORD *)(a1 + v40);
  v42 = *(_BYTE *)(a1 + v40 + 4);
  v43 = (_DWORD *)(v33 + v40);
  v44 = *(unsigned __int8 *)(v33 + v40 + 4);
  if ((v42 & 1) != 0)
  {
    if (!v44)
      goto LABEL_38;
  }
  else
  {
    if (*v41 != *v43)
      LOBYTE(v44) = 1;
    if ((v44 & 1) != 0)
      goto LABEL_38;
  }
  v45 = v32[7];
  v46 = (_DWORD *)(a1 + v45);
  v47 = *(_BYTE *)(a1 + v45 + 4);
  v48 = (_DWORD *)(v33 + v45);
  v49 = *(unsigned __int8 *)(v33 + v45 + 4);
  if ((v47 & 1) != 0)
  {
    if (!v49)
      goto LABEL_38;
  }
  else
  {
    if (*v46 != *v48)
      LOBYTE(v49) = 1;
    if ((v49 & 1) != 0)
      goto LABEL_38;
  }
  v50 = v32[8];
  v51 = *(char *)(a1 + v50);
  v52 = *(char *)(v33 + v50);
  if (v51 == 5)
  {
    if ((_DWORD)v52 != 5)
      goto LABEL_38;
  }
  else if ((_DWORD)v52 == 5 || qword_235BB6C10[v51] != qword_235BB6C10[v52])
  {
    goto LABEL_38;
  }
  v53 = v32[9];
  v77 = a1;
  v54 = a1 + v53;
  v55 = v33;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v56 = v34[9];
  v78 = v55;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55 + v56, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v57 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v57, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v58((uint64_t)v22, 1, v16) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v26, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    if (v58(v57, 1, v16) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, (uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      v60 = specialized static CLP_LogEntry_AONLoc_Request.ResultOptions.== infix(_:_:)(v26, v19);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      if ((v60 & 1) == 0)
        goto LABEL_38;
      goto LABEL_31;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v26, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_29:
    v59 = &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_Request.ResultOptions?, CLP_LogEntry_AONLoc_Request.ResultOptions?);
LABEL_37:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v59);
    goto LABEL_38;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
  if (v58(v57, 1, v16) != 1)
    goto LABEL_29;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
LABEL_31:
  v61 = v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + v34[10], v88, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v62 = v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v78 + v34[10], v87, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v22 = v90;
  v63 = (uint64_t)&v90[*(int *)(v85 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, (uint64_t)v90, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v63, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  v65 = v89;
  if (v64((uint64_t)v22, 1, v89) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    if (v64(v63, 1, v65) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
LABEL_41:
      v72 = v82;
      v71 = v83;
      v73 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
      v74 = v80;
      v73(v80, v77, v83);
      v75 = v81;
      v73(v81, v78, v71);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v76 = *(void (**)(char *, uint64_t))(v72 + 8);
      v76(v75, v71);
      v76(v74, v71);
      return v67 & 1;
    }
    goto LABEL_36;
  }
  v66 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, v84, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if (v64(v63, 1, v65) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for Proto_Gpsd_Request);
LABEL_36:
    v59 = &demangling cache variable for type metadata for (Proto_Gpsd_Request?, Proto_Gpsd_Request?);
    goto LABEL_37;
  }
  v69 = v79;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, v79, type metadata accessor for Proto_Gpsd_Request);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_Request and conformance Proto_Gpsd_Request, type metadata accessor for Proto_Gpsd_Request, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_Request);
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, type metadata accessor for Proto_Gpsd_Request);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for Proto_Gpsd_Request);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for Proto_Gpsd_Request?);
  if ((v70 & 1) != 0)
    goto LABEL_41;
LABEL_38:
  v67 = 0;
  return v67 & 1;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtAdvertisement.BtType, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtAdvertisement.BtType, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtAdvertisement.BtType, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtAdvertisement.BtType, &type metadata for CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement.BtType and conformance CLP_LogEntry_AONLoc_BtAdvertisement.BtType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiRfBand, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiRfBand, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiRfBand, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiRfBand, &type metadata for CLP_LogEntry_PrivateData_WifiRfBand);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B7DBD20](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.TypeEnum and conformance CLP_LogEntry_AONLoc_Request.TypeEnum);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_AONLoc_Request.TypeEnum]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7DBD14](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication.TypeEnum, &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_AONLoc_Indication.TypeEnum] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_AONLoc_Indication.TypeEnum]);
}

uint64_t lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B7DBD20](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Request()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Response()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Response and conformance CLP_LogEntry_AONLoc_Response, type metadata accessor for CLP_LogEntry_AONLoc_Response, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Response);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_WiFiIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_WiFiIndication and conformance CLP_LogEntry_AONLoc_WiFiIndication, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_BtIndication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtIndication and conformance CLP_LogEntry_AONLoc_BtIndication, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_Indication()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_AONLoc_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, _QWORD, uint64_t, uint64_t);
  char *v55;
  char *v56;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = &a1[v10];
    v14 = &a2[v10];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    v15 = a3[7];
    v16 = a3[8];
    v17 = &a1[v15];
    v18 = &a2[v15];
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v19 = a2[v16];
    v17[4] = v18[4];
    a1[v16] = v19;
    v20 = a3[9];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v23 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v24 = *((_QWORD *)v23 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v27 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = v27;
      *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
      v28 = v23[7];
      v55 = &v22[v28];
      v56 = &v21[v28];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(v56, v55, v7);
      v21[v23[8]] = v22[v23[8]];
      v29 = v23[9];
      v30 = &v21[v29];
      v31 = &v22[v29];
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v32 = v23[10];
      v33 = &v21[v32];
      v34 = &v22[v32];
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v23[11];
      v36 = &v21[v35];
      v37 = &v22[v35];
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v23[12];
      v39 = &v21[v38];
      v40 = &v22[v38];
      v39[4] = v40[4];
      *(_DWORD *)v39 = *(_DWORD *)v40;
      v41 = v23[13];
      v42 = &v21[v41];
      v43 = &v22[v41];
      v42[8] = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = v23[14];
      v45 = &v21[v44];
      v46 = &v22[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
    }
    v47 = a3[10];
    v48 = &a1[v47];
    v49 = &a2[v47];
    v50 = type metadata accessor for Proto_Gpsd_Request(0);
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v8(v48, v49, v7);
      *(_QWORD *)&v48[*(int *)(v50 + 20)] = *(_QWORD *)&v49[*(int *)(v50 + 20)];
      v53 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56);
      swift_retain();
      v53(v48, 0, 1, v50);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 36);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 28), v4);
  }
  v8 = a1 + *(int *)(a2 + 40);
  v9 = type metadata accessor for Proto_Gpsd_Request(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v5(v8, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  char *v53;
  char *v54;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = v21[1];
    *v20 = *v21;
    v20[1] = v25;
    v20[2] = v21[2];
    v26 = v22[7];
    v53 = (char *)v21 + v26;
    v54 = (char *)v20 + v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7((uint64_t)v54, (uint64_t)v53, v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    v27 = v22[9];
    v28 = (char *)v20 + v27;
    v29 = (char *)v21 + v27;
    v28[4] = v29[4];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v30 = v22[10];
    v31 = (char *)v20 + v30;
    v32 = (char *)v21 + v30;
    v31[4] = v32[4];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v33 = v22[11];
    v34 = (char *)v20 + v33;
    v35 = (char *)v21 + v33;
    v34[4] = v35[4];
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v36 = v22[12];
    v37 = (char *)v20 + v36;
    v38 = (char *)v21 + v36;
    v37[4] = v38[4];
    *(_DWORD *)v37 = *(_DWORD *)v38;
    v39 = v22[13];
    v40 = (char *)v20 + v39;
    v41 = (char *)v21 + v39;
    v40[8] = v41[8];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v42 = v22[14];
    v43 = (char *)v20 + v42;
    v44 = (char *)v21 + v42;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v45 = a3[10];
  v46 = (char *)(a1 + v45);
  v47 = (char *)(a2 + v45);
  v48 = type metadata accessor for Proto_Gpsd_Request(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v46, (uint64_t)v47, v6);
    *(_QWORD *)&v46[*(int *)(v48 + 20)] = *(_QWORD *)&v47[*(int *)(v48 + 20)];
    v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56);
    swift_retain();
    v51(v46, 0, 1, v48);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, int *);
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;

  v6 = type metadata accessor for UnknownStorage();
  v92 = *(_QWORD *)(v6 - 8);
  v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 24);
  v91(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v21 = *((_QWORD *)v20 - 1);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *v18 = *v19;
      v18[1] = v19[1];
      v18[2] = v19[2];
      v25 = v20[7];
      v90 = v6;
      v26 = (char *)v18 + v25;
      v88 = (char *)v19 + v25;
      v89 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = v26;
      v6 = v90;
      v89(v27, v88, v90);
      *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
      v28 = v20[9];
      v29 = (char *)v18 + v28;
      v30 = (char *)v19 + v28;
      v31 = v30[4];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v29[4] = v31;
      v32 = v20[10];
      v33 = (char *)v18 + v32;
      v34 = (char *)v19 + v32;
      v35 = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v35;
      v36 = v20[11];
      v37 = (char *)v18 + v36;
      v38 = (char *)v19 + v36;
      v39 = v38[4];
      *(_DWORD *)v37 = *(_DWORD *)v38;
      v37[4] = v39;
      v40 = v20[12];
      v41 = (char *)v18 + v40;
      v42 = (char *)v19 + v40;
      v43 = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v41[4] = v43;
      v44 = v20[13];
      v45 = (char *)v18 + v44;
      v46 = (char *)v19 + v44;
      v47 = v46[8];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v47;
      v48 = v20[14];
      v49 = (char *)v18 + v48;
      v50 = (char *)v19 + v48;
      v51 = *(_QWORD *)v50;
      v49[8] = v50[8];
      *(_QWORD *)v49 = v51;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_7;
  }
  *v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18[2] = v19[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v91((uint64_t)v18 + v20[7], (uint64_t)v19 + v20[7], v6);
  *((_BYTE *)v18 + v20[8]) = *((_BYTE *)v19 + v20[8]);
  v64 = v20[9];
  v65 = (char *)v18 + v64;
  v66 = (char *)v19 + v64;
  v67 = v66[4];
  *(_DWORD *)v65 = *(_DWORD *)v66;
  v65[4] = v67;
  v68 = v20[10];
  v69 = (char *)v18 + v68;
  v70 = (char *)v19 + v68;
  v71 = v70[4];
  *(_DWORD *)v69 = *(_DWORD *)v70;
  v69[4] = v71;
  v72 = v20[11];
  v73 = (char *)v18 + v72;
  v74 = (char *)v19 + v72;
  v75 = v74[4];
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v73[4] = v75;
  v76 = v20[12];
  v77 = (char *)v18 + v76;
  v78 = (char *)v19 + v76;
  v79 = v78[4];
  *(_DWORD *)v77 = *(_DWORD *)v78;
  v77[4] = v79;
  v80 = v20[13];
  v81 = (char *)v18 + v80;
  v82 = (char *)v19 + v80;
  v83 = v82[8];
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v81[8] = v83;
  v84 = v20[14];
  v85 = (char *)v18 + v84;
  v86 = (char *)v19 + v84;
  v87 = *(_QWORD *)v86;
  v85[8] = v86[8];
  *(_QWORD *)v85 = v87;
LABEL_7:
  v53 = a3[10];
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = type metadata accessor for Proto_Gpsd_Request(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      v91((uint64_t)v54, (uint64_t)v55, v6);
      *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v54, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v60)
  {
LABEL_12:
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v54, v55, v6);
  *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
  v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56);
  swift_retain();
  v61(v54, 0, 1, v56);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[7];
  v15 = a3[8];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v18 = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(a1 + v15) = v18;
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
    v20[2] = v21[2];
    v7((uint64_t)v20 + v22[7], (uint64_t)v21 + v22[7], v6);
    *((_BYTE *)v20 + v22[8]) = *((_BYTE *)v21 + v22[8]);
    v25 = v22[9];
    v26 = (char *)v20 + v25;
    v27 = (char *)v21 + v25;
    v26[4] = v27[4];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v28 = v22[10];
    v29 = (char *)v20 + v28;
    v30 = (char *)v21 + v28;
    v29[4] = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v31 = v22[11];
    v32 = (char *)v20 + v31;
    v33 = (char *)v21 + v31;
    v32[4] = v33[4];
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v34 = v22[12];
    v35 = (char *)v20 + v34;
    v36 = (char *)v21 + v34;
    v35[4] = v36[4];
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v37 = v22[13];
    v38 = (char *)v20 + v37;
    v39 = (char *)v21 + v37;
    v38[8] = v39[8];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v40 = v22[14];
    v41 = (char *)v20 + v40;
    v42 = (char *)v21 + v40;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  v43 = a3[10];
  v44 = (char *)(a1 + v43);
  v45 = (char *)(a2 + v43);
  v46 = type metadata accessor for Proto_Gpsd_Request(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v44, (uint64_t)v45, v6);
    *(_QWORD *)&v44[*(int *)(v46 + 20)] = *(_QWORD *)&v45[*(int *)(v46 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, int *);
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;

  v6 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v6 - 8);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 40);
  v73(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_BYTE *)(a1 + v14) = v17;
  v18 = a3[9];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v22 = *((_QWORD *)v21 - 1);
  v23 = *(uint64_t (**)(char *, uint64_t, int *))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v19[v21[7]], &v20[v21[7]], v6);
      v19[v21[8]] = v20[v21[8]];
      v26 = v21[9];
      v27 = &v19[v26];
      v28 = &v20[v26];
      v27[4] = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v29 = v21[10];
      v30 = &v19[v29];
      v31 = &v20[v29];
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v32 = v21[11];
      v33 = &v19[v32];
      v34 = &v20[v32];
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v21[12];
      v36 = &v19[v35];
      v37 = &v20[v35];
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v21[13];
      v39 = &v19[v38];
      v40 = &v20[v38];
      v39[8] = v40[8];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v41 = v21[14];
      v42 = &v19[v41];
      v43 = &v20[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
LABEL_6:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRelease();
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  swift_bridgeObjectRelease();
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  swift_bridgeObjectRelease();
  v73((uint64_t)&v19[v21[7]], (uint64_t)&v20[v21[7]], v6);
  v19[v21[8]] = v20[v21[8]];
  v55 = v21[9];
  v56 = &v19[v55];
  v57 = &v20[v55];
  v56[4] = v57[4];
  *(_DWORD *)v56 = *(_DWORD *)v57;
  v58 = v21[10];
  v59 = &v19[v58];
  v60 = &v20[v58];
  v59[4] = v60[4];
  *(_DWORD *)v59 = *(_DWORD *)v60;
  v61 = v21[11];
  v62 = &v19[v61];
  v63 = &v20[v61];
  v62[4] = v63[4];
  *(_DWORD *)v62 = *(_DWORD *)v63;
  v64 = v21[12];
  v65 = &v19[v64];
  v66 = &v20[v64];
  v65[4] = v66[4];
  *(_DWORD *)v65 = *(_DWORD *)v66;
  v67 = v21[13];
  v68 = &v19[v67];
  v69 = &v20[v67];
  v68[8] = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = v21[14];
  v71 = &v19[v70];
  v72 = &v20[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v72[8];
LABEL_7:
  v45 = a3[10];
  v46 = (char *)(a1 + v45);
  v47 = (char *)(a2 + v45);
  v48 = type metadata accessor for Proto_Gpsd_Request(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (!v51)
  {
    if (!v52)
    {
      v73((uint64_t)v46, (uint64_t)v47, v6);
      *(_QWORD *)&v46[*(int *)(v48 + 20)] = *(_QWORD *)&v47[*(int *)(v48 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v46, type metadata accessor for Proto_Gpsd_Request);
    goto LABEL_12;
  }
  if (v52)
  {
LABEL_12:
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v46, v47, v6);
  *(_QWORD *)&v46[*(int *)(v48 + 20)] = *(_QWORD *)&v47[*(int *)(v48 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235940924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + a3[8]) <= 5u)
      v9 = 5;
    else
      v9 = *(unsigned __int8 *)(a1 + a3[8]);
    v10 = v9 - 5;
    if (*(unsigned __int8 *)(a1 + a3[8]) >= 5u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v13 = v11;
      v14 = a3[9];
    }
    else
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      v12 = *(_QWORD *)(v13 - 8);
      v14 = a3[10];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1 + v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235940A08(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + a4[8]) = a2 + 5;
      return result;
    }
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[9];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[10];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_AONLoc_Request()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Request?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Request);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_235940CEC + 4 * byte_235BB5D8C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_235940D20 + 4 * byte_235BB5D87[v4]))();
}

uint64_t sub_235940D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235940D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235940D30);
  return result;
}

uint64_t sub_235940D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235940D44);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_235940D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235940D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for CLP_LogEntry_AONLoc_Request.TypeEnum(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CLP_LogEntry_AONLoc_Request.TypeEnum(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Request.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Request.TypeEnum;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Request.ResultOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[9];
    *((_BYTE *)v7 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v17 = a3[10];
    v18 = a3[11];
    v19 = (char *)v7 + v17;
    v20 = (char *)a2 + v17;
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v21 = (char *)v7 + v18;
    v22 = (char *)a2 + v18;
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = a3[12];
    v24 = a3[13];
    v25 = (char *)v7 + v23;
    v26 = (char *)a2 + v23;
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v25[4] = v26[4];
    v27 = (char *)v7 + v24;
    v28 = (char *)a2 + v24;
    v29 = *(_QWORD *)v28;
    v27[8] = v28[8];
    *(_QWORD *)v27 = v29;
    v30 = a3[14];
    v31 = (char *)v7 + v30;
    v32 = (char *)a2 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CLP_LogEntry_AONLoc_Request.ResultOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v13[4] = v14[4];
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v15 = a3[10];
  v16 = a3[11];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  v17[4] = v18[4];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = (char *)a1 + v16;
  v20 = (char *)a2 + v16;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v20[4];
  v21 = a3[12];
  v22 = a3[13];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  v23[4] = v24[4];
  v25 = (char *)a1 + v22;
  v26 = (char *)a2 + v22;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  v28 = a3[14];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_AONLoc_Request.ResultOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v10 = a3[9];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v11[4] = v13;
  v14 = a3[10];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v17;
  v18 = a3[11];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v19[4] = v21;
  v22 = a3[12];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = v24[4];
  *(_DWORD *)v23 = *(_DWORD *)v24;
  v23[4] = v25;
  v26 = a3[13];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = v28[8];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v29;
  v30 = a3[14];
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = *(_QWORD *)v32;
  v31[8] = v32[8];
  *(_QWORD *)v31 = v33;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Request.ResultOptions(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[10];
  v14 = a3[11];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[12];
  v20 = a3[13];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = (uint64_t *)(a2 + v20);
  v25 = *v24;
  *(_BYTE *)(v23 + 8) = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  v26 = a3[14];
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_AONLoc_Request.ResultOptions(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v11[4] = v12[4];
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = a3[10];
  v14 = a3[11];
  v15 = (char *)a1 + v13;
  v16 = (char *)a2 + v13;
  v15[4] = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v17 = (char *)a1 + v14;
  v18 = (char *)a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = a3[12];
  v20 = a3[13];
  v21 = (char *)a1 + v19;
  v22 = (char *)a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v23 = (char *)a1 + v20;
  v24 = (char *)a2 + v20;
  v25 = *(_QWORD *)v24;
  v23[8] = v24[8];
  *(_QWORD *)v23 = v25;
  v26 = a3[14];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235941450(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2359414D8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Request.ResultOptions()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Response(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Response(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359418DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23594196C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Response()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_WiFiIndication()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_WiFiIndication()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_WiFiIndication(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (char *)v7 + v13;
    v16 = (char *)a2 + v13;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)v7 + v14) = *((_BYTE *)a2 + v14);
  }
  return v7;
}

uint64_t destroy for CLP_LogEntry_AONLoc_WiFiIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for CLP_LogEntry_AONLoc_WiFiIndication(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (char *)a1 + v11;
  v14 = (char *)a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_AONLoc_WiFiIndication(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)v12;
  v11[8] = v12[8];
  *(_QWORD *)v11 = v13;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *initializeWithTake for CLP_LogEntry_AONLoc_WiFiIndication(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_AONLoc_WiFiIndication(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a3[7];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtIndication()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_BtIndication()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_6Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_WiFiIndication()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_Indication(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_Indication(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_Indication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235942228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359422B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_AONLoc_Indication()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_Indication.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_235942478 + 4 * byte_235BB5D96[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2359424AC + 4 * byte_235BB5D91[v4]))();
}

uint64_t sub_2359424AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359424B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2359424BCLL);
  return result;
}

uint64_t sub_2359424C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2359424D0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2359424D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359424DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_AONLoc_Indication.TypeEnum()
{
  return &type metadata for CLP_LogEntry_AONLoc_Indication.TypeEnum;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_AONLoc_LogEntry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v68 = v13;
      v8(v10, v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_DWORD *)v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v10[v12[8]] = v11[v12[8]];
      v25 = v12[9];
      v69 = v8;
      v26 = &v10[v25];
      v27 = &v11[v25];
      v28 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
      v67 = *((_QWORD *)v28 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v67 + 48))(v27, 1, v28))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v30 = *((_QWORD *)v27 + 1);
        *(_QWORD *)v26 = *(_QWORD *)v27;
        *((_QWORD *)v26 + 1) = v30;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
        v31 = v28[7];
        v65 = &v27[v31];
        v66 = &v26[v31];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v69(v66, v65, v7);
        v26[v28[8]] = v27[v28[8]];
        v32 = v28[9];
        v33 = &v26[v32];
        v34 = &v27[v32];
        v33[4] = v34[4];
        *(_DWORD *)v33 = *(_DWORD *)v34;
        v35 = v28[10];
        v36 = &v26[v35];
        v37 = &v27[v35];
        v36[4] = v37[4];
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v38 = v28[11];
        v39 = &v26[v38];
        v40 = &v27[v38];
        v39[4] = v40[4];
        *(_DWORD *)v39 = *(_DWORD *)v40;
        v41 = v28[12];
        v42 = &v26[v41];
        v43 = &v27[v41];
        v42[4] = v43[4];
        *(_DWORD *)v42 = *(_DWORD *)v43;
        v44 = v28[13];
        v45 = &v26[v44];
        v46 = &v27[v44];
        v45[8] = v46[8];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v47 = v28[14];
        v48 = &v26[v47];
        v49 = &v27[v47];
        *(_QWORD *)v48 = *(_QWORD *)v49;
        v48[8] = v49[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v26, 0, 1, v28);
      }
      v50 = v12[10];
      v51 = &v10[v50];
      v52 = &v11[v50];
      v53 = type metadata accessor for Proto_Gpsd_Request(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v69(v51, v52, v7);
        *(_QWORD *)&v51[*(int *)(v53 + 20)] = *(_QWORD *)&v52[*(int *)(v53 + 20)];
        v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56);
        swift_retain();
        v56(v51, 0, 1, v53);
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v68 + 56))(v10, 0, 1, v12);
      v8 = v69;
    }
    v57 = *(int *)(a3 + 24);
    v58 = (char *)a1 + v57;
    v59 = (char *)a2 + v57;
    v60 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      v8(v58, v59, v7);
      *(_QWORD *)&v58[*(int *)(v60 + 20)] = *(_QWORD *)&v59[*(int *)(v60 + 20)];
      v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56);
      swift_retain();
      v63(v58, 0, 1, v60);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    v8 = v6 + *(int *)(v7 + 36);
    v9 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5(v8 + *(int *)(v9 + 28), v4);
    }
    v10 = v6 + *(int *)(v7 + 40);
    v11 = type metadata accessor for Proto_Gpsd_Request(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    {
      v5(v10, v4);
      swift_release();
    }
  }
  v12 = a1 + *(int *)(a2 + 24);
  v13 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  if (!(_DWORD)result)
  {
    v5(v12, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v67 = v12;
    v68 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    v23 = v11[9];
    v24 = &v9[v23];
    v25 = &v10[v23];
    v26 = v7;
    v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v66 = *((_QWORD *)v27 - 1);
    v69 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v66 + 48))(v25, 1, v27))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v29;
      *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
      v30 = v27[7];
      v64 = &v25[v30];
      v65 = &v24[v30];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v26((uint64_t)v65, (uint64_t)v64, v6);
      v24[v27[8]] = v25[v27[8]];
      v31 = v27[9];
      v32 = &v24[v31];
      v33 = &v25[v31];
      v32[4] = v33[4];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v34 = v27[10];
      v35 = &v24[v34];
      v36 = &v25[v34];
      v35[4] = v36[4];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v37 = v27[11];
      v38 = &v24[v37];
      v39 = &v25[v37];
      v38[4] = v39[4];
      *(_DWORD *)v38 = *(_DWORD *)v39;
      v40 = v27[12];
      v41 = &v24[v40];
      v42 = &v25[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v43 = v27[13];
      v44 = &v24[v43];
      v45 = &v25[v43];
      v44[8] = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v46 = v27[14];
      v47 = &v24[v46];
      v48 = &v25[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v24, 0, 1, v27);
    }
    v49 = v11[10];
    v50 = &v9[v49];
    v51 = &v10[v49];
    v52 = type metadata accessor for Proto_Gpsd_Request(0);
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      v7 = v69;
    }
    else
    {
      v7 = v69;
      v69((uint64_t)v50, (uint64_t)v51, v6);
      *(_QWORD *)&v50[*(int *)(v52 + 20)] = *(_QWORD *)&v51[*(int *)(v52 + 20)];
      v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
      swift_retain();
      v55(v50, 0, 1, v52);
    }
    a3 = v68;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v9, 0, 1, v11);
  }
  v56 = *(int *)(a3 + 24);
  v57 = (char *)(a1 + v56);
  v58 = (char *)(a2 + v56);
  v59 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v57, (uint64_t)v58, v6);
    *(_QWORD *)&v57[*(int *)(v59 + 20)] = *(_QWORD *)&v58[*(int *)(v59 + 20)];
    v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56);
    swift_retain();
    v62(v57, 0, 1, v59);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  int *v52;
  uint64_t (*v53)(char *, uint64_t, int *);
  int v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  int v121;
  int v122;
  void (*v123)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  int v133;
  int v134;
  void (*v135)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v136;
  char *v137;
  char *v138;
  char v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, char *, uint64_t);
  char *v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  void (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v172 = a3;
  v173 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14((uint64_t)v11, 1, v12);
  v171 = v7;
  if (!v15)
  {
    if (v16)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v10, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    v168 = v6;
    v170 = v8;
    v8(v10, (uint64_t)v11, v6);
    v39 = v12[5];
    v40 = v10 + v39;
    v41 = &v11[v39];
    v42 = *(_QWORD *)v41;
    *(_BYTE *)(v40 + 8) = v41[8];
    *(_QWORD *)v40 = v42;
    v43 = v12[6];
    v44 = v10 + v43;
    v45 = &v11[v43];
    LOBYTE(v42) = v45[4];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    *(_BYTE *)(v44 + 4) = v42;
    v46 = v12[7];
    v47 = v10 + v46;
    v48 = &v11[v46];
    LOBYTE(v42) = v48[4];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    *(_BYTE *)(v47 + 4) = v42;
    *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
    v49 = v12[9];
    v50 = (_QWORD *)(v10 + v49);
    v51 = &v11[v49];
    v52 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v166 = *((_QWORD *)v52 - 1);
    v53 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v166 + 48);
    v54 = v53(v50, 1, v52);
    v55 = v51;
    v56 = v53(v51, 1, v52);
    if (v54)
    {
      if (!v56)
      {
        *v50 = *(_QWORD *)v51;
        v50[1] = *((_QWORD *)v51 + 1);
        v50[2] = *((_QWORD *)v51 + 2);
        v57 = v52[7];
        v58 = (char *)v50 + v57;
        v163 = (char *)v55 + v57;
        v161 = *(void (**)(char *, char *, uint64_t))(v171 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v161(v58, v163, v168);
        *((_BYTE *)v50 + v52[8]) = *((_BYTE *)v55 + v52[8]);
        v59 = v52[9];
        v60 = (char *)v50 + v59;
        v61 = (char *)v55 + v59;
        v62 = v61[4];
        *(_DWORD *)v60 = *(_DWORD *)v61;
        v60[4] = v62;
        v63 = v52[10];
        v64 = (char *)v50 + v63;
        v65 = (char *)v55 + v63;
        v66 = v65[4];
        *(_DWORD *)v64 = *(_DWORD *)v65;
        v64[4] = v66;
        v67 = v52[11];
        v68 = (char *)v50 + v67;
        v69 = (char *)v55 + v67;
        v70 = v69[4];
        *(_DWORD *)v68 = *(_DWORD *)v69;
        v68[4] = v70;
        v71 = v52[12];
        v72 = (char *)v50 + v71;
        v73 = (char *)v55 + v71;
        v74 = v73[4];
        *(_DWORD *)v72 = *(_DWORD *)v73;
        v72[4] = v74;
        v75 = v52[13];
        v76 = (char *)v50 + v75;
        v77 = (char *)v55 + v75;
        v78 = v77[8];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v78;
        v79 = v52[14];
        v80 = (char *)v50 + v79;
        v81 = (char *)v55 + v79;
        v82 = *(_QWORD *)v81;
        v80[8] = v81[8];
        *(_QWORD *)v80 = v82;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v166 + 56))(v50, 0, 1, v52);
LABEL_28:
        v8 = v170;
LABEL_29:
        v127 = v12[10];
        v128 = v10 + v127;
        v129 = &v11[v127];
        v130 = type metadata accessor for Proto_Gpsd_Request(0);
        v131 = *(_QWORD *)(v130 - 8);
        v132 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
        v133 = v132(v128, 1, v130);
        v134 = v132((uint64_t)v129, 1, v130);
        if (v133)
        {
          v6 = v168;
          if (!v134)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v171 + 16))(v128, v129, v168);
            *(_QWORD *)(v128 + *(int *)(v130 + 20)) = *(_QWORD *)&v129[*(int *)(v130 + 20)];
            v135 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56);
            swift_retain();
            v135(v128, 0, 1, v130);
            goto LABEL_17;
          }
        }
        else
        {
          v6 = v168;
          if (!v134)
          {
            v8(v128, (uint64_t)v129, v168);
            *(_QWORD *)(v128 + *(int *)(v130 + 20)) = *(_QWORD *)&v129[*(int *)(v130 + 20)];
            swift_retain();
            swift_release();
            goto LABEL_17;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v128, type metadata accessor for Proto_Gpsd_Request);
        }
        v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?)
                                    - 8)
                        + 64);
        v37 = (void *)v128;
        v38 = v129;
LABEL_8:
        memcpy(v37, v38, v36);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v56)
      {
        *v50 = *(_QWORD *)v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v50[1] = *((_QWORD *)v51 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v50[2] = *((_QWORD *)v51 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v8 = v170;
        v170((uint64_t)v50 + v52[7], (uint64_t)&v51[v52[7]], v168);
        *((_BYTE *)v50 + v52[8]) = v51[v52[8]];
        v136 = v52[9];
        v137 = (char *)v50 + v136;
        v138 = &v51[v136];
        v139 = v138[4];
        *(_DWORD *)v137 = *(_DWORD *)v138;
        v137[4] = v139;
        v140 = v52[10];
        v141 = (char *)v50 + v140;
        v142 = &v51[v140];
        v143 = v142[4];
        *(_DWORD *)v141 = *(_DWORD *)v142;
        v141[4] = v143;
        v144 = v52[11];
        v145 = (char *)v50 + v144;
        v146 = &v51[v144];
        v147 = v146[4];
        *(_DWORD *)v145 = *(_DWORD *)v146;
        v145[4] = v147;
        v148 = v52[12];
        v149 = (char *)v50 + v148;
        v150 = &v51[v148];
        v151 = v150[4];
        *(_DWORD *)v149 = *(_DWORD *)v150;
        v149[4] = v151;
        v152 = v52[13];
        v153 = (char *)v50 + v152;
        v154 = &v51[v152];
        v155 = v154[8];
        *(_QWORD *)v153 = *(_QWORD *)v154;
        v153[8] = v155;
        v156 = v52[14];
        v157 = (char *)v50 + v156;
        v158 = &v51[v156];
        v159 = *(_QWORD *)v158;
        v157[8] = v158[8];
        *(_QWORD *)v157 = v159;
        goto LABEL_29;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v50, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }
    v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
    goto LABEL_28;
  }
  if (v16)
  {
LABEL_7:
    v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?)
                                - 8)
                    + 64);
    v37 = (void *)v10;
    v38 = v11;
    goto LABEL_8;
  }
  v167 = a1;
  v169 = v8;
  v17 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v17(v10, v11, v6);
  v18 = v12[5];
  v19 = v10 + v18;
  v20 = &v11[v18];
  v21 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = v20[8];
  *(_QWORD *)v19 = v21;
  v22 = v12[6];
  v23 = v10 + v22;
  v24 = &v11[v22];
  LOBYTE(v21) = v24[4];
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = v21;
  v25 = v12[7];
  v26 = v10 + v25;
  v27 = &v11[v25];
  LOBYTE(v21) = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_BYTE *)(v26 + 4) = v21;
  *(_BYTE *)(v10 + v12[8]) = v11[v12[8]];
  v28 = v12[9];
  v29 = (_QWORD *)(v10 + v28);
  v30 = &v11[v28];
  v31 = v6;
  v32 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v33 = *((_QWORD *)v32 - 1);
  v165 = (void (*)(char *, char *, uint64_t))v17;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v30, 1, v32))
  {
    v34 = v31;
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    *v29 = *(_QWORD *)v30;
    v164 = v33;
    v29[1] = *((_QWORD *)v30 + 1);
    v29[2] = *((_QWORD *)v30 + 2);
    v83 = v32[7];
    v160 = &v30[v83];
    v162 = (char *)v29 + v83;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = v31;
    v17((uint64_t)v162, v160, v31);
    *((_BYTE *)v29 + v32[8]) = v30[v32[8]];
    v84 = v32[9];
    v85 = (char *)v29 + v84;
    v86 = &v30[v84];
    v87 = v86[4];
    *(_DWORD *)v85 = *(_DWORD *)v86;
    v85[4] = v87;
    v88 = v32[10];
    v89 = (char *)v29 + v88;
    v90 = &v30[v88];
    v91 = v90[4];
    *(_DWORD *)v89 = *(_DWORD *)v90;
    v89[4] = v91;
    v92 = v32[11];
    v93 = (char *)v29 + v92;
    v94 = &v30[v92];
    v95 = v94[4];
    *(_DWORD *)v93 = *(_DWORD *)v94;
    v93[4] = v95;
    v96 = v32[12];
    v97 = (char *)v29 + v96;
    v98 = &v30[v96];
    v99 = v98[4];
    *(_DWORD *)v97 = *(_DWORD *)v98;
    v97[4] = v99;
    v100 = v32[13];
    v101 = (char *)v29 + v100;
    v102 = &v30[v100];
    v103 = v102[8];
    *(_QWORD *)v101 = *(_QWORD *)v102;
    v101[8] = v103;
    v104 = v32[14];
    v105 = (char *)v29 + v104;
    v106 = &v30[v104];
    v107 = *(_QWORD *)v106;
    v105[8] = v106[8];
    *(_QWORD *)v105 = v107;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v164 + 56))(v29, 0, 1, v32);
  }
  v108 = v12[10];
  v109 = (char *)(v10 + v108);
  v110 = &v11[v108];
  v111 = type metadata accessor for Proto_Gpsd_Request(0);
  v112 = *(_QWORD *)(v111 - 8);
  a1 = v167;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
  {
    v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    v6 = v34;
  }
  else
  {
    v6 = v34;
    v165(v109, v110, v34);
    *(_QWORD *)&v109[*(int *)(v111 + 20)] = *(_QWORD *)&v110[*(int *)(v111 + 20)];
    v114 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56);
    swift_retain();
    v114(v109, 0, 1, v111);
  }
  v8 = v169;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_17:
  v115 = *(int *)(v172 + 24);
  v116 = (char *)(a1 + v115);
  v117 = (char *)(v173 + v115);
  v118 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  v121 = v120(v116, 1, v118);
  v122 = v120(v117, 1, v118);
  if (!v121)
  {
    if (!v122)
    {
      v8((uint64_t)v116, (uint64_t)v117, v6);
      *(_QWORD *)&v116[*(int *)(v118 + 20)] = *(_QWORD *)&v117[*(int *)(v118 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v116, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v122)
  {
LABEL_22:
    v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v116, v117, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v171 + 16))(v116, v117, v6);
  *(_QWORD *)&v116[*(int *)(v118 + 20)] = *(_QWORD *)&v117[*(int *)(v118 + 20)];
  v123 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56);
  swift_retain();
  v123(v116, 0, 1, v118);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v61 = v12;
    v62 = a3;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v9[v11[8]] = v10[v11[8]];
    v23 = v11[9];
    v24 = v7;
    v25 = &v9[v23];
    v26 = &v10[v23];
    v27 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v60 = *((_QWORD *)v27 - 1);
    v63 = (void (*)(char *, char *, uint64_t))v24;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v26, 1, v27))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
      v24((uint64_t)&v25[v27[7]], (uint64_t)&v26[v27[7]], v6);
      v25[v27[8]] = v26[v27[8]];
      v29 = v27[9];
      v30 = &v25[v29];
      v31 = &v26[v29];
      v30[4] = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v32 = v27[10];
      v33 = &v25[v32];
      v34 = &v26[v32];
      v33[4] = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v35 = v27[11];
      v36 = &v25[v35];
      v37 = &v26[v35];
      v36[4] = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v38 = v27[12];
      v39 = &v25[v38];
      v40 = &v26[v38];
      v39[4] = v40[4];
      *(_DWORD *)v39 = *(_DWORD *)v40;
      v41 = v27[13];
      v42 = &v25[v41];
      v43 = &v26[v41];
      v42[8] = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v44 = v27[14];
      v45 = &v25[v44];
      v46 = &v26[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v60 + 56))(v25, 0, 1, v27);
    }
    v47 = v11[10];
    v48 = &v9[v47];
    v49 = &v10[v47];
    v50 = type metadata accessor for Proto_Gpsd_Request(0);
    v51 = *(_QWORD *)(v50 - 8);
    a3 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v63(v48, v49, v6);
      *(_QWORD *)&v48[*(int *)(v50 + 20)] = *(_QWORD *)&v49[*(int *)(v50 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v9, 0, 1, v11);
    v7 = (void (*)(uint64_t, uint64_t, uint64_t))v63;
  }
  v53 = *(int *)(a3 + 24);
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v54, (uint64_t)v55, v6);
    *(_QWORD *)&v54[*(int *)(v56 + 20)] = *(_QWORD *)&v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_AONLoc_LogEntry(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, int *);
  int v14;
  int v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t (*v48)(char *, uint64_t, int *);
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t);
  int v110;
  int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  uint64_t v132;
  char *__src;
  void (*v134)(uint64_t, char *, uint64_t);
  void (*v135)(uint64_t, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v6 = type metadata accessor for UnknownStorage();
  v138 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, char *, uint64_t))(v138 + 40);
  v7(a1, a2, v6);
  v139 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = &a2[v8];
  v11 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13((uint64_t)v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v9, type metadata accessor for CLP_LogEntry_AONLoc_Request);
      goto LABEL_7;
    }
    v135 = v7;
    v137 = v6;
    v7(v9, v10, v6);
    v35 = v11[5];
    v36 = v9 + v35;
    v37 = &v10[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_BYTE *)(v36 + 8) = v37[8];
    v38 = v11[6];
    v39 = v9 + v38;
    v40 = &v10[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    *(_BYTE *)(v39 + 4) = v40[4];
    v41 = v11[7];
    v42 = v9 + v41;
    v43 = &v10[v41];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    *(_BYTE *)(v42 + 4) = v43[4];
    *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
    v44 = v11[9];
    v45 = (char *)(v9 + v44);
    v46 = &v10[v44];
    v47 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
    v132 = *((_QWORD *)v47 - 1);
    v48 = *(uint64_t (**)(char *, uint64_t, int *))(v132 + 48);
    v49 = v48(v45, 1, v47);
    v50 = v48(v46, 1, v47);
    if (v49)
    {
      if (!v50)
      {
        *(_OWORD *)v45 = *(_OWORD *)v46;
        *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
        (*(void (**)(char *, char *, uint64_t))(v138 + 32))(&v45[v47[7]], &v46[v47[7]], v137);
        v45[v47[8]] = v46[v47[8]];
        v51 = v47[9];
        v52 = &v45[v51];
        v53 = &v46[v51];
        v52[4] = v53[4];
        *(_DWORD *)v52 = *(_DWORD *)v53;
        v54 = v47[10];
        v55 = &v45[v54];
        v56 = &v46[v54];
        v55[4] = v56[4];
        *(_DWORD *)v55 = *(_DWORD *)v56;
        v57 = v47[11];
        v58 = &v45[v57];
        v59 = &v46[v57];
        v58[4] = v59[4];
        *(_DWORD *)v58 = *(_DWORD *)v59;
        v60 = v47[12];
        v61 = &v45[v60];
        v62 = &v46[v60];
        v61[4] = v62[4];
        *(_DWORD *)v61 = *(_DWORD *)v62;
        v63 = v47[13];
        v64 = &v45[v63];
        v65 = &v46[v63];
        v64[8] = v65[8];
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v66 = v47[14];
        v67 = &v45[v66];
        v68 = &v46[v66];
        *(_QWORD *)v67 = *(_QWORD *)v68;
        v67[8] = v68[8];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v132 + 56))(v45, 0, 1, v47);
LABEL_28:
        v7 = v135;
LABEL_29:
        v104 = v11[10];
        v105 = v9 + v104;
        v106 = &v10[v104];
        v107 = type metadata accessor for Proto_Gpsd_Request(0);
        v108 = *(_QWORD *)(v107 - 8);
        v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
        v110 = v109(v105, 1, v107);
        v111 = v109((uint64_t)v106, 1, v107);
        if (v110)
        {
          v6 = v137;
          if (!v111)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v138 + 32))(v105, v106, v137);
            *(_QWORD *)(v105 + *(int *)(v107 + 20)) = *(_QWORD *)&v106[*(int *)(v107 + 20)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
            goto LABEL_17;
          }
        }
        else
        {
          v6 = v137;
          if (!v111)
          {
            v7(v105, v106, v137);
            *(_QWORD *)(v105 + *(int *)(v107 + 20)) = *(_QWORD *)&v106[*(int *)(v107 + 20)];
            swift_release();
            goto LABEL_17;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v105, type metadata accessor for Proto_Gpsd_Request);
        }
        v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?)
                                    - 8)
                        + 64);
        v33 = (void *)v105;
        v34 = v106;
LABEL_8:
        memcpy(v33, v34, v32);
        goto LABEL_17;
      }
    }
    else
    {
      if (!v50)
      {
        *(_QWORD *)v45 = *(_QWORD *)v46;
        swift_bridgeObjectRelease();
        *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
        swift_bridgeObjectRelease();
        *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
        swift_bridgeObjectRelease();
        v7 = v135;
        v135((uint64_t)&v45[v47[7]], &v46[v47[7]], v137);
        v45[v47[8]] = v46[v47[8]];
        v112 = v47[9];
        v113 = &v45[v112];
        v114 = &v46[v112];
        v113[4] = v114[4];
        *(_DWORD *)v113 = *(_DWORD *)v114;
        v115 = v47[10];
        v116 = &v45[v115];
        v117 = &v46[v115];
        v116[4] = v117[4];
        *(_DWORD *)v116 = *(_DWORD *)v117;
        v118 = v47[11];
        v119 = &v45[v118];
        v120 = &v46[v118];
        v119[4] = v120[4];
        *(_DWORD *)v119 = *(_DWORD *)v120;
        v121 = v47[12];
        v122 = &v45[v121];
        v123 = &v46[v121];
        v122[4] = v123[4];
        *(_DWORD *)v122 = *(_DWORD *)v123;
        v124 = v47[13];
        v125 = &v45[v124];
        v126 = &v46[v124];
        v125[8] = v126[8];
        *(_QWORD *)v125 = *(_QWORD *)v126;
        v127 = v47[14];
        v128 = &v45[v127];
        v129 = &v46[v127];
        *(_QWORD *)v128 = *(_QWORD *)v129;
        v128[8] = v129[8];
        goto LABEL_29;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v45, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
    }
    v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
    goto LABEL_28;
  }
  if (v15)
  {
LABEL_7:
    v32 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?)
                                - 8)
                    + 64);
    v33 = (void *)v9;
    v34 = v10;
    goto LABEL_8;
  }
  __src = a2;
  v134 = v7;
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v138 + 32);
  v16(v9, v10, v6);
  v17 = v11[5];
  v18 = v9 + v17;
  v19 = &v10[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v19[8];
  v20 = v11[6];
  v21 = v9 + v20;
  v22 = &v10[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v22[4];
  v23 = v11[7];
  v24 = v9 + v23;
  v25 = &v10[v23];
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v25[4];
  *(_BYTE *)(v9 + v11[8]) = v10[v11[8]];
  v26 = v11[9];
  v27 = (_QWORD *)(v9 + v26);
  v28 = &v10[v26];
  v29 = v6;
  v30 = (int *)type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v130 = *((_QWORD *)v30 - 1);
  v136 = v29;
  v131 = (void (*)(char *, char *, uint64_t))v16;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v130 + 48))(v28, 1, v30))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request.ResultOptions?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[2] = *((_QWORD *)v28 + 2);
    v16((uint64_t)v27 + v30[7], &v28[v30[7]], v29);
    *((_BYTE *)v27 + v30[8]) = v28[v30[8]];
    v69 = v30[9];
    v70 = (char *)v27 + v69;
    v71 = &v28[v69];
    v70[4] = v71[4];
    *(_DWORD *)v70 = *(_DWORD *)v71;
    v72 = v30[10];
    v73 = (char *)v27 + v72;
    v74 = &v28[v72];
    v73[4] = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v75 = v30[11];
    v76 = (char *)v27 + v75;
    v77 = &v28[v75];
    v76[4] = v77[4];
    *(_DWORD *)v76 = *(_DWORD *)v77;
    v78 = v30[12];
    v79 = (char *)v27 + v78;
    v80 = &v28[v78];
    v79[4] = v80[4];
    *(_DWORD *)v79 = *(_DWORD *)v80;
    v81 = v30[13];
    v82 = (char *)v27 + v81;
    v83 = &v28[v81];
    v82[8] = v83[8];
    *(_QWORD *)v82 = *(_QWORD *)v83;
    v84 = v30[14];
    v85 = (char *)v27 + v84;
    v86 = &v28[v84];
    *(_QWORD *)v85 = *(_QWORD *)v86;
    v85[8] = v86[8];
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v130 + 56))(v27, 0, 1, v30);
  }
  v87 = v11[10];
  v88 = (char *)(v9 + v87);
  v89 = &v10[v87];
  v90 = type metadata accessor for Proto_Gpsd_Request(0);
  v91 = *(_QWORD *)(v90 - 8);
  a2 = __src;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
  {
    v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_Request?);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    v6 = v136;
  }
  else
  {
    v6 = v136;
    v131(v88, v89, v136);
    *(_QWORD *)&v88[*(int *)(v90 + 20)] = *(_QWORD *)&v89[*(int *)(v90 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
  }
  v7 = v134;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
LABEL_17:
  v93 = *(int *)(v139 + 24);
  v94 = (char *)(a1 + v93);
  v95 = &a2[v93];
  v96 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  if (!v99)
  {
    if (!v100)
    {
      v7((uint64_t)v94, v95, v6);
      *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v94, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    goto LABEL_22;
  }
  if (v100)
  {
LABEL_22:
    v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v94, v95, v6);
  *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_AONLoc_LogEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359443F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_AONLoc_LogEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23594449C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Request?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_AONLoc_LogEntry()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Request?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Request);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Indication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Indication);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_AONLoc_Indication._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Indication._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_AONLoc_Indication._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Response?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Response);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_Indication?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_Indication);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_Response?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_Response);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_WiFiIndication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_BtIndication?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

unint64_t lazy protocol witness table accessor for type Proto_Gnss_Result and conformance Proto_Gnss_Result()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for Proto_Gnss_Result, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for Proto_Gnss_Result, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for Proto_Gnss_Result, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result;
  if (!lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for Proto_Gnss_Result, &type metadata for Proto_Gnss_Result);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gnss_Result and conformance Proto_Gnss_Result);
  }
  return result;
}

uint64_t outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ALBtAdvertisement.BtType.init(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    if (a1 == 1)
      v3 = (unsigned int *)MEMORY[0x24BDFCEE8];
    else
      v3 = (unsigned int *)MEMORY[0x24BDFCEF0];
  }
  else
  {
    v3 = (unsigned int *)MEMORY[0x24BDFCEF8];
  }
  v4 = *v3;
  v5 = type metadata accessor for ALBtAdvertisement.BtType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t CLP_LogEntry_AONLoc_BtAdvertisement.BtType.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALBtAdvertisement.BtType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 != *MEMORY[0x24BDFCEF8])
  {
    if (v4 == *MEMORY[0x24BDFCEE8])
      return 1;
    if (v4 == *MEMORY[0x24BDFCEF0])
      return 2;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }
  return 0;
}

uint64_t ALBtAdvertisement.toPb(pb:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v0 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  MEMORY[0x24BDAC7A8](v0);
  v44 = (uint64_t)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALBtAdvInfoType7();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALBtAdvertisement.BtType();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v42 - v16;
  v18 = MEMORY[0x23B7DB0C0](v15);
  if ((v19 & 1) == 0)
    v18 = CLP_LogEntry_AONLoc_BtAdvertisement.machContTimeNs.setter(v18);
  v20 = MEMORY[0x23B7DB0D8](v18);
  if ((v21 & 1) == 0)
    v20 = CLP_LogEntry_AONLoc_BtAdvertisement.mac.setter(v20);
  v22 = MEMORY[0x23B7DB114](v20);
  if ((v22 & 0x100000000) == 0)
    CLP_LogEntry_AONLoc_BtAdvertisement.rssiDb.setter(v22);
  v23 = ALBtAdvertisement._antennaIndex.getter();
  if ((v23 & 0x100000000) == 0)
    v23 = CLP_LogEntry_AONLoc_BtAdvertisement.antennaIndex.setter(v23);
  v24 = MEMORY[0x23B7DB144](v23);
  if (v25 >> 60 != 15)
    v24 = CLP_LogEntry_AONLoc_BtAdvertisement.payload.setter(v24, v25);
  v26 = MEMORY[0x23B7DB12C](v24);
  if ((v26 & 0x100000000) == 0)
    CLP_LogEntry_AONLoc_BtAdvertisement.channel.setter(v26);
  v27 = ALBtAdvertisement._productID.getter();
  if ((v27 & 0x100000000) == 0)
    v27 = CLP_LogEntry_AONLoc_BtAdvertisement.productID.setter(v27);
  v28 = MEMORY[0x23B7DB048](v27);
  if (v29)
    v28 = CLP_LogEntry_AONLoc_BtAdvertisement.identifier.setter(v28, v29);
  v30 = MEMORY[0x23B7DB078](v28);
  if (v31)
    v30 = CLP_LogEntry_AONLoc_BtAdvertisement.idsDeviceID.setter(v30, v31);
  v32 = MEMORY[0x23B7DB060](v30);
  if ((v33 & 1) == 0)
    v32 = CLP_LogEntry_AONLoc_BtAdvertisement.deviceFlags.setter(v32);
  v34 = MEMORY[0x23B7DB0A8](v32);
  if ((v35 & 1) == 0)
    v34 = CLP_LogEntry_AONLoc_BtAdvertisement.discoveryFlags.setter(v34);
  MEMORY[0x23B7DB0F0](v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v36 == *MEMORY[0x24BDFCEF8])
    goto LABEL_31;
  if (v36 != *MEMORY[0x24BDFCEE8])
  {
    if (v36 == *MEMORY[0x24BDFCEF0])
    {
      v37 = 2;
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_31:
    v37 = 0;
    goto LABEL_32;
  }
  v37 = 1;
LABEL_32:
  CLP_LogEntry_AONLoc_BtAdvertisement.btType.setter(v37);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_33:
  ALBtAdvertisement._type7Info.getter();
  v38 = v45;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v4, 1, v5) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v4, &demangling cache variable for type metadata for ALBtAdvInfoType7?);
  v40 = v43;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v43, v4, v5);
  v41 = v44;
  ALBtAdvInfoType7.toPb()(v44);
  CLP_LogEntry_AONLoc_BtAdvertisement.type7Info.setter(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v40, v5);
}

uint64_t ALBtAdvInfoType7.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t isSame;
  uint64_t v13;
  char v14;
  uint64_t isLeft;
  char v16;
  int v18;
  char v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALBtAdvInfoType7.Placement();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v20 - v10;
  CLP_LogEntry_AONLoc_Type7Info.init()(a1);
  isSame = ALBtAdvInfoType7._isSameAccount.getter();
  if (isSame != 2)
    isSame = CLP_LogEntry_AONLoc_Type7Info.isSameAccount.setter(isSame & 1);
  v13 = MEMORY[0x23B7DAF04](isSame);
  if (v13 != 2)
    v13 = CLP_LogEntry_AONLoc_Type7Info.isFamily.setter(v13 & 1);
  v14 = MEMORY[0x23B7DAEB0](v13);
  if (v14 != 2)
    CLP_LogEntry_AONLoc_Type7Info.isSharedHome.setter(v14 & 1);
  isLeft = ALBtAdvInfoType7._isLeftBud.getter();
  if (isLeft != 2)
    isLeft = CLP_LogEntry_AONLoc_Type7Info.isLeftBud.setter(isLeft & 1);
  v16 = MEMORY[0x23B7DAEE0](isLeft);
  if (v16 != 2)
    CLP_LogEntry_AONLoc_Type7Info.isCase.setter(v16 & 1);
  ALBtAdvInfoType7._placement.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v4, &demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
  if (v18 != *MEMORY[0x24BDFCD50])
  {
    if (v18 == *MEMORY[0x24BDFCD28])
    {
      v19 = 1;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD60])
    {
      v19 = 2;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD38])
    {
      v19 = 3;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD30])
    {
      v19 = 4;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD40])
    {
      v19 = 5;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD48])
    {
      v19 = 6;
      goto LABEL_29;
    }
    if (v18 == *MEMORY[0x24BDFCD58])
    {
      v19 = 7;
      goto LABEL_29;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v19 = 0;
LABEL_29:
  CLP_LogEntry_AONLoc_Type7Info.placement.setter(v19);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t ALBtAdvertisement.toPb()@<X0>(uint64_t a1@<X8>)
{
  CLP_LogEntry_AONLoc_BtAdvertisement.init()(a1);
  return ALBtAdvertisement.toPb(pb:)();
}

uint64_t ALBtAdvertisement.init(pb:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  _BYTE v18[16];

  v2 = type metadata accessor for CLP_LogEntry_AONLoc_Type7Info(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ALBtAdvertisement.BtType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvertisement.BtType?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ALBtAdvertisement.init()();
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasMachContTimeNs.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.machContTimeNs.getter();
    ALBtAdvertisement._machContTimeNs.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasMac.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.mac.getter();
    ALBtAdvertisement._mac.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasRssiDb.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.rssiDb.getter();
    v18[0] = 0;
    ALBtAdvertisement._rssidB.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasAntennaIndex.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.antennaIndex.getter();
    v18[4] = 0;
    ALBtAdvertisement._antennaIndex.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasPayload.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.payload.getter();
    ALBtAdvertisement._payload.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasChannel.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.channel.getter();
    v18[8] = 0;
    ALBtAdvertisement._channel.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasProductID.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.productID.getter();
    v18[12] = 0;
    ALBtAdvertisement._productID.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasIdentifier.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.identifier.getter();
    ALBtAdvertisement._identifier.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasIdsDeviceID.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.idsDeviceID.getter();
    ALBtAdvertisement._idsDeviceID.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasDeviceFlags.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.deviceFlags.getter();
    ALBtAdvertisement._deviceFlags.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasDiscoveryFlags.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.discoveryFlags.getter();
    ALBtAdvertisement._discoveryFlags.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasBtType.getter())
  {
    v15 = CLP_LogEntry_AONLoc_BtAdvertisement.btType.getter();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, **((unsigned int **)&unk_2506EF378 + v15), v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALBtAdvertisement._type.setter();
  }
  if (CLP_LogEntry_AONLoc_BtAdvertisement.hasType7Info.getter())
  {
    CLP_LogEntry_AONLoc_BtAdvertisement.type7Info.getter((uint64_t)v4);
    ALBtAdvInfoType7.init(pb:)((uint64_t)v4);
    v16 = type metadata accessor for ALBtAdvInfoType7();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 0, 1, v16);
    ALBtAdvertisement._type7Info.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
}

uint64_t ALBtAdvInfoType7.init(pb:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALBtAdvInfoType7.Placement?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtAdvInfoType7.init()();
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsSameAccount.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isSameAccount.getter();
    ALBtAdvInfoType7._isSameAccount.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsFamily.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isFamily.getter();
    ALBtAdvInfoType7._isFamily.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsSharedHome.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isSharedHome.getter();
    ALBtAdvInfoType7._isSharedHome.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsLeftBud.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isLeftBud.getter();
    ALBtAdvInfoType7._isLeftBud.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasIsCase.getter())
  {
    CLP_LogEntry_AONLoc_Type7Info.isCase.getter();
    ALBtAdvInfoType7._isCase.setter();
  }
  if (CLP_LogEntry_AONLoc_Type7Info.hasPlacement.getter())
  {
    v9 = CLP_LogEntry_AONLoc_Type7Info.placement.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, **((unsigned int **)&unk_2506EF390 + v9), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    ALBtAdvInfoType7._placement.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, type metadata accessor for CLP_LogEntry_AONLoc_Type7Info);
}

uint64_t ALBtAdvertisement.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ALBtAdvertisement.init(data:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtAdvertisement and conformance CLP_LogEntry_AONLoc_BtAdvertisement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtAdvertisement, (void (*)(char *))ALBtAdvertisement.init(pb:), a3);
}

uint64_t ALBtNotification.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD);
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44[32];

  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v41 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALBtAdvertisement();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v38 - v10;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ALBtNotification();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotification.init()();
  v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v43 = a2;
  v22(a2, v21, v18);
  if (CLP_LogEntry_AONLoc_BtNotification.hasEventReceiptTime.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.getter((uint64_t)v14);
    ALTimeStamp.init(pb:)((uint64_t)v14);
    v23 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v17, 0, 1, v23);
    ALBtNotification._timestamp.setter();
  }
  v39 = a1;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v25)
  {
    v26 = v24 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v40 = *(_QWORD *)(v40 + 72);
    v38 = v24;
    swift_bridgeObjectRetain();
    v27 = v42;
    do
    {
      v28 = v41;
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v26, v41, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      ALBtAdvertisement.init(pb:)(v28);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v27, v11, v6);
      v29 = (void (*)(char *, _QWORD))ALBtNotification._advertisements.modify();
      v31 = v30;
      v32 = *v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v31 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, v32, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtAdvertisement>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFCF48]);
        *v31 = v32;
      }
      v35 = *(_QWORD *)(v32 + 16);
      v34 = *(_QWORD *)(v32 + 24);
      if (v35 >= v34 >> 1)
      {
        v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v32, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtAdvertisement>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFCF48]);
        *v31 = v32;
      }
      *(_QWORD *)(v32 + 16) = v35 + 1;
      v27 = v42;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v32+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v35, v42, v6);
      v29(v44, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v26 += v40;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  v36 = v39;
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsSimulated.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isSimulated.getter();
    ALBtNotification._simulated.setter();
  }
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsApOn.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isApOn.getter();
    ALBtNotification._isApOn.setter();
  }
  if (CLP_LogEntry_AONLoc_BtNotification.hasIsScreenOn.getter())
  {
    CLP_LogEntry_AONLoc_BtNotification.isScreenOn.getter();
    ALBtNotification._isScreenOn.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v36, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
}

uint64_t ALBtNotification.toPb()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v38 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALBtAdvertisement();
  v39 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v9);
  v37 = (uint64_t)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ALTimeStamp();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = CLP_LogEntry_AONLoc_BtNotification.init()(a1);
  MEMORY[0x23B7DAF4C](v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v19 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v20 = v37;
    ALTimeStamp.toPb()(v37);
    CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.setter(v20);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  v21 = MEMORY[0x23B7DAF88](v19);
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v36[1] = v21;
    v36[2] = v1;
    v23 = v21 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    v37 = *(_QWORD *)(v39 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
    v25 = a1;
    do
    {
      v24(v8, v23, v6);
      CLP_LogEntry_AONLoc_BtAdvertisement.init()((uint64_t)v5);
      ALBtAdvertisement.toPb(pb:)();
      v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      *(_QWORD *)(v26 + 16) = v28 + 1;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, v26+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v28, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      a1 = v25;
      *v25 = v26;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v6);
      v23 += v37;
      --v22;
    }
    while (v22);
  }
  swift_bridgeObjectRelease();
  v29 = ALBtNotification._simulated.getter();
  if (v29 != 2)
    v29 = CLP_LogEntry_AONLoc_BtNotification.isSimulated.setter(v29 & 1);
  v30 = MEMORY[0x23B7DAF94](v29);
  if (v30 != 2)
    v30 = CLP_LogEntry_AONLoc_BtNotification.isApOn.setter(v30 & 1);
  v31 = MEMORY[0x23B7DAF64](v30);
  if (v31 != 2)
    CLP_LogEntry_AONLoc_BtNotification.isScreenOn.setter(v31 & 1);
  type metadata accessor for ALProtobufUtil();
  v32 = a1;
  v33 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v34 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v32, v33, v34);
}

uint64_t ALBtNotifications.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD);
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  _QWORD v37[2];
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _BYTE v43[40];

  v39 = a1;
  v3 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALBtNotification();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for ALBtNotifications();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.init()();
  v18 = v14;
  v19 = v39;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v17, v18);
  if (CLP_LogEntry_AONLoc_Indication.hasType.getter()
    && (v42 = v10,
        v43[0] = CLP_LogEntry_AONLoc_Indication.type.getter(),
        v43[39] = 6,
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0))
  {
    CLP_LogEntry_AONLoc_Indication.btIndication.getter(v13);
    v20 = *v13;
    v21 = *(_QWORD *)(*v13 + 16);
    if (v21)
    {
      v37[1] = *v13;
      v38 = v13;
      v22 = v4;
      v23 = v20 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v40 = *(_QWORD *)(v22 + 72);
      v41 = v7;
      swift_bridgeObjectRetain();
      v24 = (uint64_t)v42;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v23, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        v25 = v6;
        ALBtNotification.init(pb:)((uint64_t)v6, v24);
        v26 = a2;
        v27 = (void (*)(_BYTE *, _QWORD))ALBtNotifications._results.modify();
        v29 = v28;
        v30 = *v28;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v29 = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtNotification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFCDF8]);
          *v29 = v30;
        }
        v33 = *(_QWORD *)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALBtNotification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFCDF8]);
          *v29 = v30;
        }
        *(_QWORD *)(v30 + 16) = v33 + 1;
        v24 = (uint64_t)v42;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v30+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v33, v42, v41);
        v27(v43, 0);
        v23 += v40;
        --v21;
        a2 = v26;
        v6 = v25;
      }
      while (v21);
      swift_bridgeObjectRelease();
      v13 = v38;
      v19 = v39;
    }
    CLP_LogEntry_AONLoc_BtIndication.isLastBatch.getter();
    ALBtNotifications._isLastBatch.setter();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v19, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v34 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication;
    v35 = (uint64_t)v13;
  }
  else
  {
    v34 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v35 = v19;
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, v34);
}

uint64_t ALBtNotifications.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  unint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v70[2];
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, unint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;

  v2 = v1;
  v4 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v93 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALBtAdvertisement();
  v94 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v10);
  v75 = (uint64_t)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ALTimeStamp();
  v85 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_AONLoc_BtNotification(0);
  v83 = *(_QWORD *)(v17 - 8);
  v84 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v95 = (_QWORD *)((char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for ALBtNotification();
  v86 = *(_QWORD *)(v19 - 8);
  v87 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v91 = (char *)v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CLP_LogEntry_AONLoc_BtIndication(0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (_QWORD *)((char *)v70 - v25);
  CLP_LogEntry_AONLoc_Indication.init()(a1);
  v73 = a1;
  CLP_LogEntry_AONLoc_Indication.type.setter(6);
  CLP_LogEntry_AONLoc_BtIndication.init()(v26);
  v72 = v2;
  v27 = ALBtNotifications.results.getter();
  v82 = *(_QWORD *)(v27 + 16);
  v90 = v26;
  if (v82)
  {
    v81 = v15;
    v71 = v24;
    v28 = v86;
    v29 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v70[1] = v27;
    v80 = v27 + v29;
    v30 = type metadata accessor for ALProtobufUtil();
    v31 = 0;
    v78 = *(_QWORD *)(v28 + 72);
    v79 = v30;
    v32 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
    v76 = v14;
    v77 = v32;
    v92 = v7;
    v33 = v95;
    v34 = v87;
    v35 = v91;
    do
    {
      v89 = v31;
      v77(v35, v80 + v78 * v31, v34);
      v36 = CLP_LogEntry_AONLoc_BtNotification.init()(v33);
      MEMORY[0x23B7DAF4C](v36);
      v37 = v85;
      v38 = v81;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v14, 1, v81) == 1)
      {
        v39 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for ALTimeStamp?);
      }
      else
      {
        v40 = v74;
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v74, v14, v38);
        v41 = v75;
        ALTimeStamp.toPb()(v75);
        v42 = v41;
        v33 = v95;
        CLP_LogEntry_AONLoc_BtNotification.eventReceiptTime.setter(v42);
        v39 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v40, v38);
      }
      v43 = MEMORY[0x23B7DAF88](v39);
      v44 = *(_QWORD *)(v43 + 16);
      if (v44)
      {
        v45 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v88 = v43;
        v46 = v43 + v45;
        v47 = *(_QWORD *)(v94 + 72);
        v48 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
        do
        {
          v48(v9, v46, v7);
          CLP_LogEntry_AONLoc_BtAdvertisement.init()((uint64_t)v6);
          ALBtAdvertisement.toPb(pb:)();
          v49 = *v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          v51 = *(_QWORD *)(v49 + 16);
          v50 = *(_QWORD *)(v49 + 24);
          if (v51 >= v50 >> 1)
            v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtAdvertisement>, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          *(_QWORD *)(v49 + 16) = v51 + 1;
          outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v6, v49+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(_QWORD *)(v93 + 72) * v51, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
          v33 = v95;
          *v95 = v49;
          v7 = v92;
          (*(void (**)(char *, uint64_t))(v94 + 8))(v9, v92);
          v46 += v47;
          --v44;
        }
        while (v44);
        swift_bridgeObjectRelease();
        v14 = v76;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v52 = ALBtNotification._simulated.getter();
      v53 = v90;
      if (v52 != 2)
        v52 = CLP_LogEntry_AONLoc_BtNotification.isSimulated.setter(v52 & 1);
      v54 = MEMORY[0x23B7DAF94](v52);
      if (v54 != 2)
        v54 = CLP_LogEntry_AONLoc_BtNotification.isApOn.setter(v54 & 1);
      v55 = MEMORY[0x23B7DAF64](v54);
      if (v55 != 2)
        CLP_LogEntry_AONLoc_BtNotification.isScreenOn.setter(v55 & 1);
      v56 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_BtNotification and conformance CLP_LogEntry_AONLoc_BtNotification, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_BtNotification);
      ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v33, v84, v56);
      v57 = *v53;
      v58 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v57 + 16) + 1, 1, v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtNotification>, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      v60 = *(_QWORD *)(v57 + 16);
      v59 = *(_QWORD *)(v57 + 24);
      v61 = v89;
      if (v60 >= v59 >> 1)
      {
        v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_AONLoc_BtNotification>, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
        v61 = v89;
        v57 = v63;
      }
      *(_QWORD *)(v57 + 16) = v60 + 1;
      v33 = v95;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v95, v57+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v60, type metadata accessor for CLP_LogEntry_AONLoc_BtNotification);
      v35 = v91;
      *v90 = v57;
      v34 = v87;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v35, v87);
      v31 = v61 + 1;
      v62 = v61 + 1 == v82;
      v14 = v58;
    }
    while (!v62);
    swift_bridgeObjectRelease();
    v24 = v71;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v64 = ALBtNotifications.isLastBatch.getter();
  v65 = (uint64_t)v90;
  CLP_LogEntry_AONLoc_BtIndication.isLastBatch.setter(v64 & 1);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, (uint64_t)v24, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
  v66 = v73;
  CLP_LogEntry_AONLoc_Indication.btIndication.setter((uint64_t)v24);
  type metadata accessor for ALProtobufUtil();
  v67 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v68 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v66, v67, v68);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_AONLoc_BtIndication);
}

uint64_t ALBtNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ALBtAdvertisement.init(data:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_Indication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication, (void (*)(char *))ALBtNotifications.init(pb:), a3);
}

uint64_t ALBtAdvertisement.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, void (*a6)(char *)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  void (*v20)(char *);
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v19 = a7;
  v20 = a6;
  type metadata accessor for BinaryDecodingOptions();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  a3(0);
  v12 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v19 - v15;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(a4, a3, a5);
  v17 = v24;
  Message.init(serializedData:extensions:partial:options:)();
  if (v17)
    return outlined consume of Data._Representation(a1, a2);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, (uint64_t)v14, a3);
  v20(v14);
  outlined consume of Data._Representation(a1, a2);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, a3);
}

uint64_t ALBtNotifications.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v0;
  v3 = type metadata accessor for ALBtNotifications();
  v42 = *(char **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALBtNotifications.toPb()((uint64_t)v11);
  if (!v1)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
    v12 = Message.serializedData(partial:)();
    v14 = v13;
    v15 = (uint64_t)v11;
    v16 = v6;
    v17 = v5;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v15, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v39 = v16;
    corelog.getter((uint64_t)v8);
    v20 = v41;
    v19 = v42;
    (*((void (**)(char *, uint64_t, uint64_t))v42 + 2))(v41, v2, v3);
    outlined copy of Data._Representation(v12, v14);
    v21 = v3;
    v40 = v12;
    outlined copy of Data._Representation(v12, v14);
    v22 = v20;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc();
      v34 = v21;
      v27 = v26;
      v37 = swift_slowAlloc();
      v44 = v37;
      *(_DWORD *)v27 = 136446466;
      v36 = v25;
      v28 = ALBtNotifications.description()();
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28._countAndFlagsBits, (unint64_t)v28._object, &v44);
      v38 = v17;
      v35 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v42 + 1))(v22, v34);
      *(_WORD *)(v27 + 12) = 2082;
      v0 = v40;
      outlined copy of Data._Representation(v40, v14);
      v29 = Data.description.getter();
      v42 = v8;
      v31 = v30;
      outlined consume of Data._Representation(v0, v14);
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v0, v14);
      outlined consume of Data._Representation(v0, v14);
      v32 = v35;
      _os_log_impl(&dword_235928000, v35, (os_log_type_t)v36, "#BT,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v27, 0x16u);
      v33 = v37;
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v33, -1, -1);
      MEMORY[0x23B7DBDA4](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v19 + 1))(v22, v21);
      v0 = v40;
      outlined consume of Data._Representation(v40, v14);
      outlined consume of Data._Representation(v0, v14);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v17);
    }
  }
  return v0;
}

uint64_t static ALBtNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for ALBtNotifications();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALBtNotifications.init(results:isLastBatch:)();
  v4 = ALBtNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

void ALBtAdvInfoType7.Placement.init(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_235946F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDFCD50];
  v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t CLP_LogEntry_AONLoc_Type7Info.Placement.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALBtAdvInfoType7.Placement();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x24BDFCD50])
    return 0;
  if (v4 == *MEMORY[0x24BDFCD28])
    return 1;
  if (v4 == *MEMORY[0x24BDFCD60])
    return 2;
  if (v4 == *MEMORY[0x24BDFCD38])
    return 3;
  if (v4 == *MEMORY[0x24BDFCD30])
    return 4;
  if (v4 == *MEMORY[0x24BDFCD40])
    return 5;
  if (v4 == *MEMORY[0x24BDFCD48])
    return 6;
  if (v4 != *MEMORY[0x24BDFCD58])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 7;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_GlonassSlotSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassSlotSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t CLP_LogEntry_PrivateData_SatelliteSystem.rawValue.getter(char a1)
{
  return qword_235BBD0F8[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem(char *a1, char *a2)
{
  return qword_235BBD0F8[*a1] == qword_235BBD0F8[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem()
{
  char *v0;

  return qword_235BBD0F8[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BBD0F8[*v1];
}

void *static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SatelliteSystem.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_Band.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Band()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_Band@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_Band()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_Band@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_Band(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void *static CLP_LogEntry_PrivateData_Band.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Band.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Band(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Band.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_FullSvTimeSource(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_FullSvTimeSource.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MeasurementDetectionMethod.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MultipathIndicator()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_MultipathIndicator.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MultipathIndicator.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvPositionSource()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvPositionSource(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvPositionSource.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvHealthIndication()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_SvHealthIndication.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvHealthIndication.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication;
}

ALProtobuf::CLP_LogEntry_PrivateData_IonosphericCorrectionSource_optional __swiftcall CLP_LogEntry_PrivateData_IonosphericCorrectionSource.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3)
    LOBYTE(rawValue) = 3;
  return (ALProtobuf::CLP_LogEntry_PrivateData_IonosphericCorrectionSource_optional)rawValue;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void *static CLP_LogEntry_PrivateData_IonosphericCorrectionSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IonosphericCorrectionSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_SvReferencePoint.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SvReferencePoint.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(result + 24)) = 5;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.freqNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 20));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.freqNum.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassId.freqNum.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasFreqNum.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 20) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassId.clearFreqNum()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 5;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

void (*CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[*(int *)(v6 + 24)] = 5;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  }
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify;
}

void CLP_LogEntry_PrivateData_GlonassId.slotInfo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GlonassId.init()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GlonassId._slotInfo@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.gpsPrn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGpsPrn.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGpsPrn()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.glonassID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.glonassID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

void (*CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  }
  return CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify;
}

void CLP_LogEntry_PrivateData_ConstellationId.glonassID.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGlonassID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

BOOL CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 24), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGlonassID()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 28);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.beidouRangingCode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 32);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.galileoSpreadingCode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 36);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.qzssPrn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.sbasPrn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.navicPrn.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.navicPrn.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v4 = v1 + *(int *)(result + 44);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ConstellationId.navicPrn.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_ConstellationId._glonassID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvId.system.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_SvId.system.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t (*CLP_LogEntry_PrivateData_SvId.system.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvId.hasSystem.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvId.clearSystem()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_SvId.constelID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[8];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[10];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

uint64_t CLP_LogEntry_PrivateData_SvId.constelID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

void (*CLP_LogEntry_PrivateData_SvId.constelID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvId(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[8]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[9]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[10]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[11]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  }
  return CLP_LogEntry_PrivateData_SvId.constelID.modify;
}

void CLP_LogEntry_PrivateData_SvId.constelID.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

BOOL CLP_LogEntry_PrivateData_SvId.hasConstelID.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvId.clearConstelID()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_SvId, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t CLP_LogEntry_PrivateData_SvId.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GlonassId.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v6 = a1(0);
  v7 = a3 + *(int *)(v6 + 20);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a3 + *(int *)(v6 + 24);
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvId._constelID@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasSubframe.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearSubframe()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL1SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL1SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 20)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cmCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCmCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCmCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 24)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.clCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasClCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearClCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 28)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 32)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.cNavFrame.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasCNavFrame.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearCNavFrame()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL2CSyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL2CSyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL2CSyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.cNavBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.cNavFrame.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasCNavFrame.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearCNavFrame()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsL5SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsL5SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsL5SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GpsL5SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

int *CLP_LogEntry_PrivateData_GpsL1SyncState.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.symbol.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasSymbol.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearSymbol()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.navBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.string.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasString.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearString()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 36)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassL1fSyncState.todDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassL1fSyncState.hasTodDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassL1fSyncState.clearTodDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_GlonassL1fSyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

int *CLP_LogEntry_PrivateData_GpsL2CSyncState.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)a1(0);
  *(_BYTE *)(a2 + result[5]) = 2;
  *(_BYTE *)(a2 + result[6]) = 2;
  *(_BYTE *)(a2 + result[7]) = 2;
  *(_BYTE *)(a2 + result[8]) = 2;
  *(_BYTE *)(a2 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.navBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.subframe.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasSubframe.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearSubframe()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB1SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB1SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB1SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_BeidouB1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.navBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasNavBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearNavBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.subframe.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasSubframe.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearSubframe()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_BeidouB2SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BeidouB2SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouB2SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_BeidouB2SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BcCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1BcCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1BcCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1CCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1CCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1CCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.e1BPage.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasE1BPage.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearE1BPage()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE1SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE1SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE1SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_GalileoE1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPrimCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BPrimCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BPrimCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APrimCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5APrimCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5APrimCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5AltBocPrimCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5AltBocPrimCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5AltBocPrimCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BDataBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BDataBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BDataBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ADataBit.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5ADataBit.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5ADataBit()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BSecCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BSecCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BSecCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5ASecCodeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5ASecCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5ASecCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5BPageSync.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5BPageSync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5BPageSync()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.e5APageSync.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasE5APageSync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearE5APageSync()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 52)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoE5SyncState.towDecoded.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoE5SyncState.hasTowDecoded.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoE5SyncState.clearTowDecoded()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0) + 56)) = 2;
}

int *CLP_LogEntry_PrivateData_GalileoE5SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 2;
  *(_BYTE *)(a1 + result[14]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.codeLock.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasCodeLock.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearCodeLock()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.symbol.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasSymbol.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearSymbol()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.message.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.message.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t (*CLP_LogEntry_PrivateData_SbasL1SyncState.message.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SbasL1SyncState.hasMessage.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SbasL1SyncState.clearMessage()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_SbasL1SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SyncState.band.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 16) == 13)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.band.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_SyncState.band.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 13)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SyncState.band.modify;
}

void CLP_LogEntry_PrivateData_SyncState.band.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBand.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 16) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBand()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 16) = 13;
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.gpsL1.setter, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL1()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL2C.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.gpsL2C.setter, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

void CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(_QWORD))
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(*(_QWORD *)(*(_QWORD *)a1 + 48), (uint64_t)v6, a4);
    a3(v6);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 48));
  }
  free(v7);
  free(v6);
  free(v8);
  free(v5);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL2C.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = a4(0);
  v14 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
  return v14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL2C()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL5.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL5.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.gpsL5.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.gpsL5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.gpsL5.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.gpsL5.setter, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGpsL5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGpsL5()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.glonassL1F.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL2C.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  *(_BYTE *)(a4 + v13[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.glonassL1F.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify;
}

void CLP_LogEntry_PrivateData_SyncState.glonassL1F.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.glonassL1F.setter, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGlonassL1F.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGlonassL1F()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.beidouB1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.beidouB1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.beidouB1.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.beidouB1.setter, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBeidouB1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBeidouB1()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB2.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.beidouB2.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.beidouB2.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.beidouB2.modify;
}

void CLP_LogEntry_PrivateData_SyncState.beidouB2.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.beidouB2.setter, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasBeidouB2.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearBeidouB2()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE1.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.galileoE1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.galileoE1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.galileoE1.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.galileoE1.setter, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGalileoE1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGalileoE1()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE5.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 2;
  *(_BYTE *)(a1 + v7[14]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.galileoE5.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.galileoE5.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 2;
    v9[v6[14]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.galileoE5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.galileoE5.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.galileoE5.setter, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasGalileoE5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearGalileoE5()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.sbasL1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.sbasL1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.sbasL1.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.sbasL1.modify;
}

void CLP_LogEntry_PrivateData_SyncState.sbasL1.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.sbasL1.setter, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasSbasL1.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearSbasL1()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.navicL5.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.gpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.gpsL1.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v15;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  *(_BYTE *)(a4 + v13[5]) = 2;
  *(_BYTE *)(a4 + v13[6]) = 2;
  *(_BYTE *)(a4 + v13[7]) = 2;
  *(_BYTE *)(a4 + v13[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.navicL5.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SyncState.navicL5.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  }
  return CLP_LogEntry_PrivateData_SyncState.navicL5.modify;
}

void CLP_LogEntry_PrivateData_SyncState.navicL5.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_SyncState.navicL5.setter, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

BOOL CLP_LogEntry_PrivateData_SyncState.hasNavicL5.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SyncState.clearNavicL5()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

double CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearTimeUncNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t (*CLP_LogEntry_PrivateData_SvTime.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasUncertaintyAdjustedByExternalTool.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvTime.clearUncertaintyAdjustedByExternalTool()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_SvTime.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, 2, a1);
}

double CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 20);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 20);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasFrequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearFrequencyOffsetPpb()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

double CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 24);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 24);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.frequencyOffsetUncPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasFrequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearFrequencyOffsetUncPpb()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffset.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffset.hasUncertaintyAdjustedByExternalTool.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffset.clearUncertaintyAdjustedByExternalTool()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0) + 28)) = 2;
}

int *CLP_LogEntry_PrivateData_FrequencyOffset.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, 2, a1);
}

int *CLP_LogEntry_PrivateData_SvTime.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int *result;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v7 = a3 + result[5];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a3 + result[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a3 + result[7]) = a2;
  return result;
}

double CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasFrequencyOffsetPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearFrequencyOffsetPpb()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

double CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.frequencyOffsetUncPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasFrequencyOffsetUncPpb.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearFrequencyOffsetUncPpb()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.cycleSlipDetected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasCycleSlipDetected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearCycleSlipDetected()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.uncertaintyAdjustedByExternalTool.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hasUncertaintyAdjustedByExternalTool.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0)
                           + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.clearUncertaintyAdjustedByExternalTool()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasPhaseStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearPhaseStartTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.phaseEndTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasPhaseEndTimeNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearPhaseEndTimeNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t (*CLP_LogEntry_PrivateData_PhaseTracking.cycleSlipsDetected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasCycleSlipsDetected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PhaseTracking.clearCycleSlipsDetected()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_PhaseTracking.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

void (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify;
}

void CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

void (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_SignalCorrelationPeak.frequencyOffset.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearFrequencyOffset()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

float CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasCn0Dbhz.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 28) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearCn0Dbhz()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 28);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a1 + v2[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SignalCorrelationPeak._svTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SignalCorrelationPeak._frequencyOffset@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

double CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasDerivedFullSvTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearDerivedFullSvTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

double CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.derivedFullSvTimeUncNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasDerivedFullSvTimeUncNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearDerivedFullSvTimeUncNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter()
{
  return CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

BOOL CLP_LogEntry_PrivateData_FullSvTime.hasFullSvTimeSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FullSvTime.clearFullSvTimeSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0) + 28)) = 6;
}

int *CLP_LogEntry_PrivateData_FullSvTime.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SvTime.init()(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, 6, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_FullSvTime._fullSvTimeSource()
{
  return 6;
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasInnovation.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearInnovation()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

float CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 28);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 28);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvMeasurementUsage.finalUncertainty.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasFinalUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvMeasurementUsage.clearFinalUncertainty()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

int *CLP_LogEntry_PrivateData_SvMeasurementUsage.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 16);
  if (*(_BYTE *)(v1 + 20))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.setter(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(float *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 20) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.jammerCn0DbHz.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 20) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:));
}

float CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.setter(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 28) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.snrAtCorrelatorOutput.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(_BYTE *)(v10 + 28) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSnrAtCorrelatorOutput.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSnrAtCorrelatorOutput()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 28) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 6;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementExtension.fullSvTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFullSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFullSvTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.setter, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeUsageNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeUsageNanoseconds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementExtension.frequencyOffsetUsagePpb.setter, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyOffsetUsagePpb.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyOffsetUsagePpb()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeUsageNanoseconds.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + *a1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9[6];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v9[7];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  }
  return CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementExtension.carrierPhaseUsageNanoseconds.setter, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCarrierPhaseUsageNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCarrierPhaseUsageNanoseconds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(*(_QWORD *)(v1
                           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(int a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5) + *a2;
  result = swift_beginAccess();
  *(_DWORD *)v8 = a1;
  *(_BYTE *)(v8 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.coherentIntegrationMs.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

void CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 84);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)v12 = v6;
  *(_BYTE *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCoherentIntegrationMs.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(_BYTE *)(v3 + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCoherentIntegrationMs()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v9 = swift_allocObject();
    v10 = swift_retain();
    a3(v10);
    *(_QWORD *)(v4 + v8) = v9;
    swift_release();
  }
  v11 = *(_QWORD *)(v4 + v8) + *a4;
  result = swift_beginAccess();
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 7)
    return 0;
  else
    return *v3;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(char a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;

  v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a4(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = (_BYTE *)(*(_QWORD *)(v5 + v10) + *a5);
  result = swift_beginAccess();
  *v13 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyDetectionMethod.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

void CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 80);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyDetectionMethod.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyDetectionMethod()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearSvTimeDetectionMethod()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = (_BYTE *)(*(_QWORD *)(v1 + v3) + *a1);
  result = swift_beginAccess();
  *v6 = 7;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.channelID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.channelID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.channelID.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasChannelID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearChannelID()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
}

float CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds, a1);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasCodeLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearCodeLockDurationSeconds()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds);
}

float CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

float CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  result = *(float *)v3;
  if (*(_BYTE *)(v3 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a3(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v5 + v10) + *a4;
  result = swift_beginAccess();
  *(float *)v13 = a5;
  *(_BYTE *)(v13 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.frequencyLockDurationSeconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

void CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  int v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 84);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)v16 = v10;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasFrequencyLockDurationSeconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearFrequencyLockDurationSeconds()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadata.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)(*(_QWORD *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0)
                                      + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v2 = *v1;
  v3 = v1[1];
  if (v3 >> 60 == 15)
    v4 = 0;
  else
    v4 = *v1;
  outlined copy of Data?(v2, v3);
  return v4;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadata.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = (uint64_t *)(*(_QWORD *)(v2 + v5)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return outlined consume of Data?(v9, v10);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  if (v7 >> 60 == 15)
    v8 = 0;
  else
    v8 = *v5;
  v9 = 0xC000000000000000;
  if (v7 >> 60 != 15)
    v9 = v5[1];
  v3[9] = v8;
  v3[10] = v9;
  outlined copy of Data?(v6, v7);
  return CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.metadata.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    outlined copy of Data._Representation(*(_QWORD *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      v7 = swift_allocObject();
      v8 = swift_retain();
      CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v8);
      *(_QWORD *)(v6 + v5) = v7;
      swift_release();
    }
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    v10 = *v9;
    v11 = v9[1];
    *v9 = v3;
    v9[1] = v4;
    outlined consume of Data?(v10, v11);
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v12 = *(int *)(v2 + 96);
      v13 = *(_QWORD *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
      v14 = swift_allocObject();
      v15 = swift_retain();
      CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v15);
      *(_QWORD *)(v13 + v12) = v14;
      swift_release();
    }
    v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
    swift_beginAccess();
    v17 = *v16;
    v18 = v16[1];
    *v16 = v3;
    v16[1] = v4;
    outlined consume of Data?(v17, v18);
  }
  free((void *)v2);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 8) >> 60 != 15;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearMetadata()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (uint64_t *)(*(_QWORD *)(v0 + v1)
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *(_OWORD *)v4 = xmmword_235BB6C50;
  outlined consume of Data?(v5, v6);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.getter(&OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.setter(int a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.metadataFormat.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.noncoherentIntervalCount.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasMetadataFormat.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementExtension.clearMetadataFormat()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

void (*CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify;
}

void CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementExtension._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.id.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.id.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_Measurement.id.modify;
}

void CLP_LogEntry_PrivateData_Measurement.id.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.id.setter, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.syncState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.syncState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.syncState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  }
  return CLP_LogEntry_PrivateData_Measurement.syncState.modify;
}

void CLP_LogEntry_PrivateData_Measurement.syncState.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.syncState.setter, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasSyncState.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearSyncState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

void (*CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + *a1);
  swift_beginAccess();
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5) + *a2;
  result = swift_beginAccess();
  *(_QWORD *)v8 = a1;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.endTimeNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

void CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(_QWORD *)v12 = v6;
  *(_BYTE *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasEndTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return (*(_BYTE *)(v3 + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearEndTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v9 = swift_allocObject();
    v10 = swift_retain();
    a3(v10);
    *(_QWORD *)(v4 + v8) = v9;
    swift_release();
  }
  v11 = *(_QWORD *)(v4 + v8) + *a4;
  result = swift_beginAccess();
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.getter(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

void (*CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  v3[9] = v6;
  return CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_Measurement.applicabilityTimeNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Measurement.startTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasApplicabilityTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearApplicabilityTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.svTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.svTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.svTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  }
  return CLP_LogEntry_PrivateData_Measurement.svTime.modify;
}

void CLP_LogEntry_PrivateData_Measurement.svTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.svTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasSvTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearSvTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.frequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + v13[5];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a4 + v13[6];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  *(_BYTE *)(a4 + v13[7]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.frequencyOffset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_Measurement.frequencyOffset.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.frequencyOffset.setter, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearFrequencyOffset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.phaseTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.phaseTracking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  }
  return CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify;
}

void CLP_LogEntry_PrivateData_Measurement.phaseTracking.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.phaseTracking.setter, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasPhaseTracking.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearPhaseTracking()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.extension.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.extension.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.extension.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  }
  return CLP_LogEntry_PrivateData_Measurement.extension.modify;
}

void CLP_LogEntry_PrivateData_Measurement.extension.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.extension.setter, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasExtension.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearExtension()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  swift_release();
}

float CLP_LogEntry_PrivateData_Measurement.cn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.cn0DbHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz, a1);
}

void (*CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify;
}

void CLP_LogEntry_PrivateData_Measurement.cn0DbHz.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasCn0DbHz.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearCn0DbHz()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

void (*CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify;
}

void CLP_LogEntry_PrivateData_Measurement.multipathIndicator.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()()
{
  CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator, 5);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  }
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify;
}

void CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffset.setter, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasAveragedFrequencyOffset.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearAveragedFrequencyOffset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.isUsable.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 & 1;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.isUsable.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v1 + v4) = v5;
    swift_release();
  }
  v7 = a1 & 1;
  v8 = (_BYTE *)(*(_QWORD *)(v2 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  result = swift_beginAccess();
  *v8 = v7;
  return result;
}

void (*CLP_LogEntry_PrivateData_Measurement.isUsable.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_Measurement.isUsable.modify;
}

void CLP_LogEntry_PrivateData_Measurement.isUsable.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80))
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasIsUsable.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  return *v1 != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearIsUsable()()
{
  CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(&OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable, 2);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.clearMultipathIndicator()(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = (_BYTE *)(*(_QWORD *)(v2 + v5) + *a1);
  result = swift_beginAccess();
  *v8 = a2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  }
  return CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify;
}

void CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Measurement.averagedFrequencyOffsetFromPhaseTracking.setter, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasAveragedFrequencyOffsetFromPhaseTracking.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Measurement.clearAveragedFrequencyOffsetFromPhaseTracking()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Measurement._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 20);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.innovation.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 20);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyNoisePpbPerSecondPerRtHz.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasFrequencyNoisePpbPerSecondPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearFrequencyNoisePpbPerSecondPerRtHz()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 24);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 24);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.phaseNoisePpbPerRtHz.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasPhaseNoisePpbPerRtHz.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 24) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearPhaseNoisePpbPerRtHz()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 24);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.frequencyVariancePpb2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasFrequencyVariancePpb2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearFrequencyVariancePpb2()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasPhaseVarianceNanoseconds2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 32) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearPhaseVarianceNanoseconds2()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 32);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockModel.clockJumpDetected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockModel.hasClockJumpDetected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockModel.clearClockJumpDetected()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_ReceiverClockModel.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.frequencyCorrectionPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearFrequencyCorrectionPpb()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.cummulativePhaseCorrectionNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCummulativePhaseCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCummulativePhaseCorrectionNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 28);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 28);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureDegreesCelsius.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCurrentTemperatureDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 28) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCurrentTemperatureDegreesCelsius()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 28);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

double CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 32);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 32);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.currentTemperatureRateDegreesPerSecond.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasCurrentTemperatureRateDegreesPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearCurrentTemperatureRateDegreesPerSecond()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 32);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

int *CLP_LogEntry_PrivateData_ReceiverClockCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 20));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 20);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearOffsetNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.subNanosecondOffsetNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasSubNanosecondOffsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearSubNanosecondOffsetNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.offsetUncertaintyNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasOffsetUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearOffsetUncertaintyNanoseconds()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

double CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearDriftPpb()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hasDriftUncertaintyPpb.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 36) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.clearDriftUncertaintyPpb()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 36);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

int *CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Clock.clockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t CLP_LogEntry_PrivateData_Clock.clockNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t (*CLP_LogEntry_PrivateData_Clock.clockNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Clock.hasClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearClockNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t CLP_LogEntry_PrivateData_Clock.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.model.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

void (*CLP_LogEntry_PrivateData_Clock.model.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v9[v6[9]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  }
  return CLP_LogEntry_PrivateData_Clock.model.modify;
}

void CLP_LogEntry_PrivateData_Clock.model.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasModel.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearModel()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

void (*CLP_LogEntry_PrivateData_Clock.corrections.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  }
  return CLP_LogEntry_PrivateData_Clock.corrections.modify;
}

void CLP_LogEntry_PrivateData_Clock.corrections.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasCorrections.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearCorrections()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

void (*CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Clock(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  }
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify;
}

void CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t CLP_LogEntry_PrivateData_Clock.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._model@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._corrections@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Clock._receiverToGpsTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1 + v7[8];
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.clock.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReport.clock.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    v16 = &v9[v6[8]];
    v17 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  }
  return CLP_LogEntry_PrivateData_MeasurementReport.clock.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReport.clock.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementReport.clock.setter, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReport.hasClock.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReport.clearClock()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.measurements.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter(void (*a1)(_QWORD))
{
  a1(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.measurements.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a4(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = (_QWORD *)(*(_QWORD *)(v5 + v10) + *a5);
  swift_beginAccess();
  *v13 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReport.measurements.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
}

void CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v8 + 88);
      v11 = *(_QWORD *)(v8 + 80);
      a3(0);
      v12 = swift_allocObject();
      v13 = swift_retain();
      a4(v13);
      *(_QWORD *)(v11 + v10) = v12;
      swift_release();
    }
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    *v14 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v15 = *(int *)(v8 + 88);
      v16 = *(_QWORD *)(v8 + 80);
      a3(0);
      v17 = swift_allocObject();
      v18 = swift_retain();
      a4(v18);
      *(_QWORD *)(v16 + v15) = v17;
      swift_release();
    }
    v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 80) + *(int *)(v8 + 88)) + *a5);
    swift_beginAccess();
    *v19 = v9;
  }
  swift_bridgeObjectRelease();
  free((void *)v8);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementReport._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.x.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasX.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearX()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.y.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.y.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasY.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearY()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

double CLP_LogEntry_PrivateData_Wgs84Ecef.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Wgs84Ecef.z.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Wgs84Ecef.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Wgs84Ecef.clearZ()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

int *CLP_LogEntry_PrivateData_Wgs84Ecef.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.getter()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.band.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasBand.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearBand()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 20)) = 13;
}

double CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.troposphericNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasTroposphericNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearTroposphericNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasIonosphericNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearIonosphericNanoseconds()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

double CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.txGroupDelayNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasTxGroupDelayNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearTxGroupDelayNanoseconds()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SvBandCorrections.ionosphericModel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SvBandCorrections.hasIonosphericModel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvBandCorrections.clearIonosphericModel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0) + 36)) = 3;
}

int *CLP_LogEntry_PrivateData_SvBandCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  *(_BYTE *)(a1 + result[5]) = 13;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[7];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[8];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvBandCorrections._band()
{
  return 13;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvBandCorrections._ionosphericModel()
{
  return 3;
}

double CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SvPositionAtTime.applicableTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SvPositionAtTime.hasApplicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvPositionAtTime.clearApplicableTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.position.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.position.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void (*CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  }
  return CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify;
}

void CLP_LogEntry_PrivateData_SvPositionAtTime.position.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

BOOL CLP_LogEntry_PrivateData_SvPositionAtTime.hasPosition.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvPositionAtTime.clearPosition()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v3 = a1 + *(int *)(v2 + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(v2 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvPositionAtTime._position@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, a1);
}

double CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityStartTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PolynomialOrbit.hasFitValidityStartTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PolynomialOrbit.clearFitValidityStartTimeNs()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

double CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 36);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 36);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.fitValidityEndTimeNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PolynomialOrbit.hasFitValidityEndTimeNs.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

BOOL CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 36) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PolynomialOrbit.clearFitValidityEndTimeNs()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 36);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0) + 28);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_PrivateData_PolynomialOrbit.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char *v5;
  char *v6;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  a1[2] = v2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  result = UnknownStorage.init()();
  v5 = (char *)a1 + *(int *)(v3 + 32);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = (char *)a1 + *(int *)(v3 + 36);
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Measurement.id.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.id.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  UnknownStorage.init()();
  v12 = a3 + *(int *)(v11 + 20);
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a3 + *(int *)(v11 + 24);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.id.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void (*CLP_LogEntry_PrivateData_SvInfo.id.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_SvInfo.id.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.id.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

void CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, (uint64_t)v9, a4);
    CLP_LogEntry_PrivateData_SvInfo.id.setter((uint64_t)v9, a3, a4, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, a4);
  }
  else
  {
    CLP_LogEntry_PrivateData_SvInfo.id.setter((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearID()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearID()(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id);
}

double CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasReferenceTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

void (*CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 7)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasPositionSource.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasSvTimeDetectionMethod.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource, 7);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

void (*CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
}

double CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

double CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  result = *(double *)v3;
  if (*(_BYTE *)(v3 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v4 + v6) = v7;
    swift_release();
  }
  v9 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess();
  *(double *)v9 = a2;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockBiasCorrectionNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

void CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(_QWORD *)v12 = v6;
  *(_BYTE *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockBiasCorrectionNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockBiasCorrectionNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess();
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyCorrectionPpb.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyCorrectionPpb.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyCorrectionPpb()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyChangeCorrectionPpbPerSec.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyChangeCorrectionPpbPerSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyChangeCorrectionPpbPerSec()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
}

float CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasRangeAccuracyPositionM.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM);
}

float CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.setter(_QWORD *a1, float a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v4 + v6) = v7;
    swift_release();
  }
  v9 = *(_QWORD *)(v4 + v6) + *a1;
  result = swift_beginAccess();
  *(float *)v9 = a2;
  *(_BYTE *)(v9 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyClockNanoseconds.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

void CLP_LogEntry_PrivateData_SvInfo.rangeAccuracyPositionM.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 84);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)v12 = v6;
  *(_BYTE *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasRangeAccuracyClockNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyClockNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearRangeAccuracyPositionM()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v3 + v4) + *a1;
  result = swift_beginAccess();
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 5)
    return 0;
  else
    return *v3;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v4 + v6) = v7;
    swift_release();
  }
  v9 = (_BYTE *)(*(_QWORD *)(v4 + v6) + *a2);
  result = swift_beginAccess();
  *v9 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL1.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

void CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v5 = *a1;
  v6 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 80);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v11);
    swift_release();
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 80)) + *a3);
  swift_beginAccess();
  *v12 = v6;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
}

BOOL CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromSvHealthL1()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;

  v5 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v5 + v6) = v7;
    swift_release();
  }
  v9 = (_BYTE *)(*(_QWORD *)(v5 + v6) + *a1);
  result = swift_beginAccess();
  *v9 = a2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL1.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromOtherSvHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromOtherSvHealthL1()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL1.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasAssistanceFileHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearAssistanceFileHealthL1()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL1.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasMsBasedHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearMsBasedHealthL1()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.integrityHealthL1.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasIntegrityHealthL1.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearIntegrityHealthL1()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.anchorPositions.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v2;
  v6 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v8);
    swift_release();
    *(_QWORD *)(v4 + v6) = v7;
    swift_release();
  }
  v9 = (_QWORD *)(*(_QWORD *)(v4 + v6) + *a2);
  swift_beginAccess();
  *v9 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.svBandCorrections.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
}

void CLP_LogEntry_PrivateData_SvInfo.anchorPositions.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v6 = *(int *)(v4 + 88);
      v7 = *(_QWORD *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      v8 = swift_allocObject();
      v9 = swift_retain();
      specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v9);
      swift_release();
      *(_QWORD *)(v7 + v6) = v8;
      swift_release();
    }
    v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *v10 = v5;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v11 = *(int *)(v4 + 88);
      v12 = *(_QWORD *)(v4 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
      v13 = swift_allocObject();
      v14 = swift_retain();
      specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v14);
      swift_release();
      *(_QWORD *)(v12 + v11) = v13;
      swift_release();
    }
    v15 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 80) + *(int *)(v4 + 88)) + *a3);
    swift_beginAccess();
    *v15 = v5;
  }
  swift_bridgeObjectRelease();
  free((void *)v4);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  v8 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v8;
  a1[2] = v8;
  UnknownStorage.init()();
  v9 = (char *)a1 + *(int *)(v7 + 32);
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a1 + *(int *)(v7 + 36);
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.id.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.id.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v8 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v23 - v14;
  v16 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v17 = swift_allocObject();
    v18 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v18);
    swift_release();
    *(_QWORD *)(v8 + v16) = v17;
    swift_release();
  }
  v19 = *(_QWORD *)(v8 + v16);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v15, a3);
  v20 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v15, 0, 1, v20);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v15, (uint64_t)v13, a2);
  v21 = v19 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v13, v21, a2);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    *v9 = MEMORY[0x24BEE4AF8];
    v9[1] = v11;
    v9[2] = v11;
    UnknownStorage.init()();
    v12 = (char *)v9 + *(int *)(v6 + 32);
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (char *)v9 + *(int *)(v6 + 36);
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  }
  return CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.polynomialOrbit.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasPolynomialOrbit.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearPolynomialOrbit()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearID()(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clearID()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v13);
    swift_release();
    *(_QWORD *)(v7 + v11) = v12;
    swift_release();
  }
  v14 = *(_QWORD *)(v7 + v11);
  v15 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  v16 = v14 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v10, v16, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromSvHealthL5.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromSvHealthL5()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.overTheAirFromOtherSvHealthL5.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasOverTheAirFromOtherSvHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearOverTheAirFromOtherSvHealthL5()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.assistanceFileHealthL5.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasAssistanceFileHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearAssistanceFileHealthL5()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.msBasedHealthL5.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasMsBasedHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearMsBasedHealthL5()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5, 5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

void (*CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.integrityHealthL5.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasIntegrityHealthL5.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearIntegrityHealthL5()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5, 5);
}

double CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.setter(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec, a1);
}

void (*CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.clockFrequencyAccelCorrectionPpbPerSecPerSec.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasClockFrequencyAccelCorrectionPpbPerSecPerSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearClockFrequencyAccelCorrectionPpbPerSecPerSec()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearReferenceTimeNanoseconds()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v1 == 4)
    return 0;
  else
    return *v1;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.setter(char a1)
{
  return CLP_LogEntry_PrivateData_SvInfo.positionSource.setter(a1, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

void (*CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify;
}

void CLP_LogEntry_PrivateData_SvInfo.svReferencePoint.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_SvInfo.positionSource.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
}

BOOL CLP_LogEntry_PrivateData_SvInfo.hasSvReferencePoint.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  return *v1 != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SvInfo.clearSvReferencePoint()()
{
  CLP_LogEntry_PrivateData_SvInfo.clearPositionSource()(&OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint, 4);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SvInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.getter()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.band.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 13)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.band.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasBand.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearBand()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 20)) = 13;
}

double CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasRfTimeBiasNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearRfTimeBiasNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.rfTimeBiasUncertaintyNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasRfTimeBiasUncertaintyNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearRfTimeBiasUncertaintyNanoseconds()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

float CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 32);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 32);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReceiverBandCorrections.automaticGainControlDb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceiverBandCorrections.hasAutomaticGainControlDb.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceiverBandCorrections.clearAutomaticGainControlDb()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

int *CLP_LogEntry_PrivateData_ReceiverBandCorrections.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  *(_BYTE *)(a1 + result[5]) = 13;
  v3 = a1 + result[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondChange.timeOfChange.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondChange.hasTimeOfChange.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondChange.clearTimeOfChange()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondChange.hasNewLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondChange.clearNewLeapSecond()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(result + 24);
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondInfo.currentLeapSecond.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasCurrentLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearCurrentLeapSecond()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.slotSource.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_LeapSecondInfo.changeKnowledge.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasChangeKnowledge.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearChangeKnowledge()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

void (*CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  }
  return CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify;
}

void CLP_LogEntry_PrivateData_LeapSecondInfo.newLeapSecond.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL CLP_LogEntry_PrivateData_LeapSecondInfo.hasNewLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 28), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LeapSecondInfo.clearNewLeapSecond()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t CLP_LogEntry_PrivateData_Clock.clearCorrections()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + v2[6]) = 5;
  v4 = a1 + v2[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_LeapSecondInfo._newLeapSecond@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.applicableTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasApplicableTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearApplicableTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.offsetNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasOffsetNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearOffsetNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.driftPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearDriftPpb()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

double CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsToUtcConversion.accelPpbPerSecond.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsToUtcConversion.hasAccelPpbPerSecond.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsToUtcConversion.clearAccelPpbPerSecond()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

int *CLP_LogEntry_PrivateData_GpsToUtcConversion.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GpsTimeInfo.week.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearWeek()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

void (*CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify;
}

void CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasLeapSecond.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearLeapSecond()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

void (*CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify;
}

void CLP_LogEntry_PrivateData_GpsTimeInfo.conversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

BOOL CLP_LogEntry_PrivateData_GpsTimeInfo.hasConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GpsTimeInfo.clearConversion()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GpsTimeInfo._leapSecond@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GpsTimeInfo._conversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSubsecondConversion.collectionTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hasCollectionTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSubsecondConversion.clearCollectionTimeNanoseconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

double CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassSubsecondConversion.offsetTimeNanoseconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hasOffsetTimeNanoseconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassSubsecondConversion.clearOffsetTimeNanoseconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + *(int *)(result + 24);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.fourWeekPeriod.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasFourWeekPeriod.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearFourWeekPeriod()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.day.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 24));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.day.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.day.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasDay.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearDay()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.fullSvTimeSource.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 28));
  if (v2 == 6)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GlonassTimeInfo.leapSecondDeprecated.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 6)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasLeapSecondDeprecated.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearLeapSecondDeprecated()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 28)) = 6;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

void (*CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

BOOL CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 32), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearGpsTimeConversion()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_GlonassTimeInfo.utcConversionDeprecated.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  }
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_GlonassTimeInfo.hasUtcConversionDeprecated.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GlonassTimeInfo.clearUtcConversionDeprecated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_BYTE *)(a1 + v2[7]) = 6;
  v5 = a1 + v2[8];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v8(v5, 1, 1, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a1 + v2[9], 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GlonassTimeInfo._gpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.applicableTimeNanoSeconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasApplicableTimeNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearApplicableTimeNanoSeconds()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.offsetNanoSeconds.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasOffsetNanoSeconds.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearOffsetNanoSeconds()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

double CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SubSecondConversion.driftPpb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SubSecondConversion.hasDriftPpb.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SubSecondConversion.clearDriftPpb()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

int *CLP_LogEntry_PrivateData_SubSecondConversion.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

int *CLP_LogEntry_PrivateData_Wgs84Ecef.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + result[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + result[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.week.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 20))
    return 0;
  else
    return *(unsigned int *)(v1 + 16);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.week.setter(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_DWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 20) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(_DWORD *)(v5 + 16);
  if (*(_BYTE *)(v5 + 20))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.week.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 20) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_MeasurementExtension.hasJammerCn0DbHz.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 20) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearWeek()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:));
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.clearJammerCn0DbHz()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v7 = swift_allocObject();
    v8 = swift_retain();
    a3(v8);
    *(_QWORD *)(v3 + v6) = v7;
    swift_release();
  }
  v9 = *(_QWORD *)(v3 + v6);
  result = swift_beginAccess();
  *(_DWORD *)(v9 + 16) = 0;
  *(_BYTE *)(v9 + 20) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  *(_BYTE *)(a1 + v7[6]) = 5;
  v9 = a1 + v7[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_BeidouTimeInfo.leapSecondDeprecated.setter, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasLeapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearLeapSecondDeprecated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.setter, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGpsTimeConversion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_BeidouTimeInfo.glonassTimeConversion.setter, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGlonassTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGlonassTimeConversion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_BeidouTimeInfo.galileoTimeConversion.setter, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasGalileoTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearGalileoTimeConversion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify;
}

void CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_BeidouTimeInfo.utcTimeConversionDeprecated.setter, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_BeidouTimeInfo.hasUtcTimeConversionDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BeidouTimeInfo.clearUtcTimeConversionDeprecated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_BeidouTimeInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.slotNum.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_GalileoTimeInfo.week.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearWeek()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + v9[6]) = 5;
  v11 = a2 + v9[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.leapSecondDeprecated.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v9[v6[6]] = 5;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  }
  return CLP_LogEntry_PrivateData_GpsTimeInfo.leapSecond.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasLeapSecondDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearLeapSecondDeprecated()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_Clock.corrections.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

void CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearGpsTimeConversion()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_GalileoTimeInfo.hasUtcTimeConversionDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GalileoTimeInfo.clearUtcTimeConversionDeprecated()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v3 = a1 + v2[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + v2[6];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v9(v6, 1, 1, v7);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(a1 + v2[8], 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GalileoTimeInfo._gpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, a1);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

void (*CLP_LogEntry_PrivateData_NavicTimeInfo.gpsTimeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  }
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.gpsTimeConversion.modify;
}

BOOL CLP_LogEntry_PrivateData_NavicTimeInfo.hasGpsTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

BOOL CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 20), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_NavicTimeInfo.clearGpsTimeConversion()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.week.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.week.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_NavicTimeInfo.week.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_NavicTimeInfo.hasWeek.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_NavicTimeInfo.clearWeek()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v3 = a1 + *(int *)(v2 + 20);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + *(int *)(v2 + 24);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.gps.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.gps.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.gps.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TimeConversionInfo.gps.setter, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGps.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v7[7]) = 6;
  v10 = a1 + v7[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(a1 + v7[9], 1, 1, v11);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v9[v6[7]] = 6;
    v13 = &v9[v6[8]];
    v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v15(v13, 1, 1, v14);
    v15(&v9[v6[9]], 1, 1, v14);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TimeConversionInfo.glonass.setter, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGlonass.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGlonass()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TimeConversionInfo.beidou.setter, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasBeidou.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearBeidou()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[6];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = a1 + v7[7];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(a1 + v7[8], 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = &v9[v6[7]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    v16(&v9[v6[8]], 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TimeConversionInfo.galileo.setter, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasGalileo.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearGalileo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.navic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + *(int *)(v7 + 24);
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.navic.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[*(int *)(v6 + 24)];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  }
  return CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify;
}

void CLP_LogEntry_PrivateData_TimeConversionInfo.navic.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TimeConversionInfo.navic.setter, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

BOOL CLP_LogEntry_PrivateData_TimeConversionInfo.hasNavic.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeConversionInfo.clearNavic()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TimeConversionInfo._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeTimeFullGpsNs.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasDecodeTimeFullGpsNs.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearDecodeTimeFullGpsNs()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha0.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha0.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha0()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha1.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha1.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha1()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha2()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 36);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 36);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.alpha3.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasAlpha3.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearAlpha3()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 40);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta0.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta0.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 40) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta0()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 40);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 44);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta1.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta1.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 44) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta1()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 44);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 48);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta2.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48)
                   + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta2()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 48);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

float CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v4 = v1 + *(int *)(result + 52);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_KlobucharModelParameters.beta3.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_KlobucharModelParameters.hasBeta3.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52)
                   + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_KlobucharModelParameters.clearBeta3()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0) + 52);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

int *CLP_LogEntry_PrivateData_KlobucharModelParameters.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[9];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[10];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[11];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[12];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + result[13];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_SfcfXyz.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.x.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasX.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearX()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double CLP_LogEntry_PrivateData_SfcfXyz.y.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.y.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasY.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearY()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

double CLP_LogEntry_PrivateData_SfcfXyz.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_SfcfXyz.z.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_SfcfXyz.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SfcfXyz.clearZ()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

int *CLP_LogEntry_PrivateData_SfcfXyz.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 20);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  }
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify;
}

void CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.id.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasID.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearID()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 24));
  if (v1 == 13)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.band.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 13)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasBand.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) != 13;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearBand()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 24)) = 13;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0)
                                   + 28));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.svReferencePoint.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasSvReferencePoint.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearSvReferencePoint()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 28)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.utcTimeConversionDeprecated.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *(int *)(v12 + 32), (uint64_t)v11, a1);
  v13 = (int *)a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v11, 1, v13) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, a4, a3);
  UnknownStorage.init()();
  v14 = a4 + v13[5];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a4 + v13[6];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a4 + v13[7];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  }
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify;
}

void CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.offsetXyzM.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

BOOL CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hasOffsetXyzM.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.clearOffsetXyzM()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 13;
  *(_BYTE *)(a1 + v2[7]) = 4;
  v5 = a1 + v2[8];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._id@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_SvId, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._svReferencePoint()
{
  return 4;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._offsetXyzM@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, a1);
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.iosAbsoluteSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasIosAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearIosAbsoluteSec()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.machAbsoluteSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasMachAbsoluteSec.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearMachAbsoluteSec()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

double CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ReceivedTimeStamp.machContinuousSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ReceivedTimeStamp.hasMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReceivedTimeStamp.clearMachContinuousSec()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

int *CLP_LogEntry_PrivateData_ReceivedTimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  v15 = (int *)a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v13, 1, v15) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + v15[5];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + v15[6];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a5 + v15[7];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.receivedTimestamp.setter, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasReceivedTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearReceivedTimestamp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measReport.setter, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasReport.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasReport()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.svInfo.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.rxBandCorrections.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.timeConversion.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasTimeConversion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearTimeConversion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec, a1);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasApplicabilityTimeMachContinuousSec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasApplicabilityTimeMachContinuousSec()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
}

double CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(&OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.setter(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5) + *a1;
  result = swift_beginAccess();
  *(double *)v8 = a2;
  *(_BYTE *)(v8 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeUncertaintySec.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.measApplicabilityTimeMachContinuousSec.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 88);
    v9 = *(_QWORD *)(v5 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 80) + *(int *)(v5 + 88)) + *a3;
  swift_beginAccess();
  *(_QWORD *)v12 = v6;
  *(_BYTE *)(v12 + 8) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasMeasApplicabilityTimeUncertaintySec.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearMeasApplicabilityTimeUncertaintySec()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20))
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[8];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[10];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[11];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[12];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a1 + v7[13];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                           + 20))
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[8]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[9]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[10]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[11]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[12]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v19 = &v9[v6[13]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  }
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.klobucharModel.setter, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

BOOL CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hasKlobucharModel.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.clearKlobucharModel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.getter((void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

void (*CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify;
}

void CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.apcSvOffset.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.topCorrelationPeaks.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SatelliteSystem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SatelliteSystem._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Band._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Band._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Band@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Band._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FullSvTimeSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTimeSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementDetectionMethod._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MultipathIndicator@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MultipathIndicator._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvPositionSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvHealthIndication@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvHealthIndication._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IonosphericCorrectionSource._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvReferencePoint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvReferencePoint._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassSlotInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSlotInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassSlotInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_BYTE *)(a2 + v5) = 5;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSlotInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GlonassId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassId.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;

  v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_235BB5D00;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v8 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = 8;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C328];
  v16 = type metadata accessor for _NameMap.NameDescription();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)((char *)v13 + v10) = 2;
  *(_QWORD *)v18 = a4;
  *((_QWORD *)v18 + 1) = a5;
  v18[16] = 2;
  v17();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C2A8], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:));
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

Swift::Int CLP_LogEntry_PrivateData_GlonassId.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId(a1, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassId()
{
  return CLP_LogEntry_PrivateData_GlonassId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ConstellationId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ConstellationId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ConstellationId.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v10 = result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5, a1, a2, a3);
    if ((*(_BYTE *)(v5 + *(int *)(v10 + 28) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + *(int *)(v10 + 32) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    closure #6 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    closure #7 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(v5);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ConstellationId.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ConstellationId@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a1[8];
  v10 = a2 + a1[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a2 + v9;
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1[10];
  v13 = a2 + a1[9];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a2 + v12;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ConstellationId()
{
  return CLP_LogEntry_PrivateData_ConstellationId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ConstellationId.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ConstellationId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ConstellationId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ConstellationId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ConstellationId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ConstellationId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvId.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvId.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvId.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_SvId._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvId.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C2F0], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:));
}

uint64_t CLP_LogEntry_PrivateData_GlonassId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t result;
  unsigned int *v15;

  v10 = v6;
  result = a4(0);
  v15 = (unsigned int *)(v10 + *(int *)(result + 20));
  if ((v15[1] & 1) == 0)
    result = a5(*v15, 1, a2, a3);
  if (!v7)
  {
    a6(v10, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SvId.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

Swift::Int CLP_LogEntry_PrivateData_SvId.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvId, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId(a1, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassId@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v6 = *(int *)(a1 + 24);
  v7 = a3 + *(int *)(a1 + 20);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a3 + v6;
  v9 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvId()
{
  return CLP_LogEntry_PrivateData_SvId.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvId@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvId._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvId()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL1SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL2CSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL2CSyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL2CSyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          a4(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsL5SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v7;

  result = a4(0);
  v7 = (int *)result;
  if (*(_BYTE *)(v4 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v5)
  {
    if (*(_BYTE *)(v4 + v7[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + v7[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + v7[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GpsL5SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GpsL5SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsL5SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsL5SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v4)
  {
    while ((v7 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          a4(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassL1fSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t CLP_LogEntry_PrivateData_GpsL2CSyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v7;

  result = a4(0);
  v7 = (int *)result;
  if (*(_BYTE *)(v4 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v5)
  {
    if (*(_BYTE *)(v4 + v7[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + v7[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + v7[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + v7[9]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassL1fSyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsL2CSyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassL1fSyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouB1SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;

  v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_235BB6C80;
  v9 = v8 + v7;
  v10 = v8 + v7 + *(int *)(v4 + 48);
  *(_QWORD *)(v8 + v7) = 1;
  *(_QWORD *)v10 = "code_lock";
  *(_QWORD *)(v10 + 8) = 9;
  *(_BYTE *)(v10 + 16) = 2;
  v11 = *MEMORY[0x24BE5C328];
  v12 = type metadata accessor for _NameMap.NameDescription();
  v13 = *(void (**)(void))(*(_QWORD *)(v12 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v13)(v10, v11, v12);
  v14 = v9 + v6 + *(int *)(v4 + 48);
  *(_QWORD *)(v9 + v6) = 2;
  *(_QWORD *)v14 = "nav_bit";
  *(_QWORD *)(v14 + 8) = 7;
  *(_BYTE *)(v14 + 16) = 2;
  v13();
  v15 = (_QWORD *)(v9 + 2 * v6);
  v16 = (char *)v15 + *(int *)(v4 + 48);
  *v15 = 3;
  *(_QWORD *)v16 = "subframe";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v13();
  v17 = (_QWORD *)(v9 + 3 * v6);
  v18 = (char *)v17 + *(int *)(v4 + 48);
  *v17 = 4;
  *(_QWORD *)v18 = "tow_decoded";
  *((_QWORD *)v18 + 1) = 11;
  v18[16] = 2;
  v13();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t CLP_LogEntry_PrivateData_BeidouB2SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouB2SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouB2SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouB2SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE1SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GalileoE1SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsL1SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoE5SyncState.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_BYTE *)(v0 + v3[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #6 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #7 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #8 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #9 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    closure #10 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 36)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 44)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 48)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 52)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 56)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GalileoE5SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v6) = 2;
  v7 = a1[10];
  *(_BYTE *)(a2 + a1[9]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  v8 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  v9 = a1[14];
  *(_BYTE *)(a2 + a1[13]) = 2;
  *(_BYTE *)(a2 + v9) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return CLP_LogEntry_PrivateData_GalileoE5SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return CLP_LogEntry_PrivateData_GalileoE5SyncState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoE5SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SbasL1SyncState.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SbasL1SyncState.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + *(int *)(v3 + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SbasL1SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SbasL1SyncState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 2;
  *(_BYTE *)(a2 + v5) = 2;
  *(_BYTE *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return CLP_LogEntry_PrivateData_SbasL1SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return CLP_LogEntry_PrivateData_SbasL1SyncState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SbasL1SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SbasL1SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SyncState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SyncState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SyncState.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x24BDAC7A8](v4);
  v83 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x24BDAC7A8](v6);
  v82 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x24BDAC7A8](v8);
  v81 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x24BDAC7A8](v10);
  v80 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x24BDAC7A8](v12);
  v79 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x24BDAC7A8](v14);
  v77 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x24BDAC7A8](v16);
  v74 = (uint64_t)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x24BDAC7A8](v18);
  v70 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x24BDAC7A8](v20);
  v68 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 16) = 13;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v24 = *(void (**)(void))(*(_QWORD *)(v23 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v22, 1, 1, v23);
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v69 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v72 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  v36 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  v38 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  v40 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 1, 1, v40);
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  v24();
  swift_beginAccess();
  LOBYTE(v23) = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v23;
  v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  v42 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  v44 = v70;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v70, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v44, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  swift_endAccess();
  v45 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  v46 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v46, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  swift_endAccess();
  v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  v48 = v77;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  v49 = v69;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v48, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  swift_endAccess();
  v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  v51 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  v52 = v71;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v51, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  swift_endAccess();
  v53 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  v54 = v80;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  v55 = v72;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v54, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  swift_endAccess();
  v56 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  v57 = v81;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  v58 = v73;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v57, v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  swift_endAccess();
  v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  v60 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v61 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v60, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  swift_endAccess();
  v62 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  v63 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v64 = v76;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v63, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  swift_endAccess();
  v65 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v65, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_release();
  v66 = v78;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  swift_endAccess();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_SyncState._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_SyncState._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_18;
        case 2:
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState;
          goto LABEL_17;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState;
          goto LABEL_17;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState;
          goto LABEL_17;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState;
          goto LABEL_17;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState;
          goto LABEL_17;
        case 7:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState;
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState;
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState;
          goto LABEL_17;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState;
LABEL_17:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_18:
          v2 = v9;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(_BYTE *)(v9 + 16) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #10 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t closure #10 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  _BOOL8 result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  unsigned int (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v219 = *(_QWORD *)(v4 - 8);
  v220 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v208 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SbasL1SyncState?, CLP_LogEntry_PrivateData_SbasL1SyncState?));
  MEMORY[0x24BDAC7A8](v218);
  v8 = (char *)&v208 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v214 = (uint64_t)&v208 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v222 = (uint64_t)&v208 - v12;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v224 = *(_QWORD *)(v13 - 8);
  v225 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v215 = (uint64_t)&v208 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE5SyncState?, CLP_LogEntry_PrivateData_GalileoE5SyncState?));
  MEMORY[0x24BDAC7A8](v223);
  v226 = (uint64_t)&v208 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v236 = (char *)&v208 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v228 = (uint64_t)&v208 - v19;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(0);
  v231 = *(_QWORD *)(v20 - 8);
  v232 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v221 = (uint64_t)&v208 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE1SyncState?, CLP_LogEntry_PrivateData_GalileoE1SyncState?));
  MEMORY[0x24BDAC7A8](v230);
  v233 = (uint64_t)&v208 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v227 = (uint64_t)&v208 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v248 = (uint64_t)&v208 - v26;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(0);
  v238 = *(_QWORD *)(v27 - 8);
  v239 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v229 = (uint64_t)&v208 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB2SyncState?, CLP_LogEntry_PrivateData_BeidouB2SyncState?));
  MEMORY[0x24BDAC7A8](v237);
  v240 = (uint64_t)&v208 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v234 = (uint64_t)&v208 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v242 = (uint64_t)&v208 - v33;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(0);
  v245 = *(_QWORD *)(v34 - 8);
  v246 = v34;
  MEMORY[0x24BDAC7A8](v34);
  v235 = (uint64_t)&v208 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB1SyncState?, CLP_LogEntry_PrivateData_BeidouB1SyncState?));
  MEMORY[0x24BDAC7A8](v244);
  v247 = (uint64_t)&v208 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v241 = (uint64_t)&v208 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v250 = (uint64_t)&v208 - v40;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(0);
  v253 = *(_QWORD *)(v41 - 8);
  v254 = v41;
  MEMORY[0x24BDAC7A8](v41);
  v243 = (uint64_t)&v208 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassL1fSyncState?, CLP_LogEntry_PrivateData_GlonassL1fSyncState?));
  MEMORY[0x24BDAC7A8](v252);
  v255 = (uint64_t)&v208 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v249 = (uint64_t)&v208 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v269 = (uint64_t)&v208 - v47;
  v48 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(0);
  v259 = *(_QWORD *)(v48 - 8);
  v260 = v48;
  MEMORY[0x24BDAC7A8](v48);
  v251 = (uint64_t)&v208 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL5SyncState?, CLP_LogEntry_PrivateData_GpsL5SyncState?));
  MEMORY[0x24BDAC7A8](v258);
  v261 = (uint64_t)&v208 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
  v52 = MEMORY[0x24BDAC7A8](v51);
  v256 = (uint64_t)&v208 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52);
  v270 = (uint64_t)&v208 - v54;
  v267 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(0);
  v265 = *(_QWORD *)(v267 - 8);
  MEMORY[0x24BDAC7A8](v267);
  v257 = (uint64_t)&v208 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL2CSyncState?, CLP_LogEntry_PrivateData_GpsL2CSyncState?));
  MEMORY[0x24BDAC7A8](v264);
  v268 = (uint64_t)&v208 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
  v58 = MEMORY[0x24BDAC7A8](v57);
  v262 = (uint64_t)&v208 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v58);
  v266 = (uint64_t)&v208 - v60;
  v272 = type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(0);
  v61 = *(_QWORD *)(v272 - 8);
  MEMORY[0x24BDAC7A8](v272);
  v263 = (uint64_t)&v208 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
  v63 = MEMORY[0x24BDAC7A8](v271);
  v217 = (uint64_t)&v208 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v63);
  v66 = (char *)&v208 - v65;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
  v68 = MEMORY[0x24BDAC7A8](v67);
  v213 = (uint64_t)&v208 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = MEMORY[0x24BDAC7A8](v68);
  v216 = (uint64_t)&v208 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v74 = (char *)&v208 - v73;
  MEMORY[0x24BDAC7A8](v72);
  v76 = (char *)&v208 - v75;
  swift_beginAccess();
  v77 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess();
  v78 = *(unsigned __int8 *)(a2 + 16);
  if (v77 == 13)
  {
    if (v78 != 13)
      return 0;
LABEL_6:
    v211 = v6;
    v212 = v8;
    v80 = a2;
    v81 = a1;
    v82 = a1
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, (uint64_t)v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    v83 = a2
        + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL1;
    swift_beginAccess();
    v84 = (uint64_t)&v66[*(int *)(v271 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76, (uint64_t)v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
    v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    v86 = v272;
    if (v85((uint64_t)v66, 1, v272) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      if (v85(v84, 1, v86) == 1)
      {
        v209 = v85;
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        v87 = v80;
        goto LABEL_13;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v66, (uint64_t)v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      if (v85(v84, 1, v86) != 1)
      {
        v209 = v85;
        v88 = v263;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v84, v263, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        swift_retain();
        v87 = v80;
        swift_retain();
        v89 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)((uint64_t)v74, v88, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v88, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v66, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
        if ((v89 & 1) == 0)
          goto LABEL_44;
LABEL_13:
        v210 = v81;
        v90 = v81
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        v91 = v266;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v90, v266, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        v92 = v87
            + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL2C;
        swift_beginAccess();
        v93 = v268;
        v94 = v268 + *(int *)(v264 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, v268, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        v95 = v93;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v92, v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
        v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v265 + 48);
        v97 = v93;
        v98 = v267;
        v99 = v87;
        if (v96(v97, 1, v267) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          v100 = v96(v94, 1, v98);
          v101 = v210;
          v102 = v269;
          v103 = v270;
          if (v100 == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            goto LABEL_22;
          }
        }
        else
        {
          v104 = v262;
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, v262, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          v105 = v96(v94, 1, v98);
          v106 = v269;
          v103 = v270;
          if (v105 != 1)
          {
            v107 = v94;
            v108 = v91;
            v109 = v104;
            v110 = v257;
            outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v107, v257, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            LODWORD(v267) = specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(v109, v110, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v110, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
            v101 = v210;
            v102 = v106;
            if ((v267 & 1) == 0)
              goto LABEL_44;
LABEL_22:
            v111 = v101;
            v112 = v101
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            v113 = v99;
            v114 = v99
                 + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsL5;
            swift_beginAccess();
            v115 = v261;
            v116 = v261 + *(int *)(v258 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, v261, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
            v117 = v260;
            v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v259 + 48);
            if (v118(v115, 1, v260) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              v119 = v118(v116, 1, v117);
              v120 = v113;
              if (v119 == 1)
              {
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                v121 = v111;
LABEL_29:
                v125 = v121
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v125, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                v126 = v120
                     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassL1F;
                swift_beginAccess();
                v127 = v255;
                v128 = v255 + *(int *)(v252 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, v255, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, v128, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                v129 = v254;
                v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v253 + 48);
                if (v130(v127, 1, v254) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  if (v130(v128, 1, v129) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                    goto LABEL_36;
                  }
LABEL_34:
                  v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassL1fSyncState?, CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  goto LABEL_42;
                }
                v131 = v249;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v249, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                if (v130(v128, 1, v129) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v269, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v131, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                  goto LABEL_34;
                }
                v133 = v243;
                outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v128, v243, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                v134 = specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(v131, v133, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v133, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v269, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v131, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?);
                if ((v134 & 1) != 0)
                {
LABEL_36:
                  v135 = v121
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                  swift_beginAccess();
                  v136 = v250;
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v135, v250, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                  v137 = v120
                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB1;
                  swift_beginAccess();
                  v127 = v247;
                  v138 = v247 + *(int *)(v244 + 48);
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v136, v247, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v137, v138, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                  v139 = v246;
                  v140 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v245 + 48);
                  if (v140(v127, 1, v246) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v136, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    v141 = v140(v138, 1, v139);
                    v142 = v248;
                    if (v141 == 1)
                    {
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      goto LABEL_49;
                    }
                  }
                  else
                  {
                    v143 = v241;
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v241, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    v144 = v140(v138, 1, v139);
                    v142 = v248;
                    if (v144 != 1)
                    {
                      v146 = v235;
                      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v138, v235, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                      v147 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v143, v146, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v146, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v250, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v143, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                      if ((v147 & 1) == 0)
                        goto LABEL_44;
LABEL_49:
                      v148 = v121
                           + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                      swift_beginAccess();
                      v149 = v148;
                      v150 = v242;
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v149, v242, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                      v151 = v120
                           + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidouB2;
                      swift_beginAccess();
                      v152 = v240;
                      v153 = v240 + *(int *)(v237 + 48);
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, v240, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v151, v153, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                      v154 = v239;
                      v155 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v238 + 48);
                      if (v155(v152, 1, v239) == 1)
                      {
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        v156 = v155(v153, 1, v154);
                        v157 = (uint64_t)v236;
                        if (v156 == 1)
                        {
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v152, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          goto LABEL_56;
                        }
                      }
                      else
                      {
                        v158 = v234;
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v152, v234, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        v159 = v155(v153, 1, v154);
                        v157 = (uint64_t)v236;
                        if (v159 != 1)
                        {
                          v160 = v153;
                          v161 = v158;
                          v162 = v229;
                          outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v160, v229, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                          LODWORD(v270) = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v161, v162, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v162, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v242, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v161, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v152, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                          if ((v270 & 1) == 0)
                            goto LABEL_44;
LABEL_56:
                          v163 = v121
                               + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                          swift_beginAccess();
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v163, v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                          v164 = v120
                               + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE1;
                          swift_beginAccess();
                          v165 = v142;
                          v166 = v233;
                          v167 = v233 + *(int *)(v230 + 48);
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v165, v233, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                          v168 = v164;
                          v127 = v166;
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, v167, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                          v169 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48);
                          v170 = v166;
                          v171 = v232;
                          if (v169(v170, 1, v232) == 1)
                          {
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v165, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            if (v169(v167, 1, v171) == 1)
                            {
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
LABEL_63:
                              v175 = v121
                                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                              swift_beginAccess();
                              v176 = v228;
                              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v175, v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                              v177 = v120
                                   + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoE5;
                              swift_beginAccess();
                              v178 = v226;
                              v179 = v226 + *(int *)(v223 + 48);
                              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v176, v226, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                              v180 = v177;
                              v127 = v178;
                              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v180, v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                              v181 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v224 + 48);
                              v182 = v178;
                              v183 = v225;
                              if (v181(v182, 1, v225) == 1)
                              {
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v176, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                if (v181(v179, 1, v183) == 1)
                                {
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
LABEL_70:
                                  v186 = v121
                                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                  swift_beginAccess();
                                  v187 = v222;
                                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v186, v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                  v188 = v120
                                       + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__sbasL1;
                                  swift_beginAccess();
                                  v189 = (uint64_t)v212;
                                  v190 = (uint64_t)&v212[*(int *)(v218 + 48)];
                                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v187, (uint64_t)v212, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                  v191 = v188;
                                  v127 = v189;
                                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v191, v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                  v192 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48);
                                  v193 = v189;
                                  v194 = v220;
                                  if (v192(v193, 1, v220) == 1)
                                  {
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    if (v192(v190, 1, v194) == 1)
                                    {
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
LABEL_77:
                                      v198 = v121
                                           + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                      swift_beginAccess();
                                      v199 = v216;
                                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v198, v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      v200 = v120
                                           + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_SyncStateP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navicL5;
                                      swift_beginAccess();
                                      v201 = v217;
                                      v202 = v217 + *(int *)(v271 + 48);
                                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v199, v217, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v200, v202, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      v203 = v272;
                                      v204 = v209;
                                      if (v209(v201, 1, v272) == 1)
                                      {
                                        swift_release();
                                        swift_release();
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        if (v204(v202, 1, v203) == 1)
                                        {
                                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                          return 1;
                                        }
                                        goto LABEL_82;
                                      }
                                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      if (v204(v202, 1, v203) == 1)
                                      {
                                        swift_release();
                                        swift_release();
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v213, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
LABEL_82:
                                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
                                        return 0;
                                      }
                                      v205 = v263;
                                      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v202, v263, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                      v206 = v213;
                                      v207 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v213, v205, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                      swift_release();
                                      swift_release();
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v205, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v206, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
                                      return (v207 & 1) != 0;
                                    }
                                  }
                                  else
                                  {
                                    v195 = v214;
                                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v214, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    if (v192(v190, 1, v194) != 1)
                                    {
                                      v196 = (uint64_t)v211;
                                      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v190, (uint64_t)v211, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                      v197 = specialized static CLP_LogEntry_PrivateData_SbasL1SyncState.== infix(_:_:)(v195, v196);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v196, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v195, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v212, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                      if ((v197 & 1) != 0)
                                        goto LABEL_77;
                                      goto LABEL_44;
                                    }
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v195, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                                    v127 = (uint64_t)v212;
                                  }
                                  v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SbasL1SyncState?, CLP_LogEntry_PrivateData_SbasL1SyncState?);
                                  goto LABEL_42;
                                }
                              }
                              else
                              {
                                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v157, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                if (v181(v179, 1, v183) != 1)
                                {
                                  v184 = v215;
                                  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v179, v215, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                  v185 = specialized static CLP_LogEntry_PrivateData_GalileoE5SyncState.== infix(_:_:)(v157, v184);
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v184, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v157, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                  if ((v185 & 1) == 0)
                                    goto LABEL_44;
                                  goto LABEL_70;
                                }
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?);
                                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v157, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                              }
                              v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE5SyncState?, CLP_LogEntry_PrivateData_GalileoE5SyncState?);
LABEL_42:
                              v145 = v127;
LABEL_43:
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v145, v132);
                              goto LABEL_44;
                            }
                          }
                          else
                          {
                            v172 = v227;
                            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            if (v169(v167, 1, v171) != 1)
                            {
                              v173 = v221;
                              outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v167, v221, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                              v174 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v172, v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v173, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v248, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                              if ((v174 & 1) == 0)
                                goto LABEL_44;
                              goto LABEL_63;
                            }
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v248, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v172, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
                          }
                          v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoE1SyncState?, CLP_LogEntry_PrivateData_GalileoE1SyncState?);
                          goto LABEL_42;
                        }
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v242, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v158, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
                      }
                      v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB2SyncState?, CLP_LogEntry_PrivateData_BeidouB2SyncState?);
                      v145 = v152;
                      goto LABEL_43;
                    }
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v250, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v143, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
                  }
                  v132 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouB1SyncState?, CLP_LogEntry_PrivateData_BeidouB1SyncState?);
                  goto LABEL_42;
                }
LABEL_44:
                swift_release();
                goto LABEL_45;
              }
            }
            else
            {
              v122 = v256;
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, v256, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              if (v118(v116, 1, v117) != 1)
              {
                v123 = v251;
                outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v116, v251, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                v124 = specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(v122, v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v123, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v270, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v122, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
                v120 = v113;
                v121 = v111;
                if ((v124 & 1) == 0)
                  goto LABEL_44;
                goto LABEL_29;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v270, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?);
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v122, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
            }
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL5SyncState?, CLP_LogEntry_PrivateData_GpsL5SyncState?));
            goto LABEL_44;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v104, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v95, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL2CSyncState?, CLP_LogEntry_PrivateData_GpsL2CSyncState?));
        goto LABEL_44;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v74, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v66, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsL1SyncState?, CLP_LogEntry_PrivateData_GpsL1SyncState?));
    swift_release();
LABEL_45:
    swift_release();
    return 0;
  }
  result = 0;
  if (v78 != 13 && v77 == v78)
    goto LABEL_6;
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SyncState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SyncState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SyncState._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SyncState()
{
  return CLP_LogEntry_PrivateData_SyncState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SyncState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SyncState.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SyncState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SyncState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvTime.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t static CLP_LogEntry_PrivateData_SvTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvTime) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_SvTime.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime(a1, 2, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FrequencyOffset.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0)
      break;
    if (result == 3)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    else if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    v4 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t CLP_LogEntry_PrivateData_SvTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = a4(0);
  v7 = result;
  if ((*(_BYTE *)(v4 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v5)
  {
    if ((*(_BYTE *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v4 + *(int *)(v7 + 28)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_FrequencyOffset.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FrequencyOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FrequencyOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.protoMessageName.getter()
{
  return 0xD000000000000039;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 2;
  *(_BYTE *)(a2 + v8) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PhaseTracking.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PhaseTracking.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[9]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PhaseTracking.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PhaseTracking@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PhaseTracking@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PhaseTracking._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PhaseTracking()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SignalCorrelationPeak.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      switch(result)
      {
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset;
          break;
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime;
          break;
        default:
          goto LABEL_12;
      }
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(v5, a1, a2, a3);
    if ((*(_BYTE *)(v5
                   + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0) + 28)
                   + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

Swift::Int CLP_LogEntry_PrivateData_SignalCorrelationPeak.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[6];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalCorrelationPeak._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_FullSvTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_FullSvTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_FullSvTime.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_FullSvTime.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + *(int *)(v3 + 28)) != 6)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_FullSvTime.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_FullSvTime@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime(a1, 6, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvTime@<X0>(int *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v7 = a1[6];
  v8 = a3 + a1[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a3 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a3 + a1[7]) = a2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  return CLP_LogEntry_PrivateData_FullSvTime.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  return CLP_LogEntry_PrivateData_FullSvTime.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_FullSvTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_FullSvTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_FullSvTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvMeasurementUsage.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
      dispatch thunk of Decoder.decodeSingularFloatField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvMeasurementUsage.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvMeasurementUsage.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvMeasurementUsage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementExtension.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap, a1);
}

double one-time initialization function for defaultInstance()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 20) = 1;
  *(_DWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 28) = 1;
  v1 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, 1, 1, v4);
  v5(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, 1, 1, v4);
  v6 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  *(_BYTE *)(v0
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod) = 7;
  v8 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = v0
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_235BB6C50;
  v12 = v0
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = MEMORY[0x24BEE4AF8];
  static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_DWORD *)(v0 + 44) = 0;
  *(_BYTE *)(v0 + 48) = 1;
  *(_DWORD *)(v0 + 52) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_DWORD *)(v0 + 60) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_DWORD *)(v0 + 68) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_DWORD *)(v0 + 76) = 0;
  *(_BYTE *)(v0 + 80) = 1;
  *(_DWORD *)(v0 + 84) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_DWORD *)(v0 + 92) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_DWORD *)(v0 + 100) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_QWORD *)&result = 33686019;
  *(_DWORD *)(v0 + 129) = 33686019;
  static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  double result;

  type metadata accessor for Proto_Gnss_Emergency_SummaryReport._StorageClass();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  *(_WORD *)(v0 + 113) = 1042;
  *(_BYTE *)(v0 + 115) = 7;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 128) = 1;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_QWORD *)(v0 + 152) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)&result = 33689864;
  *(_DWORD *)(v0 + 161) = 33689864;
  *(_QWORD *)(v0 + 168) = 0;
  *(_BYTE *)(v0 + 176) = 1;
  *(_DWORD *)(v0 + 180) = 0;
  *(_BYTE *)(v0 + 184) = 1;
  static Proto_Gnss_Emergency_SummaryReport._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  v8 = v1
     + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v56 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v58 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v12 = *(void (**)(void))(*(_QWORD *)(v11 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v10, 1, 1, v11);
  v59 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  v12();
  v60 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  v12();
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v61 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod) = 7;
  v15 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  *v15 = 7;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  v62 = v15;
  v63 = v16;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  v64 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  v65 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  *(_DWORD *)v18 = 0;
  *(_BYTE *)(v18 + 4) = 1;
  v66 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata) = xmmword_235BB6C50;
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  v67 = v1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  *(_DWORD *)v19 = 0;
  *(_BYTE *)(v19 + 4) = 1;
  v68 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks) = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v20 = *(_DWORD *)(a1 + 16);
  LOBYTE(v10) = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v20;
  *(_BYTE *)(v1 + 20) = v10;
  swift_beginAccess();
  v21 = *(_DWORD *)(a1 + 24);
  v22 = *(_BYTE *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v21;
  *(_BYTE *)(v1 + 28) = v22;
  v23 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  v24 = v57;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v25 = v56;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v24, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  swift_endAccess();
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v27 = v58;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  v28 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v29 = v59;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  v30 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v30, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v31 = v60;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  swift_endAccess();
  v32 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  LODWORD(v31) = *(_DWORD *)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 4);
  swift_beginAccess();
  *(_DWORD *)v13 = v31;
  *(_BYTE *)(v13 + 4) = v32;
  v33 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)v33;
  LOBYTE(v33) = *(_BYTE *)(v33 + 4);
  swift_beginAccess();
  *(_DWORD *)v14 = v13;
  *(_BYTE *)(v14 + 4) = v33;
  v34 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  LOBYTE(v34) = *v34;
  v35 = v61;
  swift_beginAccess();
  *v35 = (_BYTE)v34;
  v36 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  LOBYTE(v36) = *v36;
  v37 = v62;
  swift_beginAccess();
  *v37 = (_BYTE)v36;
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 4);
  v39 = v63;
  swift_beginAccess();
  *(_DWORD *)v39 = (_DWORD)v37;
  *(_BYTE *)(v39 + 4) = v38;
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  v41 = v64;
  swift_beginAccess();
  *(_DWORD *)v41 = (_DWORD)v37;
  *(_BYTE *)(v41 + 4) = v40;
  v42 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  LODWORD(v37) = *(_DWORD *)v42;
  LOBYTE(v42) = *(_BYTE *)(v42 + 4);
  v43 = v65;
  swift_beginAccess();
  *(_DWORD *)v43 = (_DWORD)v37;
  *(_BYTE *)(v43 + 4) = v42;
  v44 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v46 = *v44;
  v45 = v44[1];
  v47 = v66;
  swift_beginAccess();
  v48 = *v47;
  v49 = v47[1];
  *v47 = v46;
  v47[1] = v45;
  outlined copy of Data?(v46, v45);
  outlined consume of Data?(v48, v49);
  v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  LODWORD(v46) = *(_DWORD *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 4);
  v51 = v67;
  swift_beginAccess();
  *(_DWORD *)v51 = v46;
  *(_BYTE *)(v51 + 4) = v50;
  v52 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
  swift_beginAccess();
  v53 = *v52;
  swift_bridgeObjectRetain();
  swift_release();
  v54 = v68;
  swift_beginAccess();
  *v54 = v53;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined consume of Data?(*(_QWORD *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata), *(_QWORD *)(v0+ OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata+ 8));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 12:
        case 13:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_16;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime;
          goto LABEL_9;
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_16;
        case 7:
        case 8:
        case 15:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_16;
        case 9:
        case 10:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_16;
        case 11:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_16;
        case 14:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_16;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
          v12 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_16:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  if (v4)
    return swift_release();
  swift_beginAccess();
  if ((*(_BYTE *)(v9 + 28) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(v9, a1, a2, a3);
  v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
  swift_beginAccess();
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
  swift_beginAccess();
  if (*v13 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v14 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
  swift_beginAccess();
  if (*v14 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v18 = (uint64_t *)(v9
                  + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
  swift_beginAccess();
  v19 = v18[1];
  if (v19 >> 60 != 15)
  {
    v20 = *v18;
    outlined copy of Data._Representation(v20, v19);
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    outlined consume of Data?(v20, v19);
  }
  v21 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
  swift_beginAccess();
  if ((*(_BYTE *)(v21 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v22 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  float v34;
  char v35;
  char v36;
  uint64_t v37;
  float v38;
  char v39;
  uint64_t v40;
  float *v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char v88;
  int *v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  int *v94;
  int v95;
  char v96;
  uint64_t v97;
  char v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  unsigned __int8 *v105;
  int v106;
  int *v107;
  int v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  float v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  float v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  int *v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  v149 = type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v147 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v144 = (uint64_t)&v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?));
  v5 = MEMORY[0x24BDAC7A8](v152);
  v141 = (uint64_t)&v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v143 = (uint64_t)&v139 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v148 = (uint64_t)&v139 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v140 = (uint64_t)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v150 = (uint64_t)&v139 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v142 = (uint64_t)&v139 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v153 = (uint64_t)&v139 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v145 = (uint64_t)&v139 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v151 = (uint64_t)&v139 - v21;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v146 = (uint64_t)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FullSvTime?, CLP_LogEntry_PrivateData_FullSvTime?));
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v139 - v32;
  swift_beginAccess();
  v34 = *(float *)(a1 + 16);
  v155 = a1;
  v35 = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  v154 = a2;
  v36 = *(_BYTE *)(a2 + 20);
  if ((v35 & 1) == 0)
  {
    if (v34 != *(float *)(a2 + 16))
      v36 = 1;
    if ((v36 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v37 = v155;
    swift_beginAccess();
    v38 = *(float *)(v37 + 24);
    v39 = *(_BYTE *)(v37 + 28);
    v40 = v154;
    v41 = (float *)(v154 + 24);
    swift_beginAccess();
    v42 = *(_BYTE *)(v40 + 28);
    if ((v39 & 1) != 0)
    {
      if (!*(_BYTE *)(v40 + 28))
        goto LABEL_9;
    }
    else
    {
      if (v38 != *v41)
        v42 = 1;
      if ((v42 & 1) != 0)
        goto LABEL_9;
    }
    v44 = v155
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    v45 = v154;
    v46 = v154
        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__fullSvTime;
    swift_beginAccess();
    v47 = (uint64_t)&v27[*(int *)(v25 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
    v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v48((uint64_t)v27, 1, v22) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      v49 = v45;
      if (v48(v47, 1, v22) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        v50 = v153;
        goto LABEL_20;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      v51 = v48(v47, 1, v22);
      v50 = v153;
      if (v51 != 1)
      {
        v54 = v146;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, v146, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        swift_retain();
        v49 = v154;
        swift_retain();
        v55 = specialized static CLP_LogEntry_PrivateData_FullSvTime.== infix(_:_:)((uint64_t)v31, v54);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v54, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
        if ((v55 & 1) == 0)
          goto LABEL_41;
LABEL_20:
        v56 = v155
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        v57 = v151;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v151, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        v58 = v49
            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeUsageNanoseconds;
        swift_beginAccess();
        v59 = v148;
        v60 = v148 + *(int *)(v152 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, v148, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48);
        v62 = v149;
        if (v61(v59, 1, v149) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          v63 = v61(v60, 1, v62);
          v64 = v150;
          if (v63 == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            goto LABEL_27;
          }
        }
        else
        {
          v65 = v145;
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v145, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          if (v61(v60, 1, v62) != 1)
          {
            v66 = v150;
            v67 = v144;
            outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v60, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            v68 = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v65, v67);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v151, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            v64 = v66;
            v49 = v154;
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            if ((v68 & 1) == 0)
              goto LABEL_41;
LABEL_27:
            v69 = v155
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            v70 = v49
                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffsetUsagePpb;
            swift_beginAccess();
            v71 = v50;
            v72 = v143;
            v73 = v143 + *(int *)(v152 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            if (v61(v72, 1, v62) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              if (v61(v73, 1, v62) == 1)
              {
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
LABEL_34:
                v79 = v155
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                v80 = v49
                    + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__carrierPhaseUsageNanoseconds;
                swift_beginAccess();
                v81 = v141;
                v82 = v141 + *(int *)(v152 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v141, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                v83 = v81;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v80, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                if (v61(v81, 1, v62) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  if (v61(v82, 1, v62) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
LABEL_45:
                    v89 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount);
                    swift_beginAccess();
                    v90 = *v89;
                    v91 = *((_BYTE *)v89 + 4);
                    v92 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__noncoherentIntervalCount;
                    swift_beginAccess();
                    v93 = *(_BYTE *)(v92 + 4);
                    if ((v91 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v92 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v90 != *(_DWORD *)v92)
                        v93 = 1;
                      if ((v93 & 1) != 0)
                        goto LABEL_41;
                    }
                    v94 = (int *)(v155
                                + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs);
                    swift_beginAccess();
                    v95 = *v94;
                    v96 = *((_BYTE *)v94 + 4);
                    v97 = v49
                        + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__coherentIntegrationMs;
                    swift_beginAccess();
                    v98 = *(_BYTE *)(v97 + 4);
                    if ((v96 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v97 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v95 != *(_DWORD *)v97)
                        v98 = 1;
                      if ((v98 & 1) != 0)
                        goto LABEL_41;
                    }
                    v99 = (unsigned __int8 *)(v155
                                            + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    v100 = *v99;
                    v101 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTimeDetectionMethod);
                    swift_beginAccess();
                    v102 = *v101;
                    if (v100 == 7)
                    {
                      if (v102 != 7)
                        goto LABEL_41;
                    }
                    else
                    {
                      v43 = 0;
                      if (v102 == 7 || v100 != v102)
                        goto LABEL_42;
                    }
                    v103 = (unsigned __int8 *)(v155
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    v104 = *v103;
                    v105 = (unsigned __int8 *)(v49
                                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyDetectionMethod);
                    swift_beginAccess();
                    v106 = *v105;
                    if (v104 == 7)
                    {
                      if (v106 != 7)
                        goto LABEL_41;
                    }
                    else
                    {
                      v43 = 0;
                      if (v106 == 7 || v104 != v106)
                        goto LABEL_42;
                    }
                    v107 = (int *)(v155
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID);
                    swift_beginAccess();
                    v108 = *v107;
                    v109 = *((_BYTE *)v107 + 4);
                    v110 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__channelID;
                    swift_beginAccess();
                    v111 = *(_BYTE *)(v110 + 4);
                    if ((v109 & 1) != 0)
                    {
                      if (!*(_BYTE *)(v110 + 4))
                        goto LABEL_41;
                    }
                    else
                    {
                      if (v108 != *(_DWORD *)v110)
                        v111 = 1;
                      if ((v111 & 1) != 0)
                        goto LABEL_41;
                    }
                    v112 = v155
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess();
                    v113 = *(float *)v112;
                    v114 = *(_BYTE *)(v112 + 4);
                    v115 = v49
                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__codeLockDurationSeconds;
                    swift_beginAccess();
                    v116 = *(_BYTE *)(v115 + 4);
                    if ((v114 & 1) != 0)
                    {
                      if (*(_BYTE *)(v115 + 4))
                        goto LABEL_79;
                    }
                    else
                    {
                      if (v113 != *(float *)v115)
                        v116 = 1;
                      if ((v116 & 1) == 0)
                      {
LABEL_79:
                        v117 = v155
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess();
                        v118 = *(float *)v117;
                        v119 = *(_BYTE *)(v117 + 4);
                        v120 = v49
                             + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyLockDurationSeconds;
                        swift_beginAccess();
                        v121 = *(_BYTE *)(v120 + 4);
                        if ((v119 & 1) != 0)
                        {
                          if (!*(_BYTE *)(v120 + 4))
                            goto LABEL_90;
                        }
                        else
                        {
                          if (v118 != *(float *)v120)
                            v121 = 1;
                          if ((v121 & 1) != 0)
                            goto LABEL_90;
                        }
                        v122 = (uint64_t *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess();
                        v123 = *v122;
                        v124 = v122[1];
                        v125 = (uint64_t *)(v154
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadata);
                        swift_beginAccess();
                        v126 = *v125;
                        v127 = v125[1];
                        if (v124 >> 60 == 15)
                        {
                          if (v127 >> 60 == 15)
                          {
LABEL_92:
                            v130 = (int *)(v155
                                         + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat);
                            swift_beginAccess();
                            v131 = *v130;
                            v132 = *((_BYTE *)v130 + 4);
                            v133 = v154
                                 + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__metadataFormat;
                            swift_beginAccess();
                            v134 = *(_BYTE *)(v133 + 4);
                            if ((v132 & 1) == 0)
                            {
                              if (v131 != *(_DWORD *)v133)
                                v134 = 1;
                              if ((v134 & 1) != 0)
                                goto LABEL_90;
LABEL_98:
                              v135 = (uint64_t *)(v155
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess();
                              v136 = *v135;
                              v137 = (uint64_t *)(v154
                                               + OBJC_IVAR____TtCV10ALProtobuf45CLP_LogEntry_PrivateData_MeasurementExtensionP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__topCorrelationPeaks);
                              swift_beginAccess();
                              v138 = *v137;
                              swift_bridgeObjectRetain();
                              swift_bridgeObjectRetain();
                              v43 = specialized static Array<A>.== infix(_:_:)(v136, v138);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              goto LABEL_42;
                            }
                            if (*(_BYTE *)(v133 + 4))
                              goto LABEL_98;
LABEL_90:
                            v43 = 0;
                            goto LABEL_42;
                          }
                        }
                        else if (v127 >> 60 != 15)
                        {
                          outlined copy of Data?(v123, v124);
                          outlined copy of Data?(v126, v127);
                          specialized static Data.== infix(_:_:)(v123, v124);
                          v129 = v128;
                          outlined consume of Data?(v126, v127);
                          outlined consume of Data?(v123, v124);
                          if ((v129 & 1) == 0)
                            goto LABEL_90;
                          goto LABEL_92;
                        }
                        outlined copy of Data?(v123, v124);
                        outlined copy of Data?(v126, v127);
                        outlined consume of Data?(v123, v124);
                        outlined consume of Data?(v126, v127);
                        goto LABEL_90;
                      }
                    }
LABEL_41:
                    v43 = 0;
LABEL_42:
                    swift_release();
                    swift_release();
                    return v43 & 1;
                  }
                }
                else
                {
                  v84 = v81;
                  v85 = v140;
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84, v140, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  if (v61(v82, 1, v62) != 1)
                  {
                    v87 = v144;
                    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v82, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    v88 = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v85, v87);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v87, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                    if ((v88 & 1) == 0)
                      goto LABEL_41;
                    goto LABEL_45;
                  }
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v150, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                }
                v52 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                v53 = v83;
LABEL_40:
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v52);
                goto LABEL_41;
              }
            }
            else
            {
              v74 = v142;
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              if (v61(v73, 1, v62) != 1)
              {
                v75 = v72;
                v76 = v74;
                v77 = v144;
                outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v73, v144, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                v78 = specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(v76, v77);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v153, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v76, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
                if ((v78 & 1) == 0)
                  goto LABEL_41;
                goto LABEL_34;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v153, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v74, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
            }
            v52 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?);
            v53 = v72;
            goto LABEL_40;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v151, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
        }
        v52 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvMeasurementUsage?, CLP_LogEntry_PrivateData_SvMeasurementUsage?);
        v53 = v59;
        goto LABEL_40;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v31, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
    }
    v52 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FullSvTime?, CLP_LogEntry_PrivateData_FullSvTime?);
    v53 = (uint64_t)v27;
    goto LABEL_40;
  }
  if (*(_BYTE *)(a2 + 20))
    goto LABEL_7;
LABEL_9:
  v43 = 0;
  return v43 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementExtension.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementExtension@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementExtension@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementExtension._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementExtension()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementExtension()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Measurement.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Measurement.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Measurement.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x24BDAC7A8](v3);
  v88 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x24BDAC7A8](v5);
  v87 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x24BDAC7A8](v7);
  v86 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v9);
  v84 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x24BDAC7A8](v11);
  v81 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x24BDAC7A8](v13);
  v74 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v15);
  v72 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 1;
  v24 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v28 = *(void (**)(void))(*(_QWORD *)(v27 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(v26, 1, 1, v27);
  v29 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  v79 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  *(_DWORD *)v33 = 0;
  *(_BYTE *)(v33 + 4) = 1;
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator) = 5;
  v82 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  v28();
  v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable) = 2;
  v34 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  v37 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v37, v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  v38 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  v39 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v40 = v73;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v39, v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  swift_endAccess();
  v41 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  swift_beginAccess();
  *(_QWORD *)v21 = v42;
  *(_BYTE *)(v21 + 8) = (_BYTE)v41;
  v43 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  v44 = *v43;
  LOBYTE(v43) = *((_BYTE *)v43 + 8);
  swift_beginAccess();
  *(_QWORD *)v22 = v44;
  *(_BYTE *)(v22 + 8) = (_BYTE)v43;
  v45 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  swift_beginAccess();
  *(_QWORD *)v23 = v46;
  *(_BYTE *)(v23 + 8) = (_BYTE)v45;
  v47 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  v48 = v81;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v49 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v48, v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  swift_endAccess();
  v50 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  v51 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v52 = v76;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v51, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  v53 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  v54 = v86;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v86, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v55 = v77;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v54, v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  swift_endAccess();
  v56 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  v57 = v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v58 = v78;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v57, v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  swift_endAccess();
  v59 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  LODWORD(v57) = *(_DWORD *)v59;
  LOBYTE(v59) = *(_BYTE *)(v59 + 4);
  v60 = v79;
  swift_beginAccess();
  *(_DWORD *)v60 = v57;
  *(_BYTE *)(v60 + 4) = v59;
  v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  LOBYTE(v61) = *v61;
  v62 = v80;
  swift_beginAccess();
  *v62 = (_BYTE)v61;
  v63 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v64 = v82;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v51, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  swift_endAccess();
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  v66 = v83;
  swift_beginAccess();
  *v66 = (_BYTE)v65;
  v67 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  v68 = v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_release();
  v69 = v85;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v68, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_Measurement._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_Measurement._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId;
          goto LABEL_18;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState;
          goto LABEL_18;
        case 3:
        case 4:
        case 5:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          goto LABEL_19;
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime;
          goto LABEL_18;
        case 7:
        case 12:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset;
          goto LABEL_18;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking;
          goto LABEL_18;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension;
          goto LABEL_18;
        case 10:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_19;
        case 11:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_19;
        case 13:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_19;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking;
LABEL_18:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_19:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #7 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #8 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  if (*v16 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #12 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  v17 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  if (*v17 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t closure #7 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t closure #8 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t closure #12 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:)(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v85;
  char v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  float v152;
  char v153;
  float *v154;
  uint64_t v155;
  unsigned __int8 *v156;
  int v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  unsigned __int8 *v169;
  int v170;
  char *v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;

  v230 = a2;
  v188 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v186 = *(_QWORD *)(v188 - 8);
  MEMORY[0x24BDAC7A8](v188);
  v183 = (uint64_t)&v182 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?));
  MEMORY[0x24BDAC7A8](v185);
  v189 = (uint64_t)&v182 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v184 = (uint64_t)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v187 = (uint64_t)&v182 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(0);
  v197 = *(_QWORD *)(v9 - 8);
  v198 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v193 = (uint64_t)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementExtension?, CLP_LogEntry_PrivateData_MeasurementExtension?));
  MEMORY[0x24BDAC7A8](v196);
  v199 = (uint64_t)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v194 = (uint64_t)&v182 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v226 = (char *)&v182 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v203 = *(_QWORD *)(v16 - 8);
  v204 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v195 = (uint64_t)&v182 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PhaseTracking?, CLP_LogEntry_PrivateData_PhaseTracking?));
  MEMORY[0x24BDAC7A8](v202);
  v205 = (uint64_t)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v200 = (uint64_t)&v182 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v217 = (uint64_t)&v182 - v22;
  v211 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v208 = *(_QWORD *)(v211 - 8);
  MEMORY[0x24BDAC7A8](v211);
  v201 = (uint64_t)&v182 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
  v24 = MEMORY[0x24BDAC7A8](v210);
  v192 = (uint64_t)&v182 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v209 = (uint64_t)&v182 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v190 = (uint64_t)&v182 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v191 = (uint64_t)&v182 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v206 = (uint64_t)&v182 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v227 = (uint64_t)&v182 - v34;
  v215 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v213 = *(_QWORD *)(v215 - 8);
  MEMORY[0x24BDAC7A8](v215);
  v207 = (uint64_t)&v182 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?));
  MEMORY[0x24BDAC7A8](v212);
  v216 = (uint64_t)&v182 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v214 = (uint64_t)&v182 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v218 = (uint64_t)&v182 - v40;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_SyncState(0);
  v223 = *(_QWORD *)(v41 - 8);
  v224 = v41;
  MEMORY[0x24BDAC7A8](v41);
  v219 = (uint64_t)&v182 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SyncState?, CLP_LogEntry_PrivateData_SyncState?));
  MEMORY[0x24BDAC7A8](v222);
  v225 = (uint64_t)&v182 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v220 = (uint64_t)&v182 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v229 = (uint64_t)&v182 - v47;
  v48 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v221 = (uint64_t)&v182 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)&v182 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v55 = MEMORY[0x24BDAC7A8](v54);
  v228 = (uint64_t)&v182 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)&v182 - v57;
  v59 = a1;
  v60 = a1
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, (uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v61 = v230;
  v62 = (uint64_t)&v230[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id];
  swift_beginAccess();
  v63 = (uint64_t)&v53[*(int *)(v51 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, (uint64_t)v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v62, v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v64((uint64_t)v53, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    v65 = v59;
    if (v64(v63, 1, v48) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_8;
    }
LABEL_6:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?);
    v68 = (uint64_t)v53;
LABEL_15:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v67);
    goto LABEL_16;
  }
  v65 = v59;
  v66 = v228;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v53, v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v64(v63, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  v69 = v221;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, v221, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain();
  swift_retain();
  v70 = v66;
  v71 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(v66, v69);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v70, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v71 & 1) == 0)
    goto LABEL_16;
LABEL_8:
  v72 = v65
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState;
  swift_beginAccess();
  v73 = v229;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v74 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__syncState];
  swift_beginAccess();
  v75 = v225;
  v76 = v225 + *(int *)(v222 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v225, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v77 = v224;
  v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v223 + 48);
  if (v78(v75, 1, v224) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
    v79 = v78(v76, 1, v77);
    v81 = (uint64_t)v226;
    v80 = v227;
    if (v79 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
      goto LABEL_19;
    }
LABEL_13:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SyncState?, CLP_LogEntry_PrivateData_SyncState?);
LABEL_14:
    v68 = v75;
    goto LABEL_15;
  }
  v82 = v220;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v220, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  v83 = v78(v76, 1, v77);
  v81 = (uint64_t)v226;
  v80 = v227;
  if (v83 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    goto LABEL_13;
  }
  v85 = v219;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v76, v219, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  v86 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v82, v85, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SyncState.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v229, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v82, type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?);
  if ((v86 & 1) == 0)
    goto LABEL_16;
LABEL_19:
  v87 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds);
  swift_beginAccess();
  v88 = *v87;
  v89 = *((_BYTE *)v87 + 8);
  v90 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__startTimeNanoseconds];
  swift_beginAccess();
  if ((v89 & 1) != 0)
  {
    if ((v90[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v90[8] & 1) != 0 || v88 != *(_QWORD *)v90)
  {
    goto LABEL_16;
  }
  v91 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds);
  swift_beginAccess();
  v92 = *v91;
  v93 = *((_BYTE *)v91 + 8);
  v94 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__endTimeNanoseconds];
  swift_beginAccess();
  if ((v93 & 1) != 0)
  {
    if ((v94[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v94[8] & 1) != 0 || v92 != *(_QWORD *)v94)
  {
    goto LABEL_16;
  }
  v95 = (uint64_t *)(v65
                  + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds);
  swift_beginAccess();
  v96 = *v95;
  v97 = *((_BYTE *)v95 + 8);
  v98 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__applicabilityTimeNanoseconds];
  swift_beginAccess();
  if ((v97 & 1) != 0)
  {
    if ((v98[8] & 1) == 0)
      goto LABEL_16;
  }
  else if ((v98[8] & 1) != 0 || v96 != *(_QWORD *)v98)
  {
    goto LABEL_16;
  }
  v99 = v65
      + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime;
  swift_beginAccess();
  v100 = v99;
  v101 = v218;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v102 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svTime];
  swift_beginAccess();
  v103 = v216;
  v104 = v216 + *(int *)(v212 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, v216, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
  v106 = v215;
  if (v105(v103, 1, v215) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    v107 = v105(v104, 1, v106);
    v108 = v217;
    if (v107 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      goto LABEL_41;
    }
LABEL_39:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?);
    v68 = v103;
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, v214, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v109 = v104;
  v110 = v105(v104, 1, v106);
  v111 = v217;
  if (v110 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v214, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_39;
  }
  v112 = v207;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v109, v207, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v113 = v111;
  v114 = v214;
  LODWORD(v230) = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v214, v112, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v112, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v115 = v114;
  v108 = v113;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v115, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((v230 & 1) == 0)
    goto LABEL_16;
LABEL_41:
  v116 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v116, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v117 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__frequencyOffset];
  swift_beginAccess();
  v118 = v80;
  v119 = v209;
  v120 = v209 + *(int *)(v210 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, v209, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v121 = v117;
  v75 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v121, v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v122 = *(char **)(v208 + 48);
  v123 = v211;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v122)(v75, 1, v211) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v122)(v120, 1, v123) == 1)
    {
      v230 = v122;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  v124 = v122;
  v125 = v206;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v206, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v230 = v124;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v124)(v120, 1, v123) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
LABEL_46:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?);
    goto LABEL_14;
  }
  v126 = v75;
  v127 = v201;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v120, v201, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v128 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v125, v127, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v127, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v227, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((v128 & 1) == 0)
    goto LABEL_16;
LABEL_48:
  v129 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v129, v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v130 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__phaseTracking];
  swift_beginAccess();
  v131 = v205;
  v132 = v205 + *(int *)(v202 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v133 = v130;
  v75 = v131;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v133, v132, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  v134 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
  v135 = v131;
  v136 = v204;
  if (v134(v135, 1, v204) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v108, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
    if (v134(v132, 1, v136) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  v137 = v200;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v200, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if (v134(v132, 1, v136) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v137, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
LABEL_53:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PhaseTracking?, CLP_LogEntry_PrivateData_PhaseTracking?);
    goto LABEL_14;
  }
  v138 = v195;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v132, v195, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  v139 = specialized static CLP_LogEntry_PrivateData_PhaseTracking.== infix(_:_:)(v137, v138);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v138, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v217, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v137, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?);
  if ((v139 & 1) == 0)
    goto LABEL_16;
LABEL_55:
  v140 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v140, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v141 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__extension];
  swift_beginAccess();
  v142 = v199;
  v143 = v199 + *(int *)(v196 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v199, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v144 = v141;
  v75 = v142;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v144, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48);
  v146 = v142;
  v147 = v198;
  if (v145(v146, 1, v198) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
    if (v145(v143, 1, v147) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  v148 = v194;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if (v145(v143, 1, v147) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v148, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
LABEL_60:
    v67 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementExtension?, CLP_LogEntry_PrivateData_MeasurementExtension?);
    goto LABEL_14;
  }
  v149 = v193;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v143, v193, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  v150 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v148, v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, closure #1 in static CLP_LogEntry_PrivateData_MeasurementExtension.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v149, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v148, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?);
  if ((v150 & 1) == 0)
    goto LABEL_16;
LABEL_62:
  v151 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz;
  swift_beginAccess();
  v152 = *(float *)v151;
  v153 = *(_BYTE *)(v151 + 4);
  v154 = (float *)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__cn0DbHz];
  swift_beginAccess();
  if ((v153 & 1) != 0)
  {
    if (((_BYTE)v154[1] & 1) != 0)
      goto LABEL_67;
LABEL_16:
    swift_release();
    swift_release();
    return 0;
  }
  if (((_BYTE)v154[1] & 1) != 0 || v152 != *v154)
    goto LABEL_16;
LABEL_67:
  v155 = v65;
  v156 = (unsigned __int8 *)(v65
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator);
  swift_beginAccess();
  v157 = *v156;
  v158 = v61;
  v159 = &v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__multipathIndicator];
  swift_beginAccess();
  v160 = *v159;
  if (v157 == 5)
  {
    if (v160 != 5)
      goto LABEL_16;
  }
  else if (v160 == 5 || v157 != v160)
  {
    goto LABEL_16;
  }
  v161 = v65
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset;
  swift_beginAccess();
  v162 = v191;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v161, v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v163 = (uint64_t)&v61[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffset];
  swift_beginAccess();
  v164 = v192;
  v165 = v192 + *(int *)(v210 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v162, v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v163, v165, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v230)(v164, 1, v211) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v230)(v165, 1, v211) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      goto LABEL_80;
    }
LABEL_77:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
    goto LABEL_16;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v230)(v165, 1, v211) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v190, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_77;
  }
  v166 = v201;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v165, v201, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  v167 = v190;
  v168 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v190, v166, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v166, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v191, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v167, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if ((v168 & 1) == 0)
    goto LABEL_16;
LABEL_80:
  v169 = (unsigned __int8 *)(v155
                           + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable);
  swift_beginAccess();
  v170 = *v169;
  v171 = &v158[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__isUsable];
  swift_beginAccess();
  v172 = *v171;
  if (v170 == 2)
  {
    if (v172 != 2)
      goto LABEL_16;
  }
  else if (v172 == 2 || ((((v172 & 1) == 0) ^ v170) & 1) == 0)
  {
    goto LABEL_16;
  }
  v173 = v155
       + OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking;
  swift_beginAccess();
  v174 = v187;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v173, v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v175 = (uint64_t)&v158[OBJC_IVAR____TtCV10ALProtobuf36CLP_LogEntry_PrivateData_MeasurementP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__averagedFrequencyOffsetFromPhaseTracking];
  swift_beginAccess();
  v176 = v189;
  v177 = v189 + *(int *)(v185 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v174, v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v175, v177, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  v178 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48);
  if (v178(v176, 1, v188) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
    if (v178(v177, 1, v188) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
      return 1;
    }
LABEL_90:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, v184, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  if (v178(v177, 1, v188) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v184, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
    goto LABEL_90;
  }
  v179 = v183;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v177, v183, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  v180 = v184;
  v181 = specialized static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.== infix(_:_:)(v184, v179);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v179, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v180, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v189, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?);
  return (v181 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_Measurement.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Measurement, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Measurement@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Measurement._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Measurement()
{
  return CLP_LogEntry_PrivateData_Measurement.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Measurement.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Measurement()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Measurement@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Measurement._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Measurement()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Measurement()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverClockModel.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockModel.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[9]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverClockModel.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverClockModel@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockModel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockModel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverClockCorrections.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverClockCorrections.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[9] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverClockCorrections.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + a1[9];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverClockCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.protoMessageName.getter()
{
  return 0xD000000000000034;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[9] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Clock.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Clock.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Clock.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Clock._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Clock.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel;
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections;
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

Swift::Int CLP_LogEntry_PrivateData_Clock.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Clock, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Clock@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a2 + a1[8];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Clock()
{
  return CLP_LogEntry_PrivateData_Clock.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Clock.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Clock()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Clock@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Clock._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Clock()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Clock()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementReport.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements) = MEMORY[0x24BEE4AF8];
  v9 = a1
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v9, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_endAccess();
  v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v11 = *v10;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v8 = v11;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v7 & 1) != 0)
        return swift_release();
      if (v6 == 2)
        break;
      if (v6 == 1)
      {
        swift_beginAccess();
        type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
        v9 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
    v9 = v2;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_7:
    v2 = v9;
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Measurement(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v29 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Clock?, CLP_LogEntry_PrivateData_Clock?));
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v29 - v13;
  v15 = a1
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v15, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v16 = v30;
  v17 = v30
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clock;
  swift_beginAccess();
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v19((uint64_t)v8, 1, v3) != 1)
  {
    v20 = a1;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
    if (v19(v18, 1, v3) != 1)
    {
      v21 = v29;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v18, v29, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      swift_retain();
      swift_retain();
      v22 = specialized static CLP_LogEntry_PrivateData_Clock.== infix(_:_:)((uint64_t)v12, v21);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v21, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v27 = 0;
      goto LABEL_10;
    }
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_Clock);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Clock?, CLP_LogEntry_PrivateData_Clock?));
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
  v20 = a1;
  if (v19(v18, 1, v3) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v8, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?);
LABEL_8:
  v23 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v24 = *v23;
  v25 = (uint64_t *)(v16
                  + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MeasurementReportP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measurements);
  swift_beginAccess();
  v26 = *v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized static Array<A>.== infix(_:_:)(v24, v26, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Measurement.== infix(_:_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  swift_release();
  return v27 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementReport.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementReport@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReport._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementReport()
{
  return CLP_LogEntry_PrivateData_MeasurementReport.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementReport.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementReport()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementReport@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReport._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementReport()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementReport()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C100]);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t static CLP_LogEntry_PrivateData_Wgs84Ecef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Wgs84Ecef.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Wgs84Ecef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Wgs84Ecef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvBandCorrections.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          goto LABEL_9;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
LABEL_9:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvBandCorrections.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[9]) != 3)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvBandCorrections.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvBandCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a2 + v7;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + a1[9]) = 3;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return CLP_LogEntry_PrivateData_SvBandCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvBandCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvBandCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvPositionAtTime.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
        dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

Swift::Int CLP_LogEntry_PrivateData_SvPositionAtTime.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvPositionAtTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 24);
  v5 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return CLP_LogEntry_PrivateData_SvPositionAtTime.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvPositionAtTime.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvPositionAtTime@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvPositionAtTime._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PolynomialOrbit.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PolynomialOrbit.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v3 = result;
  if ((*((_BYTE *)v0 + *(int *)(result + 32) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*((_BYTE *)v0 + *(int *)(v3 + 36) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(*v0 + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v0[1] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    if (*(_QWORD *)(v0[2] + 16))
      dispatch thunk of Visitor.visitRepeatedDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_PolynomialOrbit.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PolynomialOrbit@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  char *v8;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  a2[2] = v4;
  result = UnknownStorage.init()();
  v6 = *(int *)(a1 + 36);
  v7 = (char *)a2 + *(int *)(a1 + 32);
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = (char *)a2 + v6;
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return CLP_LogEntry_PrivateData_PolynomialOrbit.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return CLP_LogEntry_PrivateData_PolynomialOrbit.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PolynomialOrbit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PolynomialOrbit._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SvInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SvInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SvInfo.protoMessageName.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SvInfo._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t *v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  unint64_t *v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  uint64_t v16;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId;
          goto LABEL_14;
        case 2:
        case 5:
        case 6:
        case 7:
        case 23:
          swift_beginAccess();
          v16 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_18;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
          v13 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime;
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          v15 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime;
          goto LABEL_12;
        case 8:
        case 9:
          swift_beginAccess();
          v16 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_18;
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
          goto LABEL_16;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
          v13 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections;
          v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections;
          v15 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections;
LABEL_12:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v13, v14, (uint64_t)v15);
          v16 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_18;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
          v10 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit;
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit;
          v12 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v10, v11, (uint64_t)v12);
          v16 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_18;
        case 24:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
LABEL_16:
          v16 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_18:
          v2 = v16;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  if (*v13 != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v14 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  v20 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  if (*v20 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v21 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  if (*v21 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v22 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  if (*v22 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v23 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  if (*v23 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v24 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  if (*v24 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v25 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v25 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  v26 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  if (*v26 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v27 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  if (*v27 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v28 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  if (*v28 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v29 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  if (*v29 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v30 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  if (*v30 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v31 = v9
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if ((*(_BYTE *)(v31 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v32 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  if (*v32 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 result;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 *v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t *v93;
  uint64_t *v94;
  char v95;
  unsigned __int8 *v96;
  int v97;
  unsigned __int8 *v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  int v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  unsigned __int8 *v110;
  int v111;
  unsigned __int8 *v112;
  int v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  unsigned __int8 *v119;
  int v120;
  unsigned __int8 *v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v133 = a2;
  v129 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v127 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v124 = (uint64_t *)((char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PolynomialOrbit?, CLP_LogEntry_PrivateData_PolynomialOrbit?));
  MEMORY[0x24BDAC7A8](v126);
  v130 = (uint64_t)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v125 = (uint64_t *)((char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v128 = (uint64_t)&v123 - v8;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v131 = (uint64_t)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v132 = (uint64_t)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v123 - v18;
  v20 = a1;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v22 = v133;
  v23 = v133
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    v26 = v25(v24, 1, v9);
    v27 = v22;
    v28 = v20;
    if (v26 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_11;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
    goto LABEL_7;
  }
  v28 = v20;
  v29 = v22;
  v30 = v132;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, v132, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v25(v24, 1, v9) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  v32 = v131;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v24, v131, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  swift_retain();
  v27 = v29;
  swift_retain();
  v33 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(v30, v32);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v33 & 1) == 0)
    goto LABEL_7;
LABEL_11:
  v34 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  swift_beginAccess();
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_7;
  }
  v37 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  v38 = *v37;
  v39 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  v40 = *v39;
  if (v38 == 7)
  {
    if (v40 != 7)
      goto LABEL_7;
  }
  else if (v40 == 7 || v38 != v40)
  {
    goto LABEL_7;
  }
  v41 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v42 = *v41;
  v43 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v44 = *v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v45 = specialized static Array<A>.== infix(_:_:)(v42, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v45 & 1) == 0)
    goto LABEL_7;
  v46 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  v47 = *(double *)v46;
  LOBYTE(v46) = *(_BYTE *)(v46 + 8);
  v48 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  swift_beginAccess();
  if ((v46 & 1) != 0)
  {
    if ((*(_BYTE *)(v48 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v48 + 8) & 1) != 0 || v47 != *(double *)v48)
  {
    goto LABEL_7;
  }
  v49 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  v50 = *(double *)v49;
  LOBYTE(v49) = *(_BYTE *)(v49 + 8);
  v51 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  swift_beginAccess();
  if ((v49 & 1) != 0)
  {
    if ((*(_BYTE *)(v51 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v51 + 8) & 1) != 0 || v50 != *(double *)v51)
  {
    goto LABEL_7;
  }
  v52 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  v53 = *(double *)v52;
  LOBYTE(v52) = *(_BYTE *)(v52 + 8);
  v54 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  swift_beginAccess();
  if ((v52 & 1) != 0)
  {
    if ((*(_BYTE *)(v54 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v54 + 8) & 1) != 0 || v53 != *(double *)v54)
  {
    goto LABEL_7;
  }
  v55 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  v56 = *(float *)v55;
  LOBYTE(v55) = *(_BYTE *)(v55 + 4);
  v57 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  if ((v55 & 1) != 0)
  {
    if ((*(_BYTE *)(v57 + 4) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v57 + 4) & 1) != 0 || v56 != *(float *)v57)
  {
    goto LABEL_7;
  }
  v58 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  v59 = *(float *)v58;
  LOBYTE(v58) = *(_BYTE *)(v58 + 4);
  v60 = v27
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  if ((v58 & 1) != 0)
  {
    if ((*(_BYTE *)(v60 + 4) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v60 + 4) & 1) != 0 || v59 != *(float *)v60)
  {
    goto LABEL_7;
  }
  v61 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  v62 = *v61;
  v63 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  v64 = *v63;
  if (v62 == 5)
  {
    if (v64 == 5)
      goto LABEL_52;
LABEL_7:
    swift_release();
    swift_release();
    return 0;
  }
  if (v64 == 5 || v62 != v64)
    goto LABEL_7;
LABEL_52:
  v65 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  v66 = *v65;
  v67 = v27;
  v68 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  v69 = *v68;
  if (v66 == 5)
  {
    if (v69 != 5)
      goto LABEL_7;
  }
  else if (v69 == 5 || v66 != v69)
  {
    goto LABEL_7;
  }
  v70 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  v71 = *v70;
  v72 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  v73 = *v72;
  if (v71 == 5)
  {
    if (v73 != 5)
      goto LABEL_7;
  }
  else if (v73 == 5 || v71 != v73)
  {
    goto LABEL_7;
  }
  v74 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  v75 = *v74;
  v76 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  v77 = *v76;
  if (v75 == 5)
  {
    if (v77 != 5)
      goto LABEL_7;
  }
  else if (v77 == 5 || v75 != v77)
  {
    goto LABEL_7;
  }
  v78 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  v79 = *v78;
  v80 = (unsigned __int8 *)(v27
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  v81 = *v80;
  if (v79 == 5)
  {
    if (v81 != 5)
      goto LABEL_7;
  }
  else if (v81 == 5 || v79 != v81)
  {
    goto LABEL_7;
  }
  v82 = (uint64_t *)(v28
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v83 = *v82;
  v84 = (uint64_t *)(v27
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v85 = *v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86 = specialized static Array<A>.== infix(_:_:)(v83, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v86 & 1) == 0)
    goto LABEL_7;
  v87 = v28
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  v88 = v128;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v128, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v89 = v67
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  v90 = v130;
  v91 = v130 + *(int *)(v126 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88, v130, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v89, v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v92 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
  if (v92(v90, 1, v129) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v128, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
    if (v92(v91, 1, v129) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v130, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
      goto LABEL_81;
    }
LABEL_78:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v130, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PolynomialOrbit?, CLP_LogEntry_PrivateData_PolynomialOrbit?));
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v130, (uint64_t)v125, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if (v92(v91, 1, v129) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v128, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v125, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    goto LABEL_78;
  }
  v93 = v124;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v91, (uint64_t)v124, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  v94 = v125;
  v95 = specialized static CLP_LogEntry_PrivateData_PolynomialOrbit.== infix(_:_:)(v125, v93);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v93, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v128, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v94, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v130, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  if ((v95 & 1) == 0)
    goto LABEL_7;
LABEL_81:
  v96 = (unsigned __int8 *)(v28
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  v97 = *v96;
  v98 = (unsigned __int8 *)(v67
                          + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  v99 = *v98;
  if (v97 == 5)
  {
    if (v99 != 5)
      goto LABEL_7;
  }
  else if (v99 == 5 || v97 != v99)
  {
    goto LABEL_7;
  }
  v100 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  v101 = *v100;
  v102 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  v103 = *v102;
  if (v101 == 5)
  {
    if (v103 != 5)
      goto LABEL_7;
  }
  else if (v103 == 5 || v101 != v103)
  {
    goto LABEL_7;
  }
  v104 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  v105 = *v104;
  v106 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  v107 = *v106;
  if (v105 == 5)
  {
    if (v107 != 5)
      goto LABEL_7;
  }
  else if (v107 == 5 || v105 != v107)
  {
    goto LABEL_7;
  }
  v108 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  v109 = *v108;
  v110 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  v111 = *v110;
  if (v109 == 5)
  {
    if (v111 != 5)
      goto LABEL_7;
  }
  else if (v111 == 5 || v109 != v111)
  {
    goto LABEL_7;
  }
  v112 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  v113 = *v112;
  v114 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  v115 = *v114;
  if (v113 == 5)
  {
    if (v115 != 5)
      goto LABEL_7;
  }
  else if (v115 == 5 || v113 != v115)
  {
    goto LABEL_7;
  }
  v116 = v28
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  v117 = *(double *)v116;
  LOBYTE(v116) = *(_BYTE *)(v116 + 8);
  v118 = v67
       + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  swift_beginAccess();
  if ((v116 & 1) != 0)
  {
    if ((*(_BYTE *)(v118 + 8) & 1) == 0)
      goto LABEL_7;
  }
  else if ((*(_BYTE *)(v118 + 8) & 1) != 0 || v117 != *(double *)v118)
  {
    goto LABEL_7;
  }
  v119 = (unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  v120 = *v119;
  swift_release();
  v121 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  v122 = *v121;
  swift_release();
  if (v120 == 4)
    return v122 == 4;
  result = 0;
  if (v122 != 4 && v120 == v122)
    return 1;
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SvInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SvInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_SvInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_SvInfo()
{
  return CLP_LogEntry_PrivateData_SvInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SvInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_SvInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SvInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SvInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SvInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SvInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SvInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceiverBandCorrections.protoMessageName.getter()
{
  return 0xD000000000000030;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ReceiverBandCorrections.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 13)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ReceiverBandCorrections.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 13;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverBandCorrections.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return CLP_LogEntry_PrivateData_ReceiverBandCorrections.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceiverBandCorrections._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LeapSecondChange.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondChange.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_LeapSecondChange.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_LeapSecondChange@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChange@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondChange._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondChange()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LeapSecondInfo.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        v4 = v3;
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
    v4 = v3;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v10 = result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v4)
  {
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #3 in CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

Swift::Int CLP_LogEntry_PrivateData_LeapSecondInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_LeapSecondInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a2 + v4) = 5;
  v6 = a2 + a1[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return CLP_LogEntry_PrivateData_LeapSecondInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_LeapSecondInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LeapSecondInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LeapSecondInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsToUtcConversion.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsToUtcConversion.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GpsToUtcConversion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return CLP_LogEntry_PrivateData_GpsToUtcConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return CLP_LogEntry_PrivateData_GpsToUtcConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsToUtcConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GpsTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
        v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
        v4 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo;
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
    type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion;
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
    v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion;
LABEL_5:
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GpsTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GpsTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GpsTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GpsTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GpsTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassSubsecondConversion.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_GlonassSubsecondConversion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return CLP_LogEntry_PrivateData_GlonassSubsecondConversion.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return CLP_LogEntry_PrivateData_GlonassSubsecondConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassSubsecondConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GlonassTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v10 = result;
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + *(int *)(v10 + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 6)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #5 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 36), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GlonassTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 6;
  v8 = a2 + v7;
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[9], 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GlonassTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GlonassTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SubSecondConversion.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C138]);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char v12;
  uint64_t v13;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v6 || (v12 & 1) != 0)
      break;
    if (result == 3 || result == 2)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      v13 = ((uint64_t (*)(_QWORD))a4)(0);
      a5(v5 + *(int *)(v13 + 20), a2, a3);
    }
    v6 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SubSecondConversion.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 28) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_SubSecondConversion.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return CLP_LogEntry_PrivateData_SubSecondConversion.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SubSecondConversion@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SubSecondConversion._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SubSecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SubSecondConversion()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap);
}

