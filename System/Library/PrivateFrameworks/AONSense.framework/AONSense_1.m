uint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 20) = 1;
  v10 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v14 = *(void (**)(void))(*(_QWORD *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v1+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, 1, 1, v13);
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  v14();
  v26 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  v14();
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)(a1 + 16);
  LOBYTE(v14) = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  *(_DWORD *)(v1 + 16) = v13;
  *(_BYTE *)(v1 + 20) = (_BYTE)v14;
  v16 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v16, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  swift_endAccess();
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v12, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  v18 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v18, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  v19 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v19, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v20 = v25;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_release();
  v22 = v26;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  swift_endAccess();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          goto LABEL_7;
        case 3:
        case 4:
        case 5:
        case 6:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion;
LABEL_7:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((*(_BYTE *)(v9 + 20) & 1) == 0)
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v123 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v121 = *(_QWORD *)(v123 - 8);
  MEMORY[0x24BDAC7A8](v123);
  v116 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  v5 = MEMORY[0x24BDAC7A8](v125);
  v110 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v113 = (uint64_t)&v108 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v117 = (uint64_t)&v108 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v122 = (uint64_t)&v108 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v109 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v112 = (uint64_t)&v108 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v111 = (uint64_t)&v108 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v115 = (char *)&v108 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v114 = (uint64_t)&v108 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v119 = (uint64_t)&v108 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v118 = (uint64_t)&v108 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v126 = (uint64_t)&v108 - v27;
  v127 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v28 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8](v127);
  v120 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v124 = (uint64_t)&v108 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v108 - v36;
  swift_beginAccess();
  v38 = *(_DWORD *)(a1 + 16);
  v128 = a1;
  v39 = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  v40 = a2;
  v41 = *(_BYTE *)(a2 + 20);
  if ((v39 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 20))
      return 0;
  }
  else
  {
    if (v38 != *(_DWORD *)(a2 + 16))
      v41 = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  v42 = v128;
  v43 = v128
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v44 = v40;
  v45 = v40
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__leapSecondDeprecated;
  swift_beginAccess();
  v46 = (uint64_t)&v32[*(int *)(v30 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v48 = v127;
  if (v47((uint64_t)v32, 1, v127) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v47(v46, 1, v48) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      v49 = v42;
      goto LABEL_16;
    }
LABEL_12:
    v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?);
    v52 = (uint64_t)v32;
LABEL_13:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v51);
    goto LABEL_29;
  }
  v50 = v124;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, v124, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v47(v46, 1, v48) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v50, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  v53 = v120;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, v120, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  swift_retain();
  swift_retain();
  v54 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)(v50, v53);
  v55 = v50;
  v49 = v42;
  v56 = v54;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v53, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v57 = v55;
  v44 = v40;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((v56 & 1) == 0)
    goto LABEL_29;
LABEL_16:
  v58 = v49
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  v59 = v126;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v60 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gpsTimeConversion;
  swift_beginAccess();
  v61 = v122;
  v62 = v122 + *(int *)(v125 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48);
  v64 = v123;
  if (v63(v61, 1, v123) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v65 = v63(v62, 1, v64);
    v66 = v128;
    if (v65 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  v67 = v118;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v63(v62, 1, v64) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
LABEL_29:
    swift_release();
    swift_release();
    return 0;
  }
  v68 = v61;
  v69 = v116;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v70 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v67, v69);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v126, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v66 = v128;
  if ((v70 & 1) == 0)
    goto LABEL_29;
LABEL_24:
  v71 = v66
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  v72 = v119;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v71, v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v73 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonassTimeConversion;
  swift_beginAccess();
  v74 = v125;
  v75 = v117;
  v76 = v117 + *(int *)(v125 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v63(v75, 1, v64) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v77 = v63(v76, 1, v64);
    v78 = v128;
    if (v77 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      v79 = (uint64_t)v115;
      goto LABEL_32;
    }
LABEL_37:
    v51 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?);
    v52 = v75;
    goto LABEL_13;
  }
  v80 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v81 = v63(v76, 1, v64);
  v79 = (uint64_t)v115;
  if (v81 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_37;
  }
  v83 = v116;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v76, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v84 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v80, v83);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v83, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v78 = v128;
  if ((v84 & 1) == 0)
    goto LABEL_29;
LABEL_32:
  v85 = v78
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v86 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileoTimeConversion;
  swift_beginAccess();
  v87 = *(int *)(v74 + 48);
  v88 = v113;
  v89 = v113 + v87;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v75 = v88;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v89, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v63(v88, 1, v64) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v90 = v63(v89, 1, v64);
    v91 = v112;
    if (v90 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  v92 = v111;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v88, v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v93 = v63(v89, 1, v64);
  v91 = v112;
  if (v93 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_37;
  }
  v94 = v79;
  v95 = v92;
  v96 = v116;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v89, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v97 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v95, v96);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v96, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v95, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((v97 & 1) == 0)
    goto LABEL_29;
LABEL_39:
  v98 = v78
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v99 = v44
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_BeidouTimeInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__utcTimeConversionDeprecated;
  swift_beginAccess();
  v100 = v91;
  v101 = v110;
  v102 = v110 + *(int *)(v125 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, v110, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v103 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v63(v101, 1, v64) != 1)
  {
    v104 = v101;
    v105 = v109;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v63(v102, 1, v64) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      goto LABEL_44;
    }
    v106 = v116;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v102, v116, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v107 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v105, v106);
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v106, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v112, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v105, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    return (v107 & 1) != 0;
  }
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v63(v102, 1, v64) != 1)
  {
LABEL_44:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_BeidouTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BeidouTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GalileoTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000028;
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo;
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion;
LABEL_9:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  if ((*(_BYTE *)(v5 + *(int *)(result + 20) + 4) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  if (!v4)
  {
    closure #2 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #3 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    closure #4 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_GalileoTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a2 + v4;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[7];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(a2 + a1[8], 1, 1, v9);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_GalileoTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GalileoTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_NavicTimeInfo.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
        type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if ((*(_BYTE *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0) + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

Swift::Int CLP_LogEntry_PrivateData_NavicTimeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_NavicTimeInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  UnknownStorage.init()();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a2 + *(int *)(a1 + 24);
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return CLP_LogEntry_PrivateData_NavicTimeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_NavicTimeInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_NavicTimeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_NavicTimeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v36 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x24BDAC7A8](v7);
  v34 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  v20 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v14, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  swift_endAccess();
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v11, v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  swift_endAccess();
  v27 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  v28 = v34;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v28, v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  swift_endAccess();
  v29 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  v30 = v35;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v29, v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v30, v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  swift_endAccess();
  v31 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  v32 = v36;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v32, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t *v8;
  uint64_t (*v9)(uint64_t);
  void *v10;

  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.init(copying:)(v4);
    *(_QWORD *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
          v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo;
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          v10 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo;
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
          v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo;
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          v10 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo;
          goto LABEL_7;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
          v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo;
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          v10 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo;
          goto LABEL_7;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
          v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo;
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          v10 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo;
          goto LABEL_7;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
          v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo;
          v9 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo;
          v10 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo;
LABEL_7:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v8, v9, (uint64_t)v10);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0) + 20));
  v9 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v9, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v123 = a2;
  v98 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v94 = (uint64_t)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_NavicTimeInfo?, CLP_LogEntry_PrivateData_NavicTimeInfo?));
  MEMORY[0x24BDAC7A8](v96);
  v99 = (uint64_t)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v108 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v107 = (char *)&v93 - v8;
  v105 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v103 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v95 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoTimeInfo?, CLP_LogEntry_PrivateData_GalileoTimeInfo?));
  MEMORY[0x24BDAC7A8](v102);
  v106 = (uint64_t)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v100 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v104 = (uint64_t)&v93 - v14;
  v114 = type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(0);
  v112 = *(_QWORD *)(v114 - 8);
  MEMORY[0x24BDAC7A8](v114);
  v101 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouTimeInfo?, CLP_LogEntry_PrivateData_BeidouTimeInfo?));
  MEMORY[0x24BDAC7A8](v111);
  v115 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v109 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v113 = (uint64_t)&v93 - v20;
  v121 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v119 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v110 = (uint64_t)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassTimeInfo?, CLP_LogEntry_PrivateData_GlonassTimeInfo?));
  MEMORY[0x24BDAC7A8](v118);
  v122 = (uint64_t)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v116 = (uint64_t)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v120 = (uint64_t)&v93 - v26;
  v27 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v117 = (uint64_t)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsTimeInfo?, CLP_LogEntry_PrivateData_GpsTimeInfo?));
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v93 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v93 - v37;
  v39 = a1;
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v41 = v123;
  v42 = v123
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__gps;
  swift_beginAccess();
  v43 = (uint64_t)&v32[*(int *)(v30 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, (uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v44((uint64_t)v32, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
    if (v44(v43, 1, v27) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
      goto LABEL_8;
    }
LABEL_6:
    v45 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsTimeInfo?, CLP_LogEntry_PrivateData_GpsTimeInfo?);
    v46 = (uint64_t)v32;
LABEL_29:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v45);
    goto LABEL_30;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, (uint64_t)v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if (v44(v43, 1, v27) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
    goto LABEL_6;
  }
  v47 = v117;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, v117, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  swift_retain();
  swift_retain();
  v48 = specialized static CLP_LogEntry_PrivateData_GpsTimeInfo.== infix(_:_:)((uint64_t)v36, v47);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v47, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v36, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?);
  if ((v48 & 1) == 0)
    goto LABEL_30;
LABEL_8:
  v49 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  v50 = v120;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v120, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v51 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__glonass;
  swift_beginAccess();
  v52 = v122;
  v53 = v122 + *(int *)(v118 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, v122, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v53, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
  v55 = v121;
  if (v54(v52, 1, v121) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
    if (v54(v53, 1, v55) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
      goto LABEL_15;
    }
LABEL_13:
    v45 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassTimeInfo?, CLP_LogEntry_PrivateData_GlonassTimeInfo?);
LABEL_28:
    v46 = v52;
    goto LABEL_29;
  }
  v56 = v116;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v116, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if (v54(v53, 1, v55) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    goto LABEL_13;
  }
  v57 = v110;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v53, v110, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  v58 = specialized static CLP_LogEntry_PrivateData_GlonassTimeInfo.== infix(_:_:)(v56, v57);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?);
  if ((v58 & 1) == 0)
    goto LABEL_30;
LABEL_15:
  v59 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  v60 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v61 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__beidou;
  swift_beginAccess();
  v52 = v115;
  v62 = v115 + *(int *)(v111 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v115, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48);
  v64 = v114;
  if (v63(v52, 1, v114) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    if (v63(v62, 1, v64) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  v65 = v109;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v109, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if (v63(v62, 1, v64) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
LABEL_20:
    v45 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_BeidouTimeInfo?, CLP_LogEntry_PrivateData_BeidouTimeInfo?);
    goto LABEL_28;
  }
  v66 = v101;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, v101, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  v67 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v65, v66, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_BeidouTimeInfo.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v66, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?);
  if ((v67 & 1) == 0)
    goto LABEL_30;
LABEL_22:
  v68 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  v69 = v104;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v104, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v70 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__galileo;
  swift_beginAccess();
  v52 = v106;
  v71 = v106 + *(int *)(v102 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, v106, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  v73 = v105;
  if (v72(v52, 1, v105) != 1)
  {
    v77 = v100;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    v78 = v72(v71, 1, v73);
    v75 = (uint64_t)v108;
    v76 = (uint64_t)v107;
    if (v78 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
      goto LABEL_27;
    }
    v80 = v95;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v71, v95, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    v81 = specialized static CLP_LogEntry_PrivateData_GalileoTimeInfo.== infix(_:_:)(v77, v80);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    if ((v81 & 1) != 0)
      goto LABEL_34;
LABEL_30:
    swift_release();
    swift_release();
    return 0;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
  v74 = v72(v71, 1, v73);
  v75 = (uint64_t)v108;
  v76 = (uint64_t)v107;
  if (v74 != 1)
  {
LABEL_27:
    v45 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GalileoTimeInfo?, CLP_LogEntry_PrivateData_GalileoTimeInfo?);
    goto LABEL_28;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?);
LABEL_34:
  v82 = v39
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v83 = v41
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_TimeConversionInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__navic;
  swift_beginAccess();
  v84 = v99;
  v85 = v99 + *(int *)(v96 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v86 = v83;
  v87 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
  v89 = v84;
  v90 = v98;
  if (v88(v89, 1, v98) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
    if (v88(v85, 1, v90) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
      return 1;
    }
    goto LABEL_39;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  if (v88(v85, 1, v90) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
LABEL_39:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_NavicTimeInfo?, CLP_LogEntry_PrivateData_NavicTimeInfo?));
    return 0;
  }
  v91 = v94;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, v94, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  v92 = specialized static CLP_LogEntry_PrivateData_NavicTimeInfo.== infix(_:_:)(v75, v91);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v91, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v75, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?);
  return (v92 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_TimeConversionInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TimeConversionInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return CLP_LogEntry_PrivateData_TimeConversionInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeConversionInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TimeConversionInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeConversionInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_KlobucharModelParameters.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #6 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #7 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #8 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    closure #9 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #5 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 36) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 40) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 48) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 52) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_KlobucharModelParameters.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v8;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1[10];
  v12 = a2 + a1[9];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a2 + v11;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1[12];
  v15 = a2 + a1[11];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = a2 + v14;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v17 = a2 + a1[13];
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return CLP_LogEntry_PrivateData_KlobucharModelParameters.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return CLP_LogEntry_PrivateData_KlobucharModelParameters.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_KlobucharModelParameters._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_SfcfXyz.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C100]);
}

uint64_t CLP_LogEntry_PrivateData_SfcfXyz.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = a4(0);
  v7 = result;
  if ((*(_BYTE *)(v4 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v5)
  {
    if ((*(_BYTE *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v4 + *(int *)(v7 + 28) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_SfcfXyz.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_SfcfXyz.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_SfcfXyz()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SfcfXyz@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SfcfXyz._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_SfcfXyz()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SfcfXyz()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.protoMessageName.getter()
{
  return 0xD000000000000033;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_SvId;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId;
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
          goto LABEL_10;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
          v3 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz;
          v4 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz;
          v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz;
LABEL_5:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    v10 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 24)) != 13)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if (*(_BYTE *)(v5 + *(int *)(v10 + 28)) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    closure #4 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t closure #4 in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
}

Swift::Int CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a1[7];
  *(_BYTE *)(a2 + a1[6]) = 13;
  *(_BYTE *)(a2 + v6) = 4;
  v7 = a2 + a1[8];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BE5C100]);
}

uint64_t CLP_LogEntry_PrivateData_ReceivedTimeStamp.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_ReceivedTimeStamp.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Wgs84Ecef@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a2 + a1[7];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReceivedTimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.protoMessageName.getter()
{
  return 0xD00000000000003ALL;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;

  v51 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x24BDAC7A8](v2);
  v57 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v56 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x24BDAC7A8](v6);
  v50 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo) = MEMORY[0x24BEE4AF8];
  v17 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections) = v16;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v52 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v1;
  v21 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = 1;
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  v53 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  v54 = v23;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v20;
  v55 = (_QWORD *)(v20
                 + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  *(_QWORD *)(v20
            + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset) = v16;
  v26 = v51;
  v27 = v51
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, (uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v10, v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  swift_endAccess();
  v28 = v26
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  v29 = v50;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v29, v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_endAccess();
  v30 = (uint64_t *)(v26
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v31 = *v30;
  swift_beginAccess();
  *v15 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = (uint64_t *)(v26
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v33 = *v32;
  swift_beginAccess();
  *v17 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v26
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  v35 = v56;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v36 = v52;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v35, v36, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  swift_endAccess();
  v37 = (uint64_t *)(v26
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec);
  swift_beginAccess();
  v38 = *v37;
  LOBYTE(v37) = *((_BYTE *)v37 + 8);
  swift_beginAccess();
  *(_QWORD *)v21 = v38;
  *(_BYTE *)(v21 + 8) = (_BYTE)v37;
  v39 = (uint64_t *)(v26
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec);
  swift_beginAccess();
  v40 = *v39;
  LOBYTE(v39) = *((_BYTE *)v39 + 8);
  v41 = v53;
  swift_beginAccess();
  *(_QWORD *)v41 = v40;
  *(_BYTE *)(v41 + 8) = (_BYTE)v39;
  v42 = v26
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  v43 = v57;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v42, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v44 = v54;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v43, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_endAccess();
  v45 = (uint64_t *)(v26
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  v46 = *v45;
  swift_bridgeObjectRetain();
  swift_release();
  v47 = v55;
  swift_beginAccess();
  *v47 = v46;
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  unint64_t *v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t v15;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp;
          goto LABEL_14;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport;
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_SvInfo;
          v14 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo;
          goto LABEL_16;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          v14 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections;
          goto LABEL_16;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo;
          goto LABEL_14;
        case 6:
        case 7:
          swift_beginAccess();
          v15 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 8:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters;
LABEL_14:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v15 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_17;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          v13 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
          v14 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset;
LABEL_16:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v12, v13, (uint64_t)v14);
          v15 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_17:
          v2 = v15;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = v3;
  v9 = *(_QWORD *)(v5
                 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(0)
                          + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v12 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v13 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(v9, a1, a2, a3);
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v16 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t closure #6 in closure #1 in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  double v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = a2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v116 = *(_QWORD *)(v3 - 8);
  v117 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v114 = (uint64_t)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_KlobucharModelParameters?, CLP_LogEntry_PrivateData_KlobucharModelParameters?));
  MEMORY[0x24BDAC7A8](v115);
  v118 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v120 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v129 = (char *)&v113 - v9;
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(0);
  v123 = *(_QWORD *)(v10 - 8);
  v124 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v119 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeConversionInfo?, CLP_LogEntry_PrivateData_TimeConversionInfo?));
  MEMORY[0x24BDAC7A8](v122);
  v125 = (uint64_t)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v121 = (uint64_t)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v134 = (uint64_t)&v113 - v16;
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(0);
  v131 = *(_QWORD *)(v17 - 8);
  v132 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v126 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementReport?, CLP_LogEntry_PrivateData_MeasurementReport?));
  MEMORY[0x24BDAC7A8](v130);
  v133 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v127 = (uint64_t)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v136 = (uint64_t)&v113 - v23;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v128 = (uint64_t)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceivedTimeStamp?, CLP_LogEntry_PrivateData_ReceivedTimeStamp?));
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v135 = (uint64_t)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v113 - v33;
  v35 = a1;
  v36 = a1
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v37 = v137;
  v38 = v137
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__receivedTimestamp;
  swift_beginAccess();
  v39 = (uint64_t)&v29[*(int *)(v27 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v40((uint64_t)v29, 1, v24) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
    v41 = v40(v39, 1, v24);
    v42 = v37;
    v43 = v35;
    if (v41 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceivedTimeStamp?, CLP_LogEntry_PrivateData_ReceivedTimeStamp?));
    goto LABEL_43;
  }
  v43 = v35;
  v44 = v135;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, v135, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if (v40(v39, 1, v24) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
    goto LABEL_6;
  }
  v45 = v128;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, v128, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  swift_retain();
  v42 = v37;
  swift_retain();
  v46 = v44;
  v47 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v44, v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?);
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_8:
  v48 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  v49 = v136;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v48, v136, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v50 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measReport;
  swift_beginAccess();
  v51 = v133;
  v52 = v133 + *(int *)(v130 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, v133, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v53 = v50;
  v54 = v51;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  v56 = v51;
  v57 = v132;
  if (v55(v56, 1, v132) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
    v58 = v55(v52, 1, v57);
    v59 = (uint64_t)v129;
    v60 = v134;
    if (v58 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
      goto LABEL_16;
    }
LABEL_13:
    v63 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MeasurementReport?, CLP_LogEntry_PrivateData_MeasurementReport?);
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v63);
    goto LABEL_43;
  }
  v61 = v127;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v127, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  v62 = v55(v52, 1, v57);
  v59 = (uint64_t)v129;
  v60 = v134;
  if (v62 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v136, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v61, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    goto LABEL_13;
  }
  v64 = v61;
  v65 = v126;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, v126, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  v66 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v64, v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, closure #1 in static CLP_LogEntry_PrivateData_MeasurementReport.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v136, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?);
  if ((v66 & 1) == 0)
    goto LABEL_43;
LABEL_16:
  v67 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v68 = *v67;
  v69 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svInfo);
  swift_beginAccess();
  v70 = *v69;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = specialized static Array<A>.== infix(_:_:)(v68, v70, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_SvInfo.== infix(_:_:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0)
    goto LABEL_43;
  v72 = (uint64_t *)(v43
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v73 = *v72;
  v74 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rxBandCorrections);
  swift_beginAccess();
  v75 = *v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76 = specialized static Array<A>.== infix(_:_:)(v73, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v76 & 1) == 0)
    goto LABEL_43;
  v77 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v78 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__timeConversion;
  swift_beginAccess();
  v79 = v125;
  v80 = v125 + *(int *)(v122 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, v125, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v81 = v78;
  v54 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
  v83 = v79;
  v84 = v124;
  if (v82(v83, 1, v124) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
    if (v82(v80, 1, v84) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  v85 = v121;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if (v82(v80, 1, v84) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
LABEL_23:
    v63 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeConversionInfo?, CLP_LogEntry_PrivateData_TimeConversionInfo?);
    goto LABEL_14;
  }
  v86 = v119;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, v119, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  v87 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v85, v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_TimeConversionInfo.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v86, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?);
  if ((v87 & 1) == 0)
    goto LABEL_43;
LABEL_25:
  v88 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  v89 = *(double *)v88;
  v90 = *(_BYTE *)(v88 + 8);
  v91 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeMachContinuousSec;
  swift_beginAccess();
  if ((v90 & 1) != 0)
  {
    v92 = (uint64_t)v120;
    if ((*(_BYTE *)(v91 + 8) & 1) == 0)
      goto LABEL_43;
  }
  else
  {
    v92 = (uint64_t)v120;
    if ((*(_BYTE *)(v91 + 8) & 1) != 0 || v89 != *(double *)v91)
      goto LABEL_43;
  }
  v93 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  v94 = *(double *)v93;
  v95 = *(_BYTE *)(v93 + 8);
  v96 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__measApplicabilityTimeUncertaintySec;
  swift_beginAccess();
  if ((v95 & 1) != 0)
  {
    if ((*(_BYTE *)(v96 + 8) & 1) == 0)
      goto LABEL_43;
  }
  else if ((*(_BYTE *)(v96 + 8) & 1) != 0 || v94 != *(double *)v96)
  {
    goto LABEL_43;
  }
  v97 = v43
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v97, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v98 = v42
      + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__klobucharModel;
  swift_beginAccess();
  v99 = v118;
  v100 = v118 + *(int *)(v115 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v118, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v101 = v98;
  v54 = v99;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  v103 = v99;
  v104 = v117;
  if (v102(v103, 1, v117) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    if (v102(v100, 1, v104) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
      goto LABEL_40;
    }
    v105 = v114;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v100, v114, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    v106 = specialized static CLP_LogEntry_PrivateData_KlobucharModelParameters.== infix(_:_:)(v92, v105);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v105, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v92, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    if ((v106 & 1) != 0)
      goto LABEL_42;
LABEL_43:
    swift_release();
    swift_release();
    v111 = 0;
    return v111 & 1;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
  if (v102(v100, 1, v104) != 1)
  {
LABEL_40:
    v63 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_KlobucharModelParameters?, CLP_LogEntry_PrivateData_KlobucharModelParameters?);
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?);
LABEL_42:
  v107 = (uint64_t *)(v43
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  v108 = *v107;
  v109 = (uint64_t *)(v42
                   + OBJC_IVAR____TtCV10ALProtobuf58CLP_LogEntry_PrivateData_MeasurementReportCallbackContentsP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__apcSvOffset);
  swift_beginAccess();
  v110 = *v109;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v111 = specialized static Array<A>.== infix(_:_:)(v108, v110);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v111 & 1;
}

Swift::Int CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  UnknownStorage.init()();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
  return Message.hash(into:)();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        v15 = specialized static CLP_LogEntry_PrivateData_SignalCorrelationPeak.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  char v42;
  double *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  char v48;
  double *v49;
  int v50;
  uint64_t v51;
  double *v52;
  char v53;
  double *v54;
  int v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v68 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v12 = MEMORY[0x24BDAC7A8](v71);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v62 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 != *(_QWORD *)(a2 + 16))
    goto LABEL_44;
  if (!v18 || a1 == a2)
  {
    v58 = 1;
    return v58 & 1;
  }
  v70 = v4;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = *(_QWORD *)(v15 + 72);
  v63 = v6;
  v64 = v20;
  v21 = v18 - 1;
  v65 = a2;
  v66 = a1;
  v62 = v9;
  while (1)
  {
    v69 = v21;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v19, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v19, (uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    v22 = *(int *)(v71 + 20);
    v23 = (double *)&v17[v22];
    v24 = v17[v22 + 8];
    v25 = (double *)&v14[v22];
    v26 = v14[v22 + 8];
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_43;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_43;
    }
    v27 = *(int *)(v71 + 24);
    v28 = (uint64_t)&v14[v27];
    v29 = (uint64_t)&v11[*(int *)(v9 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)&v17[v27], (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v28, v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    v31 = v70;
    if (v30((uint64_t)v11, 1, v70) == 1)
    {
      if (v30(v29, 1, v31) != 1)
      {
        v60 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?);
        goto LABEL_42;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
      v32 = v65;
      a1 = v66;
      goto LABEL_34;
    }
    v33 = v17;
    v34 = v14;
    v35 = v11;
    v36 = (uint64_t)v11;
    v37 = v67;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    if (v30(v29, 1, v31) == 1)
      break;
    v38 = v29;
    v39 = (uint64_t)v63;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v38, (uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    v40 = *(int *)(v31 + 20);
    v41 = (double *)(v37 + v40);
    v42 = *(_BYTE *)(v37 + v40 + 8);
    v43 = (double *)(v39 + v40);
    v44 = *(unsigned __int8 *)(v39 + v40 + 8);
    v45 = v37;
    if ((v42 & 1) != 0)
    {
      v32 = v65;
      a1 = v66;
      v11 = v35;
      v14 = v34;
      v17 = v33;
      if (!v44)
        goto LABEL_38;
    }
    else
    {
      if (*v41 != *v43)
        LOBYTE(v44) = 1;
      v32 = v65;
      a1 = v66;
      v11 = v35;
      v14 = v34;
      v17 = v33;
      if ((v44 & 1) != 0)
      {
LABEL_38:
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
        v59 = v67;
        v60 = &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?;
        goto LABEL_41;
      }
    }
    v46 = *(int *)(v70 + 24);
    v47 = (double *)(v45 + v46);
    v48 = *(_BYTE *)(v45 + v46 + 8);
    v49 = (double *)(v39 + v46);
    v50 = *(unsigned __int8 *)(v39 + v46 + 8);
    if ((v48 & 1) != 0)
    {
      if (!v50)
        goto LABEL_38;
    }
    else
    {
      if (*v47 != *v49)
        LOBYTE(v50) = 1;
      if ((v50 & 1) != 0)
        goto LABEL_38;
    }
    v51 = *(int *)(v70 + 28);
    v52 = (double *)(v45 + v51);
    v53 = *(_BYTE *)(v45 + v51 + 8);
    v54 = (double *)(v39 + v51);
    v55 = *(unsigned __int8 *)(v39 + v51 + 8);
    if ((v53 & 1) != 0)
    {
      if (!v55)
        goto LABEL_38;
    }
    else
    {
      if (*v52 != *v54)
        LOBYTE(v55) = 1;
      if ((v55 & 1) != 0)
        goto LABEL_38;
    }
    type metadata accessor for UnknownStorage();
    v56 = v39;
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    v9 = v62;
    if ((v57 & 1) == 0)
      goto LABEL_43;
LABEL_34:
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v58 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
    v21 = v69 - 1;
    if ((v58 & 1) != 0)
    {
      v19 += v64;
      a2 = v32;
      if (v69)
        continue;
    }
    return v58 & 1;
  }
  v59 = v37;
  v11 = v35;
  v14 = v34;
  v17 = v33;
  v60 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?);
LABEL_41:
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v59, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_42:
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, v60);
LABEL_43:
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime);
LABEL_44:
  v58 = 0;
  return v58 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  double *v30;
  char v31;
  double *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  BOOL v39;
  uint64_t v41;

  v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v41 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        v15 = v4[5];
        v16 = v10[v15];
        v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13)
            goto LABEL_43;
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_43;
        }
        v19 = v4[6];
        v20 = (double *)&v10[v19];
        v21 = v10[v19 + 8];
        v22 = (double *)&v7[v19];
        v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23)
            goto LABEL_43;
        }
        else
        {
          if (*v20 != *v22)
            LOBYTE(v23) = 1;
          if ((v23 & 1) != 0)
          {
LABEL_43:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
            goto LABEL_44;
          }
        }
        v24 = v4[7];
        v25 = (double *)&v10[v24];
        v26 = v10[v24 + 8];
        v27 = (double *)&v7[v24];
        v28 = v7[v24 + 8];
        if ((v26 & 1) != 0)
        {
          if (!v28)
            goto LABEL_43;
        }
        else
        {
          if (*v25 != *v27)
            LOBYTE(v28) = 1;
          if ((v28 & 1) != 0)
            goto LABEL_43;
        }
        v29 = v4[8];
        v30 = (double *)&v10[v29];
        v31 = v10[v29 + 8];
        v32 = (double *)&v7[v29];
        v33 = v7[v29 + 8];
        if ((v31 & 1) != 0)
        {
          if (!v33)
            goto LABEL_43;
        }
        else
        {
          if (*v30 != *v32)
            LOBYTE(v33) = 1;
          if ((v33 & 1) != 0)
            goto LABEL_43;
        }
        v34 = v4[9];
        v35 = v10[v34];
        v36 = v7[v34];
        if (v35 == 3)
        {
          if (v36 != 3)
            goto LABEL_43;
        }
        else if (v36 == 3 || v35 != v36)
        {
          goto LABEL_43;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections);
        v39 = v14-- != 0;
        if ((v37 & 1) != 0)
        {
          v12 += v13;
          if (v39)
            continue;
        }
        return v37 & 1;
      }
    }
    v37 = 1;
  }
  else
  {
LABEL_44:
    v37 = 0;
  }
  return v37 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  float *v25;
  char v26;
  float *v27;
  int v28;
  uint64_t v29;
  float *v30;
  char v31;
  float *v32;
  int v33;
  char v34;
  BOOL v36;
  uint64_t v38;

  v4 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v38 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        v15 = v4[5];
        v16 = v10[v15];
        v17 = v7[v15];
        if (v16 == 13)
        {
          if (v17 != 13)
            goto LABEL_38;
        }
        else if (v17 == 13 || v16 != v17)
        {
          goto LABEL_38;
        }
        v19 = v4[6];
        v20 = (double *)&v10[v19];
        v21 = v10[v19 + 8];
        v22 = (double *)&v7[v19];
        v23 = v7[v19 + 8];
        if ((v21 & 1) != 0)
        {
          if (!v23)
            goto LABEL_38;
        }
        else
        {
          if (*v20 != *v22)
            LOBYTE(v23) = 1;
          if ((v23 & 1) != 0)
          {
LABEL_38:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
            goto LABEL_39;
          }
        }
        v24 = v4[7];
        v25 = (float *)&v10[v24];
        v26 = v10[v24 + 4];
        v27 = (float *)&v7[v24];
        v28 = v7[v24 + 4];
        if ((v26 & 1) != 0)
        {
          if (!v28)
            goto LABEL_38;
        }
        else
        {
          if (*v25 != *v27)
            LOBYTE(v28) = 1;
          if ((v28 & 1) != 0)
            goto LABEL_38;
        }
        v29 = v4[8];
        v30 = (float *)&v10[v29];
        v31 = v10[v29 + 4];
        v32 = (float *)&v7[v29];
        v33 = v7[v29 + 4];
        if ((v31 & 1) != 0)
        {
          if (!v33)
            goto LABEL_38;
        }
        else
        {
          if (*v30 != *v32)
            LOBYTE(v33) = 1;
          if ((v33 & 1) != 0)
            goto LABEL_38;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
        v36 = v14-- != 0;
        if ((v34 & 1) != 0)
        {
          v12 += v13;
          if (v36)
            continue;
        }
        return v34 & 1;
      }
    }
    v34 = 1;
  }
  else
  {
LABEL_39:
    v34 = 0;
  }
  return v34 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        v15 = specialized static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  char v17;
  double *v18;
  int v19;
  uint64_t v20;
  double *v21;
  char v22;
  double *v23;
  int v24;
  char v25;
  BOOL v27;
  uint64_t v29;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v29 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v15 = *(int *)(v4 + 20);
        v16 = (double *)&v10[v15];
        v17 = v10[v15 + 8];
        v18 = (double *)&v7[v15];
        v19 = v7[v15 + 8];
        if ((v17 & 1) != 0)
        {
          if (!v19)
            goto LABEL_24;
        }
        else
        {
          if (*v16 != *v18)
            LOBYTE(v19) = 1;
          if ((v19 & 1) != 0)
          {
LABEL_24:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_25;
          }
        }
        v20 = *(int *)(v4 + 24);
        v21 = (double *)&v10[v20];
        v22 = v10[v20 + 8];
        v23 = (double *)&v7[v20];
        v24 = v7[v20 + 8];
        if ((v22 & 1) != 0)
        {
          if (!v24)
            goto LABEL_24;
        }
        else
        {
          if (*v21 != *v23)
            LOBYTE(v24) = 1;
          if ((v24 & 1) != 0)
            goto LABEL_24;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v27 = v14-- != 0;
        if ((v25 & 1) != 0)
        {
          v12 += v13;
          if (v27)
            continue;
        }
        return v25 & 1;
      }
    }
    v25 = 1;
  }
  else
  {
LABEL_25:
    v25 = 0;
  }
  return v25 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v42;
  _DWORD *v43;
  char v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  char v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  int v56;
  char v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v59 - v9;
  v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  v11 = MEMORY[0x24BDAC7A8](v68);
  v13 = (uint64_t *)((char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v59 - v15);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (v17 && a1 != a2)
    {
      v60 = v5;
      v18 = 0;
      v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v20 = a1 + v19;
      v21 = a2 + v19;
      v22 = *(_QWORD *)(v14 + 72);
      v63 = v20;
      v64 = v17;
      v61 = v22;
      v62 = v21;
      while (1)
      {
        v65 = v18;
        v23 = v22 * v18;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v20 + v22 * v18, (uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v21 + v23, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        v24 = *v13;
        v67 = *v16;
        v25 = *(_QWORD *)(v67 + 16);
        if (v25 != *(_QWORD *)(v24 + 16))
          goto LABEL_54;
        if (v25 && v67 != v24)
        {
          v26 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
          v66 = *(_QWORD *)(v60 + 72);
          do
          {
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67 + v26, (uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v24 + v26, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            v27 = *(int *)(v4 + 20);
            v28 = (double *)&v10[v27];
            v29 = v10[v27 + 8];
            v30 = (double *)&v8[v27];
            v31 = v8[v27 + 8];
            if ((v29 & 1) != 0)
            {
              if (!v31)
                goto LABEL_53;
            }
            else
            {
              if (*v28 != *v30)
                LOBYTE(v31) = 1;
              if ((v31 & 1) != 0)
              {
LABEL_53:
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
                goto LABEL_54;
              }
            }
            v32 = *(int *)(v4 + 24);
            v33 = (double *)&v10[v32];
            v34 = v10[v32 + 8];
            v35 = (double *)&v8[v32];
            v36 = v8[v32 + 8];
            if ((v34 & 1) != 0)
            {
              if (!v36)
                goto LABEL_53;
            }
            else
            {
              if (*v33 != *v35)
                LOBYTE(v36) = 1;
              if ((v36 & 1) != 0)
                goto LABEL_53;
            }
            type metadata accessor for UnknownStorage();
            lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v37 = dispatch thunk of static Equatable.== infix(_:_:)();
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            if ((v37 & 1) == 0)
              goto LABEL_54;
            v26 += v66;
            --v25;
          }
          while (v25);
        }
        v38 = v68[6];
        v39 = *((unsigned __int8 *)v16 + v38);
        v40 = *((unsigned __int8 *)v13 + v38);
        if (v39 == 4)
        {
          if (v40 != 4)
            goto LABEL_54;
        }
        else if (v40 == 4 || v39 != v40)
        {
          goto LABEL_54;
        }
        v42 = v68[7];
        v43 = (_DWORD *)((char *)v16 + v42);
        v44 = *((_BYTE *)v16 + v42 + 4);
        v45 = (_DWORD *)((char *)v13 + v42);
        v46 = *((unsigned __int8 *)v13 + v42 + 4);
        if ((v44 & 1) != 0)
        {
          if (!v46)
            goto LABEL_54;
        }
        else
        {
          if (*v43 != *v45)
            LOBYTE(v46) = 1;
          if ((v46 & 1) != 0)
          {
LABEL_54:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
            goto LABEL_55;
          }
        }
        v47 = v68[8];
        v48 = (_DWORD *)((char *)v16 + v47);
        v49 = *((_BYTE *)v16 + v47 + 4);
        v50 = (_DWORD *)((char *)v13 + v47);
        v51 = *((unsigned __int8 *)v13 + v47 + 4);
        if ((v49 & 1) != 0)
        {
          if (!v51)
            goto LABEL_54;
        }
        else
        {
          if (*v48 != *v50)
            LOBYTE(v51) = 1;
          if ((v51 & 1) != 0)
            goto LABEL_54;
        }
        v52 = v68[9];
        v53 = (_DWORD *)((char *)v16 + v52);
        v54 = *((_BYTE *)v16 + v52 + 4);
        v55 = (_DWORD *)((char *)v13 + v52);
        v56 = *((unsigned __int8 *)v13 + v52 + 4);
        if ((v54 & 1) != 0)
        {
          if (!v56)
            goto LABEL_54;
        }
        else
        {
          if (*v53 != *v55)
            LOBYTE(v56) = 1;
          if ((v56 & 1) != 0)
            goto LABEL_54;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
        if ((v57 & 1) != 0)
        {
          v18 = v65 + 1;
          v21 = v62;
          v20 = v63;
          v22 = v61;
          if (v65 + 1 != v64)
            continue;
        }
        return v57 & 1;
      }
    }
    v57 = 1;
  }
  else
  {
LABEL_55:
    v57 = 0;
  }
  return v57 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double *v48;
  char v49;
  double *v50;
  int v51;
  uint64_t v52;
  double *v53;
  char v54;
  double *v55;
  int v56;
  char v57;
  uint64_t v58;
  double *v59;
  char v60;
  double *v61;
  int v62;
  uint64_t v63;
  double *v64;
  char v65;
  double *v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  double *v72;
  char v73;
  double *v74;
  int v75;
  uint64_t v76;
  double *v77;
  char v78;
  double *v79;
  int v80;
  uint64_t v81;
  double *v82;
  char v83;
  double *v84;
  int v85;
  uint64_t v86;
  double *v87;
  char v88;
  double *v89;
  int v90;
  char v91;
  uint64_t v92;
  char *v93;
  char v94;
  char *v95;
  int v96;
  uint64_t v97;
  char *v98;
  char v99;
  char *v100;
  int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;

  v120 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v4 = *(_QWORD *)(v120 - 8);
  v5 = MEMORY[0x24BDAC7A8](v120);
  v7 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v103 - v8;
  v121 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  v10 = *((_QWORD *)v121 - 1);
  v11 = MEMORY[0x24BDAC7A8](v121);
  v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v103 - v14;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v23 = (char *)&v103 - v22;
  v24 = *(_QWORD *)(a1 + 16);
  if (v24 != *(_QWORD *)(a2 + 16))
  {
LABEL_90:
    v102 = 0;
    return v102 & 1;
  }
  if (!v24 || a1 == a2)
  {
    v102 = 1;
    return v102 & 1;
  }
  v117 = (char *)&v103 - v22;
  v118 = v20;
  v103 = v4;
  v25 = 0;
  v26 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)(v21 + 72);
  v110 = v28;
  v111 = v27;
  v112 = v24;
  v109 = v29;
  while (1)
  {
    v116 = v25;
    v30 = v29 * v25;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v27 + v29 * v25, (uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28 + v30, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    v31 = *(_QWORD *)v23;
    v32 = *(_QWORD *)v19;
    v33 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    v34 = v118;
    if (v33 != *(_QWORD *)(*(_QWORD *)v19 + 16))
    {
LABEL_89:
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
      goto LABEL_90;
    }
    if (v33 && v31 != v32)
      break;
LABEL_71:
    v92 = *(int *)(v34 + 24);
    v93 = &v23[v92];
    v94 = v23[v92 + 8];
    v95 = &v19[v92];
    v96 = v19[v92 + 8];
    if ((v94 & 1) != 0)
    {
      if (!v96)
        goto LABEL_89;
    }
    else
    {
      if (*(_QWORD *)v93 != *(_QWORD *)v95)
        LOBYTE(v96) = 1;
      if ((v96 & 1) != 0)
        goto LABEL_89;
    }
    v97 = *(int *)(v34 + 28);
    v98 = &v23[v97];
    v99 = v23[v97 + 8];
    v100 = &v19[v97];
    v101 = v19[v97 + 8];
    if ((v99 & 1) != 0)
    {
      if (!v101)
        goto LABEL_89;
    }
    else
    {
      if (*(_QWORD *)v98 != *(_QWORD *)v100)
        LOBYTE(v101) = 1;
      if ((v101 & 1) != 0)
        goto LABEL_89;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v23 = v117;
    v102 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
    if ((v102 & 1) != 0)
    {
      v25 = v116 + 1;
      v27 = v111;
      v29 = v109;
      v28 = v110;
      if (v116 + 1 != v112)
        continue;
    }
    return v102 & 1;
  }
  v35 = 0;
  v36 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v37 = v31 + v36;
  v113 = v19;
  v114 = v32 + v36;
  v38 = *(_QWORD *)(v10 + 72);
  v107 = v32;
  v108 = v10;
  v105 = v37;
  v106 = v33;
  v104 = v38;
  while (1)
  {
    v39 = v35;
    v40 = v38 * v35;
    result = outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37 + v38 * v35, (uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v42 = *(_QWORD *)(v32 + 16);
    v115 = v39;
    if (v39 >= v42)
      break;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v114 + v40, (uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v43 = *(_QWORD *)v15;
    v44 = *(_QWORD *)v13;
    v45 = *(_QWORD *)(*(_QWORD *)v15 + 16);
    if (v45 != *(_QWORD *)(*(_QWORD *)v13 + 16))
      goto LABEL_88;
    if (v45 && v43 != v44)
    {
      v46 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v119 = *(_QWORD *)(v103 + 72);
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v43 + v46, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44 + v46, (uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        v47 = *(int *)(v120 + 20);
        v48 = (double *)&v9[v47];
        v49 = v9[v47 + 8];
        v50 = (double *)&v7[v47];
        v51 = v7[v47 + 8];
        if ((v49 & 1) != 0)
        {
          if (!v51)
            goto LABEL_87;
        }
        else
        {
          if (*v48 != *v50)
            LOBYTE(v51) = 1;
          if ((v51 & 1) != 0)
          {
LABEL_87:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
            goto LABEL_88;
          }
        }
        v52 = *(int *)(v120 + 24);
        v53 = (double *)&v9[v52];
        v54 = v9[v52 + 8];
        v55 = (double *)&v7[v52];
        v56 = v7[v52 + 8];
        if ((v54 & 1) != 0)
        {
          if (!v56)
            goto LABEL_87;
        }
        else
        {
          if (*v53 != *v55)
            LOBYTE(v56) = 1;
          if ((v56 & 1) != 0)
            goto LABEL_87;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
        if ((v57 & 1) == 0)
          goto LABEL_88;
        v46 += v119;
        --v45;
      }
      while (v45);
    }
    v58 = v121[6];
    v59 = (double *)&v15[v58];
    v60 = v15[v58 + 8];
    v61 = (double *)&v13[v58];
    v62 = v13[v58 + 8];
    if ((v60 & 1) != 0)
    {
      if (!v62)
        goto LABEL_88;
    }
    else
    {
      if (*v59 != *v61)
        LOBYTE(v62) = 1;
      if ((v62 & 1) != 0)
      {
LABEL_88:
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
        v19 = v113;
        v23 = v117;
        goto LABEL_89;
      }
    }
    v63 = v121[7];
    v64 = (double *)&v15[v63];
    v65 = v15[v63 + 8];
    v66 = (double *)&v13[v63];
    v67 = v13[v63 + 8];
    if ((v65 & 1) != 0)
    {
      if (!v67)
        goto LABEL_88;
    }
    else
    {
      if (*v64 != *v66)
        LOBYTE(v67) = 1;
      if ((v67 & 1) != 0)
        goto LABEL_88;
    }
    v68 = v121[8];
    v69 = v15[v68];
    v70 = v13[v68];
    if (v69 == 2)
    {
      if (v70 != 2)
        goto LABEL_88;
    }
    else if (v70 == 2 || ((((v70 & 1) == 0) ^ v69) & 1) == 0)
    {
      goto LABEL_88;
    }
    v71 = v121[9];
    v72 = (double *)&v15[v71];
    v73 = v15[v71 + 8];
    v74 = (double *)&v13[v71];
    v75 = v13[v71 + 8];
    if ((v73 & 1) != 0)
    {
      if (!v75)
        goto LABEL_88;
    }
    else
    {
      if (*v72 != *v74)
        LOBYTE(v75) = 1;
      if ((v75 & 1) != 0)
        goto LABEL_88;
    }
    v76 = v121[10];
    v77 = (double *)&v15[v76];
    v78 = v15[v76 + 8];
    v79 = (double *)&v13[v76];
    v80 = v13[v76 + 8];
    if ((v78 & 1) != 0)
    {
      if (!v80)
        goto LABEL_88;
    }
    else
    {
      if (*v77 != *v79)
        LOBYTE(v80) = 1;
      if ((v80 & 1) != 0)
        goto LABEL_88;
    }
    v81 = v121[11];
    v82 = (double *)&v15[v81];
    v83 = v15[v81 + 8];
    v84 = (double *)&v13[v81];
    v85 = v13[v81 + 8];
    if ((v83 & 1) != 0)
    {
      if (!v85)
        goto LABEL_88;
    }
    else
    {
      if (*v82 != *v84)
        LOBYTE(v85) = 1;
      if ((v85 & 1) != 0)
        goto LABEL_88;
    }
    v86 = v121[12];
    v87 = (double *)&v15[v86];
    v88 = v15[v86 + 8];
    v89 = (double *)&v13[v86];
    v90 = v13[v86 + 8];
    if ((v88 & 1) != 0)
    {
      if (!v90)
        goto LABEL_88;
    }
    else
    {
      if (*v87 != *v89)
        LOBYTE(v90) = 1;
      if ((v90 & 1) != 0)
        goto LABEL_88;
    }
    type metadata accessor for UnknownStorage();
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v91 = dispatch thunk of static Equatable.== infix(_:_:)();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
    v32 = v107;
    v10 = v108;
    v19 = v113;
    v23 = v117;
    v34 = v118;
    if ((v91 & 1) == 0)
      goto LABEL_89;
    v35 = v115 + 1;
    v38 = v104;
    v37 = v105;
    if (v115 + 1 == v106)
      goto LABEL_71;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss(0);
  v4 = MEMORY[0x24BDAC7A8](v18);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v11, (uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v11, (uint64_t)v6, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      v12 = *(int *)(v18 + 20);
      v13 = *(_QWORD *)&v9[v12];
      v14 = *(_QWORD *)&v6[v12];
      if (v13 != v14)
      {
        swift_retain();
        swift_retain();
        v15 = closure #1 in static Proto_Gnss_Emergency_GanssAidRequestPerGanss.== infix(_:_:)(v13, v14);
        swift_release();
        swift_release();
        if (!v15)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v6, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
      v11 += v17;
      if (!--v10)
        return 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v6, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for Proto_Gnss_Emergency_GanssAidRequestPerGanss);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v18 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      v14 = *(int *)(v4 + 20);
      v15 = *(_QWORD *)&v10[v14];
      v16 = *(_QWORD *)&v7[v14];
      if (v15 != v16 && (closure #1 in static Proto_Gnss_Emergency_GpsEphemeris.== infix(_:_:)(v15, v16) & 1) == 0)
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
      v12 += v13;
      if (!--v11)
        return 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GpsEphemeris);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        v15 = specialized static Proto_Gnss_Emergency_GsmCellInfo.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for Proto_Gnss_Emergency_GsmCellInfo);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;

  v22 = type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement(0);
  v4 = MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v17 = 0;
    return v17 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v21 = *(_QWORD *)(v7 + 72);
    v12 = v10 - 1;
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v11, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v11, (uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      v13 = *(int *)(v22 + 20);
      v14 = *(_QWORD *)&v9[v13];
      v15 = *(_QWORD *)&v6[v13];
      if (v14 != v15)
      {
        swift_retain();
        swift_retain();
        v16 = closure #1 in static CLP_LogEntry_AONLoc_BtAdvertisement.== infix(_:_:)(v14, v15);
        swift_release();
        swift_release();
        if (!v16)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
      v19 = v12-- != 0;
      if ((v17 & 1) != 0)
      {
        v11 += v21;
        if (v19)
          continue;
      }
      return v17 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v6, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_BtAdvertisement);
    goto LABEL_15;
  }
  v17 = 1;
  return v17 & 1;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  BOOL v34;
  uint64_t v36;

  v4 = (int *)type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v36 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        v15 = v4[5];
        v16 = &v10[v15];
        v17 = *(_QWORD *)&v10[v15 + 8];
        v18 = &v7[v15];
        v19 = *((_QWORD *)v18 + 1);
        if (v17)
        {
          if (!v19)
            goto LABEL_36;
          v20 = *(_QWORD *)v16 == *(_QWORD *)v18 && v17 == v19;
          if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_36;
        }
        else if (v19)
        {
          goto LABEL_36;
        }
        v21 = v4[6];
        v22 = &v10[v21];
        v23 = v10[v21 + 4];
        v24 = &v7[v21];
        v25 = v7[v21 + 4];
        if ((v23 & 1) != 0)
        {
          if (!v25)
            goto LABEL_36;
        }
        else
        {
          if (*(_DWORD *)v22 != *(_DWORD *)v24)
            LOBYTE(v25) = 1;
          if ((v25 & 1) != 0)
          {
LABEL_36:
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
            goto LABEL_37;
          }
        }
        v26 = v4[7];
        v27 = &v10[v26];
        v28 = *(_QWORD *)&v10[v26 + 8];
        v29 = &v7[v26];
        v30 = *((_QWORD *)v29 + 1);
        if (v28)
        {
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)v27 == *(_QWORD *)v29 && v28 == v30;
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_36;
        }
        else if (v30)
        {
          goto LABEL_36;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for Proto_Gpsd_RecoveryStatistics.RecoveryPoint);
        v34 = v14-- != 0;
        if ((v32 & 1) != 0)
        {
          v12 += v13;
          if (v34)
            continue;
        }
        return v32 & 1;
      }
    }
    v32 = 1;
  }
  else
  {
LABEL_37:
    v32 = 0;
  }
  return v32 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  BOOL v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v25 = a4;
  v27 = a3(0);
  v7 = MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v20 = 0;
    return v20 & 1;
  }
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v26 = *(_QWORD *)(v10 + 72);
    v15 = v13 - 1;
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v14, (uint64_t)v12, a3);
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v14, (uint64_t)v9, a3);
      v16 = *(int *)(v27 + 20);
      v17 = *(_QWORD *)&v12[v16];
      v18 = *(_QWORD *)&v9[v16];
      if (v17 != v18)
      {
        swift_retain();
        swift_retain();
        v19 = v25(v17, v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
      v22 = v15-- != 0;
      if ((v20 & 1) != 0)
      {
        v14 += v26;
        if (v22)
          continue;
      }
      return v20 & 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
    goto LABEL_15;
  }
  v20 = 1;
  return v20 & 1;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  v22 = a4;
  v23 = a3(0);
  v7 = MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
      return 1;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v21 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1 + v14, (uint64_t)v12, a3);
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a2 + v14, (uint64_t)v9, a3);
      v15 = *(int *)(v23 + 20);
      v16 = *(_QWORD *)&v12[v15];
      v17 = *(_QWORD *)&v9[v15];
      if (v16 != v17)
      {
        swift_retain();
        swift_retain();
        v18 = v22(v16, v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
      v14 += v21;
      if (!--v13)
        return 1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, a3);
  }
  return 0;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_23598D8B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x23598DA9CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_GlonassSlotSource.init(rawValue:)(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t specialized CLP_LogEntry_PrivateData_SatelliteSystem.init(rawValue:)(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 8:
      result = 4;
      break;
    case 16:
      result = 5;
      break;
    case 32:
      result = 6;
      break;
    case 64:
      result = 7;
      break;
    default:
      result = 8;
      break;
  }
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_Band.init(rawValue:)(unint64_t result)
{
  if (result >= 0xD)
    return 13;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_FullSvTimeSource.init(rawValue:)(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_SvPositionSource.init(rawValue:)(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

unint64_t specialized CLP_LogEntry_PrivateData_SvReferencePoint.init(rawValue:)(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvId(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvId);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SyncState._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Measurement._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Clock(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Clock);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SvInfo._StorageClass);
}

uint64_t specialized CLP_LogEntry_PrivateData_SvInfo._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _QWORD *v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  MEMORY[0x24BDAC7A8](v3);
  v92 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  MEMORY[0x24BDAC7A8](v5);
  v74 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v73 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds;
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v75 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource) = 7;
  v10 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions) = MEMORY[0x24BEE4AF8];
  v12 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb;
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  v76 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec;
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  v79 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1) = 5;
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1) = 5;
  v81 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1) = 5;
  v82 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1) = 5;
  v83 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1) = 5;
  v17 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  *v17 = v11;
  v18 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v84 = v17;
  v85 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  v19 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v86 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5) = 5;
  v87 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5) = 5;
  v88 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5) = 5;
  v89 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5) = 5;
  v90 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5) = 5;
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  v91 = v1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  v93 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint) = 4;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__id;
  swift_beginAccess();
  v22 = v74;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v23 = v73;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v22, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  swift_endAccess();
  v24 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__referenceTimeNanoseconds);
  swift_beginAccess();
  v25 = *v24;
  LOBYTE(v24) = *((_BYTE *)v24 + 8);
  swift_beginAccess();
  *(_QWORD *)v9 = v25;
  *(_BYTE *)(v9 + 8) = (_BYTE)v24;
  v26 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__positionSource);
  swift_beginAccess();
  LOBYTE(v26) = *v26;
  v27 = v75;
  swift_beginAccess();
  *v27 = (_BYTE)v26;
  v28 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__anchorPositions);
  swift_beginAccess();
  v29 = *v28;
  swift_beginAccess();
  *v10 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockBiasCorrectionNanoseconds);
  swift_beginAccess();
  v31 = *v30;
  LOBYTE(v30) = *((_BYTE *)v30 + 8);
  swift_beginAccess();
  *(_QWORD *)v12 = v31;
  *(_BYTE *)(v12 + 8) = (_BYTE)v30;
  v32 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyCorrectionPpb);
  swift_beginAccess();
  v33 = *v32;
  LOBYTE(v32) = *((_BYTE *)v32 + 8);
  swift_beginAccess();
  *(_QWORD *)v13 = v33;
  *(_BYTE *)(v13 + 8) = (_BYTE)v32;
  v34 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyChangeCorrectionPpbPerSec);
  swift_beginAccess();
  v35 = *v34;
  LOBYTE(v34) = *((_BYTE *)v34 + 8);
  v36 = v76;
  swift_beginAccess();
  *(_QWORD *)v36 = v35;
  *(_BYTE *)(v36 + 8) = (_BYTE)v34;
  v37 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyPositionM;
  swift_beginAccess();
  LODWORD(v35) = *(_DWORD *)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 4);
  v38 = v77;
  swift_beginAccess();
  *(_DWORD *)v38 = v35;
  *(_BYTE *)(v38 + 4) = v37;
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__rangeAccuracyClockNanoseconds;
  swift_beginAccess();
  LODWORD(v35) = *(_DWORD *)v39;
  LOBYTE(v39) = *(_BYTE *)(v39 + 4);
  v40 = v78;
  swift_beginAccess();
  *(_DWORD *)v40 = v35;
  *(_BYTE *)(v40 + 4) = v39;
  v41 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL1);
  swift_beginAccess();
  LOBYTE(v41) = *v41;
  v42 = v79;
  swift_beginAccess();
  *v42 = (_BYTE)v41;
  v43 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL1);
  swift_beginAccess();
  LOBYTE(v43) = *v43;
  v44 = v80;
  swift_beginAccess();
  *v44 = (_BYTE)v43;
  v45 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL1);
  swift_beginAccess();
  LOBYTE(v45) = *v45;
  v46 = v81;
  swift_beginAccess();
  *v46 = (_BYTE)v45;
  v47 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL1);
  swift_beginAccess();
  LOBYTE(v47) = *v47;
  v48 = v82;
  swift_beginAccess();
  *v48 = (_BYTE)v47;
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL1);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  v50 = v83;
  swift_beginAccess();
  *v50 = (_BYTE)v49;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svBandCorrections);
  swift_beginAccess();
  v52 = *v51;
  v53 = v84;
  swift_beginAccess();
  *v53 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = a1
      + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__polynomialOrbit;
  swift_beginAccess();
  v55 = v92;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  v56 = v85;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v55, v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?);
  swift_endAccess();
  v57 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromSvHealthL5);
  swift_beginAccess();
  LOBYTE(v57) = *v57;
  v58 = v86;
  swift_beginAccess();
  *v58 = (_BYTE)v57;
  v59 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__overTheAirFromOtherSvHealthL5);
  swift_beginAccess();
  LOBYTE(v59) = *v59;
  v60 = v87;
  swift_beginAccess();
  *v60 = (_BYTE)v59;
  v61 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__assistanceFileHealthL5);
  swift_beginAccess();
  LOBYTE(v61) = *v61;
  v62 = v88;
  swift_beginAccess();
  *v62 = (_BYTE)v61;
  v63 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__msBasedHealthL5);
  swift_beginAccess();
  LOBYTE(v63) = *v63;
  v64 = v89;
  swift_beginAccess();
  *v64 = (_BYTE)v63;
  v65 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__integrityHealthL5);
  swift_beginAccess();
  LOBYTE(v65) = *v65;
  v66 = v90;
  swift_beginAccess();
  *v66 = (_BYTE)v65;
  v67 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__clockFrequencyAccelCorrectionPpbPerSecPerSec);
  swift_beginAccess();
  v68 = *v67;
  LOBYTE(v67) = *((_BYTE *)v67 + 8);
  v69 = v91;
  swift_beginAccess();
  *(_QWORD *)v69 = v68;
  *(_BYTE *)(v69 + 8) = (_BYTE)v67;
  v70 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf31CLP_LogEntry_PrivateData_SvInfoP33_DB890547D1206BC2212117D0A5F8672013_StorageClass__svReferencePoint);
  swift_beginAccess();
  LOBYTE(v70) = *v70;
  v71 = v93;
  swift_beginAccess();
  *v71 = (_BYTE)v70;
  return v1;
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass);
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23598EB54()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23598EB88 + *((int *)qword_23598ED60 + (v0 >> 62))))();
}

uint64_t sub_23598EB98@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_24;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_24;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_24;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_24;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 == 2)
  {
    if (v24 != 2)
      goto LABEL_24;
  }
  else if (v24 == 2 || ((((v24 & 1) == 0) ^ v23) & 1) == 0)
  {
    goto LABEL_24;
  }
  v25 = v11[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 == 2)
      goto LABEL_23;
LABEL_24:
    v29 = 0;
    return v29 & 1;
  }
  if (v27 == 2 || ((((v27 & 1) == 0) ^ v26) & 1) == 0)
    goto LABEL_24;
LABEL_23:
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v28(v10, a1, v4);
  v28(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v8, v4);
  v30(v10, v4);
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  float *v33;
  char v34;
  float *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v41 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (float *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 4);
    v35 = (float *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 4);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v74 = a1;
  v75 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v62 - v5;
  v73 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v68 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v62 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SfcfXyz?, CLP_LogEntry_PrivateData_SfcfXyz?));
  MEMORY[0x24BDAC7A8](v67);
  v69 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v72 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v70 = (char *)&v62 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v62 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v62 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v62 - v28;
  v30 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v30[5], (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v30[5], (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      goto LABEL_11;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvId?, CLP_LogEntry_PrivateData_SvId?);
    v34 = (uint64_t)v20;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
LABEL_8:
    v35 = 0;
    return v35 & 1;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  v37 = specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)((uint64_t)v24, (uint64_t)v17);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  if ((v37 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v38 = v30[6];
  v39 = v74;
  v40 = v75;
  v41 = *(unsigned __int8 *)(v74 + v38);
  v42 = *(unsigned __int8 *)(v75 + v38);
  if (v41 == 13)
  {
    v44 = (uint64_t)v72;
    v43 = v73;
    v46 = (uint64_t)v70;
    v45 = (uint64_t)v71;
    if (v42 != 13)
      goto LABEL_8;
  }
  else
  {
    v35 = 0;
    v44 = (uint64_t)v72;
    v43 = v73;
    v46 = (uint64_t)v70;
    v45 = (uint64_t)v71;
    if (v42 == 13 || v41 != v42)
      return v35 & 1;
  }
  v47 = v30[7];
  v48 = *(unsigned __int8 *)(v74 + v47);
  v49 = *(unsigned __int8 *)(v75 + v47);
  if (v48 == 4)
  {
    if (v49 != 4)
      goto LABEL_8;
    goto LABEL_21;
  }
  v35 = 0;
  if (v49 != 4 && v48 == v49)
  {
LABEL_21:
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v30[8], v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40 + v30[8], v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    v50 = v69;
    v51 = v69 + *(int *)(v67 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    v52 = v50;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    if (v53(v52, 1, v43) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      if (v53(v51, 1, v43) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v69, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
LABEL_28:
        v57 = v65;
        v56 = v66;
        v58 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
        v59 = v63;
        v58(v63, v39, v66);
        v60 = v64;
        v58(v64, v40, v56);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)();
        v61 = *(void (**)(char *, uint64_t))(v57 + 8);
        v61(v60, v56);
        v61(v59, v56);
        return v35 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      if (v53(v51, 1, v43) != 1)
      {
        v54 = v62;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, v62, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        v55 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v44, v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v54, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
        if ((v55 & 1) != 0)
          goto LABEL_28;
        goto LABEL_8;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v44, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    }
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SfcfXyz?, CLP_LogEntry_PrivateData_SfcfXyz?);
    v34 = v69;
    goto LABEL_7;
  }
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverClockCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  double *v33;
  char v34;
  double *v35;
  int v36;
  char v37;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v41 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_27;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_27;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_27;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_27;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_27;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) == 0)
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v32 = v11[9];
    v33 = (double *)(a1 + v32);
    v34 = *(_BYTE *)(a1 + v32 + 8);
    v35 = (double *)(a2 + v32);
    v36 = *(unsigned __int8 *)(a2 + v32 + 8);
    if ((v34 & 1) != 0)
    {
      if (!v36)
        goto LABEL_27;
    }
    else
    {
      if (*v33 != *v35)
        LOBYTE(v36) = 1;
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v39(v10, a1, v4);
    v39(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)();
    v40 = *(void (**)(char *, uint64_t))(v5 + 8);
    v40(v8, v4);
    v40(v10, v4);
    return v37 & 1;
  }
  if (v31)
    goto LABEL_25;
LABEL_27:
  v37 = 0;
  return v37 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_KlobucharModelParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  float *v28;
  char v29;
  float *v30;
  int v31;
  uint64_t v32;
  float *v33;
  char v34;
  float *v35;
  int v36;
  uint64_t v37;
  float *v38;
  char v39;
  float *v40;
  int v41;
  uint64_t v42;
  float *v43;
  char v44;
  float *v45;
  int v46;
  uint64_t v47;
  float *v48;
  char v49;
  float *v50;
  int v51;
  uint64_t v52;
  float *v53;
  char v54;
  float *v55;
  int v56;
  char v57;
  void (*v59)(char *, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t);
  uint64_t v61;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v61 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_51;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_51;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_51;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_51;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_51;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_51;
  }
  v27 = v11[8];
  v28 = (float *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 4);
  v30 = (float *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_51;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_51;
  }
  v32 = v11[9];
  v33 = (float *)(a1 + v32);
  v34 = *(_BYTE *)(a1 + v32 + 4);
  v35 = (float *)(a2 + v32);
  v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) != 0)
  {
    if (!v36)
      goto LABEL_51;
  }
  else
  {
    if (*v33 != *v35)
      LOBYTE(v36) = 1;
    if ((v36 & 1) != 0)
      goto LABEL_51;
  }
  v37 = v11[10];
  v38 = (float *)(a1 + v37);
  v39 = *(_BYTE *)(a1 + v37 + 4);
  v40 = (float *)(a2 + v37);
  v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      goto LABEL_51;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      goto LABEL_51;
  }
  v42 = v11[11];
  v43 = (float *)(a1 + v42);
  v44 = *(_BYTE *)(a1 + v42 + 4);
  v45 = (float *)(a2 + v42);
  v46 = *(unsigned __int8 *)(a2 + v42 + 4);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_51;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_51;
  }
  v47 = v11[12];
  v48 = (float *)(a1 + v47);
  v49 = *(_BYTE *)(a1 + v47 + 4);
  v50 = (float *)(a2 + v47);
  v51 = *(unsigned __int8 *)(a2 + v47 + 4);
  if ((v49 & 1) == 0)
  {
    if (*v48 != *v50)
      LOBYTE(v51) = 1;
    if ((v51 & 1) != 0)
      goto LABEL_51;
LABEL_49:
    v52 = v11[13];
    v53 = (float *)(a1 + v52);
    v54 = *(_BYTE *)(a1 + v52 + 4);
    v55 = (float *)(a2 + v52);
    v56 = *(unsigned __int8 *)(a2 + v52 + 4);
    if ((v54 & 1) != 0)
    {
      if (!v56)
        goto LABEL_51;
    }
    else
    {
      if (*v53 != *v55)
        LOBYTE(v56) = 1;
      if ((v56 & 1) != 0)
        goto LABEL_51;
    }
    v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v59(v10, a1, v4);
    v59(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    v60 = *(void (**)(char *, uint64_t))(v5 + 8);
    v60(v8, v4);
    v60(v10, v4);
    return v57 & 1;
  }
  if (v51)
    goto LABEL_49;
LABEL_51:
  v57 = 0;
  return v57 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverBandCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double *v17;
  char v18;
  double *v19;
  int v20;
  uint64_t v21;
  float *v22;
  char v23;
  float *v24;
  int v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  int v30;
  char v31;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v35 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13)
      goto LABEL_23;
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_23;
  }
  v16 = v11[6];
  v17 = (double *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 8);
  v19 = (double *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_23;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_23;
  }
  v21 = v11[7];
  v22 = (float *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 4);
  v24 = (float *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 4);
  if ((v23 & 1) == 0)
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_23;
LABEL_21:
    v26 = v11[8];
    v27 = (float *)(a1 + v26);
    v28 = *(_BYTE *)(a1 + v26 + 4);
    v29 = (float *)(a2 + v26);
    v30 = *(unsigned __int8 *)(a2 + v26 + 4);
    if ((v28 & 1) != 0)
    {
      if (!v30)
        goto LABEL_23;
    }
    else
    {
      if (*v27 != *v29)
        LOBYTE(v30) = 1;
      if ((v30 & 1) != 0)
        goto LABEL_23;
    }
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v33(v10, a1, v4);
    v33(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34 = *(void (**)(char *, uint64_t))(v5 + 8);
    v34(v8, v4);
    v34(v10, v4);
    return v31 & 1;
  }
  if (v25)
    goto LABEL_21;
LABEL_23:
  v31 = 0;
  return v31 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SignalCorrelationPeak.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float *v51;
  char v52;
  float *v53;
  int v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v76 = a1;
  v77 = a2;
  v2 = type metadata accessor for UnknownStorage();
  v65 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v64 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v62 - v5;
  v73 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v67 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?));
  MEMORY[0x24BDAC7A8](v69);
  v74 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v68 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v71 = (uint64_t)&v62 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v72 = (uint64_t)&v62 - v13;
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?));
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v62 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v62 - v28;
  v30 = type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76 + *(int *)(v30 + 20), (uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v75 = v30;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v30 + 20), (uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v32((uint64_t)v20, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    if (v32(v31, 1, v14) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      goto LABEL_8;
    }
LABEL_6:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SvTime?, CLP_LogEntry_PrivateData_SvTime?);
    v34 = (uint64_t)v20;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v34, v33);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if (v32(v31, 1, v14) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  v35 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)((uint64_t)v24, (uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v27, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v29, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
  if ((v35 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v36 = v75;
  v37 = v76;
  v38 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76 + *(int *)(v75 + 24), v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v39 = v77;
  v40 = v71;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v36 + 24), v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v41 = v74;
  v42 = v74 + *(int *)(v69 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v74, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, v42, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v44 = v73;
  if (v43(v41, 1, v73) != 1)
  {
    v45 = v68;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    if (v43(v42, 1, v44) != 1)
    {
      v48 = v67;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, v67, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      v49 = specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(v45, v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      if ((v49 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v45, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
  if (v43(v42, 1, v44) != 1)
  {
LABEL_13:
    v33 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_FrequencyOffset?, CLP_LogEntry_PrivateData_FrequencyOffset?);
    v34 = v41;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
LABEL_18:
  v50 = *(int *)(v75 + 28);
  v51 = (float *)(v37 + v50);
  v52 = *(_BYTE *)(v37 + v50 + 4);
  v53 = (float *)(v39 + v50);
  v54 = *(unsigned __int8 *)(v39 + v50 + 4);
  if ((v52 & 1) != 0)
  {
    if (v54)
    {
LABEL_24:
      v55 = v65;
      v56 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
      v57 = v63;
      v58 = v37;
      v59 = v66;
      v56(v63, v58, v66);
      v60 = v64;
      v56(v64, v39, v59);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v61 = *(void (**)(char *, uint64_t))(v55 + 8);
      v61(v60, v59);
      v61(v57, v59);
      return v46 & 1;
    }
  }
  else
  {
    if (*v51 != *v53)
      LOBYTE(v54) = 1;
    if ((v54 & 1) == 0)
      goto LABEL_24;
  }
LABEL_15:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvMeasurementUsage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (float *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 4);
    v25 = (float *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 4);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GpsToUtcConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  char v32;
  void (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_21;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_21;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_21;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_21;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v27 = v11[8];
    v28 = (double *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 8);
    v30 = (double *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_21;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_19;
LABEL_21:
  v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoE5SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v46 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_52;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_52;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_52;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_52;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 != 2)
      goto LABEL_52;
  }
  else if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
  {
    goto LABEL_52;
  }
  v21 = v11[8];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(a2 + v21);
  if (v22 == 2)
  {
    if (v23 != 2)
      goto LABEL_52;
  }
  else if (v23 == 2 || ((((v23 & 1) == 0) ^ v22) & 1) == 0)
  {
    goto LABEL_52;
  }
  v24 = v11[9];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 != 2)
      goto LABEL_52;
  }
  else if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
  {
    goto LABEL_52;
  }
  v27 = v11[10];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      goto LABEL_52;
  }
  else if (v29 == 2 || ((((v29 & 1) == 0) ^ v28) & 1) == 0)
  {
    goto LABEL_52;
  }
  v30 = v11[11];
  v31 = *(unsigned __int8 *)(a1 + v30);
  v32 = *(unsigned __int8 *)(a2 + v30);
  if (v31 == 2)
  {
    if (v32 != 2)
      goto LABEL_52;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    goto LABEL_52;
  }
  v33 = v11[12];
  v34 = *(unsigned __int8 *)(a1 + v33);
  v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2)
      goto LABEL_52;
  }
  else if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
  {
    goto LABEL_52;
  }
  v36 = v11[13];
  v37 = *(unsigned __int8 *)(a1 + v36);
  v38 = *(unsigned __int8 *)(a2 + v36);
  if (v37 == 2)
  {
    if (v38 != 2)
      goto LABEL_52;
  }
  else if (v38 == 2 || ((((v38 & 1) == 0) ^ v37) & 1) == 0)
  {
    goto LABEL_52;
  }
  v39 = v11[14];
  v40 = *(unsigned __int8 *)(a1 + v39);
  v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 == 2)
      goto LABEL_51;
LABEL_52:
    v43 = 0;
    return v43 & 1;
  }
  if (v41 == 2 || ((((v41 & 1) == 0) ^ v40) & 1) == 0)
    goto LABEL_52;
LABEL_51:
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v42(v10, a1, v4);
  v42(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v8, v4);
  v44(v10, v4);
  return v43 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvBandCorrections.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double *v17;
  char v18;
  double *v19;
  int v20;
  uint64_t v21;
  double *v22;
  char v23;
  double *v24;
  int v25;
  uint64_t v26;
  double *v27;
  char v28;
  double *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v38 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 13)
  {
    if (v14 != 13)
      goto LABEL_29;
  }
  else if (v14 == 13 || v13 != v14)
  {
    goto LABEL_29;
  }
  v16 = v11[6];
  v17 = (double *)(a1 + v16);
  v18 = *(_BYTE *)(a1 + v16 + 8);
  v19 = (double *)(a2 + v16);
  v20 = *(unsigned __int8 *)(a2 + v16 + 8);
  if ((v18 & 1) != 0)
  {
    if (!v20)
      goto LABEL_29;
  }
  else
  {
    if (*v17 != *v19)
      LOBYTE(v20) = 1;
    if ((v20 & 1) != 0)
      goto LABEL_29;
  }
  v21 = v11[7];
  v22 = (double *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 8);
  v24 = (double *)(a2 + v21);
  v25 = *(unsigned __int8 *)(a2 + v21 + 8);
  if ((v23 & 1) != 0)
  {
    if (!v25)
      goto LABEL_29;
  }
  else
  {
    if (*v22 != *v24)
      LOBYTE(v25) = 1;
    if ((v25 & 1) != 0)
      goto LABEL_29;
  }
  v26 = v11[8];
  v27 = (double *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 8);
  v29 = (double *)(a2 + v26);
  v30 = *(unsigned __int8 *)(a2 + v26 + 8);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_29;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_29;
  }
  v31 = v11[9];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 3)
  {
    if (v33 != 3)
    {
LABEL_29:
      v34 = 0;
      return v34 & 1;
    }
LABEL_33:
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v36(v10, a1, v4);
    v36(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v37 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37(v8, v4);
    v37(v10, v4);
    return v34 & 1;
  }
  v34 = 0;
  if (v33 != 3 && v32 == v33)
    goto LABEL_33;
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvPositionAtTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v44 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v50 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v44 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v44 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (double *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 8);
  v51 = a2;
  v27 = (double *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 8);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v45 = v4;
  v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    v32 = v31(v30, 1, v8);
    v33 = v45;
    if (v32 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
LABEL_16:
      v39 = v49;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      v41 = v47;
      v40(v47, v29, v33);
      v42 = v48;
      v40(v48, v51, v33);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v33);
      v43(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v50;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_Wgs84Ecef?, CLP_LogEntry_PrivateData_Wgs84Ecef?));
    goto LABEL_13;
  }
  v37 = v46;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, v46, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  v38 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v34, v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
  v33 = v45;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SbasL1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState(0);
  v12 = v11[5];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 2)
  {
    if (v14 != 2)
      goto LABEL_17;
  }
  else if (v14 == 2 || ((((v14 & 1) == 0) ^ v13) & 1) == 0)
  {
    goto LABEL_17;
  }
  v15 = v11[6];
  v16 = *(unsigned __int8 *)(a1 + v15);
  v17 = *(unsigned __int8 *)(a2 + v15);
  if (v16 == 2)
  {
    if (v17 != 2)
      goto LABEL_17;
  }
  else if (v17 == 2 || ((((v17 & 1) == 0) ^ v16) & 1) == 0)
  {
    goto LABEL_17;
  }
  v18 = v11[7];
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = *(unsigned __int8 *)(a2 + v18);
  if (v19 == 2)
  {
    if (v20 == 2)
      goto LABEL_16;
LABEL_17:
    v22 = 0;
    return v22 & 1;
  }
  if (v20 == 2 || ((((v20 & 1) == 0) ^ v19) & 1) == 0)
    goto LABEL_17;
LABEL_16:
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21(v10, a1, v4);
  v21(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v8, v4);
  v23(v10, v4);
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PolynomialOrbit.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  char v15;
  double *v16;
  int v17;
  uint64_t v18;
  double *v19;
  char v20;
  double *v21;
  int v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit(0);
  v12 = v11;
  v13 = *(int *)(v11 + 32);
  v14 = (double *)((char *)a1 + v13);
  v15 = *((_BYTE *)a1 + v13 + 8);
  v16 = (double *)((char *)a2 + v13);
  v17 = *((unsigned __int8 *)a2 + v13 + 8);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_17;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_17;
  }
  v18 = *(int *)(v11 + 36);
  v19 = (double *)((char *)a1 + v18);
  v20 = *((_BYTE *)a1 + v18 + 8);
  v21 = (double *)((char *)a2 + v18);
  v22 = *((unsigned __int8 *)a2 + v18 + 8);
  if ((v20 & 1) != 0)
  {
    if (!v22)
    {
LABEL_17:
      v25 = 0;
      return v25 & 1;
    }
  }
  else
  {
    if (*v19 != *v21)
      LOBYTE(v22) = 1;
    if ((v22 & 1) != 0)
      goto LABEL_17;
  }
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)
    || !specialized static Array<A>.== infix(_:_:)(a1[1], a2[1])
    || !specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
  {
    goto LABEL_17;
  }
  v23 = (char *)a1 + *(int *)(v12 + 28);
  v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v10, v23, v4);
  v24(v8, (char *)a2 + *(int *)(v12 + 28), v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v8, v4);
  v26(v10, v4);
  return v25 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassL1fSyncState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = *(unsigned __int8 *)(a1 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2)
      goto LABEL_27;
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_27;
  }
  v17 = v13[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_27;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_27;
  }
  v20 = v13[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_27;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_27;
  }
  v23 = v13[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 != 2)
      goto LABEL_27;
  }
  else if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
  {
    goto LABEL_27;
  }
  v26 = v13[9];
  v27 = *(unsigned __int8 *)(a1 + v26);
  v28 = *(unsigned __int8 *)(a2 + v26);
  if (v27 == 2)
  {
    if (v28 == 2)
      goto LABEL_26;
LABEL_27:
    v30 = 0;
    return v30 & 1;
  }
  if (v28 == 2 || ((((v28 & 1) == 0) ^ v27) & 1) == 0)
    goto LABEL_27;
LABEL_26:
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v29(v12, a1, v6);
  v29(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v10, v6);
  v31(v12, v6);
  return v30 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (double *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 8);
    v20 = (double *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 8);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_9;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16)
    goto LABEL_7;
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  _DWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v64;
  char v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  void (*v71)(_BYTE *, uint64_t);
  _BYTE v72[4];
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;

  v4 = type metadata accessor for UnknownStorage();
  v79 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v78 = &v72[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v77 = &v72[-v7];
  v84 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v8 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v81 = &v72[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, CLP_LogEntry_PrivateData_GlonassSubsecondConversion?));
  v11 = MEMORY[0x24BDAC7A8](v10);
  v83 = &v72[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v72[-v13];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v80 = &v72[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = &v72[-v19];
  v21 = MEMORY[0x24BDAC7A8](v18);
  v82 = &v72[-v22];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = &v72[-v24];
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = &v72[-v27];
  MEMORY[0x24BDAC7A8](v26);
  v30 = &v72[-v29];
  v31 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo(0);
  v32 = a2;
  v33 = v31;
  v34 = v31[5];
  v35 = (_DWORD *)(a1 + v34);
  v36 = *(_BYTE *)(a1 + v34 + 4);
  v37 = (_DWORD *)(v32 + v34);
  v38 = *(unsigned __int8 *)(v32 + v34 + 4);
  if ((v36 & 1) != 0)
  {
    if (!v38)
      goto LABEL_32;
  }
  else
  {
    if (*v35 != *v37)
      LOBYTE(v38) = 1;
    if ((v38 & 1) != 0)
      goto LABEL_32;
  }
  v39 = v31[6];
  v40 = (_DWORD *)(a1 + v39);
  v41 = *(_BYTE *)(a1 + v39 + 4);
  v42 = (_DWORD *)(v32 + v39);
  v43 = *(unsigned __int8 *)(v32 + v39 + 4);
  if ((v41 & 1) != 0)
  {
    if (!v43)
      goto LABEL_32;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    if ((v43 & 1) != 0)
      goto LABEL_32;
  }
  v44 = v31[7];
  v45 = *(unsigned __int8 *)(a1 + v44);
  v46 = *(unsigned __int8 *)(v32 + v44);
  v76 = v4;
  if (v45 == 6)
  {
    if (v46 != 6)
      goto LABEL_32;
LABEL_18:
    v48 = v31[8];
    v74 = a1;
    v49 = a1 + v48;
    v50 = v32;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v49, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    v51 = v33[8];
    v75 = v50;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v50 + v51, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    v52 = (uint64_t)&v14[*(int *)(v10 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, v52, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v54 = v84;
    if (v53((uint64_t)v14, 1, v84) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      if (v53(v52, 1, v54) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
LABEL_25:
        v58 = v74;
        v59 = v82;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74 + v33[9], (uint64_t)v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75 + v33[9], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        v60 = v83;
        v61 = (uint64_t)&v83[*(int *)(v10 + 48)];
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, (uint64_t)v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if (v53((uint64_t)v60, 1, v54) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          if (v53(v61, 1, v54) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
LABEL_35:
            v66 = v79;
            v67 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 16);
            v68 = v76;
            v69 = v77;
            v67(v77, v58, v76);
            v70 = v78;
            v67(v78, v75, v68);
            lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v47 = dispatch thunk of static Equatable.== infix(_:_:)();
            v71 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
            v71(v70, v68);
            v71(v69, v68);
            return v47 & 1;
          }
          goto LABEL_30;
        }
        v62 = v80;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v60, (uint64_t)v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if (v53(v61, 1, v54) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_30:
          v55 = (uint64_t)v60;
          goto LABEL_31;
        }
        v64 = v81;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v61, (uint64_t)v81, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v65 = specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)((uint64_t)v62, (uint64_t)v64);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v64, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v62, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if ((v65 & 1) != 0)
          goto LABEL_35;
LABEL_32:
        v47 = 0;
        return v47 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      if (v53(v52, 1, v54) != 1)
      {
        v56 = v52;
        v57 = v81;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v56, (uint64_t)v81, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v73 = specialized static CLP_LogEntry_PrivateData_GlonassSubsecondConversion.== infix(_:_:)((uint64_t)v25, (uint64_t)v57);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v57, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
        v54 = v84;
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
        if ((v73 & 1) == 0)
          goto LABEL_32;
        goto LABEL_25;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    }
    v55 = (uint64_t)v14;
LABEL_31:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, CLP_LogEntry_PrivateData_GlonassSubsecondConversion?));
    goto LABEL_32;
  }
  v47 = 0;
  if (v46 != 6 && v45 == v46)
    goto LABEL_18;
  return v47 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char v43;
  _DWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v4 = type metadata accessor for UnknownStorage();
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v85 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v84 = (char *)&v82 - v7;
  v97 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v95 = *(_QWORD *)(v97 - 8);
  MEMORY[0x24BDAC7A8](v97);
  v89 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  v9 = MEMORY[0x24BDAC7A8](v96);
  v90 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v98 = (uint64_t)&v82 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v88 = (uint64_t)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v92 = (char *)&v82 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v93 = (char *)&v82 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v91 = (uint64_t)&v82 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v99 = (uint64_t)&v82 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v94 = (uint64_t)&v82 - v23;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)&v82 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v82 - v38;
  v40 = type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo(0);
  v41 = *(int *)(v40 + 20);
  v42 = (_DWORD *)(a1 + v41);
  v43 = *(_BYTE *)(a1 + v41 + 4);
  v100 = a2;
  v44 = (_DWORD *)(a2 + v41);
  v45 = *(unsigned __int8 *)(a2 + v41 + 4);
  if ((v43 & 1) != 0)
  {
    if (!v45)
      goto LABEL_28;
  }
  else
  {
    if (*v42 != *v44)
      LOBYTE(v45) = 1;
    if ((v45 & 1) != 0)
      goto LABEL_28;
  }
  v46 = *(int *)(v40 + 24);
  v47 = v40;
  v82 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v46, (uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v83 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100 + *(int *)(v47 + 24), (uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v48 = (uint64_t)&v30[*(int *)(v28 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v49((uint64_t)v30, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v49(v48, 1, v24) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      goto LABEL_14;
    }
LABEL_12:
    v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?);
    v51 = (uint64_t)v30;
LABEL_27:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v50);
    goto LABEL_28;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v34, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v49(v48, 1, v24) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    goto LABEL_12;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, (uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  v52 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)((uint64_t)v34, (uint64_t)v27);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v27, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v37, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if ((v52 & 1) == 0)
    goto LABEL_28;
LABEL_14:
  v54 = v82;
  v53 = v83;
  v55 = v94;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82 + *(int *)(v83 + 28), v94, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v56 = v99;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100 + *(int *)(v53 + 28), v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v57 = v96;
  v58 = v98;
  v59 = v98 + *(int *)(v96 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  v61 = v97;
  if (v60(v58, 1, v97) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v62 = v60(v59, 1, v61);
    v64 = (uint64_t)v92;
    v63 = (uint64_t)v93;
    if (v62 != 1)
    {
LABEL_26:
      v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?);
      v51 = v58;
      goto LABEL_27;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_20:
    v70 = v83;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54 + *(int *)(v83 + 32), v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100 + *(int *)(v70 + 32), v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v58 = v90;
    v71 = v90 + *(int *)(v57 + 48);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v90, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v71, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v60(v58, 1, v61) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      if (v60(v71, 1, v61) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_31:
        v76 = v86;
        v77 = v87;
        v78 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
        v79 = v84;
        v78(v84, v54, v87);
        v80 = v85;
        v78(v85, v100, v77);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v72 = dispatch thunk of static Equatable.== infix(_:_:)();
        v81 = *(void (**)(char *, uint64_t))(v76 + 8);
        v81(v80, v77);
        v81(v79, v77);
        return v72 & 1;
      }
      goto LABEL_26;
    }
    v65 = v88;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v88, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v60(v71, 1, v61) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      v67 = v63;
      goto LABEL_25;
    }
    v74 = v89;
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v71, v89, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    v75 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v65, v74);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v74, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if ((v75 & 1) != 0)
      goto LABEL_31;
    goto LABEL_28;
  }
  v65 = v91;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v66 = v60(v59, 1, v61);
  v64 = (uint64_t)v92;
  v63 = (uint64_t)v93;
  if (v66 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v67 = v55;
LABEL_25:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_26;
  }
  v68 = v89;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v59, v89, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  v69 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v65, v68);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v68, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v99, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v54 = v82;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if ((v69 & 1) != 0)
    goto LABEL_20;
LABEL_28:
  v72 = 0;
  return v72 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_PhaseTracking.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  double *v28;
  char v29;
  double *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_31;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_31;
  }
  v17 = v11[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (_QWORD *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_31;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_31;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_31;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_31;
  }
  v27 = v11[8];
  v28 = (double *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 8);
  v30 = (double *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 8);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_31;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_31;
  }
  v32 = v11[9];
  v33 = *(unsigned __int8 *)(a1 + v32);
  v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2)
      goto LABEL_30;
LABEL_31:
    v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
    goto LABEL_31;
LABEL_30:
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  char v27;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_15;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_15;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) == 0)
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v22 = v11[7];
    v23 = (double *)(a1 + v22);
    v24 = *(_BYTE *)(a1 + v22 + 8);
    v25 = (double *)(a2 + v22);
    v26 = *(unsigned __int8 *)(a2 + v22 + 8);
    if ((v24 & 1) != 0)
    {
      if (!v26)
        goto LABEL_15;
    }
    else
    {
      if (*v23 != *v25)
        LOBYTE(v26) = 1;
      if ((v26 & 1) != 0)
        goto LABEL_15;
    }
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v29(v10, a1, v4);
    v29(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
    return v27 & 1;
  }
  if (v21)
    goto LABEL_13;
LABEL_15:
  v27 = 0;
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_NavicTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  char v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v44 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v51 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v44 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v44 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo(0);
  v23 = *(int *)(v22 + 20);
  v48 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + v23, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v24 = *(int *)(v22 + 20);
  v49 = a2;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a2 + v24, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = (uint64_t)v50;
    v28 = v51;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v51, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    if (v26(v25, 1, v8) != 1)
    {
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v25, v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      v31 = specialized static CLP_LogEntry_PrivateData_SubSecondConversion.== infix(_:_:)(v28, v27);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v27, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      if ((v31 & 1) == 0)
        goto LABEL_7;
      goto LABEL_10;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_SubSecondConversion?, CLP_LogEntry_PrivateData_SubSecondConversion?));
    goto LABEL_7;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
LABEL_10:
  v32 = *(int *)(v22 + 24);
  v33 = v49;
  v34 = (_DWORD *)(v48 + v32);
  v35 = *(_BYTE *)(v48 + v32 + 4);
  v36 = (_DWORD *)(v49 + v32);
  v37 = *(unsigned __int8 *)(v49 + v32 + 4);
  if ((v35 & 1) != 0)
  {
    if (v37)
    {
LABEL_16:
      v39 = v46;
      v38 = v47;
      v40 = *(void (**)(char *))(v46 + 16);
      v41 = v44;
      v40(v44);
      v42 = v45;
      ((void (*)(char *, uint64_t, uint64_t))v40)(v45, v33, v38);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v38);
      v43(v41, v38);
      return v29 & 1;
    }
  }
  else
  {
    if (*v34 != *v36)
      LOBYTE(v37) = 1;
    if ((v37 & 1) == 0)
      goto LABEL_16;
  }
LABEL_7:
  v29 = 0;
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_LeapSecondChange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;
  int v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v26;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_9;
LABEL_7:
    v17 = *(int *)(v11 + 24);
    v18 = (_DWORD *)(a1 + v17);
    v19 = *(_BYTE *)(a1 + v17 + 4);
    v20 = (_DWORD *)(a2 + v17);
    v21 = *(unsigned __int8 *)(a2 + v17 + 4);
    if ((v19 & 1) != 0)
    {
      if (!v21)
        goto LABEL_9;
    }
    else
    {
      if (*v18 != *v20)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v23(v10, a1, v4);
    v23(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v24(v10, v4);
    return v22 & 1;
  }
  if (v16)
    goto LABEL_7;
LABEL_9:
  v22 = 0;
  return v22 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _DWORD *v27;
  char v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v4 = type metadata accessor for UnknownStorage();
  v57 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v56 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)&v50 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondChange?, CLP_LogEntry_PrivateData_LeapSecondChange?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v50 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v50 - v21;
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v24 = a2;
  v25 = v23;
  v26 = v23[5];
  v27 = (_DWORD *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (_DWORD *)(v24 + v26);
  v30 = *(unsigned __int8 *)(v24 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!v30)
      goto LABEL_18;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v30) = 1;
    if ((v30 & 1) != 0)
      goto LABEL_18;
  }
  v53 = v4;
  v31 = v23[6];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(v24 + v31);
  if (v32 == 5)
  {
    if (v33 != 5)
      goto LABEL_18;
LABEL_12:
    v35 = v23[7];
    v51 = a1;
    v36 = a1 + v35;
    v37 = v24;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v36, (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    v38 = v25[7];
    v52 = v37;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v37 + v38, (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    v39 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v39, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v40((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      if (v40(v39, 1, v8) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
LABEL_21:
        v44 = v57;
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
        v46 = v55;
        v47 = v53;
        v45(v55, v51, v53);
        v48 = v56;
        v45(v56, v52, v47);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)();
        v49 = *(void (**)(char *, uint64_t))(v44 + 8);
        v49(v48, v47);
        v49(v46, v47);
        return v34 & 1;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      if (v40(v39, 1, v8) != 1)
      {
        v42 = v54;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, v54, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        v43 = specialized static CLP_LogEntry_PrivateData_LeapSecondChange.== infix(_:_:)((uint64_t)v17, v42);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        if ((v43 & 1) != 0)
          goto LABEL_21;
LABEL_18:
        v34 = 0;
        return v34 & 1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondChange?, CLP_LogEntry_PrivateData_LeapSecondChange?));
    goto LABEL_18;
  }
  v34 = 0;
  if (v33 != 5 && v32 == v33)
    goto LABEL_12;
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GpsTimeInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  char v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = type metadata accessor for UnknownStorage();
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)&v62 - v7;
  v74 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v71 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v63 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsToUtcConversion?, CLP_LogEntry_PrivateData_GpsToUtcConversion?));
  MEMORY[0x24BDAC7A8](v70);
  v75 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v68 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v72 = (uint64_t)&v62 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v73 = (uint64_t)&v62 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v69 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?));
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v62 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v62 - v29;
  v31 = type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo(0);
  v32 = v31;
  v33 = *(int *)(v31 + 20);
  v76 = a1;
  v77 = a2;
  v34 = (_DWORD *)(a1 + v33);
  v35 = *(_BYTE *)(a1 + v33 + 4);
  v36 = (_DWORD *)(a2 + v33);
  v37 = *(unsigned __int8 *)(a2 + v33 + 4);
  if ((v35 & 1) != 0)
  {
    if (!v37)
      goto LABEL_21;
  }
  else
  {
    if (*v34 != *v36)
      LOBYTE(v37) = 1;
    if ((v37 & 1) != 0)
      goto LABEL_21;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76 + *(int *)(v31 + 24), (uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v77 + *(int *)(v32 + 24), (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v38 = (uint64_t)&v21[*(int *)(v19 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v39((uint64_t)v21, 1, v16) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    if (v39(v38, 1, v16) != 1)
    {
      v42 = v69;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v38, v69, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      v43 = specialized static CLP_LogEntry_PrivateData_LeapSecondInfo.== infix(_:_:)((uint64_t)v25, v42);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v42, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      if ((v43 & 1) == 0)
        goto LABEL_21;
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v25, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_12:
    v40 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LeapSecondInfo?, CLP_LogEntry_PrivateData_LeapSecondInfo?);
    v41 = (uint64_t)v21;
LABEL_20:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v40);
    goto LABEL_21;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
  if (v39(v38, 1, v16) != 1)
    goto LABEL_12;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
LABEL_14:
  v44 = v73;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76 + *(int *)(v32 + 28), v73, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v45 = v77 + *(int *)(v32 + 28);
  v46 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v47 = v75;
  v48 = v75 + *(int *)(v70 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v75, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  v50 = v74;
  if (v49(v47, 1, v74) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    if (v49(v48, 1, v50) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
LABEL_24:
      v57 = v66;
      v56 = v67;
      v58 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v59 = v64;
      v58(v64, v76, v67);
      v60 = v65;
      v58(v65, v77, v56);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v52 = dispatch thunk of static Equatable.== infix(_:_:)();
      v61 = *(void (**)(char *, uint64_t))(v57 + 8);
      v61(v60, v56);
      v61(v59, v56);
      return v52 & 1;
    }
    goto LABEL_19;
  }
  v51 = v68;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if (v49(v48, 1, v50) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
LABEL_19:
    v40 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GpsToUtcConversion?, CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    v41 = v47;
    goto LABEL_20;
  }
  v54 = v63;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, v63, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  v55 = specialized static CLP_LogEntry_PrivateData_GpsToUtcConversion.== infix(_:_:)(v51, v54);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v54, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v51, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v47, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
  if ((v55 & 1) != 0)
    goto LABEL_24;
LABEL_21:
  v52 = 0;
  return v52 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FullSvTime.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v30;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_20;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_20;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_20;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_20;
  }
  v22 = v11[7];
  v23 = *(unsigned __int8 *)(a1 + v22);
  v24 = *(unsigned __int8 *)(a2 + v22);
  if (v23 != 6)
  {
    if (v24 != 6 && v23 == v24)
      goto LABEL_15;
LABEL_20:
    v26 = 0;
    return v26 & 1;
  }
  if (v24 != 6)
    goto LABEL_20;
LABEL_15:
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v25(v10, a1, v4);
  v25(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v8, v4);
  v27(v10, v4);
  return v26 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GalileoE1SyncState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v30 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = *(unsigned __int8 *)(a1 + v14);
  v16 = *(unsigned __int8 *)(a2 + v14);
  if (v15 == 2)
  {
    if (v16 != 2)
      goto LABEL_22;
  }
  else if (v16 == 2 || ((((v16 & 1) == 0) ^ v15) & 1) == 0)
  {
    goto LABEL_22;
  }
  v17 = v13[6];
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 == 2)
  {
    if (v19 != 2)
      goto LABEL_22;
  }
  else if (v19 == 2 || ((((v19 & 1) == 0) ^ v18) & 1) == 0)
  {
    goto LABEL_22;
  }
  v20 = v13[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 != 2)
      goto LABEL_22;
  }
  else if (v22 == 2 || ((((v22 & 1) == 0) ^ v21) & 1) == 0)
  {
    goto LABEL_22;
  }
  v23 = v13[8];
  v24 = *(unsigned __int8 *)(a1 + v23);
  v25 = *(unsigned __int8 *)(a2 + v23);
  if (v24 == 2)
  {
    if (v25 == 2)
      goto LABEL_21;
LABEL_22:
    v27 = 0;
    return v27 & 1;
  }
  if (v25 == 2 || ((((v25 & 1) == 0) ^ v24) & 1) == 0)
    goto LABEL_22;
LABEL_21:
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v12, a1, v6);
  v26(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v10, v6);
  v28(v12, v6);
  return v27 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  int v28;
  char v29;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v33 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_15;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_15;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) == 0)
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_15;
LABEL_13:
    v24 = v13[7];
    v25 = (double *)(a1 + v24);
    v26 = *(_BYTE *)(a1 + v24 + 8);
    v27 = (double *)(a2 + v24);
    v28 = *(unsigned __int8 *)(a2 + v24 + 8);
    if ((v26 & 1) != 0)
    {
      if (!v28)
        goto LABEL_15;
    }
    else
    {
      if (*v25 != *v27)
        LOBYTE(v28) = 1;
      if ((v28 & 1) != 0)
        goto LABEL_15;
    }
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v31(v12, a1, v6);
    v31(v10, a2, v6);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v6);
    v32(v12, v6);
    return v29 & 1;
  }
  if (v23)
    goto LABEL_13;
LABEL_15:
  v29 = 0;
  return v29 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_FrequencyOffset.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - v11;
  v13 = (int *)a3(0);
  v14 = v13[5];
  v15 = (double *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 8);
  v17 = (double *)(a2 + v14);
  v18 = *(unsigned __int8 *)(a2 + v14 + 8);
  if ((v16 & 1) != 0)
  {
    if (!v18)
      goto LABEL_19;
  }
  else
  {
    if (*v15 != *v17)
      LOBYTE(v18) = 1;
    if ((v18 & 1) != 0)
      goto LABEL_19;
  }
  v19 = v13[6];
  v20 = (double *)(a1 + v19);
  v21 = *(_BYTE *)(a1 + v19 + 8);
  v22 = (double *)(a2 + v19);
  v23 = *(unsigned __int8 *)(a2 + v19 + 8);
  if ((v21 & 1) != 0)
  {
    if (!v23)
      goto LABEL_19;
  }
  else
  {
    if (*v20 != *v22)
      LOBYTE(v23) = 1;
    if ((v23 & 1) != 0)
      goto LABEL_19;
  }
  v24 = v13[7];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 2)
  {
    if (v26 == 2)
      goto LABEL_18;
LABEL_19:
    v28 = 0;
    return v28 & 1;
  }
  if (v26 == 2 || ((((v26 & 1) == 0) ^ v25) & 1) == 0)
    goto LABEL_19;
LABEL_18:
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v27(v12, a1, v6);
  v27(v10, a2, v6);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v12, v6);
  return v28 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = *(int *)(a3(0) + 20);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ReceiverClockModel.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  float *v13;
  char v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  char v19;
  float *v20;
  int v21;
  uint64_t v22;
  float *v23;
  char v24;
  float *v25;
  int v26;
  uint64_t v27;
  float *v28;
  char v29;
  float *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v12 = v11[5];
  v13 = (float *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (float *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_31;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_31;
  }
  v17 = v11[6];
  v18 = (float *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 4);
  v20 = (float *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_31;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_31;
  }
  v22 = v11[7];
  v23 = (float *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 4);
  v25 = (float *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26)
      goto LABEL_31;
  }
  else
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_31;
  }
  v27 = v11[8];
  v28 = (float *)(a1 + v27);
  v29 = *(_BYTE *)(a1 + v27 + 4);
  v30 = (float *)(a2 + v27);
  v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31)
      goto LABEL_31;
  }
  else
  {
    if (*v28 != *v30)
      LOBYTE(v31) = 1;
    if ((v31 & 1) != 0)
      goto LABEL_31;
  }
  v32 = v11[9];
  v33 = *(unsigned __int8 *)(a1 + v32);
  v34 = *(unsigned __int8 *)(a2 + v32);
  if (v33 == 2)
  {
    if (v34 == 2)
      goto LABEL_30;
LABEL_31:
    v36 = 0;
    return v36 & 1;
  }
  if (v34 == 2 || ((((v34 & 1) == 0) ^ v33) & 1) == 0)
    goto LABEL_31;
LABEL_30:
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v35(v10, a1, v4);
  v35(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v5 + 8);
  v37(v8, v4);
  v37(v10, v4);
  return v36 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_Clock.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  char v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v96 = type metadata accessor for UnknownStorage();
  v86 = *(_QWORD *)(v96 - 8);
  v4 = MEMORY[0x24BDAC7A8](v96);
  v85 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v84 = (char *)&v82 - v6;
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?));
  MEMORY[0x24BDAC7A8](v88);
  v91 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v95 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v93 = (char *)&v82 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v94 = (char *)&v82 - v15;
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v98 = *(_QWORD *)(v16 - 8);
  v99 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v87 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockCorrections?, CLP_LogEntry_PrivateData_ReceiverClockCorrections?));
  MEMORY[0x24BDAC7A8](v97);
  v100 = (uint64_t)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v92 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v101 = (uint64_t)&v82 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v102 = (uint64_t)&v82 - v24;
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockModel?, CLP_LogEntry_PrivateData_ReceiverClockModel?));
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v82 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v82 - v39;
  v41 = type metadata accessor for CLP_LogEntry_PrivateData_Clock(0);
  v42 = *(int *)(v41 + 20);
  v103 = a1;
  v104 = a2;
  v43 = (_QWORD *)(a1 + v42);
  v44 = *(_BYTE *)(a1 + v42 + 8);
  v45 = (_QWORD *)(a2 + v42);
  v46 = *(unsigned __int8 *)(a2 + v42 + 8);
  if ((v44 & 1) != 0)
  {
    if (!v46)
      goto LABEL_22;
  }
  else
  {
    if (*v43 != *v45)
      LOBYTE(v46) = 1;
    if ((v46 & 1) != 0)
      goto LABEL_22;
  }
  v47 = v41;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103 + *(int *)(v41 + 24), (uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v82 = v47;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104 + *(int *)(v47 + 24), (uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v48 = (uint64_t)&v31[*(int *)(v29 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v49((uint64_t)v31, 1, v25) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    if (v49(v48, 1, v25) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
      goto LABEL_15;
    }
LABEL_12:
    v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockModel?, CLP_LogEntry_PrivateData_ReceiverClockModel?);
LABEL_13:
    v51 = (uint64_t)v31;
LABEL_21:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, v50);
    goto LABEL_22;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v35, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if (v49(v48, 1, v25) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    goto LABEL_12;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v48, (uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  v52 = specialized static CLP_LogEntry_PrivateData_ReceiverClockModel.== infix(_:_:)((uint64_t)v35, (uint64_t)v28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v28, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v38, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v40, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v35, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
  if ((v52 & 1) == 0)
    goto LABEL_22;
LABEL_15:
  v53 = v82;
  v54 = v102;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103 + *(int *)(v82 + 28), v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v55 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104 + *(int *)(v53 + 28), v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v56 = v100;
  v57 = v100 + *(int *)(v97 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v58 = v99;
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v59(v56, 1, v99) != 1)
  {
    v65 = v92;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    v66 = v59(v57, 1, v58);
    v62 = (uint64_t)v95;
    v61 = v96;
    v64 = (uint64_t)v93;
    v63 = (uint64_t)v94;
    if (v66 != 1)
    {
      v69 = v87;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, v87, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      v70 = specialized static CLP_LogEntry_PrivateData_ReceiverClockCorrections.== infix(_:_:)(v65, v69);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v69, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      if ((v70 & 1) == 0)
        goto LABEL_22;
      goto LABEL_25;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v101, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_20:
    v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverClockCorrections?, CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    v51 = v56;
    goto LABEL_21;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
  v60 = v59(v57, 1, v58);
  v62 = (uint64_t)v95;
  v61 = v96;
  v64 = (uint64_t)v93;
  v63 = (uint64_t)v94;
  if (v60 != 1)
    goto LABEL_20;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v56, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
LABEL_25:
  v71 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103 + *(int *)(v82 + 32), v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v104 + *(int *)(v71 + 32), v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  v31 = v91;
  v72 = (uint64_t)&v91[*(int *)(v88 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, (uint64_t)v91, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  v73 = v90;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
  if (v74((uint64_t)v31, 1, v90) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    if (v74(v72, 1, v73) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
LABEL_32:
      v77 = v86;
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
      v79 = v84;
      v78(v84, v103, v61);
      v80 = v85;
      v78(v85, v104, v61);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v81 = *(void (**)(char *, uint64_t))(v77 + 8);
      v81(v80, v61);
      v81(v79, v61);
      return v67 & 1;
    }
    goto LABEL_30;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, v62, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if (v74(v72, 1, v73) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
LABEL_30:
    v50 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    goto LABEL_13;
  }
  v75 = v83;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v72, v83, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  v76 = specialized static CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.== infix(_:_:)(v62, v75);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v75, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
  if ((v76 & 1) != 0)
    goto LABEL_32;
LABEL_22:
  v67 = 0;
  return v67 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v44 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSlotInfo?, CLP_LogEntry_PrivateData_GlonassSlotInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v50 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v44 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v44 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (_DWORD *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 4);
  v51 = a2;
  v27 = (_DWORD *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v45 = v4;
  v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    v32 = v31(v30, 1, v8);
    v33 = v45;
    if (v32 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
LABEL_16:
      v39 = v49;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      v41 = v47;
      v40(v47, v29, v33);
      v42 = v48;
      v40(v48, v51, v33);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v33);
      v43(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v50;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassSlotInfo?, CLP_LogEntry_PrivateData_GlonassSlotInfo?));
    goto LABEL_13;
  }
  v37 = v46;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, v46, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  v38 = specialized static CLP_LogEntry_PrivateData_GlonassSlotInfo.== infix(_:_:)(v34, v37);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
  v33 = v45;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_ConstellationId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char v34;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _DWORD *v39;
  char v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  char v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  char v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  char v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  char v60;
  _DWORD *v61;
  int v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  int *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v72 = (char *)&v69 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v75 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassId?, CLP_LogEntry_PrivateData_GlonassId?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v69 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v69 - v21;
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v24 = *(int *)(v23 + 20);
  v25 = a1;
  v26 = (_DWORD *)(a1 + v24);
  v27 = *(_BYTE *)(a1 + v24 + 4);
  v76 = a2;
  v28 = (_DWORD *)(a2 + v24);
  v29 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v27 & 1) != 0)
  {
    if (!v29)
      goto LABEL_13;
  }
  else
  {
    if (*v26 != *v28)
      LOBYTE(v29) = 1;
    if ((v29 & 1) != 0)
      goto LABEL_13;
  }
  v70 = v4;
  v30 = a1;
  v31 = (int *)v23;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v25 + *(int *)(v23 + 24), (uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v71 = v31;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v76 + v31[6], (uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v32 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v33((uint64_t)v13, 1, v8) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, (uint64_t)v17, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    if (v33(v32, 1, v8) != 1)
    {
      v36 = v75;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, v75, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v37 = specialized static CLP_LogEntry_PrivateData_GlonassId.== infix(_:_:)((uint64_t)v17, v36);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v36, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      if ((v37 & 1) == 0)
        goto LABEL_13;
      goto LABEL_16;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v17, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_GlonassId?, CLP_LogEntry_PrivateData_GlonassId?));
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v22, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
  if (v33(v32, 1, v8) != 1)
    goto LABEL_12;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
LABEL_16:
  v38 = v71[7];
  v39 = (_DWORD *)(v30 + v38);
  v40 = *(_BYTE *)(v30 + v38 + 4);
  v41 = (_DWORD *)(v76 + v38);
  v42 = *(unsigned __int8 *)(v76 + v38 + 4);
  if ((v40 & 1) != 0)
  {
    if (!v42)
      goto LABEL_13;
  }
  else
  {
    if (*v39 != *v41)
      LOBYTE(v42) = 1;
    if ((v42 & 1) != 0)
      goto LABEL_13;
  }
  v43 = v71[8];
  v44 = (_DWORD *)(v30 + v43);
  v45 = *(_BYTE *)(v30 + v43 + 4);
  v46 = (_DWORD *)(v76 + v43);
  v47 = *(unsigned __int8 *)(v76 + v43 + 4);
  if ((v45 & 1) != 0)
  {
    if (!v47)
      goto LABEL_13;
  }
  else
  {
    if (*v44 != *v46)
      LOBYTE(v47) = 1;
    if ((v47 & 1) != 0)
      goto LABEL_13;
  }
  v48 = v71[9];
  v49 = (_DWORD *)(v30 + v48);
  v50 = *(_BYTE *)(v30 + v48 + 4);
  v51 = (_DWORD *)(v76 + v48);
  v52 = *(unsigned __int8 *)(v76 + v48 + 4);
  if ((v50 & 1) != 0)
  {
    if (!v52)
      goto LABEL_13;
  }
  else
  {
    if (*v49 != *v51)
      LOBYTE(v52) = 1;
    if ((v52 & 1) != 0)
      goto LABEL_13;
  }
  v53 = v71[10];
  v54 = (_DWORD *)(v30 + v53);
  v55 = *(_BYTE *)(v30 + v53 + 4);
  v56 = (_DWORD *)(v76 + v53);
  v57 = *(unsigned __int8 *)(v76 + v53 + 4);
  if ((v55 & 1) != 0)
  {
    if (!v57)
      goto LABEL_13;
  }
  else
  {
    if (*v54 != *v56)
      LOBYTE(v57) = 1;
    if ((v57 & 1) != 0)
      goto LABEL_13;
  }
  v58 = v71[11];
  v59 = (_DWORD *)(v30 + v58);
  v60 = *(_BYTE *)(v30 + v58 + 4);
  v61 = (_DWORD *)(v76 + v58);
  v62 = *(unsigned __int8 *)(v76 + v58 + 4);
  if ((v60 & 1) == 0)
  {
    if (*v59 != *v61)
      LOBYTE(v62) = 1;
    if ((v62 & 1) != 0)
      goto LABEL_13;
LABEL_46:
    v63 = v74;
    v64 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    v65 = v72;
    v66 = v70;
    v64(v72, v30, v70);
    v67 = v73;
    v64(v73, v76, v66);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    v68 = *(void (**)(char *, uint64_t))(v63 + 8);
    v68(v67, v66);
    v68(v65, v66);
    return v34 & 1;
  }
  if (v62)
    goto LABEL_46;
LABEL_13:
  v34 = 0;
  return v34 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_SvId.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  char v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for UnknownStorage();
  v49 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (char *)&v44 - v7;
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v46 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ConstellationId?, CLP_LogEntry_PrivateData_ConstellationId?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v50 = (uint64_t)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v44 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v44 - v20;
  v22 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v23 = v22;
  v24 = *(int *)(v22 + 20);
  v25 = (_DWORD *)(a1 + v24);
  v26 = *(_BYTE *)(a1 + v24 + 4);
  v51 = a2;
  v27 = (_DWORD *)(a2 + v24);
  v28 = *(unsigned __int8 *)(a2 + v24 + 4);
  if ((v26 & 1) != 0)
  {
    if (!v28)
      goto LABEL_13;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      goto LABEL_13;
  }
  v45 = v4;
  v29 = a1;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v22 + 24), (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v30 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, v30, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v31((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    v32 = v31(v30, 1, v8);
    v33 = v45;
    if (v32 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
LABEL_16:
      v39 = v49;
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      v41 = v47;
      v40(v47, v29, v33);
      v42 = v48;
      v40(v48, v51, v33);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v33);
      v43(v41, v33);
      return v35 & 1;
    }
    goto LABEL_12;
  }
  v34 = v50;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, v50, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  if (v31(v30, 1, v8) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_12:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ConstellationId?, CLP_LogEntry_PrivateData_ConstellationId?));
    goto LABEL_13;
  }
  v37 = v46;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v30, v46, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  v38 = specialized static CLP_LogEntry_PrivateData_ConstellationId.== infix(_:_:)(v34, v37);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
  v33 = v45;
  if ((v38 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v35 = 0;
  return v35 & 1;
}

uint64_t specialized static CLP_LogEntry_PrivateData_GlonassSlotInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v25;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_DWORD *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 4);
  v15 = (_DWORD *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_14;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_14;
  }
  v17 = *(int *)(v11 + 24);
  v18 = *(unsigned __int8 *)(a1 + v17);
  v19 = *(unsigned __int8 *)(a2 + v17);
  if (v18 != 5)
  {
    if (v19 != 5 && v18 == v19)
      goto LABEL_9;
LABEL_14:
    v21 = 0;
    return v21 & 1;
  }
  if (v19 != 5)
    goto LABEL_14;
LABEL_9:
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v20(v10, a1, v4);
  v20(v8, a2, v4);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)();
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  return v21 & 1;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotSource, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotSource, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotSource, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotSource, &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotSource and conformance CLP_LogEntry_PrivateData_GlonassSlotSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GlonassSlotSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GlonassSlotSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SatelliteSystem, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SatelliteSystem, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SatelliteSystem, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SatelliteSystem, &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SatelliteSystem and conformance CLP_LogEntry_PrivateData_SatelliteSystem);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SatelliteSystem] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SatelliteSystem]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Band, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Band, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Band, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_Band, &type metadata for CLP_LogEntry_PrivateData_Band);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Band and conformance CLP_LogEntry_PrivateData_Band);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_Band()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_Band] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_Band]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTimeSource, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTimeSource, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTimeSource, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTimeSource, &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTimeSource and conformance CLP_LogEntry_PrivateData_FullSvTimeSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_FullSvTimeSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_FullSvTimeSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod, &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementDetectionMethod and conformance CLP_LogEntry_PrivateData_MeasurementDetectionMethod);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MeasurementDetectionMethod] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MeasurementDetectionMethod]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MultipathIndicator, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MultipathIndicator, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MultipathIndicator, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_MultipathIndicator, &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MultipathIndicator and conformance CLP_LogEntry_PrivateData_MultipathIndicator);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_MultipathIndicator] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_MultipathIndicator]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionSource, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionSource, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionSource, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionSource, &type metadata for CLP_LogEntry_PrivateData_SvPositionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionSource and conformance CLP_LogEntry_PrivateData_SvPositionSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvPositionSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvPositionSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvPositionSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvHealthIndication, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvHealthIndication, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvHealthIndication, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvHealthIndication, &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvHealthIndication and conformance CLP_LogEntry_PrivateData_SvHealthIndication);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvHealthIndication] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvHealthIndication]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource, &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_IonosphericCorrectionSource and conformance CLP_LogEntry_PrivateData_IonosphericCorrectionSource);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_IonosphericCorrectionSource] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_IonosphericCorrectionSource]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge, &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge and conformance CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated, &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated and conformance CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated]);
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvReferencePoint, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvReferencePoint, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvReferencePoint, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint)
  {
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvReferencePoint, &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvReferencePoint and conformance CLP_LogEntry_PrivateData_SvReferencePoint);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return lazy protocol witness table accessor for type [CLP_LogEntry_AONLoc_Request.TypeEnum] and conformance [A](&lazy protocol witness table cache variable for type [CLP_LogEntry_PrivateData_SvReferencePoint] and conformance [A], &demangling cache variable for type metadata for [CLP_LogEntry_PrivateData_SvReferencePoint]);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSlotInfo and conformance CLP_LogEntry_PrivateData_GlonassSlotInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassId and conformance CLP_LogEntry_PrivateData_GlonassId, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ConstellationId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ConstellationId and conformance CLP_LogEntry_PrivateData_ConstellationId, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvId()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvId and conformance CLP_LogEntry_PrivateData_SvId, type metadata accessor for CLP_LogEntry_PrivateData_SvId, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvId);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL1SyncState and conformance CLP_LogEntry_PrivateData_GpsL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL2CSyncState and conformance CLP_LogEntry_PrivateData_GpsL2CSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsL5SyncState and conformance CLP_LogEntry_PrivateData_GpsL5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsL5SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassL1fSyncState and conformance CLP_LogEntry_PrivateData_GlonassL1fSyncState, type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB1SyncState and conformance CLP_LogEntry_PrivateData_BeidouB1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouB2SyncState and conformance CLP_LogEntry_PrivateData_BeidouB2SyncState, type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE1SyncState and conformance CLP_LogEntry_PrivateData_GalileoE1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoE5SyncState and conformance CLP_LogEntry_PrivateData_GalileoE5SyncState, type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SbasL1SyncState and conformance CLP_LogEntry_PrivateData_SbasL1SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SbasL1SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SyncState()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SyncState and conformance CLP_LogEntry_PrivateData_SyncState, type metadata accessor for CLP_LogEntry_PrivateData_SyncState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SyncState);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvTime and conformance CLP_LogEntry_PrivateData_SvTime, type metadata accessor for CLP_LogEntry_PrivateData_SvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffset and conformance CLP_LogEntry_PrivateData_FrequencyOffset, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking and conformance CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PhaseTracking()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PhaseTracking and conformance CLP_LogEntry_PrivateData_PhaseTracking, type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PhaseTracking);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SignalCorrelationPeak and conformance CLP_LogEntry_PrivateData_SignalCorrelationPeak, type metadata accessor for CLP_LogEntry_PrivateData_SignalCorrelationPeak, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SignalCorrelationPeak);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_FullSvTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_FullSvTime and conformance CLP_LogEntry_PrivateData_FullSvTime, type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_FullSvTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvMeasurementUsage and conformance CLP_LogEntry_PrivateData_SvMeasurementUsage, type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementExtension and conformance CLP_LogEntry_PrivateData_MeasurementExtension, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementExtension);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Measurement()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Measurement and conformance CLP_LogEntry_PrivateData_Measurement, type metadata accessor for CLP_LogEntry_PrivateData_Measurement, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Measurement);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockModel and conformance CLP_LogEntry_PrivateData_ReceiverClockModel, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockModel);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverClockCorrections and conformance CLP_LogEntry_PrivateData_ReceiverClockCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion and conformance CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Clock()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Clock and conformance CLP_LogEntry_PrivateData_Clock, type metadata accessor for CLP_LogEntry_PrivateData_Clock, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Clock);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementReport()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReport and conformance CLP_LogEntry_PrivateData_MeasurementReport, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReport);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Wgs84Ecef and conformance CLP_LogEntry_PrivateData_Wgs84Ecef, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvBandCorrections and conformance CLP_LogEntry_PrivateData_SvBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_SvBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvBandCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvPositionAtTime and conformance CLP_LogEntry_PrivateData_SvPositionAtTime, type metadata accessor for CLP_LogEntry_PrivateData_SvPositionAtTime, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvPositionAtTime);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PolynomialOrbit and conformance CLP_LogEntry_PrivateData_PolynomialOrbit, type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PolynomialOrbit);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SvInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SvInfo and conformance CLP_LogEntry_PrivateData_SvInfo, type metadata accessor for CLP_LogEntry_PrivateData_SvInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SvInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceiverBandCorrections and conformance CLP_LogEntry_PrivateData_ReceiverBandCorrections, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverBandCorrections, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceiverBandCorrections);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondChange and conformance CLP_LogEntry_PrivateData_LeapSecondChange, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondChange);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LeapSecondInfo and conformance CLP_LogEntry_PrivateData_LeapSecondInfo, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LeapSecondInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsToUtcConversion and conformance CLP_LogEntry_PrivateData_GpsToUtcConversion, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GpsTimeInfo and conformance CLP_LogEntry_PrivateData_GpsTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GpsTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassSubsecondConversion and conformance CLP_LogEntry_PrivateData_GlonassSubsecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GlonassTimeInfo and conformance CLP_LogEntry_PrivateData_GlonassTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SubSecondConversion and conformance CLP_LogEntry_PrivateData_SubSecondConversion, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SubSecondConversion);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BeidouTimeInfo and conformance CLP_LogEntry_PrivateData_BeidouTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GalileoTimeInfo and conformance CLP_LogEntry_PrivateData_GalileoTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_NavicTimeInfo and conformance CLP_LogEntry_PrivateData_NavicTimeInfo, type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_NavicTimeInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeConversionInfo and conformance CLP_LogEntry_PrivateData_TimeConversionInfo, type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeConversionInfo);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_KlobucharModelParameters and conformance CLP_LogEntry_PrivateData_KlobucharModelParameters, type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_SfcfXyz()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_SfcfXyz and conformance CLP_LogEntry_PrivateData_SfcfXyz, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_SfcfXyz);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset and conformance CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, type metadata accessor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ReceivedTimeStamp and conformance CLP_LogEntry_PrivateData_ReceivedTimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MeasurementReportCallbackContents and conformance CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents);
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassSlotSource;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SatelliteSystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23599903C + 4 * byte_235BB6DC9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_235999070 + 4 * byte_235BB6DC4[v4]))();
}

uint64_t sub_235999070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235999080);
  return result;
}

uint64_t sub_23599908C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235999094);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_235999098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359990A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SatelliteSystem()
{
  return &type metadata for CLP_LogEntry_PrivateData_SatelliteSystem;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Band(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_235999198 + 4 * byte_235BB6DD3[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_2359991CC + 4 * byte_235BB6DCE[v4]))();
}

uint64_t sub_2359991CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359991D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2359991DCLL);
  return result;
}

uint64_t sub_2359991E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2359991F0);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_2359991F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359991FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_Band()
{
  return &type metadata for CLP_LogEntry_PrivateData_Band;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_FullSvTimeSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_FullSvTimeSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MeasurementDetectionMethod()
{
  return &type metadata for CLP_LogEntry_PrivateData_MeasurementDetectionMethod;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_MultipathIndicator()
{
  return &type metadata for CLP_LogEntry_PrivateData_MultipathIndicator;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementDetectionMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2359992A4 + 4 * byte_235BB6DDD[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2359992D8 + 4 * byte_235BB6DD8[v4]))();
}

uint64_t sub_2359992D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359992E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2359992E8);
  return result;
}

uint64_t sub_2359992F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2359992FCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_235999300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvPositionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvPositionSource;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvHealthIndication()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvHealthIndication;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_IonosphericCorrectionSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_235999410 + 4 * byte_235BB6DE7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_235999444 + 4 * byte_235BB6DE2[v4]))();
}

uint64_t sub_235999444(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23599944C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235999454);
  return result;
}

uint64_t sub_235999460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235999468);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23599946C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999474(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_IonosphericCorrectionSource()
{
  return &type metadata for CLP_LogEntry_PrivateData_IonosphericCorrectionSource;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2359994DC + 4 * byte_235BB6DF1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_235999510 + 4 * byte_235BB6DEC[v4]))();
}

uint64_t sub_235999510(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x235999520);
  return result;
}

uint64_t sub_23599952C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235999534);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_235999538(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999540(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge()
{
  return &type metadata for CLP_LogEntry_PrivateData_LeapSecondChangeKnowledge;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTimeSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTimeSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_235999638 + 4 * byte_235BB6DFB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23599966C + 4 * byte_235BB6DF6[v4]))();
}

uint64_t sub_23599966C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_235999674(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23599967CLL);
  return result;
}

uint64_t sub_235999688(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x235999690);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_235999694(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23599969C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated()
{
  return &type metadata for CLP_LogEntry_PrivateData_GlonassLeapSecondDeprecated;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvReferencePoint(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_235999794 + 4 * byte_235BB6E05[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2359997C8 + 4 * byte_235BB6E00[v4]))();
}

uint64_t sub_2359997C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359997D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2359997D8);
  return result;
}

uint64_t sub_2359997E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2359997ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2359997F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2359997F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CLP_LogEntry_PrivateData_SvReferencePoint()
{
  return &type metadata for CLP_LogEntry_PrivateData_SvReferencePoint;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassSlotInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassSlotInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_235999A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_235999B28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = *(int *)(v15 + 20);
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_GlonassId(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_BYTE *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (_BYTE *)(a1 + v13);
  v15 = (_BYTE *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v27 = *(int *)(v16 + 20);
      v28 = &v14[v27];
      v29 = &v15[v27];
      v30 = *(_DWORD *)v29;
      v28[4] = v29[4];
      *(_DWORD *)v28 = v30;
      v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = *(int *)(v16 + 20);
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = *(_DWORD *)v23;
  v22[4] = v23[4];
  *(_DWORD *)v22 = v24;
  v14[*(int *)(v16 + 24)] = v15[*(int *)(v16 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[*(int *)(v14 + 24)] = v13[*(int *)(v14 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_BYTE *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = (_BYTE *)(a1 + v10);
  v14 = (_BYTE *)(a2 + v10);
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      v25 = *(int *)(v15 + 20);
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v13, v14, v6);
  v20 = *(int *)(v15 + 20);
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v13[*(int *)(v15 + 24)] = v14[*(int *)(v15 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassId()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599A298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassId()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599A2B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(a1, a2, a3, (uint64_t)&unk_235BBC670, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ConstellationId(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = *(int *)(v15 + 20);
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = *(int *)(v15 + 24);
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v45 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v23, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_DWORD *)v27 = *(_DWORD *)v28;
        v27[4] = v28[4];
        __dst[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
        (*(void (**)(void))(v45 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v29 = a3[7];
    v30 = a3[8];
    v31 = (char *)a1 + v29;
    v32 = (char *)a2 + v29;
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = (char *)a1 + v30;
    v34 = (char *)a2 + v30;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = a3[9];
    v36 = a3[10];
    v37 = (char *)a1 + v35;
    v38 = (char *)a2 + v35;
    *(_DWORD *)v37 = *(_DWORD *)v38;
    v37[4] = v38[4];
    v39 = (char *)a1 + v36;
    v40 = (char *)a2 + v36;
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v41 = a3[11];
    v42 = (char *)a1 + v41;
    v43 = (char *)a2 + v41;
    LODWORD(v37) = *(_DWORD *)v43;
    v42[4] = v43[4];
    *(_DWORD *)v42 = (_DWORD)v37;
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v10(v5, v4);
    v8 = v5 + *(int *)(v6 + 24);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v43 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = a3[8];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a3[9];
  v34 = a3[10];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a1 + v34;
  v38 = a2 + v34;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = v35;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  void (*v80)(uint64_t, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v79 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = v11;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v77 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16((uint64_t)v14, 1, v15);
  if (!v17)
  {
    v78 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v18)
    {
      v7(v13, (uint64_t)v14, v6);
      v32 = *(int *)(v15 + 20);
      v33 = v13 + v32;
      v34 = &v14[v32];
      v35 = v34[4];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v35;
      v36 = *(int *)(v15 + 24);
      v37 = v13 + v36;
      v38 = &v14[v36];
      v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      v42 = v41(v37, 1, v39);
      v43 = v41((uint64_t)v38, 1, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v79 + 16))(v37, v38, v6);
          v44 = *(int *)(v39 + 20);
          v45 = v37 + v44;
          v46 = &v38[v44];
          v47 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          *(_DWORD *)v45 = v47;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v43)
        {
          v78(v37, v38, v6);
          v73 = *(int *)(v39 + 20);
          v74 = v37 + v73;
          v75 = &v38[v73];
          v76 = *(_DWORD *)v75;
          *(_BYTE *)(v74 + 4) = v75[4];
          *(_DWORD *)v74 = v76;
          *(_BYTE *)(v37 + *(int *)(v39 + 24)) = v38[*(int *)(v39 + 24)];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      v30 = (void *)v37;
      v31 = v38;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v13, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                - 8)
                    + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_8:
    memcpy(v30, v31, v29);
    goto LABEL_14;
  }
  if (v18)
    goto LABEL_7;
  v80 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 16);
  v80(v13, v14, v6);
  v19 = *(int *)(v15 + 20);
  v20 = v13 + v19;
  v21 = &v14[v19];
  v22 = v21[4];
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = *(int *)(v15 + 24);
  v24 = (char *)(v13 + v23);
  v25 = &v14[v23];
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v80((uint64_t)v24, v25, v6);
    v48 = *(int *)(v26 + 20);
    v49 = &v24[v48];
    v50 = &v25[v48];
    v51 = *(_DWORD *)v50;
    v49[4] = v50[4];
    *(_DWORD *)v49 = v51;
    v24[*(int *)(v26 + 24)] = v25[*(int *)(v26 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v13, 0, 1, v15);
LABEL_14:
  v52 = a3[7];
  v53 = a1 + v52;
  v54 = (int *)(a2 + v52);
  v55 = *v54;
  *(_BYTE *)(v53 + 4) = *((_BYTE *)v54 + 4);
  *(_DWORD *)v53 = v55;
  v56 = a3[8];
  v57 = a1 + v56;
  v58 = (int *)(a2 + v56);
  v59 = *v58;
  *(_BYTE *)(v57 + 4) = *((_BYTE *)v58 + 4);
  *(_DWORD *)v57 = v59;
  v60 = a3[9];
  v61 = a1 + v60;
  v62 = (int *)(a2 + v60);
  v63 = *v62;
  *(_BYTE *)(v61 + 4) = *((_BYTE *)v62 + 4);
  *(_DWORD *)v61 = v63;
  v64 = a3[10];
  v65 = a1 + v64;
  v66 = (int *)(a2 + v64);
  v67 = *v66;
  *(_BYTE *)(v65 + 4) = *((_BYTE *)v66 + 4);
  *(_DWORD *)v65 = v67;
  v68 = a3[11];
  v69 = a1 + v68;
  v70 = (int *)(a2 + v68);
  v71 = *v70;
  *(_BYTE *)(v69 + 4) = *((_BYTE *)v70 + 4);
  *(_DWORD *)v69 = v71;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = *(int *)(v14 + 24);
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v43 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      __dst[*(int *)(v22 + 24)] = v21[*(int *)(v22 + 24)];
      (*(void (**)(void))(v43 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v27 = a3[7];
  v28 = a3[8];
  v29 = a1 + v27;
  v30 = a2 + v27;
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = *(_BYTE *)(v30 + 4);
  v31 = a1 + v28;
  v32 = a2 + v28;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  v33 = a3[9];
  v34 = a3[10];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  v37 = a1 + v34;
  v38 = a2 + v34;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  v39 = a3[11];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LODWORD(v35) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = v35;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ConstellationId(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v68 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = (char *)(a2 + v9);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v66 = *(_QWORD *)(v14 - 8);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v16 = v15(v12, 1, v14);
  v17 = v15((uint64_t)v13, 1, v14);
  if (!v16)
  {
    v67 = (void (*)(uint64_t, char *, uint64_t))v7;
    if (!v17)
    {
      v7(v12, (uint64_t)v13, v6);
      v30 = *(int *)(v14 + 20);
      v31 = v12 + v30;
      v32 = &v13[v30];
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      v33 = *(int *)(v14 + 24);
      v34 = v12 + v33;
      v35 = &v13[v33];
      v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v34, v35, v6);
          v41 = *(int *)(v36 + 20);
          v42 = v34 + v41;
          v43 = &v35[v41];
          *(_DWORD *)v42 = *(_DWORD *)v43;
          *(_BYTE *)(v42 + 4) = v43[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          v67(v34, v35, v6);
          v63 = *(int *)(v36 + 20);
          v64 = v34 + v63;
          v65 = &v35[v63];
          *(_DWORD *)v64 = *(_DWORD *)v65;
          *(_BYTE *)(v64 + 4) = v65[4];
          *(_BYTE *)(v34 + *(int *)(v36 + 24)) = v35[*(int *)(v36 + 24)];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                  - 8)
                      + 64);
      v28 = (void *)v34;
      v29 = v35;
      goto LABEL_8;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v12, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                - 8)
                    + 64);
    v28 = (void *)v12;
    v29 = v13;
LABEL_8:
    memcpy(v28, v29, v27);
    goto LABEL_14;
  }
  if (v17)
    goto LABEL_7;
  v69 = *(void (**)(uint64_t, char *, uint64_t))(v68 + 32);
  v69(v12, v13, v6);
  v18 = *(int *)(v14 + 20);
  v19 = v12 + v18;
  v20 = &v13[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  v21 = *(int *)(v14 + 24);
  v22 = (char *)(v12 + v21);
  v23 = &v13[v21];
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v69((uint64_t)v22, v23, v6);
    v44 = *(int *)(v24 + 20);
    v45 = &v22[v44];
    v46 = &v23[v44];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    v22[*(int *)(v24 + 24)] = v23[*(int *)(v24 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v12, 0, 1, v14);
LABEL_14:
  v47 = a3[7];
  v48 = a3[8];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_DWORD *)v49 = *(_DWORD *)v50;
  *(_BYTE *)(v49 + 4) = *(_BYTE *)(v50 + 4);
  v51 = a1 + v48;
  v52 = a2 + v48;
  *(_DWORD *)v51 = *(_DWORD *)v52;
  *(_BYTE *)(v51 + 4) = *(_BYTE *)(v52 + 4);
  v53 = a3[9];
  v54 = a3[10];
  v55 = a1 + v53;
  v56 = a2 + v53;
  *(_DWORD *)v55 = *(_DWORD *)v56;
  *(_BYTE *)(v55 + 4) = *(_BYTE *)(v56 + 4);
  v57 = a1 + v54;
  v58 = a2 + v54;
  *(_DWORD *)v57 = *(_DWORD *)v58;
  *(_BYTE *)(v57 + 4) = *(_BYTE *)(v58 + 4);
  v59 = a3[11];
  v60 = a1 + v59;
  v61 = a2 + v59;
  LODWORD(v55) = *(_DWORD *)v61;
  *(_BYTE *)(v60 + 4) = *(_BYTE *)(v61 + 4);
  *(_DWORD *)v60 = v55;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ConstellationId()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599B2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ConstellationId()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599B304(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_ConstellationId()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v59 = v16;
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      v25 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        v28 = v59;
      }
      else
      {
        v57 = v26;
        v8((uint64_t *)v23, (uint64_t *)v24, v7);
        v29 = *(int *)(v25 + 20);
        v30 = &v23[v29];
        v31 = &v24[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        v32 = *(int *)(v25 + 24);
        v58 = v23;
        v33 = &v23[v32];
        v34 = &v24[v32];
        v35 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v56 = *(_QWORD *)(v35 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v34, 1, v35))
        {
          v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          v8((uint64_t *)v33, (uint64_t *)v34, v7);
          v37 = *(int *)(v35 + 20);
          v38 = &v33[v37];
          v39 = &v34[v37];
          *(_DWORD *)v38 = *(_DWORD *)v39;
          v38[4] = v39[4];
          v33[*(int *)(v35 + 24)] = v34[*(int *)(v35 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v33, 0, 1, v35);
        }
        v28 = v59;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v25);
      }
      v40 = v15[7];
      v41 = &v13[v40];
      v42 = &v14[v40];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      v43 = v15[8];
      v44 = &v13[v43];
      v45 = &v14[v43];
      v44[4] = v45[4];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v46 = v15[9];
      v47 = &v13[v46];
      v48 = &v14[v46];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      v49 = v15[10];
      v50 = &v13[v49];
      v51 = &v14[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v15[11];
      v53 = &v13[v52];
      v54 = &v14[v52];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v53[4] = v54[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v12(v5, v4);
    v8 = v5 + *(int *)(v6 + 24);
    v9 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
    if (!(_DWORD)result)
    {
      v12(v8, v4);
      v10 = v8 + *(int *)(v9 + 24);
      v11 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
      if (!(_DWORD)result)
        return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v29 = *(int *)(v23 + 24);
      v55 = v21;
      v30 = &v21[v29];
      v31 = &v22[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v53 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1, v32))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        v34 = *(int *)(v32 + 20);
        v35 = &v30[v34];
        v36 = &v31[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v32);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v23);
    }
    v37 = v14[7];
    v38 = &v12[v37];
    v39 = &v13[v37];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    v40 = v14[8];
    v41 = &v12[v40];
    v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)v41 = *(_DWORD *)v42;
    v43 = v14[9];
    v44 = &v12[v43];
    v45 = &v13[v43];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    v46 = v14[10];
    v47 = &v12[v46];
    v48 = &v13[v46];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v49 = v14[11];
    v50 = &v12[v49];
    v51 = &v13[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  int v95;
  size_t v96;
  void *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  uint64_t v114;
  char *v115;
  char *v116;
  int v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int v129;
  void (*v131)(uint64_t, char *, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *__dst;
  char *__dsta;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  uint64_t v142;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 4);
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (v20)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v136 = a1;
    v8((uint64_t)v14, (uint64_t)v15, v6);
    v32 = v16[5];
    v33 = &v14[v32];
    v34 = &v15[v32];
    v35 = v34[4];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v35;
    v36 = v16[6];
    v37 = &v14[v36];
    v38 = &v15[v36];
    v39 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v132 = *(_QWORD *)(v39 - 8);
    v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48);
    v141 = (uint64_t)v37;
    LODWORD(v37) = v40(v37, 1, v39);
    v134 = v39;
    v41 = v40(v38, 1, v39);
    if ((_DWORD)v37)
    {
      if (!v41)
      {
        v131 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
        v131(v141, v38, v6);
        v52 = *(int *)(v39 + 20);
        v53 = v141 + v52;
        v54 = &v38[v52];
        v55 = v54[4];
        *(_DWORD *)v53 = *(_DWORD *)v54;
        *(_BYTE *)(v53 + 4) = v55;
        v56 = *(int *)(v39 + 24);
        v57 = (char *)(v141 + v56);
        v58 = &v38[v56];
        v59 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v60 = *(_QWORD *)(v59 - 8);
        a1 = v136;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          v131((uint64_t)v57, v58, v6);
          v98 = *(int *)(v59 + 20);
          v99 = &v57[v98];
          v100 = &v58[v98];
          v101 = *(_DWORD *)v100;
          v99[4] = v100[4];
          *(_DWORD *)v99 = v101;
          v57[*(int *)(v59 + 24)] = v58[*(int *)(v59 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v141, 0, 1, v134);
        goto LABEL_31;
      }
      v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v43 = (void *)v141;
    }
    else
    {
      if (!v41)
      {
        v8(v141, (uint64_t)v38, v6);
        v86 = *(int *)(v39 + 20);
        v87 = v141 + v86;
        v88 = &v38[v86];
        v89 = v88[4];
        *(_DWORD *)v87 = *(_DWORD *)v88;
        *(_BYTE *)(v87 + 4) = v89;
        v90 = *(int *)(v39 + 24);
        v91 = v141 + v90;
        v92 = &v38[v90];
        v93 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v135 = *(_QWORD *)(v93 - 8);
        v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
        v142 = v91;
        LODWORD(v91) = v94(v91, 1, v93);
        __dsta = v92;
        v95 = v94((uint64_t)v92, 1, v93);
        if ((_DWORD)v91)
        {
          a1 = v136;
          if (!v95)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v142, __dsta, v6);
            v102 = *(int *)(v93 + 20);
            v103 = v142 + v102;
            v104 = &__dsta[v102];
            v105 = *(_DWORD *)v104;
            *(_BYTE *)(v103 + 4) = v104[4];
            *(_DWORD *)v103 = v105;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v135 + 56))(v142, 0, 1, v93);
            goto LABEL_31;
          }
          v96 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v97 = (void *)v142;
        }
        else
        {
          a1 = v136;
          if (!v95)
          {
            v8(v142, (uint64_t)__dsta, v6);
            v106 = *(int *)(v93 + 20);
            v107 = v142 + v106;
            v108 = &__dsta[v106];
            v109 = *(_DWORD *)v108;
            *(_BYTE *)(v107 + 4) = v108[4];
            *(_DWORD *)v107 = v109;
            *(_BYTE *)(v142 + *(int *)(v93 + 24)) = __dsta[*(int *)(v93 + 24)];
            goto LABEL_31;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v142, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v96 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v97 = (void *)v142;
        }
        memcpy(v97, __dsta, v96);
LABEL_31:
        v110 = v16[7];
        v111 = &v14[v110];
        v112 = &v15[v110];
        v113 = *(_DWORD *)v112;
        v111[4] = v112[4];
        *(_DWORD *)v111 = v113;
        v114 = v16[8];
        v115 = &v14[v114];
        v116 = &v15[v114];
        v117 = *(_DWORD *)v116;
        v115[4] = v116[4];
        *(_DWORD *)v115 = v117;
        v118 = v16[9];
        v119 = &v14[v118];
        v120 = &v15[v118];
        v121 = *(_DWORD *)v120;
        v119[4] = v120[4];
        *(_DWORD *)v119 = v121;
        v122 = v16[10];
        v123 = &v14[v122];
        v124 = &v15[v122];
        v125 = *(_DWORD *)v124;
        v123[4] = v124[4];
        *(_DWORD *)v123 = v125;
        v126 = v16[11];
        v127 = &v14[v126];
        v128 = &v15[v126];
        v129 = *(_DWORD *)v128;
        v127[4] = v128[4];
        *(_DWORD *)v127 = v129;
        return a1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v141, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v43 = (void *)v141;
    }
    memcpy(v43, v38, v42);
    a1 = v136;
    goto LABEL_31;
  }
  if (v20)
  {
LABEL_7:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  v140 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v140(v14, v15, v6);
  v21 = v16[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[4];
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v22[4] = v24;
  v25 = v16[6];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v140(v26, v27, v6);
    v44 = *(int *)(v28 + 20);
    v45 = &v26[v44];
    v46 = &v27[v44];
    v47 = v46[4];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v47;
    v48 = *(int *)(v28 + 24);
    v137 = v26;
    __dst = &v26[v48];
    v49 = &v27[v48];
    v50 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v133 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v49, 1, v50))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v140(__dst, v49, v6);
      v62 = *(int *)(v50 + 20);
      v63 = &__dst[v62];
      v64 = &v49[v62];
      v65 = *(_DWORD *)v64;
      v63[4] = v64[4];
      *(_DWORD *)v63 = v65;
      __dst[*(int *)(v50 + 24)] = v49[*(int *)(v50 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v133 + 56))(__dst, 0, 1, v50);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v137, 0, 1, v28);
  }
  v66 = v16[7];
  v67 = &v14[v66];
  v68 = &v15[v66];
  v69 = *(_DWORD *)v68;
  v67[4] = v68[4];
  *(_DWORD *)v67 = v69;
  v70 = v16[8];
  v71 = &v14[v70];
  v72 = &v15[v70];
  v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)v71 = v73;
  v74 = v16[9];
  v75 = &v14[v74];
  v76 = &v15[v74];
  v77 = *(_DWORD *)v76;
  v75[4] = v76[4];
  *(_DWORD *)v75 = v77;
  v78 = v16[10];
  v79 = &v14[v78];
  v80 = &v15[v78];
  v81 = *(_DWORD *)v80;
  v79[4] = v80[4];
  *(_DWORD *)v79 = v81;
  v82 = v16[11];
  v83 = &v14[v82];
  v84 = &v15[v82];
  v85 = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_DWORD *)v83 = v85;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v56 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    v23 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v54 = v24;
      v7((uint64_t)v21, (uint64_t)v22, v6);
      v26 = *(int *)(v23 + 20);
      v27 = &v21[v26];
      v28 = &v22[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v29 = *(int *)(v23 + 24);
      v55 = v21;
      v30 = &v21[v29];
      v31 = &v22[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      v53 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1, v32))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v7((uint64_t)v30, (uint64_t)v31, v6);
        v34 = *(int *)(v32 + 20);
        v35 = &v30[v34];
        v36 = &v31[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        v30[*(int *)(v32 + 24)] = v31[*(int *)(v32 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v32);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v55, 0, 1, v23);
    }
    v37 = v14[7];
    v38 = &v12[v37];
    v39 = &v13[v37];
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v38[4] = v39[4];
    v40 = v14[8];
    v41 = &v12[v40];
    v42 = &v13[v40];
    v41[4] = v42[4];
    *(_DWORD *)v41 = *(_DWORD *)v42;
    v43 = v14[9];
    v44 = &v12[v43];
    v45 = &v13[v43];
    *(_DWORD *)v44 = *(_DWORD *)v45;
    v44[4] = v45[4];
    v46 = v14[10];
    v47 = &v12[v46];
    v48 = &v13[v46];
    *(_DWORD *)v47 = *(_DWORD *)v48;
    v47[4] = v48[4];
    v49 = v14[11];
    v50 = &v12[v49];
    v51 = &v13[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  int v83;
  size_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void (*v111)(uint64_t, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *__dst;
  char *__dsta;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = (char *)(a1 + v10);
  v14 = (char *)(a2 + v10);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
      goto LABEL_7;
    }
    v116 = a1;
    v8((uint64_t)v13, (uint64_t)v14, v6);
    v30 = v15[5];
    v31 = &v13[v30];
    v32 = &v14[v30];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v31[4] = v32[4];
    v33 = v15[6];
    v34 = &v13[v33];
    v35 = &v14[v33];
    v36 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v112 = *(_QWORD *)(v36 - 8);
    v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    v121 = (uint64_t)v34;
    LODWORD(v34) = v37(v34, 1, v36);
    v114 = v36;
    v38 = v37(v35, 1, v36);
    if ((_DWORD)v34)
    {
      if (!v38)
      {
        v111 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
        v111(v121, v35, v6);
        v48 = *(int *)(v36 + 20);
        v49 = v121 + v48;
        v50 = &v35[v48];
        *(_DWORD *)v49 = *(_DWORD *)v50;
        *(_BYTE *)(v49 + 4) = v50[4];
        v51 = *(int *)(v36 + 24);
        v52 = (char *)(v121 + v51);
        v53 = &v35[v51];
        v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v55 = *(_QWORD *)(v54 - 8);
        a1 = v116;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
        {
          v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        }
        else
        {
          v111((uint64_t)v52, v53, v6);
          v86 = *(int *)(v54 + 20);
          v87 = &v52[v86];
          v88 = &v53[v86];
          *(_DWORD *)v87 = *(_DWORD *)v88;
          v87[4] = v88[4];
          v52[*(int *)(v54 + 24)] = v53[*(int *)(v54 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v121, 0, 1, v114);
        goto LABEL_31;
      }
      v39 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v40 = (void *)v121;
    }
    else
    {
      if (!v38)
      {
        v8(v121, (uint64_t)v35, v6);
        v75 = *(int *)(v36 + 20);
        v76 = v121 + v75;
        v77 = &v35[v75];
        *(_DWORD *)v76 = *(_DWORD *)v77;
        *(_BYTE *)(v76 + 4) = v77[4];
        v78 = *(int *)(v36 + 24);
        v79 = v121 + v78;
        v80 = &v35[v78];
        v81 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v115 = *(_QWORD *)(v81 - 8);
        v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        v122 = v79;
        LODWORD(v79) = v82(v79, 1, v81);
        __dsta = v80;
        v83 = v82((uint64_t)v80, 1, v81);
        if ((_DWORD)v79)
        {
          a1 = v116;
          if (!v83)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v122, __dsta, v6);
            v89 = *(int *)(v81 + 20);
            v90 = v122 + v89;
            v91 = &__dsta[v89];
            *(_DWORD *)v90 = *(_DWORD *)v91;
            *(_BYTE *)(v90 + 4) = v91[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v115 + 56))(v122, 0, 1, v81);
            goto LABEL_31;
          }
          v84 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v85 = (void *)v122;
        }
        else
        {
          a1 = v116;
          if (!v83)
          {
            v8(v122, (uint64_t)__dsta, v6);
            v92 = *(int *)(v81 + 20);
            v93 = v122 + v92;
            v94 = &__dsta[v92];
            *(_DWORD *)v93 = *(_DWORD *)v94;
            *(_BYTE *)(v93 + 4) = v94[4];
            *(_BYTE *)(v122 + *(int *)(v81 + 24)) = __dsta[*(int *)(v81 + 24)];
            goto LABEL_31;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v122, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v84 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v85 = (void *)v122;
        }
        memcpy(v85, __dsta, v84);
LABEL_31:
        v95 = v15[7];
        v96 = &v13[v95];
        v97 = &v14[v95];
        *(_DWORD *)v96 = *(_DWORD *)v97;
        v96[4] = v97[4];
        v98 = v15[8];
        v99 = &v13[v98];
        v100 = &v14[v98];
        v99[4] = v100[4];
        *(_DWORD *)v99 = *(_DWORD *)v100;
        v101 = v15[9];
        v102 = &v13[v101];
        v103 = &v14[v101];
        *(_DWORD *)v102 = *(_DWORD *)v103;
        v102[4] = v103[4];
        v104 = v15[10];
        v105 = &v13[v104];
        v106 = &v14[v104];
        *(_DWORD *)v105 = *(_DWORD *)v106;
        v105[4] = v106[4];
        v107 = v15[11];
        v108 = &v13[v107];
        v109 = &v14[v107];
        *(_DWORD *)v108 = *(_DWORD *)v109;
        v108[4] = v109[4];
        return a1;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v121, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v39 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v40 = (void *)v121;
    }
    memcpy(v40, v35, v39);
    a1 = v116;
    goto LABEL_31;
  }
  if (v19)
  {
LABEL_7:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  v120 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v120(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_DWORD *)v21 = *(_DWORD *)v22;
  v21[4] = v22[4];
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v120(v24, v25, v6);
    v41 = *(int *)(v26 + 20);
    v42 = &v24[v41];
    v43 = &v25[v41];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v42[4] = v43[4];
    v44 = *(int *)(v26 + 24);
    v117 = v24;
    __dst = &v24[v44];
    v45 = &v25[v44];
    v46 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
    v113 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v45, 1, v46))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
      memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v120(__dst, v45, v6);
      v57 = *(int *)(v46 + 20);
      v58 = &__dst[v57];
      v59 = &v45[v57];
      *(_DWORD *)v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      __dst[*(int *)(v46 + 24)] = v45[*(int *)(v46 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dst, 0, 1, v46);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v117, 0, 1, v26);
  }
  v60 = v15[7];
  v61 = &v13[v60];
  v62 = &v14[v60];
  *(_DWORD *)v61 = *(_DWORD *)v62;
  v61[4] = v62[4];
  v63 = v15[8];
  v64 = &v13[v63];
  v65 = &v14[v63];
  v64[4] = v65[4];
  *(_DWORD *)v64 = *(_DWORD *)v65;
  v66 = v15[9];
  v67 = &v13[v66];
  v68 = &v14[v66];
  *(_DWORD *)v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v69 = v15[10];
  v70 = &v13[v69];
  v71 = &v14[v69];
  *(_DWORD *)v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  v72 = v15[11];
  v73 = &v13[v72];
  v74 = &v14[v72];
  *(_DWORD *)v73 = *(_DWORD *)v74;
  v73[4] = v74[4];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvId()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599CCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvId()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599CCFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(a1, a2, a3, (uint64_t)&unk_235BBC670, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsL5SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsL2CSyncState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsL2CSyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassL1fSyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB1SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouB2SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsL1SyncState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE1SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GalileoE5SyncState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v10 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v11 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[14];
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GalileoE5SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GalileoE5SyncState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SbasL1SyncState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SbasL1SyncState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_7Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_8Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SyncState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SyncState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvTime()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvTime()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvTime()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_27Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_28Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PhaseTracking(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_PhaseTracking(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PhaseTracking()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PhaseTracking()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PhaseTracking()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v10[v12[7]] = v11[v12[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v22 = a3[6];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
    v26 = *((_QWORD *)v25 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v23, (uint64_t *)v24, v7);
      v28 = v25[5];
      v29 = &v23[v28];
      v30 = &v24[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      v31 = v25[6];
      v32 = &v23[v31];
      v33 = &v24[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v23[v25[7]] = v24[v25[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
    }
    v34 = a3[7];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    *(_DWORD *)v35 = *(_DWORD *)v36;
    v35[4] = v36[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v10(v5, v4);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = a3[6];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    v26 = v23[5];
    v27 = &v21[v26];
    v28 = &v22[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v23[6];
    v30 = &v21[v29];
    v31 = &v22[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int *v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, int *);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;

  v6 = type metadata accessor for UnknownStorage();
  v59 = *(_QWORD *)(v6 - 8);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v58(a1, a2, v6);
  v7 = a3[5];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      v18 = *(_QWORD *)v17;
      v16[8] = v17[8];
      *(_QWORD *)v16 = v18;
      v19 = v10[6];
      v20 = &v8[v19];
      v21 = &v9[v19];
      LOBYTE(v18) = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v18;
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v58((uint64_t)v8, (uint64_t)v9, v6);
  v44 = v10[5];
  v45 = &v8[v44];
  v46 = &v9[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v48 = v10[6];
  v49 = &v8[v48];
  v50 = &v9[v48];
  LOBYTE(v47) = v50[8];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v47;
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  v23 = a3[6];
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v58((uint64_t)v24, (uint64_t)v25, v6);
      v51 = v26[5];
      v52 = &v24[v51];
      v53 = &v25[v51];
      v54 = *(_QWORD *)v53;
      v52[8] = v53[8];
      *(_QWORD *)v52 = v54;
      v55 = v26[6];
      v56 = &v24[v55];
      v57 = &v25[v55];
      LOBYTE(v54) = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v54;
      v24[v26[7]] = v25[v26[7]];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v24, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v24, v25, v6);
  v31 = v26[5];
  v32 = &v24[v31];
  v33 = &v25[v31];
  v34 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)v32 = v34;
  v35 = v26[6];
  v36 = &v24[v35];
  v37 = &v25[v35];
  LOBYTE(v34) = v37[8];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v34;
  v24[v26[7]] = v25[v26[7]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  v39 = a3[7];
  v40 = a1 + v39;
  v41 = (int *)(a2 + v39);
  v42 = *v41;
  *(_BYTE *)(v40 + 4) = *((_BYTE *)v41 + 4);
  *(_DWORD *)v40 = v42;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v9[v11[7]] = v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v20 = a3[6];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v21, (uint64_t)v22, v6);
    v26 = v23[5];
    v27 = &v21[v26];
    v28 = &v22[v26];
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = v28[8];
    v29 = v23[6];
    v30 = &v21[v29];
    v31 = &v22[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v21[v23[7]] = v22[v23[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_DWORD *)v33 = *(_DWORD *)v34;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SignalCorrelationPeak(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  int *v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  v6 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v6 - 8);
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  v7 = a3[5];
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SvTime(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v8, v9, v6);
      v15 = v10[5];
      v16 = &v8[v15];
      v17 = &v9[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v10[6];
      v19 = &v8[v18];
      v20 = &v9[v18];
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v19[8] = v20[8];
      v8[v10[7]] = v9[v10[7]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v8, (uint64_t)v9, v6);
  v41 = v10[5];
  v42 = &v8[v41];
  v43 = &v9[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = v10[6];
  v45 = &v8[v44];
  v46 = &v9[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
  v8[v10[7]] = v9[v10[7]];
LABEL_7:
  v22 = a3[6];
  v23 = (_BYTE *)(a1 + v22);
  v24 = (_BYTE *)(a2 + v22);
  v25 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset(0);
  v26 = *((_QWORD *)v25 - 1);
  v27 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v53((uint64_t)v23, (uint64_t)v24, v6);
      v47 = v25[5];
      v48 = &v23[v47];
      v49 = &v24[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v50 = v25[6];
      v51 = &v23[v50];
      v52 = &v24[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      v23[v25[7]] = v24[v25[7]];
      goto LABEL_13;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v23, type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v54 + 32))(v23, v24, v6);
  v30 = v25[5];
  v31 = &v23[v30];
  v32 = &v24[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v31[8] = v32[8];
  v33 = v25[6];
  v34 = &v23[v33];
  v35 = &v24[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v23[v25[7]] = v24[v25[7]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
LABEL_13:
  v37 = a3[7];
  v38 = a1 + v37;
  v39 = a2 + v37;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599F2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599F380(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SignalCorrelationPeak()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvTime(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 8) = *((_BYTE *)v9 + 8);
  *(_QWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvTime(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTime()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599F7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u)
    v9 = 6;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 6;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_FullSvTime()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23599F88C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_FullSvTime()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvMeasurementUsage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvMeasurementUsage()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementExtension()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Measurement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Measurement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverClockModel(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 4);
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v10;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverClockModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_33Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_34Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverClockModel()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = a3[9];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = *(_QWORD *)v22;
    v21[8] = v22[8];
    *(_QWORD *)v21 = v23;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverClockCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverClockCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = a3[9];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    LODWORD(v16) = *(_DWORD *)v22;
    v21[4] = v22[4];
    *(_DWORD *)v21 = (_DWORD)v16;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  LODWORD(v15) = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Clock(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_DWORD *)v23 = *(_DWORD *)v24;
      v23[4] = v24[4];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_DWORD *)v26 = *(_DWORD *)v27;
      v26[4] = v27[4];
      v28 = v15[8];
      v29 = &v13[v28];
      v30 = &v14[v28];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v13[v15[9]] = v14[v15[9]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v31 = a3[7];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
    v35 = *((_QWORD *)v34 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v32, (uint64_t *)v33, v7);
      v37 = v34[5];
      v38 = &v32[v37];
      v39 = &v33[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v34[6];
      v41 = &v32[v40];
      v42 = &v33[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      v41[8] = v42[8];
      v43 = v34[7];
      v44 = &v32[v43];
      v45 = &v33[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      v46 = v34[8];
      v47 = &v32[v46];
      v48 = &v33[v46];
      *(_QWORD *)v47 = *(_QWORD *)v48;
      v47[8] = v48[8];
      v49 = v34[9];
      v50 = &v32[v49];
      v51 = &v33[v49];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v51[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
    }
    v52 = a3[8];
    v53 = (char *)a1 + v52;
    v54 = (char *)a2 + v52;
    v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
    v56 = *((_QWORD *)v55 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v53, (uint64_t *)v54, v7);
      v58 = v55[5];
      v59 = &v53[v58];
      v60 = &v54[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      v61 = v55[6];
      v62 = &v53[v61];
      v63 = &v54[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      v64 = v55[7];
      v65 = &v53[v64];
      v66 = &v54[v64];
      *(_DWORD *)v65 = *(_DWORD *)v66;
      v65[4] = v66[4];
      v67 = v55[8];
      v68 = &v53[v67];
      v69 = &v54[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      v70 = v55[9];
      v71 = &v53[v70];
      v72 = &v54[v70];
      *(_DWORD *)v71 = *(_DWORD *)v72;
      v71[4] = v72[4];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
    v12(v5, v4);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v12(v7, v4);
  v9 = a1 + a2[8];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = v14[8];
    v27 = &v12[v26];
    v28 = &v13[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v32[8];
    v45 = &v30[v44];
    v46 = &v31[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v32[9];
    v48 = &v30[v47];
    v49 = &v31[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  v50 = a3[8];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v53[6];
    v60 = &v51[v59];
    v61 = &v52[v59];
    *(_DWORD *)v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    v62 = v53[7];
    v63 = &v51[v62];
    v64 = &v52[v62];
    *(_DWORD *)v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v65 = v53[8];
    v66 = &v51[v65];
    v67 = &v52[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v53[9];
    v69 = &v51[v68];
    v70 = &v52[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, int *);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int *v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, int *);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char v144;
  void (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t v146;

  v6 = type metadata accessor for UnknownStorage();
  v146 = *(_QWORD *)(v6 - 8);
  v145 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 24);
  v145(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = (_BYTE *)(a1 + v11);
  v13 = (_BYTE *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v146 + 16))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)v20 = v22;
      v23 = v14[6];
      v24 = &v12[v23];
      v25 = &v13[v23];
      LOBYTE(v22) = v25[4];
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v24[4] = v22;
      v26 = v14[7];
      v27 = &v12[v26];
      v28 = &v13[v26];
      LOBYTE(v22) = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v22;
      v29 = v14[8];
      v30 = &v12[v29];
      v31 = &v13[v29];
      LOBYTE(v22) = v31[4];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      v30[4] = v22;
      v12[v14[9]] = v13[v14[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v145((uint64_t)v12, (uint64_t)v13, v6);
  v92 = v14[5];
  v93 = &v12[v92];
  v94 = &v13[v92];
  v95 = *(_DWORD *)v94;
  v93[4] = v94[4];
  *(_DWORD *)v93 = v95;
  v96 = v14[6];
  v97 = &v12[v96];
  v98 = &v13[v96];
  LOBYTE(v95) = v98[4];
  *(_DWORD *)v97 = *(_DWORD *)v98;
  v97[4] = v95;
  v99 = v14[7];
  v100 = &v12[v99];
  v101 = &v13[v99];
  LOBYTE(v95) = v101[4];
  *(_DWORD *)v100 = *(_DWORD *)v101;
  v100[4] = v95;
  v102 = v14[8];
  v103 = &v12[v102];
  v104 = &v13[v102];
  LOBYTE(v95) = v104[4];
  *(_DWORD *)v103 = *(_DWORD *)v104;
  v103[4] = v95;
  v12[v14[9]] = v13[v14[9]];
LABEL_7:
  v33 = a3[7];
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v37 = *((_QWORD *)v36 - 1);
  v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v34, v35, v6);
      v41 = v36[5];
      v42 = &v34[v41];
      v43 = &v35[v41];
      v44 = v43[8];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v44;
      v45 = v36[6];
      v46 = &v34[v45];
      v47 = &v35[v45];
      v48 = v47[8];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v48;
      v49 = v36[7];
      v50 = &v34[v49];
      v51 = &v35[v49];
      v52 = v51[8];
      *(_QWORD *)v50 = *(_QWORD *)v51;
      v50[8] = v52;
      v53 = v36[8];
      v54 = &v34[v53];
      v55 = &v35[v53];
      v56 = v55[8];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      v54[8] = v56;
      v57 = v36[9];
      v58 = &v34[v57];
      v59 = &v35[v57];
      v60 = v59[8];
      *(_QWORD *)v58 = *(_QWORD *)v59;
      v58[8] = v60;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v40)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v34, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_13;
  }
  v145((uint64_t)v34, (uint64_t)v35, v6);
  v105 = v36[5];
  v106 = &v34[v105];
  v107 = &v35[v105];
  v108 = v107[8];
  *(_QWORD *)v106 = *(_QWORD *)v107;
  v106[8] = v108;
  v109 = v36[6];
  v110 = &v34[v109];
  v111 = &v35[v109];
  v112 = v111[8];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v112;
  v113 = v36[7];
  v114 = &v34[v113];
  v115 = &v35[v113];
  v116 = v115[8];
  *(_QWORD *)v114 = *(_QWORD *)v115;
  v114[8] = v116;
  v117 = v36[8];
  v118 = &v34[v117];
  v119 = &v35[v117];
  v120 = v119[8];
  *(_QWORD *)v118 = *(_QWORD *)v119;
  v118[8] = v120;
  v121 = v36[9];
  v122 = &v34[v121];
  v123 = &v35[v121];
  v124 = v123[8];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v122[8] = v124;
LABEL_13:
  v62 = a3[8];
  v63 = (char *)(a1 + v62);
  v64 = (char *)(a2 + v62);
  v65 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v66 = *((_QWORD *)v65 - 1);
  v67 = *(uint64_t (**)(char *, uint64_t, int *))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      v145((uint64_t)v63, (uint64_t)v64, v6);
      v125 = v65[5];
      v126 = &v63[v125];
      v127 = &v64[v125];
      v128 = v127[8];
      *(_QWORD *)v126 = *(_QWORD *)v127;
      v126[8] = v128;
      v129 = v65[6];
      v130 = &v63[v129];
      v131 = &v64[v129];
      v132 = v131[4];
      *(_DWORD *)v130 = *(_DWORD *)v131;
      v130[4] = v132;
      v133 = v65[7];
      v134 = &v63[v133];
      v135 = &v64[v133];
      v136 = v135[4];
      *(_DWORD *)v134 = *(_DWORD *)v135;
      v134[4] = v136;
      v137 = v65[8];
      v138 = &v63[v137];
      v139 = &v64[v137];
      v140 = v139[8];
      *(_QWORD *)v138 = *(_QWORD *)v139;
      v138[8] = v140;
      v141 = v65[9];
      v142 = &v63[v141];
      v143 = &v64[v141];
      v144 = v143[4];
      *(_DWORD *)v142 = *(_DWORD *)v143;
      v142[4] = v144;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v63, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v69)
  {
LABEL_18:
    v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v63, v64, v6);
  v70 = v65[5];
  v71 = &v63[v70];
  v72 = &v64[v70];
  v73 = v72[8];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v71[8] = v73;
  v74 = v65[6];
  v75 = &v63[v74];
  v76 = &v64[v74];
  v77 = v76[4];
  *(_DWORD *)v75 = *(_DWORD *)v76;
  v75[4] = v77;
  v78 = v65[7];
  v79 = &v63[v78];
  v80 = &v64[v78];
  v81 = v80[4];
  *(_DWORD *)v79 = *(_DWORD *)v80;
  v79[4] = v81;
  v82 = v65[8];
  v83 = &v63[v82];
  v84 = &v64[v82];
  v85 = v84[8];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v83[8] = v85;
  v86 = v65[9];
  v87 = &v63[v86];
  v88 = &v64[v86];
  v89 = v88[4];
  *(_DWORD *)v87 = *(_DWORD *)v88;
  v87[4] = v89;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_DWORD *)v21 = *(_DWORD *)v22;
    v21[4] = v22[4];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = v14[8];
    v27 = &v12[v26];
    v28 = &v13[v26];
    *(_DWORD *)v27 = *(_DWORD *)v28;
    v27[4] = v28[4];
    v12[v14[9]] = v13[v14[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v29 = a3[7];
  v30 = (char *)(a1 + v29);
  v31 = (char *)(a2 + v29);
  v32 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v33 = *((_QWORD *)v32 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    v35 = v32[5];
    v36 = &v30[v35];
    v37 = &v31[v35];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v32[6];
    v39 = &v30[v38];
    v40 = &v31[v38];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = v32[7];
    v42 = &v30[v41];
    v43 = &v31[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v32[8];
    v45 = &v30[v44];
    v46 = &v31[v44];
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = v46[8];
    v47 = v32[9];
    v48 = &v30[v47];
    v49 = &v31[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v33 + 56))(v30, 0, 1, v32);
  }
  v50 = a3[8];
  v51 = (char *)(a1 + v50);
  v52 = (char *)(a2 + v50);
  v53 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v54 = *((_QWORD *)v53 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v51, (uint64_t)v52, v6);
    v56 = v53[5];
    v57 = &v51[v56];
    v58 = &v52[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    v59 = v53[6];
    v60 = &v51[v59];
    v61 = &v52[v59];
    *(_DWORD *)v60 = *(_DWORD *)v61;
    v60[4] = v61[4];
    v62 = v53[7];
    v63 = &v51[v62];
    v64 = &v52[v62];
    *(_DWORD *)v63 = *(_DWORD *)v64;
    v63[4] = v64[4];
    v65 = v53[8];
    v66 = &v51[v65];
    v67 = &v52[v65];
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v66[8] = v67[8];
    v68 = v53[9];
    v69 = &v51[v68];
    v70 = &v52[v68];
    *(_DWORD *)v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v51, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Clock(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(_BYTE *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, int *);
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int *v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, int *);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;

  v6 = type metadata accessor for UnknownStorage();
  v123 = *(_QWORD *)(v6 - 8);
  v122 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 40);
  v122(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = (_BYTE *)(a1 + v8);
  v12 = (_BYTE *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v123 + 32))(v11, v12, v6);
      v18 = v13[5];
      v19 = &v11[v18];
      v20 = &v12[v18];
      *(_DWORD *)v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      v21 = v13[6];
      v22 = &v11[v21];
      v23 = &v12[v21];
      *(_DWORD *)v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      v24 = v13[7];
      v25 = &v11[v24];
      v26 = &v12[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      v27 = v13[8];
      v28 = &v11[v27];
      v29 = &v12[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v11[v13[9]] = v12[v13[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v122((uint64_t)v11, (uint64_t)v12, v6);
  v80 = v13[5];
  v81 = &v11[v80];
  v82 = &v12[v80];
  *(_DWORD *)v81 = *(_DWORD *)v82;
  v81[4] = v82[4];
  v83 = v13[6];
  v84 = &v11[v83];
  v85 = &v12[v83];
  *(_DWORD *)v84 = *(_DWORD *)v85;
  v84[4] = v85[4];
  v86 = v13[7];
  v87 = &v11[v86];
  v88 = &v12[v86];
  *(_DWORD *)v87 = *(_DWORD *)v88;
  v87[4] = v88[4];
  v89 = v13[8];
  v90 = &v11[v89];
  v91 = &v12[v89];
  *(_DWORD *)v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v11[v13[9]] = v12[v13[9]];
LABEL_7:
  v31 = a3[7];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections(0);
  v35 = *((_QWORD *)v34 - 1);
  v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v32, v33, v6);
      v39 = v34[5];
      v40 = &v32[v39];
      v41 = &v33[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v34[6];
      v43 = &v32[v42];
      v44 = &v33[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v34[7];
      v46 = &v32[v45];
      v47 = &v33[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      v48 = v34[8];
      v49 = &v32[v48];
      v50 = &v33[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v34[9];
      v52 = &v32[v51];
      v53 = &v33[v51];
      *(_QWORD *)v52 = *(_QWORD *)v53;
      v52[8] = v53[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
LABEL_12:
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_13;
  }
  v122((uint64_t)v32, (uint64_t)v33, v6);
  v92 = v34[5];
  v93 = &v32[v92];
  v94 = &v33[v92];
  *(_QWORD *)v93 = *(_QWORD *)v94;
  v93[8] = v94[8];
  v95 = v34[6];
  v96 = &v32[v95];
  v97 = &v33[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v96[8] = v97[8];
  v98 = v34[7];
  v99 = &v32[v98];
  v100 = &v33[v98];
  *(_QWORD *)v99 = *(_QWORD *)v100;
  v99[8] = v100[8];
  v101 = v34[8];
  v102 = &v32[v101];
  v103 = &v33[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v102[8] = v103[8];
  v104 = v34[9];
  v105 = &v32[v104];
  v106 = &v33[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v106[8];
LABEL_13:
  v55 = a3[8];
  v56 = (char *)(a1 + v55);
  v57 = (char *)(a2 + v55);
  v58 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion(0);
  v59 = *((_QWORD *)v58 - 1);
  v60 = *(uint64_t (**)(char *, uint64_t, int *))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (!v61)
  {
    if (!v62)
    {
      v122((uint64_t)v56, (uint64_t)v57, v6);
      v107 = v58[5];
      v108 = &v56[v107];
      v109 = &v57[v107];
      *(_QWORD *)v108 = *(_QWORD *)v109;
      v108[8] = v109[8];
      v110 = v58[6];
      v111 = &v56[v110];
      v112 = &v57[v110];
      *(_DWORD *)v111 = *(_DWORD *)v112;
      v111[4] = v112[4];
      v113 = v58[7];
      v114 = &v56[v113];
      v115 = &v57[v113];
      *(_DWORD *)v114 = *(_DWORD *)v115;
      v114[4] = v115[4];
      v116 = v58[8];
      v117 = &v56[v116];
      v118 = &v57[v116];
      *(_QWORD *)v117 = *(_QWORD *)v118;
      v117[8] = v118[8];
      v119 = v58[9];
      v120 = &v56[v119];
      v121 = &v57[v119];
      *(_DWORD *)v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v56, type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
    goto LABEL_18;
  }
  if (v62)
  {
LABEL_18:
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v56, v57, v6);
  v63 = v58[5];
  v64 = &v56[v63];
  v65 = &v57[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v58[6];
  v67 = &v56[v66];
  v68 = &v57[v66];
  *(_DWORD *)v67 = *(_DWORD *)v68;
  v67[4] = v68[4];
  v69 = v58[7];
  v70 = &v56[v69];
  v71 = &v57[v69];
  *(_DWORD *)v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
  v72 = v58[8];
  v73 = &v56[v72];
  v74 = &v57[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  v75 = v58[9];
  v76 = &v56[v75];
  v77 = &v57[v75];
  *(_DWORD *)v76 = *(_DWORD *)v77;
  v76[4] = v77[4];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v56, 0, 1, v58);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Clock()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A23AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[6];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[7];
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Clock()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A2480(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Clock()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockModel?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockModel);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverClockCorrections?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverClockCorrections);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReport()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReport()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_Wgs84Ecef()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_SbasL1SyncState();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvBandCorrections(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[8] = v14[8];
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A2A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A2AFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 3;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_SvBandCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL2CSyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v15[6];
      v23 = &v13[v22];
      v24 = &v14[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v15[7];
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2)
{
  return destroy for CLP_LogEntry_PrivateData_GlonassId(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v10(a1, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = a3(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v7, v6);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, int *);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = v12;
  v13 = *(int *)(a3 + 24);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = *(uint64_t (**)(char *, uint64_t, int *))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v35 = v16[5];
      v36 = &v14[v35];
      v37 = &v15[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v16[6];
      v40 = &v14[v39];
      v41 = &v15[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v16[7];
      v44 = &v14[v43];
      v45 = &v15[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = v16[5];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v16[6];
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  v29 = v16[7];
  v30 = &v14[v29];
  v31 = &v15[v29];
  v32 = v31[8];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v32;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v14[6];
    v21 = &v12[v20];
    v22 = &v13[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v14[7];
    v24 = &v12[v23];
    v25 = &v13[v23];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v24[8] = v25[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, int *);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = (char *)(a1 + v10);
  v14 = (char *)(a2 + v10);
  v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = *(uint64_t (**)(char *, uint64_t, int *))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v8((uint64_t)v13, (uint64_t)v14, v6);
      v31 = v15[5];
      v32 = &v13[v31];
      v33 = &v14[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v15[6];
      v35 = &v13[v34];
      v36 = &v14[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v15[7];
      v38 = &v13[v37];
      v39 = &v14[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  v20 = v15[5];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v15[6];
  v24 = &v13[v23];
  v25 = &v14[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  v26 = v15[7];
  v27 = &v13[v26];
  v28 = &v14[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A34E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
    v12 = a1 + *(int *)(a3 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvPositionAtTime()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A3570(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?);
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v14 = a1 + *(int *)(a4 + 24);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvPositionAtTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(a1, a2, a3, (uint64_t)"\t", &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_Wgs84Ecef?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Wgs84Ecef);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;

  type metadata accessor for UnknownStorage();
  if (v8 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, a5, a6);
    if (v9 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a3[7];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[8];
    v15 = a3[9];
    v16 = (char *)v7 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)v7 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
  }
  return v7;
}

_QWORD *initializeWithCopy for CLP_LogEntry_PrivateData_PolynomialOrbit(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[8];
  v13 = a3[9];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  return a1;
}

_QWORD *assignWithCopy for CLP_LogEntry_PrivateData_PolynomialOrbit(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[8];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  v14 = a3[9];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_PolynomialOrbit(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = a3[9];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

_QWORD *assignWithTake for CLP_LogEntry_PrivateData_PolynomialOrbit(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  v11 = a3[9];
  v12 = (char *)a1 + v10;
  v13 = (char *)a2 + v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  v14 = (char *)a1 + v11;
  v15 = (char *)a2 + v11;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A3AF0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2359A3B78(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_PolynomialOrbit()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SvInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_ReceiverBandCorrections(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v9[8] = v10[8];
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v13[4] = v14[4];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v15 = (char *)a1 + v12;
    v16 = (char *)a2 + v12;
    v15[4] = v16[4];
    *(_DWORD *)v15 = *(_DWORD *)v16;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_ReceiverBandCorrections(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = a1 + v10;
  v13 = a2 + v10;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v14 = a1 + v11;
  v15 = a2 + v11;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  *(_DWORD *)v14 = *(_DWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A401C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 0xDu)
    v9 = 13;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 13;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 0xDu)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A40AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 13;
  return result;
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_ReceiverBandCorrections()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_LeapSecondChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_LeapSecondChange()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_LeapSecondInfo(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v13 = a2[v10];
    v11[4] = v12[4];
    a1[v10] = v13;
    v14 = a3[7];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v8(v15, v16, v7);
      v21 = *(int *)(v17 + 20);
      v22 = &v15[v21];
      v23 = &v16[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = *(int *)(v17 + 24);
      v25 = &v15[v24];
      v26 = &v16[v24];
      *(_DWORD *)v25 = *(_DWORD *)v26;
      v25[4] = v26[4];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    v19 = *(int *)(v16 + 20);
    v20 = &v14[v19];
    v21 = &v15[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = *(int *)(v16 + 24);
    v23 = &v14[v22];
    v24 = &v15[v22];
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = (int *)(a2 + v9);
  v12 = *v11;
  *(_BYTE *)(v10 + 4) = *((_BYTE *)v11 + 4);
  *(_DWORD *)v10 = v12;
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      v8((uint64_t)v14, (uint64_t)v15, v6);
      v31 = *(int *)(v16 + 20);
      v32 = &v14[v31];
      v33 = &v15[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      v35 = *(int *)(v16 + 24);
      v36 = &v14[v35];
      v37 = &v15[v35];
      v38 = v37[4];
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[4] = v38;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  v21 = *(int *)(v16 + 20);
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = *(int *)(v16 + 24);
  v26 = &v14[v25];
  v27 = &v15[v25];
  v28 = v27[4];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  v26[4] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  v12 = *(_BYTE *)(a2 + v9);
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_BYTE *)(a1 + v9) = v12;
  v13 = a3[7];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v14, (uint64_t)v15, v6);
    v19 = *(int *)(v16 + 20);
    v20 = &v14[v19];
    v21 = &v15[v19];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = *(int *)(v16 + 24);
    v23 = &v14[v22];
    v24 = &v15[v22];
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_LeapSecondInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v13 = *(_BYTE *)(a2 + v10);
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  *(_BYTE *)(a1 + v10) = v13;
  v14 = a3[7];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v8((uint64_t)v15, (uint64_t)v16, v6);
      v30 = *(int *)(v17 + 20);
      v31 = &v15[v30];
      v32 = &v16[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      v31[8] = v32[8];
      v33 = *(int *)(v17 + 24);
      v34 = &v15[v33];
      v35 = &v16[v33];
      *(_DWORD *)v34 = *(_DWORD *)v35;
      v34[4] = v35[4];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  v22 = *(int *)(v17 + 20);
  v23 = &v15[v22];
  v24 = &v16[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = v24[8];
  v25 = *(int *)(v17 + 24);
  v26 = &v15[v25];
  v27 = &v16[v25];
  *(_DWORD *)v26 = *(_DWORD *)v27;
  v26[4] = v27[4];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A4C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 5u)
      v9 = 5;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    v10 = v9 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 5u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A4D18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 250)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 5;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_LeapSecondInfo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsToUtcConversion(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GpsToUtcConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GpsL1SyncState();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v51;
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    v16 = *((_QWORD *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v13, (uint64_t *)v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      v22 = v15[7];
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v51 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v23, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8((uint64_t *)__dst, (uint64_t *)v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        v29 = *(int *)(v24 + 24);
        v30 = &__dst[v29];
        v31 = &v23[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v51 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
    v36 = *((_QWORD *)v35 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      v38 = v35[5];
      v39 = &v33[v38];
      v40 = &v34[v38];
      *(_QWORD *)v39 = *(_QWORD *)v40;
      v39[8] = v40[8];
      v41 = v35[6];
      v42 = &v33[v41];
      v43 = &v34[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      v44 = v35[7];
      v45 = &v33[v44];
      v46 = &v34[v44];
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      v47 = v35[8];
      v48 = &v33[v47];
      v49 = &v34[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v12(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v12(v5, v4);
    v7 = v5 + *(int *)(v6 + 28);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      v12(v7, v4);
  }
  v9 = a1 + *(int *)(a2 + 28);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v9, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v49 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    v36 = v33[5];
    v37 = &v31[v36];
    v38 = &v32[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = v33[6];
    v40 = &v31[v39];
    v41 = &v32[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v42 = v33[7];
    v43 = &v31[v42];
    v44 = &v32[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v33[8];
    v46 = &v31[v45];
    v47 = &v32[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, int *);
  int v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  uint64_t v83;
  uint64_t v85;
  char *v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char v108;
  void (*v109)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;

  v6 = type metadata accessor for UnknownStorage();
  v112 = *(_QWORD *)(v6 - 8);
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 24);
  v111(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      v111(v12, (uint64_t)v13, v6);
      v31 = v14[5];
      v32 = v12 + v31;
      v33 = &v13[v31];
      v34 = *(_DWORD *)v33;
      *(_BYTE *)(v32 + 4) = v33[4];
      *(_DWORD *)v32 = v34;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      v35 = v14[7];
      v36 = v12 + v35;
      v37 = &v13[v35];
      v38 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      v41 = v40(v36, 1, v38);
      v42 = v40((uint64_t)v37, 1, v38);
      if (v41)
      {
        if (!v42)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v112 + 16))(v36, v37, v6);
          v43 = *(int *)(v38 + 20);
          v44 = v36 + v43;
          v45 = &v37[v43];
          v46 = v45[8];
          *(_QWORD *)v44 = *(_QWORD *)v45;
          *(_BYTE *)(v44 + 8) = v46;
          v47 = *(int *)(v38 + 24);
          v48 = v36 + v47;
          v49 = &v37[v47];
          v50 = v49[4];
          *(_DWORD *)v48 = *(_DWORD *)v49;
          *(_BYTE *)(v48 + 4) = v50;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v42)
        {
          v111(v36, (uint64_t)v37, v6);
          v101 = *(int *)(v38 + 20);
          v102 = v36 + v101;
          v103 = &v37[v101];
          v104 = v103[8];
          *(_QWORD *)v102 = *(_QWORD *)v103;
          *(_BYTE *)(v102 + 8) = v104;
          v105 = *(int *)(v38 + 24);
          v106 = v36 + v105;
          v107 = &v37[v105];
          v108 = v107[4];
          *(_DWORD *)v106 = *(_DWORD *)v107;
          *(_BYTE *)(v106 + 4) = v108;
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v36, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      v29 = (void *)v36;
      v30 = v37;
LABEL_8:
      memcpy(v29, v30, v28);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v28 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    v29 = (void *)v12;
    v30 = v13;
    goto LABEL_8;
  }
  if (v18)
    goto LABEL_7;
  v109 = *(void (**)(uint64_t, char *, uint64_t))(v112 + 16);
  v109(v12, v13, v6);
  v19 = v14[5];
  v20 = v12 + v19;
  v21 = &v13[v19];
  v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  v23 = v14[7];
  __dst = (char *)(v12 + v23);
  v24 = &v13[v23];
  v25 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v109((uint64_t)__dst, v24, v6);
    v51 = *(int *)(v25 + 20);
    v52 = &__dst[v51];
    v53 = &v24[v51];
    v54 = v53[8];
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v52[8] = v54;
    v55 = *(int *)(v25 + 24);
    v56 = &__dst[v55];
    v57 = &v24[v55];
    v58 = v57[4];
    *(_DWORD *)v56 = *(_DWORD *)v57;
    v56[4] = v58;
    (*(void (**)(void))(v26 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  v59 = a3[7];
  v60 = (char *)(a1 + v59);
  v61 = (char *)(a2 + v59);
  v62 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v63 = *((_QWORD *)v62 - 1);
  v64 = *(uint64_t (**)(char *, uint64_t, int *))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (!v65)
  {
    if (!v66)
    {
      v111((uint64_t)v60, (uint64_t)v61, v6);
      v85 = v62[5];
      v86 = &v60[v85];
      v87 = &v61[v85];
      v88 = v87[8];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v86[8] = v88;
      v89 = v62[6];
      v90 = &v60[v89];
      v91 = &v61[v89];
      v92 = v91[8];
      *(_QWORD *)v90 = *(_QWORD *)v91;
      v90[8] = v92;
      v93 = v62[7];
      v94 = &v60[v93];
      v95 = &v61[v93];
      v96 = v95[8];
      *(_QWORD *)v94 = *(_QWORD *)v95;
      v94[8] = v96;
      v97 = v62[8];
      v98 = &v60[v97];
      v99 = &v61[v97];
      v100 = v99[8];
      *(_QWORD *)v98 = *(_QWORD *)v99;
      v98[8] = v100;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v60, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }
  if (v66)
  {
LABEL_19:
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v60, v61, v6);
  v67 = v62[5];
  v68 = &v60[v67];
  v69 = &v61[v67];
  v70 = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v68[8] = v70;
  v71 = v62[6];
  v72 = &v60[v71];
  v73 = &v61[v71];
  v74 = v73[8];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v72[8] = v74;
  v75 = v62[7];
  v76 = &v60[v75];
  v77 = &v61[v75];
  v78 = v77[8];
  *(_QWORD *)v76 = *(_QWORD *)v77;
  v76[8] = v78;
  v79 = v62[8];
  v80 = &v60[v79];
  v81 = &v61[v79];
  v82 = v81[8];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v80[8] = v82;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v63 + 56))(v60, 0, 1, v62);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v49;
  char *__dst;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v49 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v49 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    v36 = v33[5];
    v37 = &v31[v36];
    v38 = &v32[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    v39 = v33[6];
    v40 = &v31[v39];
    v41 = &v32[v39];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v40[8] = v41[8];
    v42 = v33[7];
    v43 = &v31[v42];
    v44 = &v32[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v33[8];
    v46 = &v31[v45];
    v47 = &v32[v45];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v46[8] = v47[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GpsTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;

  v6 = type metadata accessor for UnknownStorage();
  v95 = *(_QWORD *)(v6 - 8);
  v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 40);
  v94(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = (char *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      v94(v11, (uint64_t)v12, v6);
      v29 = v13[5];
      v30 = v11 + v29;
      v31 = &v12[v29];
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_BYTE *)(v30 + 4) = v31[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      v32 = v13[7];
      v33 = v11 + v32;
      v34 = &v12[v32];
      v35 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      v38 = v37(v33, 1, v35);
      v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v33, v34, v6);
          v40 = *(int *)(v35 + 20);
          v41 = v33 + v40;
          v42 = &v34[v40];
          *(_QWORD *)v41 = *(_QWORD *)v42;
          *(_BYTE *)(v41 + 8) = v42[8];
          v43 = *(int *)(v35 + 24);
          v44 = v33 + v43;
          v45 = &v34[v43];
          *(_DWORD *)v44 = *(_DWORD *)v45;
          *(_BYTE *)(v44 + 4) = v45[4];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v39)
        {
          v94(v33, (uint64_t)v34, v6);
          v86 = *(int *)(v35 + 20);
          v87 = v33 + v86;
          v88 = &v34[v86];
          *(_QWORD *)v87 = *(_QWORD *)v88;
          *(_BYTE *)(v87 + 8) = v88[8];
          v89 = *(int *)(v35 + 24);
          v90 = v33 + v89;
          v91 = &v34[v89];
          *(_DWORD *)v90 = *(_DWORD *)v91;
          *(_BYTE *)(v90 + 4) = v91[4];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v33, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      v27 = (void *)v33;
      v28 = v34;
LABEL_8:
      memcpy(v27, v28, v26);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    v27 = (void *)v11;
    v28 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  v92 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 32);
  v92(v11, v12, v6);
  v18 = v13[5];
  v19 = v11 + v18;
  v20 = &v12[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  v21 = v13[7];
  __dst = (char *)(v11 + v21);
  v22 = &v12[v21];
  v23 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v92((uint64_t)__dst, v22, v6);
    v46 = *(int *)(v23 + 20);
    v47 = &__dst[v46];
    v48 = &v22[v46];
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = v48[8];
    v49 = *(int *)(v23 + 24);
    v50 = &__dst[v49];
    v51 = &v22[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    (*(void (**)(void))(v24 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v52 = a3[7];
  v53 = (char *)(a1 + v52);
  v54 = (char *)(a2 + v52);
  v55 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion(0);
  v56 = *((_QWORD *)v55 - 1);
  v57 = *(uint64_t (**)(char *, uint64_t, int *))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      v94((uint64_t)v53, (uint64_t)v54, v6);
      v74 = v55[5];
      v75 = &v53[v74];
      v76 = &v54[v74];
      *(_QWORD *)v75 = *(_QWORD *)v76;
      v75[8] = v76[8];
      v77 = v55[6];
      v78 = &v53[v77];
      v79 = &v54[v77];
      *(_QWORD *)v78 = *(_QWORD *)v79;
      v78[8] = v79[8];
      v80 = v55[7];
      v81 = &v53[v80];
      v82 = &v54[v80];
      *(_QWORD *)v81 = *(_QWORD *)v82;
      v81[8] = v82[8];
      v83 = v55[8];
      v84 = &v53[v83];
      v85 = &v54[v83];
      *(_QWORD *)v84 = *(_QWORD *)v85;
      v84[8] = v85[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v53, type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
    goto LABEL_19;
  }
  if (v59)
  {
LABEL_19:
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v53, v54, v6);
  v60 = v55[5];
  v61 = &v53[v60];
  v62 = &v54[v60];
  *(_QWORD *)v61 = *(_QWORD *)v62;
  v61[8] = v62[8];
  v63 = v55[6];
  v64 = &v53[v63];
  v65 = &v54[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v55[7];
  v67 = &v53[v66];
  v68 = &v54[v66];
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[8] = v68[8];
  v69 = v55[8];
  v70 = &v53[v69];
  v71 = &v54[v69];
  *(_QWORD *)v70 = *(_QWORD *)v71;
  v70[8] = v71[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A67BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_73Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A67D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_74Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GpsTimeInfo()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsToUtcConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsToUtcConversion);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_GlonassSubsecondConversion()
{
  return type metadata completion function for CLP_LogEntry_PrivateData_GlonassSlotInfo();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GlonassTimeInfo(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = &a1[v9];
    v12 = &a2[v9];
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = &a1[v10];
    v14 = &a2[v10];
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    v16 = &a1[v15];
    v17 = &a2[v15];
    v18 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    if (v20(v17, 1, v18))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v8(v16, v17, v7);
      v23 = *(int *)(v18 + 20);
      v24 = &v16[v23];
      v25 = &v17[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = *(int *)(v18 + 24);
      v27 = &v16[v26];
      v28 = &v17[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v29 = a3[9];
    v30 = &a1[v29];
    v31 = &a2[v29];
    if (v20(v31, 1, v18))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v8(v30, v31, v7);
      v33 = *(int *)(v18 + 20);
      v34 = &v30[v33];
      v35 = &v31[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v34[8] = v35[8];
      v36 = *(int *)(v18 + 24);
      v37 = &v30[v36];
      v38 = &v31[v36];
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v37[8] = v38[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v30, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v10(a1, v4);
  v5 = a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
    v10(v5, v4);
  v8 = a1 + *(int *)(a2 + 36);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v21 = *(int *)(v17 + 20);
    v22 = &v15[v21];
    v23 = &v16[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = *(int *)(v17 + 24);
    v25 = &v15[v24];
    v26 = &v16[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v27 = a3[9];
  v28 = (char *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  if (v19(v29, 1, v17))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v31 = *(int *)(v17 + 20);
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = *(int *)(v17 + 24);
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v28, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;

  v6 = type metadata accessor for UnknownStorage();
  v63 = *(_QWORD *)(v6 - 8);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 24);
  v62(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v16, v6);
      v22 = *(int *)(v17 + 20);
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = v24[8];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v25;
      v26 = *(int *)(v17 + 24);
      v27 = &v15[v26];
      v28 = &v16[v26];
      v29 = v28[8];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v29;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  v62((uint64_t)v15, (uint64_t)v16, v6);
  v46 = *(int *)(v17 + 20);
  v47 = &v15[v46];
  v48 = &v16[v46];
  v49 = v48[8];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v47[8] = v49;
  v50 = *(int *)(v17 + 24);
  v51 = &v15[v50];
  v52 = &v16[v50];
  v53 = v52[8];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v51[8] = v53;
LABEL_7:
  v31 = a3[9];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = v19((char *)(a1 + v31), 1, v17);
  v35 = v19(v33, 1, v17);
  if (!v34)
  {
    if (!v35)
    {
      v62((uint64_t)v32, (uint64_t)v33, v6);
      v54 = *(int *)(v17 + 20);
      v55 = &v32[v54];
      v56 = &v33[v54];
      v57 = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v55[8] = v57;
      v58 = *(int *)(v17 + 24);
      v59 = &v32[v58];
      v60 = &v33[v58];
      v61 = v60[8];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v61;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v32, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v32, v33, v6);
  v36 = *(int *)(v17 + 20);
  v37 = &v32[v36];
  v38 = &v33[v36];
  v39 = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v39;
  v40 = *(int *)(v17 + 24);
  v41 = &v32[v40];
  v42 = &v33[v40];
  v43 = v42[8];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v43;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v32, 0, 1, v17);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, v6);
    v21 = *(int *)(v17 + 20);
    v22 = &v15[v21];
    v23 = &v16[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = *(int *)(v17 + 24);
    v25 = &v15[v24];
    v26 = &v16[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v27 = a3[9];
  v28 = (char *)(a1 + v27);
  v29 = (char *)(a2 + v27);
  if (v19(v29, 1, v17))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v28, (uint64_t)v29, v6);
    v31 = *(int *)(v17 + 20);
    v32 = &v28[v31];
    v33 = &v29[v31];
    *(_QWORD *)v32 = *(_QWORD *)v33;
    v32[8] = v33[8];
    v34 = *(int *)(v17 + 24);
    v35 = &v28[v34];
    v36 = &v29[v34];
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = v36[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v28, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GlonassTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;

  v6 = type metadata accessor for UnknownStorage();
  v54 = *(_QWORD *)(v6 - 8);
  v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 40);
  v53(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v15, v6);
      v21 = *(int *)(v16 + 20);
      v22 = &v14[v21];
      v23 = &v15[v21];
      *(_QWORD *)v22 = *(_QWORD *)v23;
      v22[8] = v23[8];
      v24 = *(int *)(v16 + 24);
      v25 = &v14[v24];
      v26 = &v15[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v14, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v53((uint64_t)v14, (uint64_t)v15, v6);
  v41 = *(int *)(v16 + 20);
  v42 = &v14[v41];
  v43 = &v15[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = *(int *)(v16 + 24);
  v45 = &v14[v44];
  v46 = &v15[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v45[8] = v46[8];
LABEL_7:
  v28 = a3[9];
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = v18((char *)(a1 + v28), 1, v16);
  v32 = v18(v30, 1, v16);
  if (!v31)
  {
    if (!v32)
    {
      v53((uint64_t)v29, (uint64_t)v30, v6);
      v47 = *(int *)(v16 + 20);
      v48 = &v29[v47];
      v49 = &v30[v47];
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v48[8] = v49[8];
      v50 = *(int *)(v16 + 24);
      v51 = &v29[v50];
      v52 = &v30[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      v51[8] = v52[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v29, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v29, v30, v6);
  v33 = *(int *)(v16 + 20);
  v34 = &v29[v33];
  v35 = &v30[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  v36 = *(int *)(v16 + 24);
  v37 = &v29[v36];
  v38 = &v30[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v29, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A7978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 249)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 6u)
      v9 = 6;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    v10 = v9 - 6;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 6u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A7A34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 249)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 6;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GlonassTimeInfo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSubsecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassSubsecondConversion);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SubSecondConversion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_BeidouTimeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, int *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v62;
  char *__dst;
  void (*v64)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8((char *)a1, (char *)a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    v15 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
    v16 = *((_QWORD *)v15 - 1);
    v64 = v8;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v8(v13, v14, v7);
      v19 = v15[5];
      v20 = &v13[v19];
      v21 = &v14[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      v13[v15[6]] = v14[v15[6]];
      v22 = v15[7];
      __dst = &v13[v22];
      v23 = &v14[v22];
      v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v62 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v23, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
        memcpy(__dst, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v8(__dst, v23, v7);
        v26 = *(int *)(v24 + 20);
        v27 = &__dst[v26];
        v28 = &v23[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        v29 = *(int *)(v24 + 24);
        v30 = &__dst[v29];
        v31 = &v23[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        (*(void (**)(void))(v62 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(unsigned int (**)(char *, uint64_t, int *))(v36 + 48);
    if (v37(v34, 1, v35))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v64(v33, v34, v7);
      v39 = v35[5];
      v40 = &v33[v39];
      v41 = &v34[v39];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v41[8];
      v42 = v35[6];
      v43 = &v33[v42];
      v44 = &v34[v42];
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      v45 = v35[7];
      v46 = &v33[v45];
      v47 = &v34[v45];
      *(_QWORD *)v46 = *(_QWORD *)v47;
      v46[8] = v47[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
    }
    v48 = a3[8];
    v49 = (char *)a1 + v48;
    v50 = (char *)a2 + v48;
    if (v37(v50, 1, v35))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      v64(v49, v50, v7);
      v52 = v35[5];
      v53 = &v49[v52];
      v54 = &v50[v52];
      *(_QWORD *)v53 = *(_QWORD *)v54;
      v53[8] = v54[8];
      v55 = v35[6];
      v56 = &v49[v55];
      v57 = &v50[v55];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v56[8] = v57[8];
      v58 = v35[7];
      v59 = &v49[v58];
      v60 = &v50[v58];
      *(_QWORD *)v59 = *(_QWORD *)v60;
      v59[8] = v60[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v36 + 56))(v49, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v14(v5, v4);
    v7 = v5 + *(int *)(v6 + 28);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
      v14(v7, v4);
  }
  v9 = a1 + a2[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
    v14(v9, v4);
  v12 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, int *);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v60;
  char *__dst;
  void (*v62)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v60 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1, v33))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v62(v31, v32, v6);
    v37 = v33[5];
    v38 = &v31[v37];
    v39 = &v32[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v33[6];
    v41 = &v31[v40];
    v42 = &v32[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = v33[7];
    v44 = &v31[v43];
    v45 = &v32[v43];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  if (v35(v48, 1, v33))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v62(v47, v48, v6);
    v50 = v33[5];
    v51 = &v47[v50];
    v52 = &v48[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    v53 = v33[6];
    v54 = &v47[v53];
    v55 = &v48[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    v56 = v33[7];
    v57 = &v47[v56];
    v58 = &v48[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v47, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, int *);
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char v97;
  uint64_t v98;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char v131;
  void (*v132)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;

  v6 = type metadata accessor for UnknownStorage();
  v135 = *(_QWORD *)(v6 - 8);
  v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 24);
  v134(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16((uint64_t)v13, 1, v14);
  v136 = v6;
  if (!v17)
  {
    if (!v18)
    {
      v134(v12, (uint64_t)v13, v6);
      v32 = v14[5];
      v33 = v12 + v32;
      v34 = &v13[v32];
      v35 = *(_DWORD *)v34;
      *(_BYTE *)(v33 + 4) = v34[4];
      *(_DWORD *)v33 = v35;
      *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
      v36 = v14[7];
      v37 = v12 + v36;
      v38 = &v13[v36];
      v39 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      v42 = v41(v37, 1, v39);
      v43 = v41((uint64_t)v38, 1, v39);
      if (v42)
      {
        if (!v43)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v37, v38, v136);
          v44 = *(int *)(v39 + 20);
          v45 = v37 + v44;
          v46 = &v38[v44];
          v47 = v46[8];
          *(_QWORD *)v45 = *(_QWORD *)v46;
          *(_BYTE *)(v45 + 8) = v47;
          v48 = *(int *)(v39 + 24);
          v49 = v37 + v48;
          v50 = &v38[v48];
          v51 = v50[4];
          *(_DWORD *)v49 = *(_DWORD *)v50;
          *(_BYTE *)(v49 + 4) = v51;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v43)
        {
          v134(v37, (uint64_t)v38, v136);
          v124 = *(int *)(v39 + 20);
          v125 = v37 + v124;
          v126 = &v38[v124];
          v127 = v126[8];
          *(_QWORD *)v125 = *(_QWORD *)v126;
          *(_BYTE *)(v125 + 8) = v127;
          v128 = *(int *)(v39 + 24);
          v129 = v37 + v128;
          v130 = &v38[v128];
          v131 = v130[4];
          *(_DWORD *)v129 = *(_DWORD *)v130;
          *(_BYTE *)(v129 + 4) = v131;
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      v30 = (void *)v37;
      v31 = v38;
LABEL_8:
      memcpy(v30, v31, v29);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v12, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    v30 = (void *)v12;
    v31 = v13;
    goto LABEL_8;
  }
  if (v18)
    goto LABEL_7;
  v132 = *(void (**)(uint64_t, char *, uint64_t))(v135 + 16);
  v132(v12, v13, v6);
  v19 = v14[5];
  v20 = v12 + v19;
  v21 = &v13[v19];
  v22 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v21[4];
  *(_DWORD *)v20 = v22;
  *(_BYTE *)(v12 + v14[6]) = v13[v14[6]];
  v23 = v14[7];
  __dst = (char *)(v12 + v23);
  v24 = &v13[v23];
  v25 = v6;
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v132((uint64_t)__dst, v24, v25);
    v52 = *(int *)(v26 + 20);
    v53 = &__dst[v52];
    v54 = &v24[v52];
    v55 = v54[8];
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v55;
    v56 = *(int *)(v26 + 24);
    v57 = &__dst[v56];
    v58 = &v24[v56];
    v59 = v58[4];
    *(_DWORD *)v57 = *(_DWORD *)v58;
    v57[4] = v59;
    (*(void (**)(void))(v27 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
LABEL_14:
  v60 = a3[7];
  v61 = (char *)(a1 + v60);
  v62 = (char *)(a2 + v60);
  v63 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v64 = *((_QWORD *)v63 - 1);
  v65 = *(uint64_t (**)(char *, uint64_t, int *))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v61, v62, v136);
      v68 = v63[5];
      v69 = &v61[v68];
      v70 = &v62[v68];
      v71 = v70[8];
      *(_QWORD *)v69 = *(_QWORD *)v70;
      v69[8] = v71;
      v72 = v63[6];
      v73 = &v61[v72];
      v74 = &v62[v72];
      v75 = v74[8];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v73[8] = v75;
      v76 = v63[7];
      v77 = &v61[v76];
      v78 = &v62[v76];
      v79 = v78[8];
      *(_QWORD *)v77 = *(_QWORD *)v78;
      v77[8] = v79;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v67)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v61, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_20;
  }
  v134((uint64_t)v61, (uint64_t)v62, v136);
  v100 = v63[5];
  v101 = &v61[v100];
  v102 = &v62[v100];
  v103 = v102[8];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v101[8] = v103;
  v104 = v63[6];
  v105 = &v61[v104];
  v106 = &v62[v104];
  v107 = v106[8];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v107;
  v108 = v63[7];
  v109 = &v61[v108];
  v110 = &v62[v108];
  v111 = v110[8];
  *(_QWORD *)v109 = *(_QWORD *)v110;
  v109[8] = v111;
LABEL_20:
  v81 = a3[8];
  v82 = (char *)(a1 + v81);
  v83 = (char *)(a2 + v81);
  v84 = v65((char *)(a1 + v81), 1, v63);
  v85 = v65(v83, 1, v63);
  if (!v84)
  {
    if (!v85)
    {
      v134((uint64_t)v82, (uint64_t)v83, v136);
      v112 = v63[5];
      v113 = &v82[v112];
      v114 = &v83[v112];
      v115 = v114[8];
      *(_QWORD *)v113 = *(_QWORD *)v114;
      v113[8] = v115;
      v116 = v63[6];
      v117 = &v82[v116];
      v118 = &v83[v116];
      v119 = v118[8];
      *(_QWORD *)v117 = *(_QWORD *)v118;
      v117[8] = v119;
      v120 = v63[7];
      v121 = &v82[v120];
      v122 = &v83[v120];
      v123 = v122[8];
      *(_QWORD *)v121 = *(_QWORD *)v122;
      v121[8] = v123;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v82, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v85)
  {
LABEL_25:
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v82, v83, v136);
  v86 = v63[5];
  v87 = &v82[v86];
  v88 = &v83[v86];
  v89 = v88[8];
  *(_QWORD *)v87 = *(_QWORD *)v88;
  v87[8] = v89;
  v90 = v63[6];
  v91 = &v82[v90];
  v92 = &v83[v90];
  v93 = v92[8];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v93;
  v94 = v63[7];
  v95 = &v82[v94];
  v96 = &v83[v94];
  v97 = v96[8];
  *(_QWORD *)v95 = *(_QWORD *)v96;
  v95[8] = v97;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v82, 0, 1, v63);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, int *);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v60;
  char *__dst;
  void (*v62)(char *, char *, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = (char *)(a1 + v9);
  v13 = (char *)(a2 + v9);
  v14 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v15 = *((_QWORD *)v14 - 1);
  v62 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v17 = v14[5];
    v18 = &v12[v17];
    v19 = &v13[v17];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v12[v14[6]] = v13[v14[6]];
    v20 = v14[7];
    __dst = &v12[v20];
    v21 = &v13[v20];
    v22 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
    v60 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v7((uint64_t)__dst, (uint64_t)v21, v6);
      v24 = *(int *)(v22 + 20);
      v25 = &__dst[v24];
      v26 = &v21[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      v27 = *(int *)(v22 + 24);
      v28 = &__dst[v27];
      v29 = &v21[v27];
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      (*(void (**)(void))(v60 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v34 = *((_QWORD *)v33 - 1);
  v35 = *(unsigned int (**)(char *, uint64_t, int *))(v34 + 48);
  if (v35(v32, 1, v33))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v62(v31, v32, v6);
    v37 = v33[5];
    v38 = &v31[v37];
    v39 = &v32[v37];
    *(_QWORD *)v38 = *(_QWORD *)v39;
    v38[8] = v39[8];
    v40 = v33[6];
    v41 = &v31[v40];
    v42 = &v32[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = v33[7];
    v44 = &v31[v43];
    v45 = &v32[v43];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = v45[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  v46 = a3[8];
  v47 = (char *)(a1 + v46);
  v48 = (char *)(a2 + v46);
  if (v35(v48, 1, v33))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v62(v47, v48, v6);
    v50 = v33[5];
    v51 = &v47[v50];
    v52 = &v48[v50];
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = v52[8];
    v53 = v33[6];
    v54 = &v47[v53];
    v55 = &v48[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    v56 = v33[7];
    v57 = &v47[v56];
    v58 = &v48[v56];
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = v58[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v47, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_GalileoTimeInfo(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int *v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, int *);
  int v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(uint64_t, char *, uint64_t);
  char *__dst;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;

  v6 = type metadata accessor for UnknownStorage();
  v114 = *(_QWORD *)(v6 - 8);
  v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 40);
  v113(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = (char *)(a2 + v8);
  v13 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15((uint64_t)v12, 1, v13);
  v115 = v6;
  if (!v16)
  {
    if (!v17)
    {
      v113(v11, (uint64_t)v12, v6);
      v30 = v13[5];
      v31 = v11 + v30;
      v32 = &v12[v30];
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_BYTE *)(v31 + 4) = v32[4];
      *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
      v33 = v13[7];
      v34 = v11 + v33;
      v35 = &v12[v33];
      v36 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      v39 = v38(v34, 1, v36);
      v40 = v38((uint64_t)v35, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v34, v35, v115);
          v41 = *(int *)(v36 + 20);
          v42 = v34 + v41;
          v43 = &v35[v41];
          *(_QWORD *)v42 = *(_QWORD *)v43;
          *(_BYTE *)(v42 + 8) = v43[8];
          v44 = *(int *)(v36 + 24);
          v45 = v34 + v44;
          v46 = &v35[v44];
          *(_DWORD *)v45 = *(_DWORD *)v46;
          *(_BYTE *)(v45 + 4) = v46[4];
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v40)
        {
          v113(v34, (uint64_t)v35, v115);
          v105 = *(int *)(v36 + 20);
          v106 = v34 + v105;
          v107 = &v35[v105];
          *(_QWORD *)v106 = *(_QWORD *)v107;
          *(_BYTE *)(v106 + 8) = v107[8];
          v108 = *(int *)(v36 + 24);
          v109 = v34 + v108;
          v110 = &v35[v108];
          *(_DWORD *)v109 = *(_DWORD *)v110;
          *(_BYTE *)(v109 + 4) = v110[4];
          goto LABEL_14;
        }
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?)
                                  - 8)
                      + 64);
      v28 = (void *)v34;
      v29 = v35;
LABEL_8:
      memcpy(v28, v29, v27);
      goto LABEL_14;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v11, type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?)
                                - 8)
                    + 64);
    v28 = (void *)v11;
    v29 = v12;
    goto LABEL_8;
  }
  if (v17)
    goto LABEL_7;
  v111 = *(void (**)(uint64_t, char *, uint64_t))(v114 + 32);
  v111(v11, v12, v6);
  v18 = v13[5];
  v19 = v11 + v18;
  v20 = &v12[v18];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = v20[4];
  *(_BYTE *)(v11 + v13[6]) = v12[v13[6]];
  v21 = v13[7];
  __dst = (char *)(v11 + v21);
  v22 = &v12[v21];
  v23 = v6;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondChange(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondChange?);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v111((uint64_t)__dst, v22, v23);
    v47 = *(int *)(v24 + 20);
    v48 = &__dst[v47];
    v49 = &v22[v47];
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v48[8] = v49[8];
    v50 = *(int *)(v24 + 24);
    v51 = &__dst[v50];
    v52 = &v22[v50];
    *(_DWORD *)v51 = *(_DWORD *)v52;
    v51[4] = v52[4];
    (*(void (**)(void))(v25 + 56))();
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
LABEL_14:
  v53 = a3[7];
  v54 = (char *)(a1 + v53);
  v55 = (char *)(a2 + v53);
  v56 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v57 = *((_QWORD *)v56 - 1);
  v58 = *(uint64_t (**)(char *, uint64_t, int *))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v54, v55, v115);
      v61 = v56[5];
      v62 = &v54[v61];
      v63 = &v55[v61];
      *(_QWORD *)v62 = *(_QWORD *)v63;
      v62[8] = v63[8];
      v64 = v56[6];
      v65 = &v54[v64];
      v66 = &v55[v64];
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v56[7];
      v68 = &v54[v67];
      v69 = &v55[v67];
      *(_QWORD *)v68 = *(_QWORD *)v69;
      v68[8] = v69[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v60)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v54, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
LABEL_19:
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_20;
  }
  v113((uint64_t)v54, (uint64_t)v55, v115);
  v87 = v56[5];
  v88 = &v54[v87];
  v89 = &v55[v87];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v88[8] = v89[8];
  v90 = v56[6];
  v91 = &v54[v90];
  v92 = &v55[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v91[8] = v92[8];
  v93 = v56[7];
  v94 = &v54[v93];
  v95 = &v55[v93];
  *(_QWORD *)v94 = *(_QWORD *)v95;
  v94[8] = v95[8];
LABEL_20:
  v71 = a3[8];
  v72 = (char *)(a1 + v71);
  v73 = (char *)(a2 + v71);
  v74 = v58((char *)(a1 + v71), 1, v56);
  v75 = v58(v73, 1, v56);
  if (!v74)
  {
    if (!v75)
    {
      v113((uint64_t)v72, (uint64_t)v73, v115);
      v96 = v56[5];
      v97 = &v72[v96];
      v98 = &v73[v96];
      *(_QWORD *)v97 = *(_QWORD *)v98;
      v97[8] = v98[8];
      v99 = v56[6];
      v100 = &v72[v99];
      v101 = &v73[v99];
      *(_QWORD *)v100 = *(_QWORD *)v101;
      v100[8] = v101[8];
      v102 = v56[7];
      v103 = &v72[v102];
      v104 = &v73[v102];
      *(_QWORD *)v103 = *(_QWORD *)v104;
      v103[8] = v104[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v72, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_25;
  }
  if (v75)
  {
LABEL_25:
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v72, v73, v115);
  v76 = v56[5];
  v77 = &v72[v76];
  v78 = &v73[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  v77[8] = v78[8];
  v79 = v56[6];
  v80 = &v72[v79];
  v81 = &v73[v79];
  *(_QWORD *)v80 = *(_QWORD *)v81;
  v80[8] = v81[8];
  v82 = v56[7];
  v83 = &v72[v82];
  v84 = &v73[v82];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v83[8] = v84[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(v72, 0, 1, v56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A9504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_73Tm(a1, a2, a3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t __swift_get_extra_inhabitant_index_73Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v10 = v13;
      v15 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a3 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  }
  return v11(v12, a2, v10);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359A95BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_74Tm(a1, a2, a3, a4, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
}

uint64_t __swift_store_extra_inhabitant_index_74Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = v10;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?);
    v16 = *(_QWORD *)(v15 - 8);
    if (*(_DWORD *)(v16 + 84) == a3)
    {
      v12 = v15;
      v17 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v16 = *(_QWORD *)(v12 - 8);
      v17 = *(int *)(a4 + 28);
    }
    v14 = a1 + v17;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  }
  return v13(v14, a2, a2, v12);
}

void type metadata completion function for CLP_LogEntry_PrivateData_GalileoTimeInfo()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      v16 = v12[5];
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v12[6];
      v20 = &v10[v19];
      v21 = &v11[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v12[7];
      v23 = &v10[v22];
      v24 = &v11[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
    }
    v25 = *(int *)(a3 + 24);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v5, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v47 = a3;
  v48 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v35 = v12[5];
      v36 = &v10[v35];
      v37 = &v11[v35];
      v38 = v37[8];
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[8] = v38;
      v39 = v12[6];
      v40 = &v10[v39];
      v41 = &v11[v39];
      v42 = v41[8];
      *(_QWORD *)v40 = *(_QWORD *)v41;
      v40[8] = v42;
      v43 = v12[7];
      v44 = &v10[v43];
      v45 = &v11[v43];
      v46 = v45[8];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v46;
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  v20 = v19[8];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v20;
  v21 = v12[6];
  v22 = &v10[v21];
  v23 = &v11[v21];
  v24 = v23[8];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v24;
  v25 = v12[7];
  v26 = &v10[v25];
  v27 = &v11[v25];
  v28 = v27[8];
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = v28;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v30 = *(int *)(v47 + 24);
  v31 = a1 + v30;
  v32 = (int *)(v48 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 4) = *((_BYTE *)v32 + 4);
  *(_DWORD *)v31 = v33;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = v11[5];
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v11[6];
    v18 = &v9[v17];
    v19 = &v10[v17];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = v11[7];
    v21 = &v9[v20];
    v22 = &v10[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  v23 = *(int *)(a3 + 24);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_NavicTimeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, int *);
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v40 = a3;
  v41 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(char *, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      v31 = v12[5];
      v32 = &v10[v31];
      v33 = &v11[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v12[6];
      v35 = &v10[v34];
      v36 = &v11[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      v35[8] = v36[8];
      v37 = v12[7];
      v38 = &v10[v37];
      v39 = &v11[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      goto LABEL_7;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  v17 = v12[5];
  v18 = &v10[v17];
  v19 = &v11[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  v20 = v12[6];
  v21 = &v10[v20];
  v22 = &v11[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = v12[7];
  v24 = &v10[v23];
  v25 = &v11[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v27 = *(int *)(v40 + 24);
  v28 = a1 + v27;
  v29 = v41 + v27;
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359AA034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359AA0B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_NavicTimeInfo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_TimeConversionInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)v22 = v24;
    v25 = (char *)a1 + v21;
    v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    v29[4] = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    v31[4] = v32[4];
    *(_DWORD *)v31 = *(_DWORD *)v32;
    v33 = a3[13];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v34[4] = v35[4];
    *(_DWORD *)v34 = *(_DWORD *)v35;
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = v30;
  v31 = a3[11];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_BYTE *)(v33 + 4);
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = v34;
  v35 = a3[12];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(_BYTE *)(v37 + 4);
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = v38;
  v39 = a3[13];
  v40 = a1 + v39;
  v41 = a2 + v39;
  v42 = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = v42;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_KlobucharModelParameters(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = (int *)(a2 + v19);
  v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)v21 = v23;
  v24 = a1 + v20;
  v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v26 = a3[11];
  v27 = a3[12];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)(v28 + 4) = *(_BYTE *)(v29 + 4);
  *(_DWORD *)v28 = *(_DWORD *)v29;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)(v30 + 4) = *(_BYTE *)(v31 + 4);
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v32 = a3[13];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)(v33 + 4) = *(_BYTE *)(v34 + 4);
  *(_DWORD *)v33 = *(_DWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for CLP_LogEntry_PrivateData_KlobucharModelParameters()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_SfcfXyz()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_SfcfXyz()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *__src;
  uint64_t v85;
  char *v86;
  char *__dst;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  uint64_t v90;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v90 = v13;
      v8(v10, v11, v7);
      v16 = *(int *)(v12 + 20);
      v17 = &v10[v16];
      v18 = &v11[v16];
      *(_DWORD *)v17 = *(_DWORD *)v18;
      v17[4] = v18[4];
      v19 = *(int *)(v12 + 24);
      v20 = v8;
      v89 = v10;
      v21 = &v10[v19];
      v22 = &v11[v19];
      v23 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
      v24 = *((_QWORD *)v23 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        v8 = v20;
        v26 = v90;
      }
      else
      {
        v85 = v24;
        v88 = v20;
        v20(v21, v22, v7);
        v27 = v23[5];
        v28 = &v21[v27];
        v29 = &v22[v27];
        *(_DWORD *)v28 = *(_DWORD *)v29;
        v28[4] = v29[4];
        v30 = v23[6];
        v86 = v21;
        __dst = &v21[v30];
        v31 = &v22[v30];
        v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v33 = *(_QWORD *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          v8 = v88;
          v26 = v90;
        }
        else
        {
          v81 = v22;
          v35 = __dst;
          v88(__dst, v31, v7);
          v36 = *(int *)(v32 + 20);
          v37 = &__dst[v36];
          v38 = &v31[v36];
          *(_DWORD *)v37 = *(_DWORD *)v38;
          v37[4] = v38[4];
          v83 = v32;
          v39 = *(int *)(v32 + 24);
          v82 = &__dst[v39];
          v40 = &v31[v39];
          v41 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v79 = *(_QWORD *)(v41 - 8);
          v80 = v41;
          __src = v40;
          v42 = (*(uint64_t (**)(char *, uint64_t))(v79 + 48))(v40, 1);
          v8 = v88;
          v26 = v90;
          if (v42)
          {
            v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(v82, __src, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
          }
          else
          {
            v88(v82, __src, v7);
            v44 = *(int *)(v80 + 20);
            v45 = &v82[v44];
            v46 = &__src[v44];
            *(_DWORD *)v45 = *(_DWORD *)v46;
            v45[4] = v46[4];
            v82[*(int *)(v80 + 24)] = __src[*(int *)(v80 + 24)];
            v35 = __dst;
            (*(void (**)(char *, _QWORD, uint64_t))(v79 + 56))(v82, 0, 1);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v83);
          v22 = v81;
        }
        v47 = v23[7];
        v48 = &v86[v47];
        v49 = &v22[v47];
        *(_DWORD *)v48 = *(_DWORD *)v49;
        v48[4] = v49[4];
        v50 = v23[8];
        v51 = &v86[v50];
        v52 = &v22[v50];
        v51[4] = v52[4];
        *(_DWORD *)v51 = *(_DWORD *)v52;
        v53 = v23[9];
        v54 = &v86[v53];
        v55 = &v22[v53];
        *(_DWORD *)v54 = *(_DWORD *)v55;
        v54[4] = v55[4];
        v56 = v23[10];
        v57 = &v86[v56];
        v58 = &v22[v56];
        *(_DWORD *)v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        v59 = v23[11];
        v60 = &v86[v59];
        v61 = &v22[v59];
        *(_DWORD *)v60 = *(_DWORD *)v61;
        v60[4] = v61[4];
        (*(void (**)(void))(v85 + 56))();
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v89, 0, 1, v12);
    }
    v62 = a3[7];
    a1[a3[6]] = a2[a3[6]];
    a1[v62] = a2[v62];
    v63 = a3[8];
    v64 = &a1[v63];
    v65 = &a2[v63];
    v66 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
    v67 = *((_QWORD *)v66 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v67 + 48))(v65, 1, v66))
    {
      v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      v8(v64, v65, v7);
      v69 = v66[5];
      v70 = &v64[v69];
      v71 = &v65[v69];
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v70[8] = v71[8];
      v72 = v66[6];
      v73 = &v64[v72];
      v74 = &v65[v72];
      *(_QWORD *)v73 = *(_QWORD *)v74;
      v73[8] = v74[8];
      v75 = v66[7];
      v76 = &v64[v75];
      v77 = &v65[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v76[8] = v77[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v67 + 56))(v64, 0, 1, v66);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(uint64_t, uint64_t);

  v4 = type metadata accessor for UnknownStorage();
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v16(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v16(v5, v4);
    v7 = v5 + *(int *)(v6 + 24);
    v8 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      v16(v7, v4);
      v9 = v7 + *(int *)(v8 + 24);
      v10 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v16(v9, v4);
        v11 = v9 + *(int *)(v10 + 24);
        v12 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
          v16(v11, v4);
      }
    }
  }
  v13 = a1 + *(int *)(a2 + 32);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v16)(v13, v4);
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v81;
  uint64_t v82;
  char *__dst;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = *(int *)(v11 + 24);
    v18 = v7;
    v91 = v9;
    v19 = &v9[v17];
    v20 = &v10[v17];
    v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v7 = v18;
      v24 = v91;
      v25 = v92;
    }
    else
    {
      v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      v26 = *(int *)(v21 + 20);
      v27 = &v19[v26];
      v28 = &v20[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v87 = (int *)v21;
      v88 = v20;
      v29 = *(int *)(v21 + 24);
      v90 = v19;
      v30 = &v19[v29];
      v31 = &v20[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v7 = v18;
        v24 = v91;
        v25 = v92;
        v36 = v87;
        v35 = v88;
      }
      else
      {
        v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        v37 = *(int *)(v32 + 20);
        v38 = &v30[v37];
        v39 = &v31[v37];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        v85 = v32;
        v86 = v30;
        v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        v41 = &v31[v40];
        v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v81 = *(_QWORD *)(v42 - 8);
        v82 = v42;
        v43 = v41;
        v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1);
        v7 = v18;
        v24 = v91;
        v25 = v92;
        if (v44)
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          v46 = *(int *)(v82 + 20);
          v47 = &__dst[v46];
          v48 = &v43[v46];
          *(_DWORD *)v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t))(v81 + 56))(__dst, 0, 1);
        }
        v36 = v87;
        v35 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v86, 0, 1, v85);
      }
      v49 = v36[7];
      v50 = &v90[v49];
      v51 = &v35[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v36[8];
      v53 = &v90[v52];
      v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v55 = v36[9];
      v56 = &v90[v55];
      v57 = &v35[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v58 = v36[10];
      v59 = &v90[v58];
      v60 = &v35[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v61 = v36[11];
      v62 = &v90[v61];
      v63 = &v35[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v11);
  }
  v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  v65 = a3[8];
  v66 = (char *)(a1 + v65);
  v67 = (char *)(a2 + v65);
  v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v69 = *((_QWORD *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
  {
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    v71 = v68[5];
    v72 = &v66[v71];
    v73 = &v67[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    v74 = v68[6];
    v75 = &v66[v74];
    v76 = &v67[v74];
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v75[8] = v76[8];
    v77 = v68[7];
    v78 = &v66[v77];
    v79 = &v67[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v66, 0, 1, v68);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, int *);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  int v81;
  size_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  uint64_t v96;
  char *v97;
  char *v98;
  int v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int *v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, int *);
  int v122;
  int v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char v135;
  uint64_t v136;
  uint64_t v138;
  char *v139;
  char *v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v144;
  char v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  int v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  void (**__src)(void *, _QWORD, uint64_t, uint64_t);
  char *__srca;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(uint64_t, char *, uint64_t);
  char *__dst;
  void *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(uint64_t, char *, uint64_t);
  void (*v246)(uint64_t, char *, uint64_t);
  uint64_t v247;
  int *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253;

  v6 = type metadata accessor for UnknownStorage();
  v253 = *(_QWORD *)(v6 - 8);
  v252 = *(void (**)(uint64_t, uint64_t, uint64_t))(v253 + 24);
  v252(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    v252(v8, (uint64_t)v9, v6);
    v28 = *(int *)(v10 + 20);
    v29 = v8 + v28;
    v30 = &v9[v28];
    v31 = v30[4];
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_BYTE *)(v29 + 4) = v31;
    v32 = *(int *)(v10 + 24);
    v33 = v8 + v32;
    v34 = &v9[v32];
    v35 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v36 = *((_QWORD *)v35 - 1);
    v37 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v36 + 48);
    v38 = v37(v33, 1, v35);
    v39 = v37((uint64_t)v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        v246 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v246(v33, v34, v6);
        v40 = v35[5];
        v41 = v33 + v40;
        v42 = &v34[v40];
        v43 = v42[4];
        *(_DWORD *)v41 = *(_DWORD *)v42;
        *(_BYTE *)(v41 + 4) = v43;
        v44 = v35[6];
        v45 = v34;
        v46 = (char *)(v33 + v44);
        v242 = v6;
        v249 = v45;
        v47 = &v45[v44];
        v48 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v49 = *(_QWORD *)(v48 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
        {
          v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
          v6 = v242;
          v51 = v249;
        }
        else
        {
          v236 = v49;
          v246((uint64_t)v46, v47, v242);
          v84 = *(int *)(v48 + 20);
          v85 = &v46[v84];
          v86 = &v47[v84];
          v87 = v86[4];
          *(_DWORD *)v85 = *(_DWORD *)v86;
          v85[4] = v87;
          v88 = *(int *)(v48 + 24);
          __dsta = v46;
          __srca = &v46[v88];
          v89 = &v47[v88];
          v90 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v232 = *(_QWORD *)(v90 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v232 + 48))(v89, 1, v90))
          {
            v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(__srca, v89, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
          }
          else
          {
            v246((uint64_t)__srca, v89, v242);
            v160 = *(int *)(v90 + 20);
            v161 = &__srca[v160];
            v162 = &v89[v160];
            v163 = *(_DWORD *)v162;
            v161[4] = v162[4];
            *(_DWORD *)v161 = v163;
            __srca[*(int *)(v90 + 24)] = v89[*(int *)(v90 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v232 + 56))(__srca, 0, 1, v90);
          }
          v51 = v249;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v236 + 56))(__dsta, 0, 1, v48);
          v6 = v242;
        }
        v164 = v35[7];
        v165 = v33 + v164;
        v166 = &v51[v164];
        v167 = *(_DWORD *)v166;
        *(_BYTE *)(v165 + 4) = v166[4];
        *(_DWORD *)v165 = v167;
        v168 = v35[8];
        v169 = v33 + v168;
        v170 = &v51[v168];
        v171 = *(_DWORD *)v170;
        *(_BYTE *)(v169 + 4) = v170[4];
        *(_DWORD *)v169 = v171;
        v172 = v35[9];
        v173 = v33 + v172;
        v174 = &v51[v172];
        v175 = *(_DWORD *)v174;
        *(_BYTE *)(v173 + 4) = v174[4];
        *(_DWORD *)v173 = v175;
        v176 = v35[10];
        v177 = v33 + v176;
        v178 = &v51[v176];
        v179 = *(_DWORD *)v178;
        *(_BYTE *)(v177 + 4) = v178[4];
        *(_DWORD *)v177 = v179;
        v180 = v35[11];
        v181 = v33 + v180;
        v182 = &v51[v180];
        v183 = *(_DWORD *)v182;
        *(_BYTE *)(v181 + 4) = v182[4];
        *(_DWORD *)v181 = v183;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    if (v39)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v33, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?)
                                  - 8)
                      + 64);
      v26 = (void *)v33;
      v27 = v34;
      goto LABEL_8;
    }
    v244 = v6;
    v252(v33, (uint64_t)v34, v6);
    v72 = v35[5];
    v73 = v33 + v72;
    v74 = &v34[v72];
    v75 = v74[4];
    *(_DWORD *)v73 = *(_DWORD *)v74;
    *(_BYTE *)(v73 + 4) = v75;
    v76 = v35[6];
    v77 = v33 + v76;
    v78 = &v34[v76];
    v79 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v247 = *(_QWORD *)(v79 - 8);
    v250 = v77;
    v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v247 + 48);
    LODWORD(v77) = v80(v77, 1, v79);
    v81 = v80((uint64_t)v78, 1, v79);
    if ((_DWORD)v77)
    {
      if (!v81)
      {
        v237 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
        v237(v250, v78, v244);
        v151 = *(int *)(v79 + 20);
        v152 = v250 + v151;
        v153 = &v78[v151];
        v154 = v153[4];
        *(_DWORD *)v152 = *(_DWORD *)v153;
        *(_BYTE *)(v152 + 4) = v154;
        v155 = *(int *)(v79 + 24);
        __dstb = (char *)(v250 + v155);
        v156 = &v78[v155];
        v157 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v158 = *(_QWORD *)(v157 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
        {
          v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          v237((uint64_t)__dstb, v156, v244);
          v194 = *(int *)(v157 + 20);
          v195 = &__dstb[v194];
          v196 = &v156[v194];
          v197 = *(_DWORD *)v196;
          v195[4] = v196[4];
          *(_DWORD *)v195 = v197;
          __dstb[*(int *)(v157 + 24)] = v156[*(int *)(v157 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(__dstb, 0, 1, v157);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v247 + 56))(v250, 0, 1, v79);
        goto LABEL_51;
      }
      v82 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v83 = (void *)v250;
    }
    else
    {
      if (!v81)
      {
        v252(v250, (uint64_t)v78, v244);
        v184 = *(int *)(v79 + 20);
        v185 = v250 + v184;
        v186 = &v78[v184];
        v187 = v186[4];
        *(_DWORD *)v185 = *(_DWORD *)v186;
        *(_BYTE *)(v185 + 4) = v187;
        v188 = *(int *)(v79 + 24);
        v189 = v250 + v188;
        v190 = &v78[v188];
        v191 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __dstc = *(_QWORD **)(v191 - 8);
        v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        v251 = v189;
        LODWORD(v189) = v192(v189, 1, v191);
        v193 = v192((uint64_t)v190, 1, v191);
        if ((_DWORD)v189)
        {
          if (!v193)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v253 + 16))(v251, v190, v244);
            v218 = *(int *)(v191 + 20);
            v219 = v251 + v218;
            v220 = &v190[v218];
            v221 = *(_DWORD *)v220;
            *(_BYTE *)(v219 + 4) = v220[4];
            *(_DWORD *)v219 = v221;
            *(_BYTE *)(v251 + *(int *)(v191 + 24)) = v190[*(int *)(v191 + 24)];
            v222 = v191;
            v6 = v244;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstc[7])(v251, 0, 1, v222);
            goto LABEL_52;
          }
          v82 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v150 = v190;
          v83 = (void *)v251;
        }
        else
        {
          if (!v193)
          {
            v252(v251, (uint64_t)v190, v244);
            v223 = *(int *)(v191 + 20);
            v224 = v251 + v223;
            v225 = &v190[v223];
            v226 = *(_DWORD *)v225;
            *(_BYTE *)(v224 + 4) = v225[4];
            *(_DWORD *)v224 = v226;
            v227 = *(int *)(v191 + 24);
            v6 = v244;
            *(_BYTE *)(v251 + v227) = v190[v227];
            goto LABEL_52;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v251, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v82 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v83 = (void *)v251;
          v150 = v190;
        }
        goto LABEL_40;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v250, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v82 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v83 = (void *)v250;
    }
    v150 = v78;
LABEL_40:
    memcpy(v83, v150, v82);
LABEL_51:
    v6 = v244;
LABEL_52:
    v198 = v35[7];
    v199 = v33 + v198;
    v200 = &v34[v198];
    v201 = *(_DWORD *)v200;
    *(_BYTE *)(v199 + 4) = v200[4];
    *(_DWORD *)v199 = v201;
    v202 = v35[8];
    v203 = v33 + v202;
    v204 = &v34[v202];
    v205 = *(_DWORD *)v204;
    *(_BYTE *)(v203 + 4) = v204[4];
    *(_DWORD *)v203 = v205;
    v206 = v35[9];
    v207 = v33 + v206;
    v208 = &v34[v206];
    v209 = *(_DWORD *)v208;
    *(_BYTE *)(v207 + 4) = v208[4];
    *(_DWORD *)v207 = v209;
    v210 = v35[10];
    v211 = v33 + v210;
    v212 = &v34[v210];
    v213 = *(_DWORD *)v212;
    *(_BYTE *)(v211 + 4) = v212[4];
    *(_DWORD *)v211 = v213;
    v214 = v35[11];
    v215 = v33 + v214;
    v216 = &v34[v214];
    v217 = *(_DWORD *)v216;
    *(_BYTE *)(v215 + 4) = v216[4];
    *(_DWORD *)v215 = v217;
    goto LABEL_29;
  }
  if (v14)
  {
LABEL_7:
    v25 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?)
                                - 8)
                    + 64);
    v26 = (void *)v8;
    v27 = v9;
LABEL_8:
    memcpy(v26, v27, v25);
    goto LABEL_29;
  }
  v245 = *(void (**)(uint64_t, char *, uint64_t))(v253 + 16);
  v248 = a3;
  v245(v8, v9, v6);
  v15 = *(int *)(v10 + 20);
  v16 = v8 + v15;
  v17 = &v9[v15];
  v18 = v17[4];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  v19 = *(int *)(v10 + 24);
  v20 = (char *)(v8 + v19);
  v21 = &v9[v19];
  v22 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v23 = *((_QWORD *)v22 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    a3 = v248;
  }
  else
  {
    v235 = v23;
    v245((uint64_t)v20, v21, v6);
    v52 = v22[5];
    v53 = &v20[v52];
    v54 = &v21[v52];
    v55 = v54[4];
    *(_DWORD *)v53 = *(_DWORD *)v54;
    v53[4] = v55;
    v56 = v22[6];
    __dst = &v20[v56];
    v243 = v6;
    v230 = v21;
    v57 = &v21[v56];
    v58 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v59 = *(_QWORD *)(v58 - 8);
    v231 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(__dst, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      v6 = v243;
      a3 = v248;
      v62 = v230;
      v61 = v231;
    }
    else
    {
      v228 = v59;
      v245((uint64_t)__dst, v57, v243);
      v63 = *(int *)(v58 + 20);
      v64 = &__dst[v63];
      v65 = &v57[v63];
      v66 = v65[4];
      *(_DWORD *)v64 = *(_DWORD *)v65;
      v64[4] = v66;
      v229 = v58;
      v67 = *(int *)(v58 + 24);
      v68 = &__dst[v67];
      v69 = &v57[v67];
      v70 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      __src = *(void (***)(void *, _QWORD, uint64_t, uint64_t))(v70 - 8);
      a3 = v248;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v69, 1, v70))
      {
        v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
      }
      else
      {
        v245((uint64_t)v68, v69, v243);
        v92 = *(int *)(v70 + 20);
        v93 = &v68[v92];
        v94 = &v69[v92];
        v95 = *(_DWORD *)v94;
        v93[4] = v94[4];
        *(_DWORD *)v93 = v95;
        v68[*(int *)(v70 + 24)] = v69[*(int *)(v70 + 24)];
        __src[7](v68, 0, 1, v70);
      }
      v62 = v230;
      v61 = v231;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v228 + 56))(__dst, 0, 1, v229);
      v6 = v243;
    }
    v96 = v22[7];
    v97 = &v61[v96];
    v98 = &v62[v96];
    v99 = *(_DWORD *)v98;
    v97[4] = v98[4];
    *(_DWORD *)v97 = v99;
    v100 = v22[8];
    v101 = &v61[v100];
    v102 = &v62[v100];
    v103 = *(_DWORD *)v102;
    v101[4] = v102[4];
    *(_DWORD *)v101 = v103;
    v104 = v22[9];
    v105 = &v61[v104];
    v106 = &v62[v104];
    v107 = *(_DWORD *)v106;
    v105[4] = v106[4];
    *(_DWORD *)v105 = v107;
    v108 = v22[10];
    v109 = &v61[v108];
    v110 = &v62[v108];
    v111 = *(_DWORD *)v110;
    v109[4] = v110[4];
    *(_DWORD *)v109 = v111;
    v112 = v22[11];
    v113 = &v61[v112];
    v114 = &v62[v112];
    v115 = *(_DWORD *)v114;
    v113[4] = v114[4];
    *(_DWORD *)v113 = v115;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v235 + 56))(v61, 0, 1, v22);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_29:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v116 = a3[8];
  v117 = (char *)(a1 + v116);
  v118 = (char *)(a2 + v116);
  v119 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v120 = *((_QWORD *)v119 - 1);
  v121 = *(uint64_t (**)(char *, uint64_t, int *))(v120 + 48);
  v122 = v121(v117, 1, v119);
  v123 = v121(v118, 1, v119);
  if (!v122)
  {
    if (!v123)
    {
      v252((uint64_t)v117, (uint64_t)v118, v6);
      v138 = v119[5];
      v139 = &v117[v138];
      v140 = &v118[v138];
      v141 = v140[8];
      *(_QWORD *)v139 = *(_QWORD *)v140;
      v139[8] = v141;
      v142 = v119[6];
      v143 = &v117[v142];
      v144 = &v118[v142];
      v145 = v144[8];
      *(_QWORD *)v143 = *(_QWORD *)v144;
      v143[8] = v145;
      v146 = v119[7];
      v147 = &v117[v146];
      v148 = &v118[v146];
      v149 = v148[8];
      *(_QWORD *)v147 = *(_QWORD *)v148;
      v147[8] = v149;
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v117, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }
  if (v123)
  {
LABEL_34:
    v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v253 + 16))(v117, v118, v6);
  v124 = v119[5];
  v125 = &v117[v124];
  v126 = &v118[v124];
  v127 = v126[8];
  *(_QWORD *)v125 = *(_QWORD *)v126;
  v125[8] = v127;
  v128 = v119[6];
  v129 = &v117[v128];
  v130 = &v118[v128];
  v131 = v130[8];
  *(_QWORD *)v129 = *(_QWORD *)v130;
  v129[8] = v131;
  v132 = v119[7];
  v133 = &v117[v132];
  v134 = &v118[v132];
  v135 = v134[8];
  *(_QWORD *)v133 = *(_QWORD *)v134;
  v133[8] = v135;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v120 + 56))(v117, 0, 1, v119);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v81;
  uint64_t v82;
  char *__dst;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v92 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    v14 = *(int *)(v11 + 20);
    v15 = &v9[v14];
    v16 = &v10[v14];
    *(_DWORD *)v15 = *(_DWORD *)v16;
    v15[4] = v16[4];
    v17 = *(int *)(v11 + 24);
    v18 = v7;
    v91 = v9;
    v19 = &v9[v17];
    v20 = &v10[v17];
    v21 = type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      v7 = v18;
      v24 = v91;
      v25 = v92;
    }
    else
    {
      v89 = v22;
      v18((uint64_t)v19, (uint64_t)v20, v6);
      v26 = *(int *)(v21 + 20);
      v27 = &v19[v26];
      v28 = &v20[v26];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v87 = (int *)v21;
      v88 = v20;
      v29 = *(int *)(v21 + 24);
      v90 = v19;
      v30 = &v19[v29];
      v31 = &v20[v29];
      v32 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
        v7 = v18;
        v24 = v91;
        v25 = v92;
        v36 = v87;
        v35 = v88;
      }
      else
      {
        v84 = v33;
        v18((uint64_t)v30, (uint64_t)v31, v6);
        v37 = *(int *)(v32 + 20);
        v38 = &v30[v37];
        v39 = &v31[v37];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        v85 = v32;
        v86 = v30;
        v40 = *(int *)(v32 + 24);
        __dst = &v30[v40];
        v41 = &v31[v40];
        v42 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v81 = *(_QWORD *)(v42 - 8);
        v82 = v42;
        v43 = v41;
        v44 = (*(uint64_t (**)(char *, uint64_t))(v81 + 48))(v41, 1);
        v7 = v18;
        v24 = v91;
        v25 = v92;
        if (v44)
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v18((uint64_t)__dst, (uint64_t)v43, v6);
          v46 = *(int *)(v82 + 20);
          v47 = &__dst[v46];
          v48 = &v43[v46];
          *(_DWORD *)v47 = *(_DWORD *)v48;
          v47[4] = v48[4];
          __dst[*(int *)(v82 + 24)] = v43[*(int *)(v82 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t))(v81 + 56))(__dst, 0, 1);
        }
        v36 = v87;
        v35 = v88;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v86, 0, 1, v85);
      }
      v49 = v36[7];
      v50 = &v90[v49];
      v51 = &v35[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v36[8];
      v53 = &v90[v52];
      v54 = &v35[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v55 = v36[9];
      v56 = &v90[v55];
      v57 = &v35[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v58 = v36[10];
      v59 = &v90[v58];
      v60 = &v35[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v61 = v36[11];
      v62 = &v90[v61];
      v63 = &v35[v61];
      *(_DWORD *)v62 = *(_DWORD *)v63;
      v62[4] = v63[4];
      (*(void (**)(void))(v89 + 56))();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v11);
  }
  v64 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  v65 = a3[8];
  v66 = (char *)(a1 + v65);
  v67 = (char *)(a2 + v65);
  v68 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v69 = *((_QWORD *)v68 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v69 + 48))(v67, 1, v68))
  {
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v66, (uint64_t)v67, v6);
    v71 = v68[5];
    v72 = &v66[v71];
    v73 = &v67[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    v74 = v68[6];
    v75 = &v66[v74];
    v76 = &v67[v74];
    *(_QWORD *)v75 = *(_QWORD *)v76;
    v75[8] = v76[8];
    v77 = v68[7];
    v78 = &v66[v77];
    v79 = &v67[v77];
    *(_QWORD *)v78 = *(_QWORD *)v79;
    v78[8] = v79[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v69 + 56))(v66, 0, 1, v68);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, int *);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  int v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, int *);
  int v110;
  int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  int v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  void (**__src)(void *, _QWORD, uint64_t, uint64_t);
  char *__srca;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(uint64_t, char *, uint64_t);
  char *__dst;
  void *__dsta;
  char *__dstb;
  _QWORD *__dstc;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, char *, uint64_t);
  void (*v212)(uint64_t, char *, uint64_t);
  uint64_t v213;
  int *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;

  v6 = type metadata accessor for UnknownStorage();
  v219 = *(_QWORD *)(v6 - 8);
  v218 = *(void (**)(uint64_t, uint64_t, uint64_t))(v219 + 40);
  v218(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_SvId(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v8, type metadata accessor for CLP_LogEntry_PrivateData_SvId);
      goto LABEL_7;
    }
    v218(v8, (uint64_t)v9, v6);
    v27 = *(int *)(v10 + 20);
    v28 = v8 + v27;
    v29 = &v9[v27];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    *(_BYTE *)(v28 + 4) = v29[4];
    v30 = *(int *)(v10 + 24);
    v31 = v8 + v30;
    v32 = &v9[v30];
    v33 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
    v34 = *((_QWORD *)v33 - 1);
    v35 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v34 + 48);
    v36 = v35(v31, 1, v33);
    v37 = v35((uint64_t)v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        v212 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v212(v31, v32, v6);
        v38 = v33[5];
        v39 = v31 + v38;
        v40 = &v32[v38];
        *(_DWORD *)v39 = *(_DWORD *)v40;
        *(_BYTE *)(v39 + 4) = v40[4];
        v41 = v33[6];
        v42 = v32;
        v43 = (char *)(v31 + v41);
        v208 = v6;
        v215 = v42;
        v44 = &v42[v41];
        v45 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
        v46 = *(_QWORD *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
          v6 = v208;
          v48 = v215;
        }
        else
        {
          v202 = v46;
          v212((uint64_t)v43, v44, v208);
          v78 = *(int *)(v45 + 20);
          v79 = &v43[v78];
          v80 = &v44[v78];
          *(_DWORD *)v79 = *(_DWORD *)v80;
          v79[4] = v80[4];
          v81 = *(int *)(v45 + 24);
          __dsta = v43;
          __srca = &v43[v81];
          v82 = &v44[v81];
          v83 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
          v198 = *(_QWORD *)(v83 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v82, 1, v83))
          {
            v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
            memcpy(__srca, v82, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
          }
          else
          {
            v212((uint64_t)__srca, v82, v208);
            v141 = *(int *)(v83 + 20);
            v142 = &__srca[v141];
            v143 = &v82[v141];
            *(_DWORD *)v142 = *(_DWORD *)v143;
            v142[4] = v143[4];
            __srca[*(int *)(v83 + 24)] = v82[*(int *)(v83 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))(__srca, 0, 1, v83);
          }
          v48 = v215;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v202 + 56))(__dsta, 0, 1, v45);
          v6 = v208;
        }
        v144 = v33[7];
        v145 = v31 + v144;
        v146 = &v48[v144];
        *(_DWORD *)v145 = *(_DWORD *)v146;
        *(_BYTE *)(v145 + 4) = v146[4];
        v147 = v33[8];
        v148 = v31 + v147;
        v149 = &v48[v147];
        *(_BYTE *)(v148 + 4) = v149[4];
        *(_DWORD *)v148 = *(_DWORD *)v149;
        v150 = v33[9];
        v151 = v31 + v150;
        v152 = &v48[v150];
        *(_DWORD *)v151 = *(_DWORD *)v152;
        *(_BYTE *)(v151 + 4) = v152[4];
        v153 = v33[10];
        v154 = v31 + v153;
        v155 = &v48[v153];
        *(_DWORD *)v154 = *(_DWORD *)v155;
        *(_BYTE *)(v154 + 4) = v155[4];
        v156 = v33[11];
        v157 = v31 + v156;
        v158 = &v48[v156];
        *(_DWORD *)v157 = *(_DWORD *)v158;
        *(_BYTE *)(v157 + 4) = v158[4];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    if (v37)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId);
LABEL_17:
      v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?)
                                  - 8)
                      + 64);
      v25 = (void *)v31;
      v26 = v32;
      goto LABEL_8;
    }
    v210 = v6;
    v218(v31, (uint64_t)v32, v6);
    v67 = v33[5];
    v68 = v31 + v67;
    v69 = &v32[v67];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    *(_BYTE *)(v68 + 4) = v69[4];
    v70 = v33[6];
    v71 = v31 + v70;
    v72 = &v32[v70];
    v73 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v213 = *(_QWORD *)(v73 - 8);
    v216 = v71;
    v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48);
    LODWORD(v71) = v74(v71, 1, v73);
    v75 = v74((uint64_t)v72, 1, v73);
    if ((_DWORD)v71)
    {
      if (!v75)
      {
        v203 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
        v203(v216, v72, v210);
        v133 = *(int *)(v73 + 20);
        v134 = v216 + v133;
        v135 = &v72[v133];
        *(_DWORD *)v134 = *(_DWORD *)v135;
        *(_BYTE *)(v134 + 4) = v135[4];
        v136 = *(int *)(v73 + 24);
        __dstb = (char *)(v216 + v136);
        v137 = &v72[v136];
        v138 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        v139 = *(_QWORD *)(v138 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
        {
          v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
          memcpy(__dstb, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
        }
        else
        {
          v203((uint64_t)__dstb, v137, v210);
          v168 = *(int *)(v138 + 20);
          v169 = &__dstb[v168];
          v170 = &v137[v168];
          *(_DWORD *)v169 = *(_DWORD *)v170;
          v169[4] = v170[4];
          __dstb[*(int *)(v138 + 24)] = v137[*(int *)(v138 + 24)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(__dstb, 0, 1, v138);
        }
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v213 + 56))(v216, 0, 1, v73);
        goto LABEL_51;
      }
      v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v77 = (void *)v216;
    }
    else
    {
      if (!v75)
      {
        v218(v216, (uint64_t)v72, v210);
        v159 = *(int *)(v73 + 20);
        v160 = v216 + v159;
        v161 = &v72[v159];
        *(_DWORD *)v160 = *(_DWORD *)v161;
        *(_BYTE *)(v160 + 4) = v161[4];
        v162 = *(int *)(v73 + 24);
        v163 = v216 + v162;
        v164 = &v72[v162];
        v165 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
        __dstc = *(_QWORD **)(v165 - 8);
        v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))__dstc[6];
        v217 = v163;
        LODWORD(v163) = v166(v163, 1, v165);
        v167 = v166((uint64_t)v164, 1, v165);
        if ((_DWORD)v163)
        {
          if (!v167)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v219 + 32))(v217, v164, v210);
            v186 = *(int *)(v165 + 20);
            v187 = v217 + v186;
            v188 = &v164[v186];
            *(_DWORD *)v187 = *(_DWORD *)v188;
            *(_BYTE *)(v187 + 4) = v188[4];
            *(_BYTE *)(v217 + *(int *)(v165 + 24)) = v164[*(int *)(v165 + 24)];
            v189 = v165;
            v6 = v210;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))__dstc[7])(v217, 0, 1, v189);
            goto LABEL_52;
          }
          v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v132 = v164;
          v77 = (void *)v217;
        }
        else
        {
          if (!v167)
          {
            v218(v217, (uint64_t)v164, v210);
            v190 = *(int *)(v165 + 20);
            v191 = v217 + v190;
            v192 = &v164[v190];
            *(_DWORD *)v191 = *(_DWORD *)v192;
            *(_BYTE *)(v191 + 4) = v192[4];
            v193 = *(int *)(v165 + 24);
            v6 = v210;
            *(_BYTE *)(v217 + v193) = v164[v193];
            goto LABEL_52;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v217, type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo);
          v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?)
                                      - 8)
                          + 64);
          v77 = (void *)v217;
          v132 = v164;
        }
        goto LABEL_40;
      }
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v216, type metadata accessor for CLP_LogEntry_PrivateData_GlonassId);
      v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?)
                                  - 8)
                      + 64);
      v77 = (void *)v216;
    }
    v132 = v72;
LABEL_40:
    memcpy(v77, v132, v76);
LABEL_51:
    v6 = v210;
LABEL_52:
    v171 = v33[7];
    v172 = v31 + v171;
    v173 = &v32[v171];
    *(_DWORD *)v172 = *(_DWORD *)v173;
    *(_BYTE *)(v172 + 4) = v173[4];
    v174 = v33[8];
    v175 = v31 + v174;
    v176 = &v32[v174];
    *(_BYTE *)(v175 + 4) = v176[4];
    *(_DWORD *)v175 = *(_DWORD *)v176;
    v177 = v33[9];
    v178 = v31 + v177;
    v179 = &v32[v177];
    *(_DWORD *)v178 = *(_DWORD *)v179;
    *(_BYTE *)(v178 + 4) = v179[4];
    v180 = v33[10];
    v181 = v31 + v180;
    v182 = &v32[v180];
    *(_DWORD *)v181 = *(_DWORD *)v182;
    *(_BYTE *)(v181 + 4) = v182[4];
    v183 = v33[11];
    v184 = v31 + v183;
    v185 = &v32[v183];
    *(_DWORD *)v184 = *(_DWORD *)v185;
    *(_BYTE *)(v184 + 4) = v185[4];
    goto LABEL_29;
  }
  if (v14)
  {
LABEL_7:
    v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?)
                                - 8)
                    + 64);
    v25 = (void *)v8;
    v26 = v9;
LABEL_8:
    memcpy(v25, v26, v24);
    goto LABEL_29;
  }
  v211 = *(void (**)(uint64_t, char *, uint64_t))(v219 + 32);
  v214 = a3;
  v211(v8, v9, v6);
  v15 = *(int *)(v10 + 20);
  v16 = v8 + v15;
  v17 = &v9[v15];
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v17[4];
  v18 = *(int *)(v10 + 24);
  v19 = (char *)(v8 + v18);
  v20 = &v9[v18];
  v21 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ConstellationId(0);
  v22 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v22 + 48))(v20, 1, v21))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ConstellationId?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    a3 = v214;
  }
  else
  {
    v201 = v22;
    v211((uint64_t)v19, v20, v6);
    v49 = v21[5];
    v50 = &v19[v49];
    v51 = &v20[v49];
    *(_DWORD *)v50 = *(_DWORD *)v51;
    v50[4] = v51[4];
    v52 = v21[6];
    __dst = &v19[v52];
    v209 = v6;
    v196 = v20;
    v53 = &v20[v52];
    v54 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassId(0);
    v55 = *(_QWORD *)(v54 - 8);
    v197 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassId?);
      memcpy(__dst, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v6 = v209;
      a3 = v214;
      v58 = v196;
      v57 = v197;
    }
    else
    {
      v194 = v55;
      v211((uint64_t)__dst, v53, v209);
      v59 = *(int *)(v54 + 20);
      v60 = &__dst[v59];
      v61 = &v53[v59];
      *(_DWORD *)v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      v195 = v54;
      v62 = *(int *)(v54 + 24);
      v63 = &__dst[v62];
      v64 = &v53[v62];
      v65 = type metadata accessor for CLP_LogEntry_PrivateData_GlonassSlotInfo(0);
      __src = *(void (***)(void *, _QWORD, uint64_t, uint64_t))(v65 - 8);
      a3 = v214;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))__src[6])(v64, 1, v65))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassSlotInfo?);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v211((uint64_t)v63, v64, v209);
        v85 = *(int *)(v65 + 20);
        v86 = &v63[v85];
        v87 = &v64[v85];
        *(_DWORD *)v86 = *(_DWORD *)v87;
        v86[4] = v87[4];
        v63[*(int *)(v65 + 24)] = v64[*(int *)(v65 + 24)];
        __src[7](v63, 0, 1, v65);
      }
      v58 = v196;
      v57 = v197;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v194 + 56))(__dst, 0, 1, v195);
      v6 = v209;
    }
    v88 = v21[7];
    v89 = &v57[v88];
    v90 = &v58[v88];
    *(_DWORD *)v89 = *(_DWORD *)v90;
    v89[4] = v90[4];
    v91 = v21[8];
    v92 = &v57[v91];
    v93 = &v58[v91];
    v92[4] = v93[4];
    *(_DWORD *)v92 = *(_DWORD *)v93;
    v94 = v21[9];
    v95 = &v57[v94];
    v96 = &v58[v94];
    *(_DWORD *)v95 = *(_DWORD *)v96;
    v95[4] = v96[4];
    v97 = v21[10];
    v98 = &v57[v97];
    v99 = &v58[v97];
    *(_DWORD *)v98 = *(_DWORD *)v99;
    v98[4] = v99[4];
    v100 = v21[11];
    v101 = &v57[v100];
    v102 = &v58[v100];
    *(_DWORD *)v101 = *(_DWORD *)v102;
    v101[4] = v102[4];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v201 + 56))(v57, 0, 1, v21);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_29:
  v103 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v103) = *(_BYTE *)(a2 + v103);
  v104 = a3[8];
  v105 = (char *)(a1 + v104);
  v106 = (char *)(a2 + v104);
  v107 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz(0);
  v108 = *((_QWORD *)v107 - 1);
  v109 = *(uint64_t (**)(char *, uint64_t, int *))(v108 + 48);
  v110 = v109(v105, 1, v107);
  v111 = v109(v106, 1, v107);
  if (!v110)
  {
    if (!v111)
    {
      v218((uint64_t)v105, (uint64_t)v106, v6);
      v123 = v107[5];
      v124 = &v105[v123];
      v125 = &v106[v123];
      *(_QWORD *)v124 = *(_QWORD *)v125;
      v124[8] = v125[8];
      v126 = v107[6];
      v127 = &v105[v126];
      v128 = &v106[v126];
      *(_QWORD *)v127 = *(_QWORD *)v128;
      v127[8] = v128[8];
      v129 = v107[7];
      v130 = &v105[v129];
      v131 = &v106[v129];
      *(_QWORD *)v130 = *(_QWORD *)v131;
      v130[8] = v131[8];
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v105, type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
    goto LABEL_34;
  }
  if (v111)
  {
LABEL_34:
    v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v219 + 32))(v105, v106, v6);
  v112 = v107[5];
  v113 = &v105[v112];
  v114 = &v106[v112];
  *(_QWORD *)v113 = *(_QWORD *)v114;
  v113[8] = v114[8];
  v115 = v107[6];
  v116 = &v105[v115];
  v117 = &v106[v115];
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v116[8] = v117[8];
  v118 = v107[7];
  v119 = &v105[v118];
  v120 = &v106[v118];
  *(_QWORD *)v119 = *(_QWORD *)v120;
  v119[8] = v120[8];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v108 + 56))(v105, 0, 1, v107);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359AD29C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 251)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if (*(unsigned __int8 *)(a1 + a3[7]) <= 4u)
    v13 = 4;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[7]);
  v14 = v13 - 4;
  if (*(unsigned __int8 *)(a1 + a3[7]) >= 4u)
    return v14;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359AD380(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 251)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 4;
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_PrivateData_AntennaPhaseCenterSvOffset()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SfcfXyz?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SfcfXyz);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t initializeWithCopy for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_PrivateData_Wgs84Ecef(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_39Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_ReceivedTimeStamp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_40Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_25Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_26Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_SyncState._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SyncState._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SyncState._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL1SyncState);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL2CSyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL2CSyncState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsL5SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsL5SyncState);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassL1fSyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassL1fSyncState);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB1SyncState);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouB2SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouB2SyncState);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE1SyncState);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoE5SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoE5SyncState);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SbasL1SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SbasL1SyncState);
                  if (v8 <= 0x3F)
                    swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementExtension._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FullSvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FullSvTime);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvMeasurementUsage?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvMeasurementUsage);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_Measurement._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_Measurement._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_Measurement._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SyncState?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SyncState);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvTime?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvTime);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffset?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffset);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PhaseTracking?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PhaseTracking);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementExtension?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementExtension);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_FrequencyOffsetFromPhaseTracking);
              if (v6 <= 0x3F)
                swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementReport._StorageClass()
{
  unint64_t v0;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_Clock?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_Clock);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_SvInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_SvInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_SvInfo._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SvId?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SvId);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PolynomialOrbit?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PolynomialOrbit);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_BeidouTimeInfo._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_LeapSecondInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_LeapSecondInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_SubSecondConversion?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_SubSecondConversion);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_TimeConversionInfo._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GpsTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GpsTimeInfo);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GlonassTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GlonassTimeInfo);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_BeidouTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_BeidouTimeInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_GalileoTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_GalileoTimeInfo);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_NavicTimeInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_NavicTimeInfo);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_MeasurementReportCallbackContents._StorageClass()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_ReceivedTimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_ReceivedTimeStamp);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_MeasurementReport?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_MeasurementReport);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_TimeConversionInfo?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_TimeConversionInfo);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_KlobucharModelParameters?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_KlobucharModelParameters);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t CLP_LogEntry_LogEntry.eventRecordTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
}

int *CLP_LogEntry_LogEntry.TimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_LogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t CLP_LogEntry_LogEntry.eventRecordTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_LogEntry.eventRecordTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  }
  return CLP_LogEntry_LogEntry.eventRecordTime.modify;
}

void CLP_LogEntry_LogEntry.eventRecordTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

BOOL CLP_LogEntry_LogEntry.hasEventRecordTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 24), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.clearEventRecordTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 24);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v2 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_LogEntry.privateDataCapture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  CLP_LogEntry_PrivateData_PrivateDataCapture.init()(a1);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
}

uint64_t CLP_LogEntry_LogEntry.privateDataCapture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_LogEntry.privateDataCapture.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    CLP_LogEntry_PrivateData_PrivateDataCapture.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  }
  return CLP_LogEntry_LogEntry.privateDataCapture.modify;
}

void CLP_LogEntry_LogEntry.privateDataCapture.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

BOOL CLP_LogEntry_LogEntry.hasPrivateDataCapture.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 28), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.clearPrivateDataCapture()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 28);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

double CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 20);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.cfAbsoluteTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasCfAbsoluteTimeS.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearCfAbsoluteTimeS()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 20);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 24);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.machAbsoluteTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasMachAbsoluteTimeS.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearMachAbsoluteTimeS()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 28);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasMachContinuousTimeS.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearMachContinuousTimeS()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 28);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v4 = v1 + *(int *)(result + 32);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_LogEntry.TimeStamp.pipelinedMonotonicTimeNs.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.modify;
}

BOOL CLP_LogEntry_LogEntry.TimeStamp.hasPipelinedMonotonicTimeNs.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_LogEntry.TimeStamp.clearPipelinedMonotonicTimeNs()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0) + 32);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_LogEntry.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  ExtensionFieldValueSet.init()();
  v3 = a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + *(int *)(v2 + 28);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

uint64_t variable initialization expression of CLP_LogEntry_LogEntry._eventRecordTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_LogEntry._privateDataCapture@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, a1);
}

uint64_t CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  v4 = type metadata accessor for ExtensionFieldValueSet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_LogEntry(0) + 20);
  v4 = type metadata accessor for ExtensionFieldValueSet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*CLP_LogEntry_LogEntry._protobuf_extensionFieldValues.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_LogEntry(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for ExtensibleMessage._protobuf_extensionFieldValues.getter in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for ExtensionFieldValueSet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for ExtensibleMessage._protobuf_extensionFieldValues.setter in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ExtensionFieldValueSet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

void *CLP_LogEntry_LogEntry.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_LogEntry.protoMessageName;
}

unint64_t static CLP_LogEntry_LogEntry.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t CLP_LogEntry_LogEntry._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_LogEntry._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_LogEntry.isInitialized.getter()
{
  type metadata accessor for CLP_LogEntry_LogEntry(0);
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t CLP_LogEntry_LogEntry.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  void *v5;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 4)
        break;
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
        dispatch thunk of Decoder.decodeExtensionField(values:messageType:fieldNumber:)();
        goto LABEL_12;
      }
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_LogEntry(0);
        type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
        v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp;
        v4 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp;
        v5 = &protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp;
LABEL_11:
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v3, v4, (uint64_t)v5);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
LABEL_12:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    v3 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture;
    v4 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture;
    v5 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture;
    goto LABEL_11;
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v5 = v3;
  result = closure #1 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(v5, a1, a2, a3);
  if (!v4)
  {
    type metadata accessor for CLP_LogEntry_LogEntry(0);
    dispatch thunk of Visitor.visitExtensionFields(fields:start:end:)();
    closure #2 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(v5, a1, a2, a3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t closure #2 in CLP_LogEntry_LogEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

Swift::Int CLP_LogEntry_LogEntry.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_LogEntry, &lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  ExtensionFieldValueSet.init()();
  v4 = a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t protocol witness for Message.isInitialized.getter in conformance CLP_LogEntry_LogEntry()
{
  return ExtensionFieldValueSet.isInitialized.getter() & 1;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_LogEntry()
{
  return CLP_LogEntry_LogEntry.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_LogEntry.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_LogEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_LogEntry()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
  return Message.hash(into:)();
}

uint64_t *CLP_LogEntry_LogEntry.TimeStamp.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName;
}

uint64_t static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName.getter()
{
  uint64_t v0;

  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  v0 = static CLP_LogEntry_LogEntry.TimeStamp.protoMessageName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_LogEntry.TimeStamp.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[8] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_LogEntry.TimeStamp.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  return CLP_LogEntry_LogEntry.TimeStamp.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  return CLP_LogEntry_LogEntry.TimeStamp.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_LogEntry.TimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_LogEntry.TimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_LogEntry.TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
  return Message.hash(into:)();
}

uint64_t specialized static CLP_LogEntry_LogEntry.TimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  double *v13;
  char v14;
  double *v15;
  int v16;
  uint64_t v17;
  double *v18;
  char v19;
  double *v20;
  int v21;
  uint64_t v22;
  double *v23;
  char v24;
  double *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  _QWORD *v30;
  int v31;
  char v32;
  void (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - v9;
  v11 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v12 = v11[5];
  v13 = (double *)(a1 + v12);
  v14 = *(_BYTE *)(a1 + v12 + 8);
  v15 = (double *)(a2 + v12);
  v16 = *(unsigned __int8 *)(a2 + v12 + 8);
  if ((v14 & 1) != 0)
  {
    if (!v16)
      goto LABEL_21;
  }
  else
  {
    if (*v13 != *v15)
      LOBYTE(v16) = 1;
    if ((v16 & 1) != 0)
      goto LABEL_21;
  }
  v17 = v11[6];
  v18 = (double *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 8);
  v20 = (double *)(a2 + v17);
  v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21)
      goto LABEL_21;
  }
  else
  {
    if (*v18 != *v20)
      LOBYTE(v21) = 1;
    if ((v21 & 1) != 0)
      goto LABEL_21;
  }
  v22 = v11[7];
  v23 = (double *)(a1 + v22);
  v24 = *(_BYTE *)(a1 + v22 + 8);
  v25 = (double *)(a2 + v22);
  v26 = *(unsigned __int8 *)(a2 + v22 + 8);
  if ((v24 & 1) == 0)
  {
    if (*v23 != *v25)
      LOBYTE(v26) = 1;
    if ((v26 & 1) != 0)
      goto LABEL_21;
LABEL_19:
    v27 = v11[8];
    v28 = (_QWORD *)(a1 + v27);
    v29 = *(_BYTE *)(a1 + v27 + 8);
    v30 = (_QWORD *)(a2 + v27);
    v31 = *(unsigned __int8 *)(a2 + v27 + 8);
    if ((v29 & 1) != 0)
    {
      if (!v31)
        goto LABEL_21;
    }
    else
    {
      if (*v28 != *v30)
        LOBYTE(v31) = 1;
      if ((v31 & 1) != 0)
        goto LABEL_21;
    }
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v34(v10, a1, v4);
    v34(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35 = *(void (**)(char *, uint64_t))(v5 + 8);
    v35(v8, v4);
    v35(v10, v4);
    return v32 & 1;
  }
  if (v26)
    goto LABEL_19;
LABEL_21:
  v32 = 0;
  return v32 & 1;
}

uint64_t specialized static CLP_LogEntry_LogEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v84 = a1;
  v85 = a2;
  v2 = type metadata accessor for ExtensionFieldValueSet();
  v69 = *(_QWORD *)(v2 - 8);
  v70 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v68 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v67 = (char *)&v67 - v5;
  v6 = type metadata accessor for UnknownStorage();
  v74 = *(_QWORD *)(v6 - 8);
  v75 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v73 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v72 = (char *)&v67 - v9;
  v81 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v78 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v71 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PrivateDataCapture?, CLP_LogEntry_PrivateData_PrivateDataCapture?));
  MEMORY[0x24BDAC7A8](v77);
  v82 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v76 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v83 = (uint64_t)&v67 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v79 = (uint64_t)&v67 - v17;
  v18 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_LogEntry.TimeStamp?, CLP_LogEntry_LogEntry.TimeStamp?));
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v67 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v67 - v32;
  v34 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84 + *(int *)(v34 + 24), (uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v80 = v34;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85 + *(int *)(v34 + 24), (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v35 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, (uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, v35, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v36((uint64_t)v24, 1, v18) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    if (v36(v35, 1, v18) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      goto LABEL_8;
    }
LABEL_6:
    v37 = &demangling cache variable for type metadata for (CLP_LogEntry_LogEntry.TimeStamp?, CLP_LogEntry_LogEntry.TimeStamp?);
    v38 = (uint64_t)v24;
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v38, v37);
    goto LABEL_15;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, (uint64_t)v28, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if (v36(v35, 1, v18) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    goto LABEL_6;
  }
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v35, (uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  v39 = specialized static CLP_LogEntry_LogEntry.TimeStamp.== infix(_:_:)((uint64_t)v28, (uint64_t)v21);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v21, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v33, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v28, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v24, &demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
  if ((v39 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v79;
  v40 = v80;
  v42 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v84 + *(int *)(v80 + 28), v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v43 = v85;
  v44 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v85 + *(int *)(v40 + 28), v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v45 = v82;
  v46 = v82 + *(int *)(v77 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, v46, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  v48 = v81;
  if (v47(v45, 1, v81) != 1)
  {
    v49 = v76;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    if (v47(v46, 1, v48) != 1)
    {
      v52 = v71;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v46, v71, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v52, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      if ((v53 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v49, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_13;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v44, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
  if (v47(v46, 1, v48) != 1)
  {
LABEL_13:
    v37 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PrivateDataCapture?, CLP_LogEntry_PrivateData_PrivateDataCapture?);
    v38 = v45;
    goto LABEL_14;
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
LABEL_18:
  v54 = v74;
  v55 = v75;
  v56 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
  v57 = v72;
  v56(v72, v42, v75);
  v58 = v73;
  v56(v73, v43, v55);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  LOBYTE(v56) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59 = *(void (**)(char *, uint64_t))(v54 + 8);
  v59(v58, v55);
  v59(v57, v55);
  if ((v56 & 1) != 0)
  {
    v61 = v69;
    v60 = v70;
    v62 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
    v63 = v67;
    v62(v67, v42 + *(int *)(v40 + 20), v70);
    v64 = v43 + *(int *)(v40 + 20);
    v65 = v68;
    v62(v68, v64, v60);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type ExtensionFieldValueSet and conformance ExtensionFieldValueSet, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    v66 = *(void (**)(char *, uint64_t))(v61 + 8);
    v66(v65, v60);
    v66(v63, v60);
    return v50 & 1;
  }
LABEL_15:
  v50 = 0;
  return v50 & 1;
}

uint64_t base witness table accessor for Message in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_LogEntry()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_LogEntry.TimeStamp()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry.TimeStamp and conformance CLP_LogEntry_LogEntry.TimeStamp, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry.TimeStamp);
}

uint64_t *initializeBufferWithCopyOfBuffer for CLP_LogEntry_LogEntry(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for ExtensionFieldValueSet();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
    v17 = *((_QWORD *)v16 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v14, (uint64_t *)v15, v7);
      v20 = v16[5];
      v21 = &v14[v20];
      v22 = &v15[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v16[6];
      v24 = &v14[v23];
      v25 = &v15[v23];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v25[8];
      v26 = v16[7];
      v27 = &v14[v26];
      v28 = &v15[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      v29 = v16[8];
      v30 = &v14[v29];
      v31 = &v15[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v30[8] = v31[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v14, 0, 1, v16);
    }
    v32 = a3[7];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v33, (uint64_t *)v34, v7);
      *(_QWORD *)&v33[*(int *)(v35 + 20)] = *(_QWORD *)&v34[*(int *)(v35 + 20)];
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56);
      swift_retain();
      v38(v33, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t destroy for CLP_LogEntry_LogEntry(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[6];
  v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
    v5(v8, v4);
  v10 = a1 + a2[7];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v5(v10, v4);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v15[8];
    v28 = &v13[v27];
    v29 = &v14[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
    swift_retain();
    v36(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithCopy for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;

  v6 = type metadata accessor for UnknownStorage();
  v64 = *(_QWORD *)(v6 - 8);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 24);
  v63(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v22;
      v23 = v14[6];
      v24 = &v12[v23];
      v25 = &v13[v23];
      v26 = v25[8];
      *(_QWORD *)v24 = *(_QWORD *)v25;
      v24[8] = v26;
      v27 = v14[7];
      v28 = &v12[v27];
      v29 = &v13[v27];
      v30 = v29[8];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v28[8] = v30;
      v31 = v14[8];
      v32 = &v12[v31];
      v33 = &v13[v31];
      v34 = v33[8];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v34;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  v63((uint64_t)v12, (uint64_t)v13, v6);
  v47 = v14[5];
  v48 = &v12[v47];
  v49 = &v13[v47];
  v50 = v49[8];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  v48[8] = v50;
  v51 = v14[6];
  v52 = &v12[v51];
  v53 = &v13[v51];
  v54 = v53[8];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v54;
  v55 = v14[7];
  v56 = &v12[v55];
  v57 = &v13[v55];
  v58 = v57[8];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v56[8] = v58;
  v59 = v14[8];
  v60 = &v12[v59];
  v61 = &v13[v59];
  v62 = v61[8];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v60[8] = v62;
LABEL_7:
  v36 = a3[7];
  v37 = (char *)(a1 + v36);
  v38 = (char *)(a2 + v36);
  v39 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (!v42)
  {
    if (!v43)
    {
      v63((uint64_t)v37, (uint64_t)v38, v6);
      *(_QWORD *)&v37[*(int *)(v39 + 20)] = *(_QWORD *)&v38[*(int *)(v39 + 20)];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v37, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v43)
  {
LABEL_12:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v37, v38, v6);
  *(_QWORD *)&v37[*(int *)(v39 + 20)] = *(_QWORD *)&v38[*(int *)(v39 + 20)];
  v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
  swift_retain();
  v44(v37, 0, 1, v39);
  return a1;
}

uint64_t initializeWithTake for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v16 = *((_QWORD *)v15 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, v6);
    v18 = v15[5];
    v19 = &v13[v18];
    v20 = &v14[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v15[6];
    v22 = &v13[v21];
    v23 = &v14[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    v24 = v15[7];
    v25 = &v13[v24];
    v26 = &v14[v24];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
    v27 = v15[8];
    v28 = &v13[v27];
    v29 = &v14[v27];
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v13, 0, 1, v15);
  }
  v30 = a3[7];
  v31 = (char *)(a1 + v30);
  v32 = (char *)(a2 + v30);
  v33 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v31, (uint64_t)v32, v6);
    *(_QWORD *)&v31[*(int *)(v33 + 20)] = *(_QWORD *)&v32[*(int *)(v33 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t assignWithTake for CLP_LogEntry_LogEntry(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;

  v6 = type metadata accessor for UnknownStorage();
  v55 = *(_QWORD *)(v6 - 8);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 40);
  v54(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ExtensionFieldValueSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = (int *)type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(char *, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v12, v13, v6);
      v19 = v14[5];
      v20 = &v12[v19];
      v21 = &v13[v19];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v20[8] = v21[8];
      v22 = v14[6];
      v23 = &v12[v22];
      v24 = &v13[v22];
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v23[8] = v24[8];
      v25 = v14[7];
      v26 = &v12[v25];
      v27 = &v13[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v26[8] = v27[8];
      v28 = v14[8];
      v29 = &v12[v28];
      v30 = &v13[v28];
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v29[8] = v30[8];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
LABEL_6:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  v54((uint64_t)v12, (uint64_t)v13, v6);
  v42 = v14[5];
  v43 = &v12[v42];
  v44 = &v13[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v43[8] = v44[8];
  v45 = v14[6];
  v46 = &v12[v45];
  v47 = &v13[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v46[8] = v47[8];
  v48 = v14[7];
  v49 = &v12[v48];
  v50 = &v13[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v49[8] = v50[8];
  v51 = v14[8];
  v52 = &v12[v51];
  v53 = &v13[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v52[8] = v53[8];
LABEL_7:
  v32 = a3[7];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (!v39)
    {
      v54((uint64_t)v33, (uint64_t)v34, v6);
      *(_QWORD *)&v33[*(int *)(v35 + 20)] = *(_QWORD *)&v34[*(int *)(v35 + 20)];
      swift_release();
      return a1;
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v33, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
    goto LABEL_12;
  }
  if (v39)
  {
LABEL_12:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v33, v34, v6);
  *(_QWORD *)&v33[*(int *)(v35 + 20)] = *(_QWORD *)&v34[*(int *)(v35 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_LogEntry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B1E40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for ExtensionFieldValueSet();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[7];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_LogEntry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B1F10(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for ExtensionFieldValueSet();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[7];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for CLP_LogEntry_LogEntry()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExtensionFieldValueSet();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_LogEntry.TimeStamp?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_PrivateData_PrivateDataCapture?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_LogEntry.TimeStamp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B20C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_LogEntry.TimeStamp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B210C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CLP_LogEntry_LogEntry.TimeStamp()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ALResultOptions.toPb()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t started;
  char v5;
  uint64_t result;
  char v7;

  CLP_LogEntry_AONLoc_Request.ResultOptions.init()(a1);
  v1 = ALResultOptions._maxBatchSize.getter();
  if ((v1 & 0x100000000) == 0)
    CLP_LogEntry_AONLoc_Request.ResultOptions.batchSize.setter(v1);
  v2 = ALResultOptions._intervalSec.getter();
  if ((v2 & 0x100000000) == 0)
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(*(float *)&v2);
  v3 = ALResultOptions._maxAgeSec.getter();
  if ((v3 & 0x100000000) == 0)
    CLP_LogEntry_AONLoc_Request.ResultOptions.maxAgeSec.setter(*(float *)&v3);
  started = ALResultOptions._startCfaTimeSec.getter();
  if ((v5 & 1) == 0)
    CLP_LogEntry_AONLoc_Request.ResultOptions.startCfaTimeSec.setter(*(double *)&started);
  result = ALResultOptions._endCfaTimeSec.getter();
  if ((v7 & 1) == 0)
    return CLP_LogEntry_AONLoc_Request.ResultOptions.endCfaTimeSec.setter(*(double *)&result);
  return result;
}

uint64_t ALResultOptions.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  float v9;
  uint64_t v10;
  _QWORD v12[2];

  v0 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (_QWORD *)((char *)v12 - v4);
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_Request(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CLP_LogEntry_AONLoc_Request.init()((uint64_t)v8);
  CLP_LogEntry_AONLoc_Request.type.setter(3);
  CLP_LogEntry_AONLoc_Request.ResultOptions.init()(v5);
  ALResultOptions.intervalSec.getter();
  CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.setter(v9);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v3, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  CLP_LogEntry_AONLoc_Request.resultOptions.setter((uint64_t)v3);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request, type metadata accessor for CLP_LogEntry_AONLoc_Request, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request);
  v10 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, type metadata accessor for CLP_LogEntry_AONLoc_Request);
  return v10;
}

uint64_t ALResultOptions.init(pb:)(uint64_t a1)
{
  ALResultOptions.init()();
  if (CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter())
  {
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter();
    ALResultOptions._intervalSec.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

uint64_t ALResultOptions.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;

  v19 = a3;
  v6 = type metadata accessor for ALResultOptions();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v23 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Request.ResultOptions and conformance CLP_LogEntry_AONLoc_Request.ResultOptions, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
    return outlined consume of Data._Representation(a1, a2);
  v17 = v19;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, (uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  ALResultOptions.init()();
  if (CLP_LogEntry_AONLoc_Request.ResultOptions.hasRepeatIntervalSec.getter())
  {
    CLP_LogEntry_AONLoc_Request.ResultOptions.repeatIntervalSec.getter();
    LOBYTE(v20) = 0;
    ALResultOptions._intervalSec.setter();
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v17, v23, v6);
  outlined consume of Data._Representation(a1, a2);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions);
}

void ALWiFiScanSingleAccessPoint.Band.init(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2359B269C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDFD110];
  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_WifiRfBand.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x24BDFD110])
    return 0;
  if (v4 == *MEMORY[0x24BDFD0F8])
    return 1;
  if (v4 == *MEMORY[0x24BDFD100])
    return 2;
  if (v4 != *MEMORY[0x24BDFD108])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

void ALWiFiScanSingleAccessPoint.Mode.init(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2359B27E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDFD140];
  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPointMode.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x24BDFD140])
    return 0;
  if (v4 == *MEMORY[0x24BDFD128])
    return 1;
  if (v4 == *MEMORY[0x24BDFD130])
    return 2;
  if (v4 != *MEMORY[0x24BDFD138])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 3;
}

uint64_t ALWiFiScanSingleAccessPoint.toPb(pb:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char *v33;
  char *v34;
  int v35;
  char v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  v40 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v37 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v37 - v16;
  v18 = MEMORY[0x23B7DB330](v15);
  if ((v19 & 1) == 0)
    v18 = CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(v18);
  v20 = MEMORY[0x23B7DB378](v18);
  if (v21)
    v20 = CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.setter(v20, v21);
  v22 = MEMORY[0x23B7DB3C0](v20);
  if ((v22 & 0x100000000) == 0)
    v22 = CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(v22);
  v23 = MEMORY[0x23B7DB3D8](v22);
  if ((v23 & 0x100000000) == 0)
    v23 = CLP_LogEntry_PrivateData_WifiAccessPoint.channel.setter(v23);
  v24 = MEMORY[0x23B7DB3A8](v23);
  if ((v24 & 0x100000000) == 0)
    v24 = CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.setter(*(float *)&v24);
  v25 = MEMORY[0x23B7DB3F0](v24);
  if (v25 != 2)
    v25 = CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.setter(v25 & 1);
  v26 = MEMORY[0x23B7DB300](v25);
  if ((v26 & 0x100000000) == 0)
    v26 = CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.setter(v26);
  v27 = MEMORY[0x23B7DB390](v26);
  if (v27 != 2)
    v27 = CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.setter(v27 & 1);
  MEMORY[0x23B7DB348](v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v28 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v29 != *MEMORY[0x24BDFD110])
  {
    if (v29 == *MEMORY[0x24BDFD0F8])
    {
      v30 = 1;
      goto LABEL_27;
    }
    if (v29 == *MEMORY[0x24BDFD100])
    {
      v30 = 2;
      goto LABEL_27;
    }
    if (v29 == *MEMORY[0x24BDFD108])
    {
      v30 = 3;
      goto LABEL_27;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v30 = 0;
LABEL_27:
  CLP_LogEntry_PrivateData_WifiAccessPoint.band.setter(v30);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
LABEL_28:
  MEMORY[0x23B7DB360](v28);
  v31 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v2, 1, v3) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v2, &demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  v33 = v39;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v39, v2, v3);
  v34 = v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v38, v33, v3);
  v35 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v34, v3);
  if (v35 != *MEMORY[0x24BDFD140])
  {
    if (v35 == *MEMORY[0x24BDFD128])
    {
      v36 = 1;
      goto LABEL_38;
    }
    if (v35 == *MEMORY[0x24BDFD130])
    {
      v36 = 2;
      goto LABEL_38;
    }
    if (v35 == *MEMORY[0x24BDFD138])
    {
      v36 = 3;
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v3);
  }
  v36 = 0;
LABEL_38:
  CLP_LogEntry_PrivateData_WifiAccessPoint.mode.setter(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v3);
}

uint64_t ALWiFiScanSingleAccessPoint.toPb()@<X0>(uint64_t a1@<X8>)
{
  CLP_LogEntry_PrivateData_WifiAccessPoint.init()(a1);
  return ALWiFiScanSingleAccessPoint.toPb(pb:)();
}

uint64_t ALWiFiScanSingleAccessPoint.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v2);
  ALWiFiScanSingleAccessPoint.toPb(pb:)();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiAccessPoint and conformance CLP_LogEntry_PrivateData_WifiAccessPoint, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  v3 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v3;
}

uint64_t ALWiFiScanSingleAccessPoint.init(pb:ts:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  char *v17;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v2 = type metadata accessor for ALWiFiScanSingleAccessPoint.Mode();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v20 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Mode?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ALWiFiScanSingleAccessPoint.Band();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanSingleAccessPoint.Band?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanSingleAccessPoint.init(_:)();
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter();
    ALWiFiScanSingleAccessPoint._mac.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasSsid.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.getter();
    ALWiFiScanSingleAccessPoint._ssid.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasRssiDb.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter();
    v21 = 0;
    ALWiFiScanSingleAccessPoint._rssidB.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasChannel.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.channel.getter();
    v22 = 0;
    ALWiFiScanSingleAccessPoint._channel.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasAgeS.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.getter();
    v23 = 0;
    ALWiFiScanSingleAccessPoint._ageSec.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsMoving.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.getter();
    ALWiFiScanSingleAccessPoint._isMoving.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasFrequencyKhz.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.getter();
    v24 = 0;
    ALWiFiScanSingleAccessPoint._frequencyKhz.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasBand.getter())
  {
    v15 = CLP_LogEntry_PrivateData_WifiAccessPoint.band.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, **((unsigned int **)&unk_2506F02E0 + v15), v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    ALWiFiScanSingleAccessPoint._band.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasMode.getter())
  {
    v16 = CLP_LogEntry_PrivateData_WifiAccessPoint.mode.getter();
    v17 = v20;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v20, **((unsigned int **)&unk_2506F0300 + v16), v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v17, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v2);
    ALWiFiScanSingleAccessPoint._mode.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsApplePersonalHotspot.getter())
  {
    CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.getter();
    ALWiFiScanSingleAccessPoint._isAph.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t ALWiFiScanResult.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_BYTE *, _QWORD);
  void (*v34)(_BYTE *, _QWORD);
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE v48[32];

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v12);
  v43 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ALWiFiScanResult();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiScanResult.init()();
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v46 = a2;
  v24(a2, v23, v20);
  LOBYTE(v23) = CLP_LogEntry_PrivateData_WifiScanResult.hasScanTimestamp.getter();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  if ((v23 & 1) != 0)
  {
    CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter((uint64_t)v16);
    v25 = CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
    if (v25)
    {
      CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter((uint64_t)v16);
      v26 = v43;
      ALTimeStamp.init(pb:)((uint64_t)v16);
      v27 = type metadata accessor for ALTimeStamp();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
      ALWiFiScanResult._scanTimestamp.setter();
    }
  }
  else
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v30 = v47;
  v42 = *(_QWORD *)a1;
  v43 = a1;
  if (v29)
  {
    v31 = v28 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    v44 = *(_QWORD *)(v44 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v32 = v45;
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, v45, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      v33 = (void (*)(_BYTE *, _QWORD))ALWiFiScanResult._scanTimestamp.modify();
      ALWiFiScanSingleAccessPoint.init(pb:ts:)(v32);
      v33(v48, 0);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v30, v11, v6);
      v34 = (void (*)(_BYTE *, _QWORD))ALWiFiScanResult._accessPoints.modify();
      v36 = v35;
      v37 = *v35;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v36 = v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiScanSingleAccessPoint>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFD1E8]);
        *v36 = v37;
      }
      v40 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 24);
      if (v40 >= v39 >> 1)
      {
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v37, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiScanSingleAccessPoint>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFD1E8]);
        *v36 = v37;
      }
      *(_QWORD *)(v37 + 16) = v40 + 1;
      v30 = v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v37+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v40, v47, v6);
      v34(v48, 0);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v31 += v44;
      --v29;
    }
    while (v29);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v43, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  return swift_bridgeObjectRelease();
}

uint64_t ALWiFiScanResult.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ALBtAdvertisement.init(data:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult, (void (*)(char *))ALWiFiScanResult.init(pb:), a3);
}

uint64_t ALWiFiScanResult.toPb()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v34 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  v35 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v8);
  v33 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ALTimeStamp();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = CLP_LogEntry_PrivateData_WifiScanResult.init()(a1);
  MEMORY[0x23B7DAFE8](v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v18 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v12, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v19 = v33;
    ALTimeStamp.toPb()(v33);
    CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter(v19);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v20 = MEMORY[0x23B7DAFD0](v18);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = v20 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v23 = *(_QWORD *)(v35 + 72);
    v32 = v20;
    v33 = v23;
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
    v25 = a1;
    do
    {
      v24(v7, v22, v5);
      CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v4);
      ALWiFiScanSingleAccessPoint.toPb(pb:)();
      v26 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
        v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      *(_QWORD *)(v26 + 16) = v28 + 1;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, v26+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v28, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
      a1 = v25;
      *v25 = v26;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
      v22 += v33;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for ALProtobufUtil();
  v29 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v30 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(a1, v29, v30);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.init(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = CLP_LogEntry_PrivateData_WifiAssociationState.init()(a3);
  if ((a2 & 1) == 0)
  {
    CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(1);
    CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v8);
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(a1);
    return CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter((uint64_t)v8);
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.mac.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CLP_LogEntry_PrivateData_WifiAssociationState.hasIsAssociated.getter())
    return 0;
  if (!CLP_LogEntry_PrivateData_WifiAssociationState.hasAp.getter())
    return 0;
  CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v2);
  v3 = CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  if (!v3)
    return 0;
  CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter((uint64_t)v2);
  v4 = CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  return v4;
}

void ALWiFiNotification.NotiType.init(_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2359B3B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x24BDFD058];
  v2 = type metadata accessor for ALWiFiNotification.NotiType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t ALWiFiNotification.init(pb:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanResult?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotification.init()();
  if (CLP_LogEntry_PrivateData_WifiNotification.hasType.getter())
  {
    v20 = CLP_LogEntry_PrivateData_WifiNotification.type.getter();
    ALWiFiNotification.NotiType.init(_:)(v20);
    v21 = type metadata accessor for ALWiFiNotification.NotiType();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 0, 1, v21);
    ALWiFiNotification._type.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasEventReceiptTime.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.getter((uint64_t)v13);
    ALTimeStamp.init(pb:)((uint64_t)v13);
    v22 = type metadata accessor for ALTimeStamp();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v16, 0, 1, v22);
    ALWiFiNotification._timestamp.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasScan.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.scan.getter(v7);
    ALWiFiScanResult.init(pb:)((uint64_t)v7, (uint64_t)v10);
    v23 = type metadata accessor for ALWiFiScanResult();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v10, 0, 1, v23);
    ALWiFiNotification._scanResult.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasAssociatedState.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.associatedState.getter((uint64_t)v4);
    CLP_LogEntry_PrivateData_WifiAssociationState.mac.getter();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v4, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
    ALWiFiNotification._associatedMac.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasSimulated.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.simulated.getter();
    ALWiFiNotification._simulated.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasAvailable.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.available.getter();
    ALWiFiNotification._available.setter();
  }
  if (CLP_LogEntry_PrivateData_WifiNotification.hasIsApAwake.getter())
  {
    CLP_LogEntry_PrivateData_WifiNotification.isApAwake.getter();
    ALWiFiNotification._isApAwake.setter();
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
}

uint64_t ALWiFiNotification.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(char *, unint64_t, uint64_t);
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  char isAp;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  MEMORY[0x24BDAC7A8](v2);
  v83 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v93 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v82 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v78 - v7;
  v9 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  v94 = *(_QWORD *)(v9 - 8);
  v95 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  MEMORY[0x24BDAC7A8](v81);
  v13 = (unint64_t *)((char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiScanResult?);
  MEMORY[0x24BDAC7A8](v14);
  v87 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for ALWiFiScanResult();
  v90 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v89 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  MEMORY[0x24BDAC7A8](v17);
  v84 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALTimeStamp?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v80 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v85 = (char *)&v78 - v22;
  v86 = type metadata accessor for ALTimeStamp();
  v88 = *(_QWORD *)(v86 - 8);
  v23 = MEMORY[0x24BDAC7A8](v86);
  v78 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v79 = (char *)&v78 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for ALWiFiNotification.NotiType();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v78 - v34;
  v36 = CLP_LogEntry_PrivateData_WifiNotification.init()(a1);
  MEMORY[0x23B7DB264](v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    v37 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v28, &demangling cache variable for type metadata for ALWiFiNotification.NotiType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v35, v28, v29);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v33, v35, v29);
    v38 = specialized CLP_LogEntry_PrivateData_WifiNotificationType.init(_:)((uint64_t)v33);
    CLP_LogEntry_PrivateData_WifiNotification.type.setter(v38);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v35, v29);
  }
  v91 = a1;
  v39 = (uint64_t)v85;
  MEMORY[0x23B7DB21C](v37);
  v40 = v88;
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v42 = v86;
  if (v41(v39, 1, v86) == 1)
  {
    v43 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, &demangling cache variable for type metadata for ALTimeStamp?);
  }
  else
  {
    v44 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v79, v39, v42);
    v45 = v84;
    ALTimeStamp.toPb()(v84);
    CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.setter(v45);
    v43 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v42);
  }
  v46 = (uint64_t)v87;
  MEMORY[0x23B7DB234](v43);
  v47 = v90;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v46, 1, v92) == 1)
  {
    v48 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, &demangling cache variable for type metadata for ALWiFiScanResult?);
    v49 = v91;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v89, v46, v92);
    v50 = CLP_LogEntry_PrivateData_WifiScanResult.init()(v13);
    v51 = (uint64_t)v80;
    MEMORY[0x23B7DAFE8](v50);
    if (v41(v51, 1, v42) == 1)
    {
      v52 = outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v51, &demangling cache variable for type metadata for ALTimeStamp?);
    }
    else
    {
      v53 = v88;
      v54 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v78, v51, v42);
      v55 = v84;
      ALTimeStamp.toPb()(v84);
      CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter(v55);
      v52 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v42);
    }
    v49 = v91;
    v56 = MEMORY[0x23B7DAFD0](v52);
    v57 = *(_QWORD *)(v56 + 16);
    if (v57)
    {
      v58 = v95;
      v59 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
      v88 = v56;
      v60 = v56 + v59;
      v61 = *(_QWORD *)(v94 + 72);
      v62 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
      do
      {
        v62(v11, v60, v58);
        CLP_LogEntry_PrivateData_WifiAccessPoint.init()((uint64_t)v8);
        ALWiFiScanSingleAccessPoint.toPb(pb:)();
        v63 = *v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v63 + 16) + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        v65 = *(_QWORD *)(v63 + 16);
        v64 = *(_QWORD *)(v63 + 24);
        if (v65 >= v64 >> 1)
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v63, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiAccessPoint>, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        *(_QWORD *)(v63 + 16) = v65 + 1;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v8, v63+ ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80))+ *(_QWORD *)(v93 + 72) * v65, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
        *v13 = v63;
        v58 = v95;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v11, v95);
        v60 += v61;
        --v57;
      }
      while (v57);
      swift_bridgeObjectRelease();
      v49 = v91;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    type metadata accessor for ALProtobufUtil();
    v66 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiScanResult and conformance CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiScanResult);
    ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v13, v81, v66);
    CLP_LogEntry_PrivateData_WifiNotification.scan.setter((uint64_t)v13);
    v48 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v89, v92);
  }
  v67 = MEMORY[0x23B7DB24C](v48);
  if ((v68 & 1) == 0)
  {
    v69 = v67;
    v70 = v83;
    CLP_LogEntry_PrivateData_WifiAssociationState.init()(v83);
    CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(1);
    v71 = v82;
    CLP_LogEntry_PrivateData_WifiAccessPoint.init()(v82);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(v71);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter(v71);
    CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(v69);
    CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(v71);
    CLP_LogEntry_PrivateData_WifiNotification.associatedState.setter(v70);
  }
  v72 = ALWiFiNotification._simulated.getter();
  if (v72 != 2)
    CLP_LogEntry_PrivateData_WifiNotification.simulated.setter(v72 & 1);
  v73 = ALWiFiNotification._available.getter();
  if (v73 != 2)
    CLP_LogEntry_PrivateData_WifiNotification.available.setter(v73 & 1);
  isAp = ALWiFiNotification._isApAwake.getter();
  if (isAp != 2)
    CLP_LogEntry_PrivateData_WifiNotification.isApAwake.setter(isAp & 1);
  type metadata accessor for ALProtobufUtil();
  v75 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v76 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WifiNotification and conformance CLP_LogEntry_PrivateData_WifiNotification, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WifiNotification);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v49, v75, v76);
}

uint64_t ALWiFiNotifications.init(pb:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  _QWORD v39[2];
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BYTE v45[40];

  v41 = a1;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ALWiFiNotification();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ALWiFiNotifications();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.init()();
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v19 = v41;
  v18(a2, v17, v14);
  if (CLP_LogEntry_AONLoc_Indication.hasType.getter()
    && (v44 = v10,
        v45[0] = CLP_LogEntry_AONLoc_Indication.type.getter(),
        v45[39] = 4,
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Indication.TypeEnum and conformance CLP_LogEntry_AONLoc_Indication.TypeEnum(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && CLP_LogEntry_AONLoc_Indication.hasWifiIndication.getter())
  {
    v20 = v13;
    v21 = v13;
    v22 = v19;
    CLP_LogEntry_AONLoc_Indication.wifiIndication.getter(v21);
    v23 = *(_QWORD *)v20;
    v24 = *(_QWORD *)(*(_QWORD *)v20 + 16);
    if (v24)
    {
      v39[1] = *(_QWORD *)v20;
      v40 = v20;
      v25 = v4;
      v26 = v23 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v42 = *(_QWORD *)(v25 + 72);
      v43 = v7;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions(v26, (uint64_t)v6, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
        v27 = v6;
        ALWiFiNotification.init(pb:)((uint64_t)v6);
        v28 = a2;
        v29 = (void (*)(_BYTE *, _QWORD))ALWiFiNotifications._results.modify();
        v31 = v30;
        v32 = *v30;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v31 = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1, v32, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiNotification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFD098]);
          *v31 = v32;
        }
        v35 = *(_QWORD *)(v32 + 16);
        v34 = *(_QWORD *)(v32 + 24);
        if (v35 >= v34 >> 1)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v32, &demangling cache variable for type metadata for _ContiguousArrayStorage<ALWiFiNotification>, (uint64_t (*)(_QWORD))MEMORY[0x24BDFD098]);
          *v31 = v32;
        }
        a2 = v28;
        *(_QWORD *)(v32 + 16) = v35 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v32+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v35, v44, v43);
        v29(v45, 0);
        v26 += v42;
        --v24;
        v6 = v27;
      }
      while (v24);
      swift_bridgeObjectRelease();
      v20 = v40;
      v22 = v41;
    }
    CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.getter();
    ALWiFiNotifications._isLastBatch.setter();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v22, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v36 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication;
    v37 = (uint64_t)v20;
  }
  else
  {
    v36 = type metadata accessor for CLP_LogEntry_AONLoc_Indication;
    v37 = v19;
  }
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, v36);
}

uint64_t ALWiFiNotifications.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v1;
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0);
  v37 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ALWiFiNotification();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v31 = (uint64_t)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (_QWORD *)((char *)v30 - v15);
  CLP_LogEntry_AONLoc_Indication.init()(a1);
  v33 = a1;
  CLP_LogEntry_AONLoc_Indication.type.setter(4);
  CLP_LogEntry_AONLoc_WiFiIndication.init()(v16);
  v32 = v3;
  v17 = ALWiFiNotifications.results.getter();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v30[0] = v17;
    v30[1] = v2;
    v19 = v17 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v20 = *(_QWORD *)(v9 + 72);
    v34 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v35 = v20;
    v36 = v9;
    do
    {
      v34(v11, v19, v8);
      ALWiFiNotification.toPb()((uint64_t)v7);
      v21 = *v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiNotification>, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      if (v23 >= v22 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1, v21, &demangling cache variable for type metadata for _ContiguousArrayStorage<CLP_LogEntry_PrivateData_WifiNotification>, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *(_QWORD *)(v21 + 16) = v23 + 1;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, v21+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v23, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification);
      *v16 = v21;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v8);
      v19 += v35;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  v24 = ALWiFiNotifications.isLastBatch.getter();
  CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(v24 & 1);
  v25 = v31;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, v31, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
  v26 = v33;
  CLP_LogEntry_AONLoc_Indication.wifiIndication.setter(v25);
  type metadata accessor for ALProtobufUtil();
  v27 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  v28 = lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
  ALFWiFiScanResultsRequester.query(options:callback:start:end:)(v26, v27, v28);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v16, type metadata accessor for CLP_LogEntry_AONLoc_WiFiIndication);
}

uint64_t ALWiFiNotifications.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ALBtAdvertisement.init(data:)(a1, a2, type metadata accessor for CLP_LogEntry_AONLoc_Indication, &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication, (void (*)(char *))ALWiFiNotifications.init(pb:), a3);
}

uint64_t ALWiFiNotifications.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v0;
  v3 = type metadata accessor for ALWiFiNotifications();
  v43 = *(char **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v42 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_AONLoc_Indication(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ALWiFiNotifications.toPb()((uint64_t)v11);
  if (!v1)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_Indication and conformance CLP_LogEntry_AONLoc_Indication, type metadata accessor for CLP_LogEntry_AONLoc_Indication, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_Indication);
    v12 = Message.serializedData(partial:)();
    v14 = v13;
    v15 = (uint64_t)v11;
    v16 = v6;
    v17 = v5;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v15, type metadata accessor for CLP_LogEntry_AONLoc_Indication);
    v40 = v16;
    corelog.getter((uint64_t)v8);
    v20 = v42;
    v19 = v43;
    (*((void (**)(char *, uint64_t, uint64_t))v43 + 2))(v42, v2, v3);
    outlined copy of Data._Representation(v12, v14);
    v21 = v3;
    v41 = v12;
    outlined copy of Data._Representation(v12, v14);
    v22 = v20;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc();
      v35 = v21;
      v27 = v26;
      v38 = swift_slowAlloc();
      v45 = v38;
      *(_DWORD *)v27 = 136446466;
      v37 = v25;
      v28 = ALWiFiNotifications.description.getter();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v45);
      v39 = v17;
      v36 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v43 + 1))(v22, v35);
      *(_WORD *)(v27 + 12) = 2082;
      v0 = v41;
      outlined copy of Data._Representation(v41, v14);
      v30 = Data.description.getter();
      v43 = v8;
      v32 = v31;
      outlined consume of Data._Representation(v0, v14);
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v0, v14);
      outlined consume of Data._Representation(v0, v14);
      v33 = v36;
      _os_log_impl(&dword_235928000, v36, (os_log_type_t)v37, "#WiFi,serializedData,notif,%{public}s,data,%{public}s", (uint8_t *)v27, 0x16u);
      v34 = v38;
      swift_arrayDestroy();
      MEMORY[0x23B7DBDA4](v34, -1, -1);
      MEMORY[0x23B7DBDA4](v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v19 + 1))(v22, v21);
      v0 = v41;
      outlined consume of Data._Representation(v41, v14);
      outlined consume of Data._Representation(v0, v14);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v8, v17);
    }
  }
  return v0;
}

uint64_t static ALWiFiNotifications.serializedIndications(results:isLastBatch:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for ALWiFiNotifications();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ALWiFiNotifications.init(_results:_isLastBatch:)();
  v4 = ALWiFiNotifications.serializedData()();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t specialized CLP_LogEntry_PrivateData_WifiNotificationType.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = type metadata accessor for ALWiFiNotification.NotiType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(a1, v2);
  if (v4 == *MEMORY[0x24BDFD058])
    return 0;
  if (v4 == *MEMORY[0x24BDFD060])
    return 1;
  if (v4 == *MEMORY[0x24BDFD050])
    return 2;
  if (v4 == *MEMORY[0x24BDFD078])
    return 3;
  if (v4 == *MEMORY[0x24BDFD048])
    return 4;
  if (v4 == *MEMORY[0x24BDFD070])
    return 5;
  if (v4 == *MEMORY[0x24BDFD018])
    return 6;
  if (v4 == *MEMORY[0x24BDFD008])
    return 7;
  if (v4 == *MEMORY[0x24BDFD040])
    return 8;
  if (v4 == *MEMORY[0x24BDFD028])
    return 9;
  if (v4 == *MEMORY[0x24BDFD020])
    return 10;
  if (v4 == *MEMORY[0x24BDFD030])
    return 11;
  if (v4 == *MEMORY[0x24BDFD038])
    return 12;
  if (v4 == *MEMORY[0x24BDFD068])
    return 13;
  if (v4 != *MEMORY[0x24BDFD010])
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    return 0;
  }
  return 14;
}

uint64_t ALTimeStamp.init(pb:)(uint64_t a1)
{
  ALTimeStamp.init()();
  if (CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter();
    ALTimeStamp._cfAbsoluteTimeSec.setter();
  }
  if (CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter();
    ALTimeStamp._machAbsoluteTimeSec.setter();
  }
  if (CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter())
  {
    CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter();
    ALTimeStamp._machContinuousTimeSec.setter();
  }
  return outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(a1);
}

uint64_t outlined destroy of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ALTimeStamp.toPb()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  char v6;

  CLP_LogEntry_PrivateData_TimeStamp.init()(a1);
  v1 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v2 & 1) == 0)
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(*(double *)&v1);
  v3 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v4 & 1) == 0)
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(*(double *)&v3);
  result = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v6 & 1) == 0)
    return CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(*(double *)&result);
  return result;
}

uint64_t ALTimeStamp.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v14 - v4;
  CLP_LogEntry_PrivateData_TimeStamp.init()((uint64_t)v3);
  v6 = ALTimeStamp.cfAbsoluteTimeSec.getter();
  if ((v7 & 1) == 0)
    CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(*(double *)&v6);
  v8 = ALTimeStamp.machAbsoluteTimeSec.getter();
  if ((v9 & 1) == 0)
    CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(*(double *)&v8);
  v10 = ALTimeStamp.machContinuousTimeSec.getter();
  if ((v11 & 1) == 0)
    CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(*(double *)&v10);
  outlined init with take of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v3, (uint64_t)v5);
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp();
  v12 = Message.serializedData(partial:)();
  outlined destroy of CLP_LogEntry_PrivateData_TimeStamp((uint64_t)v5);
  return v12;
}

uint64_t outlined init with take of CLP_LogEntry_PrivateData_TimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
  if (!lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp)
  {
    v1 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(255);
    result = MEMORY[0x23B7DBD20](&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp);
  }
  return result;
}

uint64_t static ALProtobufUtil.stringfyJson<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for Logger();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for JSONEncodingOptions();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONEncodingOptions.init()();
  v6 = Message.jsonUTF8Data(options:)();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static String.Encoding.utf8.getter();
  v9 = String.init(data:encoding:)();
  v11 = v10;
  outlined consume of Data._Representation(v6, v8);
  if (v11)
    return v9;
  else
    return 0x3E6C696E3CLL;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v21[40];

  v3 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t)&v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for JSONEncodingOptions();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ALXPCDataService(a1, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
  swift_dynamicCast();
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
  v13 = Message.jsonUTF8Data(options:)();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  else
  {
    v15 = v13;
    v16 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    static String.Encoding.utf8.getter();
    v5 = String.init(data:encoding:)();
    v18 = v17;
    outlined consume of Data._Representation(v15, v16);
    if (!v18)
      v5 = 0x3E6C696E3CLL;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v12, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return v5;
}

uint64_t static ALProtobufUtil.stringfyLogEntryJson(serializedData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v5 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v5);
  v32[1] = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for JSONEncodingOptions();
  v7 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v34 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for CLP_LogEntry_LogEntry(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_LogEntry and conformance CLP_LogEntry_LogEntry, type metadata accessor for CLP_LogEntry_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_LogEntry);
  Message.init(serializedData:extensions:partial:options:)();
  if (!v2)
  {
    v16 = v7;
    v17 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_235BB5D00;
    CLP_LogEntry_LogEntry.eventRecordTime.getter((uint64_t)v11);
    v19 = CLP_LogEntry_LogEntry.TimeStamp.machContinuousTimeS.getter();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_LogEntry.TimeStamp);
    v20 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v18 + 64) = v20;
    *(double *)(v18 + 32) = v19;
    v21 = CLP_LogEntry_LogEntry.hasPrivateDataCapture.getter();
    v22 = MEMORY[0x24BEE1360];
    *(_QWORD *)(v18 + 96) = MEMORY[0x24BEE1328];
    *(_QWORD *)(v18 + 104) = v22;
    *(_BYTE *)(v18 + 72) = v21;
    type metadata accessor for OS_os_log();
    v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    v24 = v34;
    JSONEncodingOptions.init()();
    v26 = Message.jsonUTF8Data(options:)();
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v17);
    static String.Encoding.utf8.getter();
    v29 = String.init(data:encoding:)();
    v31 = v30;
    outlined consume of Data._Representation(v26, v28);
    if (v31)
      a1 = v29;
    else
      a1 = 0x3E6C696E3CLL;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v15, type metadata accessor for CLP_LogEntry_LogEntry);
  }
  return a1;
}

uint64_t static ALProtobufUtil.serialized(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for Google_Protobuf_UInt32Value();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BA70];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B7DB450](v5);
  MEMORY[0x23B7DB444](a1);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Google_Protobuf_UInt32Value and conformance Google_Protobuf_UInt32Value, v3, MEMORY[0x24BE5BA60]);
  v8 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  return v8;
}

uint64_t static ALProtobufUtil.serialized(_:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Google_Protobuf_DoubleValue();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5B9F0];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x24BDAC7A8](v0);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x23B7DB42C](v3);
  Google_Protobuf_DoubleValue.value.setter();
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Google_Protobuf_DoubleValue and conformance Google_Protobuf_DoubleValue, v1, MEMORY[0x24BE5B9E0]);
  v6 = Message.serializedData(partial:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  return v6;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t type metadata accessor for ALProtobufUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for ALProtobufUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.getter(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry, (void (*)(void))Proto_Gpsd_LogEntry.init(), a1);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(a1, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(uint64_t a1)
{
  return type metadata accessor for CLP_LogEntry_AONLoc_Request(a1, (uint64_t *)&type metadata singleton initialization cache for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass);
}

void (*CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    Proto_Gpsd_LogEntry.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto_Gpsd_LogEntry);
  }
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify;
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(a1, a2, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, type metadata accessor for Proto_Gpsd_LogEntry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()()
{
  CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?, type metadata accessor for Proto_Gpsd_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (void (*)(void))CLP_LogEntry_AONLoc_LogEntry.init(), a1);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.getter@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  v15 = a3(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a5, a3);
  a4();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(a1, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v22 - v13;
  v15 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v16 = swift_allocObject();
    v17 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v17);
    *(_QWORD *)(v4 + v15) = v16;
    swift_release();
  }
  v18 = *(_QWORD *)(v4 + v15);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v14, a3);
  v19 = a3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 0, 1, v19);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v14, (uint64_t)v12, a2);
  v20 = v18 + *a4;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v12, v20, a2);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    CLP_LogEntry_AONLoc_LogEntry.init()((uint64_t)v9);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  }
  return CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify;
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.aonlocLogEntry.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

void CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.modify(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), _QWORD *a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v8 = *(void **)a1;
  v9 = *(void **)(*(_QWORD *)a1 + 40);
  v10 = *(void **)(*(_QWORD *)a1 + 48);
  v11 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, (uint64_t)v9, a4);
    CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter((uint64_t)v9, a3, a4, a5);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v10, a4);
  }
  else
  {
    CLP_LogEntry_PrivateData_PrivateDataCapture.gpsdLogEntry.setter((uint64_t)v10, a3, a4, a5);
  }
  free(v10);
  free(v9);
  free(v11);
  free(v8);
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasAonlocLogEntry.getter()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL CLP_LogEntry_PrivateData_PrivateDataCapture.hasGpsdLogEntry.getter(uint64_t *a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20))
      + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PrivateDataCapture.clearAonlocLogEntry()()
{
  CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, &OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.clearGpsdLogEntry()(uint64_t *a1, uint64_t (*a2)(_QWORD), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v12);
    *(_QWORD *)(v3 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v3 + v10);
  v14 = a2(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
  v15 = v13 + *a3;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v9, v15, a1);
  swift_endAccess();
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_PrivateDataCapture._storage()
{
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  return swift_retain();
}

void *CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PrivateDataCapture.protoMessageName.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static CLP_LogEntry_PrivateData_PrivateDataCapture._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1
     + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  v10 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  v12 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v13, (uint64_t)v8, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v8, v9, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  swift_endAccess();
  v14 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  swift_release();
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v5, v11, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t *v8;
  uint64_t (*v9)(uint64_t);
  void *v10;

  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.init(copying:)(v4);
    *(_QWORD *)(v0 + v2) = v3;
    swift_release();
  }
  swift_retain();
  v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if ((v6 & 1) != 0)
        return swift_release();
      if (v5 == 1018)
        break;
      if (v5 == 1004)
      {
        swift_beginAccess();
        type metadata accessor for Proto_Gpsd_LogEntry(0);
        v8 = (unint64_t *)&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry;
        v9 = type metadata accessor for Proto_Gpsd_LogEntry;
        v10 = &protocol conformance descriptor for Proto_Gpsd_LogEntry;
        goto LABEL_7;
      }
LABEL_8:
      v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    swift_beginAccess();
    type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
    v8 = &lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry;
    v9 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry;
    v10 = &protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry;
LABEL_7:
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v8, v9, (uint64_t)v10);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    swift_endAccess();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20));
  v9 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(v9, a1, a2, a3);
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(v8, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for Proto_Gpsd_LogEntry);
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  v47 = type metadata accessor for CLP_LogEntry_AONLoc_LogEntry(0);
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v41 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_LogEntry?, CLP_LogEntry_AONLoc_LogEntry?));
  MEMORY[0x24BDAC7A8](v44);
  v48 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v42 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (uint64_t)&v41 - v8;
  v9 = type metadata accessor for Proto_Gpsd_LogEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v43 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Proto_Gpsd_LogEntry?, Proto_Gpsd_LogEntry?));
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v41 - v19;
  v21 = a1
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v21, (uint64_t)v20, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  v22 = v49;
  v23 = v49
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__gpsdLogEntry;
  swift_beginAccess();
  v24 = (uint64_t)&v14[*(int *)(v12 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, (uint64_t)v14, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v23, v24, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v25((uint64_t)v14, 1, v9) != 1)
  {
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
    if (v25(v24, 1, v9) != 1)
    {
      v27 = v24;
      v28 = v43;
      outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v27, v43, type metadata accessor for Proto_Gpsd_LogEntry);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type Proto_Gpsd_LogEntry and conformance Proto_Gpsd_LogEntry, type metadata accessor for Proto_Gpsd_LogEntry, (uint64_t)&protocol conformance descriptor for Proto_Gpsd_LogEntry);
      swift_retain();
      swift_retain();
      v26 = a1;
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v28, type metadata accessor for Proto_Gpsd_LogEntry);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
      if ((v29 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v18, type metadata accessor for Proto_Gpsd_LogEntry);
LABEL_6:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for (Proto_Gpsd_LogEntry?, Proto_Gpsd_LogEntry?));
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v20, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
  v26 = a1;
  if (v25(v24, 1, v9) != 1)
    goto LABEL_6;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v14, &demangling cache variable for type metadata for Proto_Gpsd_LogEntry?);
LABEL_9:
  v30 = v26
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  v31 = v46;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v30, v46, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  v32 = v22
      + OBJC_IVAR____TtCV10ALProtobuf43CLP_LogEntry_PrivateData_PrivateDataCaptureP33_EAF2BEFD088097B94979D70F24702EAF13_StorageClass__aonlocLogEntry;
  swift_beginAccess();
  v33 = v48;
  v34 = v48 + *(int *)(v44 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, v48, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v32, v34, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v36 = v47;
  if (v35(v33, 1, v47) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
    if (v35(v34, 1, v36) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
      return 1;
    }
    goto LABEL_14;
  }
  v37 = v42;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, v42, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  if (v35(v34, 1, v36) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
LABEL_14:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for (CLP_LogEntry_AONLoc_LogEntry?, CLP_LogEntry_AONLoc_LogEntry?));
    return 0;
  }
  v39 = v41;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v34, v41, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_AONLoc_LogEntry and conformance CLP_LogEntry_AONLoc_LogEntry, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_AONLoc_LogEntry);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v39, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v31, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v37, type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v33, &demangling cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?);
  return (v40 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_PrivateDataCapture.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_PrivateDataCapture@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_PrivateDataCapture.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
  return Message.hash(into:)();
}

uint64_t specialized static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(),
        swift_retain(),
        v14 = closure #1 in static CLP_LogEntry_PrivateData_PrivateDataCapture.== infix(_:_:)(v12, v13),
        swift_release(),
        swift_release(),
        v14))
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = dispatch thunk of static Equatable.== infix(_:_:)();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t base witness table accessor for Message in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t base witness table accessor for Hashable in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t base witness table accessor for Equatable in CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PrivateDataCapture and conformance CLP_LogEntry_PrivateData_PrivateDataCapture, type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PrivateDataCapture);
}

uint64_t getEnumTagSinglePayload for CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B7F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CLP_LogEntry_PrivateData_PrivateDataCapture()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2359B7FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t ObjC metadata update function for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass()
{
  return type metadata accessor for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass(0);
}

void type metadata completion function for CLP_LogEntry_PrivateData_PrivateDataCapture._StorageClass()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for Proto_Gpsd_LogEntry?, (void (*)(uint64_t))type metadata accessor for Proto_Gpsd_LogEntry);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CLP_LogEntry_AONLoc_Request.ResultOptions?(319, &lazy cache variable for type metadata for CLP_LogEntry_AONLoc_LogEntry?, (void (*)(uint64_t))type metadata accessor for CLP_LogEntry_AONLoc_LogEntry);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_LocationType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_LocationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ClientSatelliteConstellation.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_BatchedLocationFixType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatchedLocationFixType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_GnssModeOfOperation.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssModeOfOperation.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchMode and conformance CLP_LogEntry_PrivateData_BatchMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_BatchMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatchMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatchMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_OperatingMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_OperatingMode and conformance CLP_LogEntry_PrivateData_OperatingMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_OperatingMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_OperatingMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_OperatingMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_OperatingMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PipelineOperatingMode and conformance CLP_LogEntry_PrivateData_PipelineOperatingMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_PipelineOperatingMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PipelineOperatingMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode;
}

uint64_t CLP_LogEntry_PrivateData_DominantMotionModeType.rawValue.getter(char a1)
{
  return qword_235BCBD70[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(char *a1, char *a2)
{
  return qword_235BCBD70[*a1] == qword_235BCBD70[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType()
{
  char *v0;

  return qword_235BCBD70[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DominantMotionModeType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BCBD70[*v1];
}

void *static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DominantMotionModeType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityType.rawValue.getter(char a1)
{
  return qword_235BCBFB0[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_ReachabilityType(char *a1, char *a2)
{
  return qword_235BCBFB0[*a1] == qword_235BCBFB0[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ReachabilityType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ReachabilityType and conformance CLP_LogEntry_PrivateData_ReachabilityType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType()
{
  char *v0;

  return qword_235BCBFB0[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_ReachabilityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BCBFB0[*v1];
}

void *static CLP_LogEntry_PrivateData_ReachabilityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_ReachabilityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatteryChargerType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatteryChargerType and conformance CLP_LogEntry_PrivateData_BatteryChargerType();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_BatteryChargerType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BatteryChargerType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel and conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel and conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SensorFusionMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SensorFusionMode and conformance CLP_LogEntry_PrivateData_SensorFusionMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_SensorFusionMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SensorFusionMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiAccessPointMode and conformance CLP_LogEntry_PrivateData_WifiAccessPointMode();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_WifiAccessPointMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiAccessPointMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiRfBand()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiRfBand and conformance CLP_LogEntry_PrivateData_WifiRfBand();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_WifiRfBand.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiRfBand.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiScanType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiScanType and conformance CLP_LogEntry_PrivateData_WifiScanType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WifiScanType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void *static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiScanType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiScanType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WifiNotificationType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WifiNotificationType and conformance CLP_LogEntry_PrivateData_WifiNotificationType();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WifiNotificationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WifiNotificationType.allCases.getter;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationServicesEnabled and conformance CLP_LogEntry_PrivateData_LocationServicesEnabled();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_LocationServicesEnabled.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_LocationServicesEnabled.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DataAvailability()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DataAvailability and conformance CLP_LogEntry_PrivateData_DataAvailability();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_DataAvailability.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DataAvailability.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DataAvailability(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DataAvailability;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorType and conformance CLP_LogEntry_PrivateData_IndoorOutdoorType();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_IndoorOutdoorType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IndoorOutdoorType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_IndoorOutdoorConfidence and conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence();
  return Enum.hash(into:)();
}

void *static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence;
}

double CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.cfAbsoluteTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasCfAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearCfAbsoluteTimeS()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.machAbsoluteTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachAbsoluteTimeS.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearMachAbsoluteTimeS()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TimeStamp.machContinuousTimeS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TimeStamp.hasMachContinuousTimeS.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TimeStamp.clearMachContinuousTimeS()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

int *CLP_LogEntry_PrivateData_TimeStamp.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

void CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float CLP_LogEntry_PrivateData_AccelSample.xMps2.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.xMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.xMps2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasXMps2.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearXMps2()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float CLP_LogEntry_PrivateData_AccelSample.yMps2.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.yMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.yMps2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasYMps2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearYMps2()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

float CLP_LogEntry_PrivateData_AccelSample.zMps2.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.zMps2.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelSample.zMps2.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelSample.hasZMps2.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelSample.clearZMps2()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_AccelSample._applicableTime@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Accel.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Accel(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Accel.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Accel.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Accel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t (*CLP_LogEntry_PrivateData_Accel.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Accel.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Accel, a1);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GyroSample.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float CLP_LogEntry_PrivateData_GyroSample.xRadps.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.xRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.xRadps.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasXRadps.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearXRadps()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float CLP_LogEntry_PrivateData_GyroSample.yRadps.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.yRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.yRadps.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasYRadps.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearYRadps()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

float CLP_LogEntry_PrivateData_GyroSample.zRadps.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.zRadps.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GyroSample.zRadps.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GyroSample.hasZRadps.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GyroSample.clearZRadps()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v4 = (int *)a1(0);
  v5 = a2 + v4[5];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a2 + v4[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v4[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + v4[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Gyro.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Gyro.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Gyro.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t (*CLP_LogEntry_PrivateData_Gyro.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  v3 = a1(0);
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(v3 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_BaroSample.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float CLP_LogEntry_PrivateData_BaroSample.pressure.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.pressure.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BaroSample.pressure.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasPressure.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearPressure()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

float CLP_LogEntry_PrivateData_BaroSample.temperature.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.temperature.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BaroSample.temperature.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BaroSample.hasTemperature.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BaroSample.clearTemperature()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + v2[7];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Baro.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Baro.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Baro(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Baro.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Baro.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Baro, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Baro.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t (*CLP_LogEntry_PrivateData_Baro.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Baro.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Baro, a1);
}

double CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientLocationCoordinate.latitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientLocationCoordinate.hasLatitude.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientLocationCoordinate.clearLatitude()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

double CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientLocationCoordinate.longitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientLocationCoordinate.hasLongitude.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientLocationCoordinate.clearLongitude()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.suitability.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 16) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.suitability.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.suitability.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSuitability.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 16) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSuitability()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 16) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.coordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocation.coordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocation.altitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.altitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    a3(v13);
    swift_release();
    *(_QWORD *)(v9 + v11) = v12;
    swift_release();
  }
  v14 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess();
  *(double *)v14 = a5;
  *(_BYTE *)(v14 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.altitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

void CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 88);
    v13 = *(_QWORD *)(v9 + 80);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    swift_release();
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(_QWORD *)v16 = v10;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    a3(v11);
    swift_release();
    *(_QWORD *)(v8 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess();
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.verticalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearVerticalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocation.speed.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.speed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.speed.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.speed.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSpeed.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSpeed()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed);
}

double CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.speedAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSpeedAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSpeedAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocation.course.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.course.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.course.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.course.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.course.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCourse.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCourse()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course);
}

double CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.courseAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearCourseAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocation.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.timestamp.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasConfidence.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence);
}

double CLP_LogEntry_PrivateData_DaemonLocation.lifespan.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.lifespan.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.lifespan.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasLifespan.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearLifespan()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v1 == 14)
    return 0;
  else
    return *v1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 14)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.type.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.type.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasType.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  return *v1 != 14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  *v5 = 14;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocation.rawCoordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawCourse.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawCourse.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawCourse()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.floor.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (v3[4])
    return 0;
  else
    return *(unsigned int *)v3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.floor.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(int a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    a4(v13);
    swift_release();
    *(_QWORD *)(v9 + v11) = v12;
    swift_release();
  }
  v14 = *(_QWORD *)(v9 + v11) + *a5;
  result = swift_beginAccess();
  *(_DWORD *)v14 = a1;
  *(_BYTE *)(v14 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.floor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.floor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.floor.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

void CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  int v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 84);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    swift_release();
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 84)) + *a5;
  swift_beginAccess();
  *(_DWORD *)v16 = v10;
  *(_BYTE *)(v16 + 4) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFloor.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearFloor()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = v4;
  v9 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    a3(v11);
    swift_release();
    *(_QWORD *)(v8 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v8 + v9) + *a4;
  result = swift_beginAccess();
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.integrity.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.integrity.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.type.setter(char a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    a4(v13);
    swift_release();
    *(_QWORD *)(v9 + v11) = v12;
    swift_release();
  }
  v14 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess();
  *v14 = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.integrity.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

void CLP_LogEntry_PrivateData_DaemonLocation.type.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 80);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    swift_release();
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasIntegrity.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearIntegrity()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  *v5 = 5;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearReferenceFrame()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  *v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 3)
    return 0;
  else
    return *v3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.rawReferenceFrame.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasRawReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearRawReferenceFrame()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  *v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearSignalEnvironmentType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  *v5 = 8;
}

double CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.ellipsoidalAltitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasEllipsoidalAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearEllipsoidalAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

void (*CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocation.clearFromSimulationController()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.rawValue.getter(char a1)
{
  return qword_235BCBD28[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(char *a1, char *a2)
{
  return qword_235BCBD28[*a1] == qword_235BCBD28[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType()
{
  char *v0;

  return qword_235BCBD28[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BCBD28[*v1];
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.rawValue.getter(char a1)
{
  return qword_235BCBD48[a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(char *a1, char *a2)
{
  return qword_235BCBD48[*a1] == qword_235BCBD48[*a2];
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType()
{
  char *v0;

  return qword_235BCBD48[*v0];
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_235BCBD48[*v1];
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DaemonLocation._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType;
}

double CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourse.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasRawUnmodifiedCourse.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearRawUnmodifiedCourse()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

double CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.rawUnmodifiedCourseUnc.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasRawUnmodifiedCourseUnc.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearRawUnmodifiedCourseUnc()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isStatic.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.isStatic.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasIsStatic.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearIsStatic()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.isMounted.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatcherData.isMounted.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatcherData.hasIsMounted.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatcherData.clearIsMounted()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_MapMatcherData.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_PressureSample.value.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.value.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PressureSample.value.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PressureSample.hasValue.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PressureSample.clearValue()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

double CLP_LogEntry_PrivateData_PressureSample.std.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.std.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_PressureSample.std.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_PressureSample.hasStd.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PressureSample.clearStd()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = a1(0);
  v5 = a2 + *(int *)(result + 20);
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + *(int *)(result + 24);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.constellation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasConstellation.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearConstellation()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 20)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.satID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasSatID.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearSatID()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.elevationDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasElevationDeg.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearElevationDeg()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.azimuthDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasAzimuthDeg.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearAzimuthDeg()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.l1Cn0.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL1Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL1Cn0()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasL5Cn0.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearL5Cn0()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasIsTracked.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearIsTracked()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t (*CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ClientSatelliteInfo.hasIsPhaseTracked.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ClientSatelliteInfo.clearIsPhaseTracked()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0) + 48)) = 2;
}

int *CLP_LogEntry_PrivateData_ClientSatelliteInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  *(_BYTE *)(a1 + result[5]) = 7;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_ClientSatelliteInfo._constellation()
{
  return 7;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearOdometer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(_BYTE *)(v7 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 32) = v4;
  *(_BYTE *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearDeltaDistance()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 48) = a1;
  *(_BYTE *)(v7 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 48) = v4;
  *(_BYTE *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearDeltaDistanceAccuracy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 56) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 64) = a1;
  *(_BYTE *)(v7 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 64) = v4;
  *(_BYTE *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearTimestampGps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 72) = 1;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 80) = a1;
  *(_BYTE *)(v7 + 88) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.machTime.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 80) = v4;
  *(_BYTE *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMachTime.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMachTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 80) = 0;
  *(_BYTE *)(v5 + 88) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(_BYTE *)(v7 + 96) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(_BYTE *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMaj()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(_BYTE *)(v5 + 96) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(_BYTE *)(v7 + 104) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(_BYTE *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMin()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(_BYTE *)(v5 + 104) = 1;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(_BYTE *)(v7 + 112) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(_BYTE *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearHorzUncSemiMajAz()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(_BYTE *)(v5 + 112) = 1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 113) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 113) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 113) & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isFitnessMatch.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 113) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsFitnessMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 113) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsFitnessMatch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 113) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 114) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 114);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 114) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 114);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchQuality.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v9);
    swift_release();
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 114);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchQuality.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 114) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchQuality()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 114) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCoordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchCourse.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchCourse.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchCourse()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchFormOfWay.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchFormOfWay.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchFormOfWay()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchRoadClass.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchRoadClass.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchRoadClass()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 & 1;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(char a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;

  v9 = v5;
  v11 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    a4(v13);
    swift_release();
    *(_QWORD *)(v9 + v11) = v12;
    swift_release();
  }
  v14 = (_BYTE *)(*(_QWORD *)(v9 + v11) + *a5);
  result = swift_beginAccess();
  *v14 = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.matchShifted.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

void CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 80);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    swift_release();
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMatchShifted.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMatchShifted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.pressure.setter, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPressure.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPressure()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearUndulationModel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
  swift_beginAccess();
  *v5 = 4;
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(float a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulation.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearUndulation()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialCoordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSpecialCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSpecialCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.specialHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSpecialHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSpecialHorizontalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.machContinuousTime.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMachContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMachContinuousTime()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.originDevice.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOriginDevice.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearOriginDevice()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
  swift_beginAccess();
  *v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isMatcherPropagatedCoordinates.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsMatcherPropagatedCoordinates.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsMatcherPropagatedCoordinates()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherData.setter, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMapMatcherData.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMapMatcherData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.slope.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSlope.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSlope()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.maxAbsSlope.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMaxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMaxAbsSlope()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGroundAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGroundAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.groundAltitudeUncertainty.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGroundAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGroundAltitudeUncertainty()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSmoothedGpsAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSmoothedGpsAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.smoothedGpsAltitudeUncertainty.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasSmoothedGpsAltitudeUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearSmoothedGpsAltitudeUncertainty()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isSimulatedOrSpoofed.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsSimulatedOrSpoofed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsSimulatedOrSpoofed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
  swift_beginAccess();
  *v5 = 2;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawHorizontalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawCourseAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawCourseAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFused.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsCoordinateFused.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsCoordinateFused()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCoordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedHorizontalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedHorizontalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedHorizontalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedReferenceFrame.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedReferenceFrame()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
  swift_beginAccess();
  *v5 = 3;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourse.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCourse.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCourse()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedCourseAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedCourseAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedCourseAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedWorstCaseError.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedWorstCaseError.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedWorstCaseError()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingAltitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPreFusingAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPreFusingAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.preFusingVerticalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasPreFusingVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearPreFusingVerticalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isCoordinateFusedWithVl.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsCoordinateFusedWithVl.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsCoordinateFusedWithVl()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
  swift_beginAccess();
  *v5 = 2;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedAltitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedAltitude.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedAltitude()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.fusedVerticalAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasFusedVerticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearFusedVerticalAccuracy()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.getter()
{
  type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v2 + v4) = v5;
    swift_release();
  }
  v7 = (_QWORD *)(*(_QWORD *)(v2 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  *v7 = a1;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = (_QWORD *)(*(_QWORD *)(v1 + v4)
                + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
  swift_beginAccess();
  v3[9] = *v5;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.satelliteVisibilityReport.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      v6 = swift_allocObject();
      v7 = swift_retain();
      specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
      swift_release();
      *(_QWORD *)(v5 + v4) = v6;
      swift_release();
    }
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                  + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *v8 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v9 = *(int *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 80);
      type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
      v11 = swift_allocObject();
      v12 = swift_retain();
      specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
      swift_release();
      *(_QWORD *)(v10 + v9) = v11;
      swift_release();
    }
    v13 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88))
                   + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
    swift_beginAccess();
    *v13 = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.gnssContent.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasGnssContent.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearGnssContent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
  swift_beginAccess();
  *v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
}

int *CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v9[v6[8]] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  }
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DaemonLocationPrivate.rawAltitude.setter, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasRawAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearRawAltitude()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextState.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
  swift_beginAccess();
  *v5 = 3;
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityIndoor.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextStateProbabilityIndoor.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextStateProbabilityIndoor()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor, a1);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.estimatedPositionContextStateProbabilityOutdoor.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasEstimatedPositionContextStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearEstimatedPositionContextStateProbabilityOutdoor()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulationModel.getter(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 4)
    return 0;
  else
    return *v2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.mapMatcherType.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasMapMatcherType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(&OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasUndulationModel.getter(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearMapMatcherType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
  swift_beginAccess();
  *v5 = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isRouteHintsTriggeredMapMatching.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsRouteHintsTriggeredMapMatching.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsRouteHintsTriggeredMapMatching()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.loiLocationSourceAccuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasLoiLocationSourceAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearLoiLocationSourceAccuracy()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
  swift_beginAccess();
  *v5 = 3;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.multipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 5)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.batchedLocationFixType.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasBatchedLocationFixType.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasMultipathIndicator.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearBatchedLocationFixType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
  swift_beginAccess();
  *v5 = 5;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

void (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify;
}

void CLP_LogEntry_PrivateData_DaemonLocationPrivate.isWifiFixWithAssociatedAp.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasIsWifiFixWithAssociatedAp.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.clearIsWifiFixWithAssociatedAp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.rawValue.getter(unsigned __int8 a1)
{
  return a1 - 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType()
{
  unsigned __int8 *v0;

  return *v0 - 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 - 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
  return Enum.hash(into:)();
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.altitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasAltitude.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearAltitude()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.verticalAccuracy.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasVerticalAccuracy.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearVerticalAccuracy()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasUndulation.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearUndulation()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.type.modify;
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hasUndulationModel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0)
                           + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.clearUndulationModel()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DaemonLocationPrivate._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType;
}

void *static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.locationType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20));
  if (v1 == 14)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.locationType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TechnologyStatus.locationType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 14)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TechnologyStatus.hasLocationType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) != 14;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TechnologyStatus.clearLocationType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 20)) = 14;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.active.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t (*CLP_LogEntry_PrivateData_TechnologyStatus.active.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TechnologyStatus.hasActive.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TechnologyStatus.clearActive()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, 14, 2, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TechnologyStatus._locationType()
{
  return 14;
}

double CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.timestamp.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double CLP_LogEntry_PrivateData_VehicleSpeed.speed.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.speed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasSpeed.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearSpeed()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.machContinuousTime.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasMachContinuousTime.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearMachContinuousTime()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

double CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleSpeed.machAbsoluteTime.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleSpeed.hasMachAbsoluteTime.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleSpeed.clearMachAbsoluteTime()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

int *CLP_LogEntry_PrivateData_VehicleSpeed.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.init()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

double CLP_LogEntry_PrivateData_VehicleHeading.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleHeading.timestamp.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleHeading.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleHeading.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

double CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_VehicleHeading.trueHeading.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_VehicleHeading.hasTrueHeading.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_VehicleHeading.clearTrueHeading()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

double CLP_LogEntry_PrivateData_XtraFileAvailable.when.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.when.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_XtraFileAvailable.when.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhen.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhen()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t (*CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()()
{
  CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v3 = a1 + *(int *)(result + 20);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(a1 + *(int *)(result + 24));
  *v4 = 0;
  v4[1] = 0;
  return result;
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.timestamp.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.speed.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasSpeed.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearSpeed()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

double CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_LocationDerivedSpeed.uncertainty.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_LocationDerivedSpeed.hasUncertainty.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_LocationDerivedSpeed.clearUncertainty()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

int *CLP_LogEntry_PrivateData_LocationDerivedSpeed.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_Location.eventReceiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.eventReceiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_Location.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearEventReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_Location.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_Location.client.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_Location.client.modify;
}

void CLP_LogEntry_PrivateData_Location.client.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL CLP_LogEntry_PrivateData_Location.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearClient()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_Location.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
}

uint64_t CLP_LogEntry_PrivateData_Location.location.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.location.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  }
  return CLP_LogEntry_PrivateData_Location.location.modify;
}

void CLP_LogEntry_PrivateData_Location.location.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.location.setter, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocation.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.locationPrivate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
}

uint64_t CLP_LogEntry_PrivateData_Location.locationPrivate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.locationPrivate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  }
  return CLP_LogEntry_PrivateData_Location.locationPrivate.modify;
}

void CLP_LogEntry_PrivateData_Location.locationPrivate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.locationPrivate.setter, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocationPrivate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocationPrivate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 14;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
}

uint64_t CLP_LogEntry_PrivateData_Location.status.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.status.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 14;
    v9[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  }
  return CLP_LogEntry_PrivateData_Location.status.modify;
}

void CLP_LogEntry_PrivateData_Location.status.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.status.setter, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

BOOL CLP_LogEntry_PrivateData_Location.hasStatus.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearStatus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.active.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

uint64_t CLP_LogEntry_PrivateData_Location.active.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

void (*CLP_LogEntry_PrivateData_Location.active.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_Location.active.modify;
}

void CLP_LogEntry_PrivateData_Location.active.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.active.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

BOOL CLP_LogEntry_PrivateData_Location.hasActive.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearActive()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  *v4 = 2;
}

double CLP_LogEntry_PrivateData_Location.odometer.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t CLP_LogEntry_PrivateData_Location.odometer.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer, a1);
}

void (*CLP_LogEntry_PrivateData_Location.odometer.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_Location.odometer.modify;
}

void CLP_LogEntry_PrivateData_Location.odometer.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

BOOL CLP_LogEntry_PrivateData_Location.hasOdometer.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearOdometer()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
}

uint64_t CLP_LogEntry_PrivateData_Location.signalQuality.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

uint64_t CLP_LogEntry_PrivateData_Location.signalQuality.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

void (*CLP_LogEntry_PrivateData_Location.signalQuality.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Location.signalQuality.modify;
}

void CLP_LogEntry_PrivateData_Location.signalQuality.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

BOOL CLP_LogEntry_PrivateData_Location.hasSignalQuality.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearSignalQuality()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  *v4 = 3;
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleSpeed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  }
  return CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify;
}

void CLP_LogEntry_PrivateData_Location.vehicleSpeed.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.vehicleSpeed.setter, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

BOOL CLP_LogEntry_PrivateData_Location.hasVehicleSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearVehicleSpeed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleHeading.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleHeading.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.vehicleHeading.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  }
  return CLP_LogEntry_PrivateData_Location.vehicleHeading.modify;
}

void CLP_LogEntry_PrivateData_Location.vehicleHeading.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.vehicleHeading.setter, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

BOOL CLP_LogEntry_PrivateData_Location.hasVehicleHeading.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearVehicleHeading()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.xtraFileAvailable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = (_QWORD *)(a1 + *(int *)(v7 + 24));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
}

uint64_t CLP_LogEntry_PrivateData_Location.xtraFileAvailable.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  }
  return CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify;
}

void CLP_LogEntry_PrivateData_Location.xtraFileAvailable.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.xtraFileAvailable.setter, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

BOOL CLP_LogEntry_PrivateData_Location.hasXtraFileAvailable.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearXtraFileAvailable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.motionDetected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

uint64_t CLP_LogEntry_PrivateData_Location.motionDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Location, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

void (*CLP_LogEntry_PrivateData_Location.motionDetected.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_Location.motionDetected.modify;
}

void CLP_LogEntry_PrivateData_Location.motionDetected.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

BOOL CLP_LogEntry_PrivateData_Location.hasMotionDetected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearMotionDetected()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  *v4 = 3;
}

uint64_t CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  }
  return CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify;
}

void CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_Location.locationDerivedSpeed.setter, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

BOOL CLP_LogEntry_PrivateData_Location.hasLocationDerivedSpeed.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?, type metadata accessor for CLP_LogEntry_PrivateData_Location, &OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Location.clearLocationDerivedSpeed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_Location.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_Location, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Location._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_Location.SignalQualityType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Location.SignalQualityType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType;
}

void *static CLP_LogEntry_PrivateData_Location.MotionDetectedType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_Location.MotionDetectedType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t (*CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
  return UnknownStorage.init()();
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasGnssModeOfOperation.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearGnssModeOfOperation()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 20)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.activeGnssSession.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasActiveGnssSession.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearActiveGnssSession()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0)
                                   + 28));
  if (v1 == 5)
    return 1;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.rhythmicMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 1;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasRhythmicMode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearRhythmicMode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 28)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasCurrentModesOfOperation.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearCurrentModesOfOperation()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasSubscribedRhythmicClient_p.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hasHasSubscribedRhythmicClient_p.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.clearHasSubscribedRhythmicClient_p()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0) + 36)) = 2;
}

int *CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  *(_BYTE *)(a1 + result[5]) = 3;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 5;
  v3 = a1 + result[8];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *(_BYTE *)(a1 + result[9]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t (*CLP_LogEntry_PrivateData_RhythmicStreamingControl.allowStreaming.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_RhythmicStreamingControl.hasAllowStreaming.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RhythmicStreamingControl.clearAllowStreaming()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  *(_BYTE *)(a1 + *(int *)(result + 20)) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.type.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 16) == 72)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 16);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.type.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 16) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 72)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.type.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.type.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 16);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 16) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 16) = 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.confidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 17) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 17);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.confidence.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 17) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.confidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.confidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.confidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 17);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 17) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearConfidence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 17) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 18) == 3)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 18);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedState.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 18) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 18);
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.mountedState.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 18);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasMountedState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 18) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearMountedState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 18) = 3;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 19) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 19);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 19) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 19);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.mountedConfidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 19);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasMountedConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 19) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearMountedConfidence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 19) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isStanding.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 20) & 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isStanding.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 20) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 20) & 1;
  return CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.isStanding.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 20) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasIsStanding.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 20) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearIsStanding()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 20) = 2;
}

float CLP_LogEntry_PrivateData_MotionActivity.tilt.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 24);
  if (*(_BYTE *)(v1 + 28))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.tilt.setter(float a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(float *)(v6 + 24) = a1;
  *(_BYTE *)(v6 + 28) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.tilt.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 24);
  if (*(_BYTE *)(v5 + 28))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.tilt.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.tilt.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 24) = v4;
  *(_BYTE *)(v10 + 28) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTilt.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 28) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTilt()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_DWORD *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 28) = 1;
}

double CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(double *)(v2 + 32);
  if (*(_BYTE *)(v2 + 40))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 32) = a1;
  *(_BYTE *)(v6 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.timestampDeprecated.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 32) = v4;
  *(_BYTE *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTimestampDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 40) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTimestampDeprecated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 40) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 41) & 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 41) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 41) & 1;
  return CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.isVehicleConnected.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 41) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasIsVehicleConnected.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 41) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearIsVehicleConnected()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 41) = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.exitState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 42) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 42);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.exitState.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 42) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.exitState.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 42);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.exitState.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.exitState.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 42);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasExitState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 42) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearExitState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 42) = 4;
}

double CLP_LogEntry_PrivateData_MotionActivity.estExitTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistanceAccuracy.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(double *)(v2 + 48);
  if (*(_BYTE *)(v2 + 56))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.estExitTime.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 48) = a1;
  *(_BYTE *)(v6 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.estExitTime.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 48) = v4;
  *(_BYTE *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasEstExitTime.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistanceAccuracy.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 56) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearEstExitTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 1;
}

double CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.timestampGps.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(double *)(v2 + 64);
  if (*(_BYTE *)(v2 + 72))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v6 + 64) = a1;
  *(_BYTE *)(v6 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.startTimeDeprecated.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 64) = v4;
  *(_BYTE *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasStartTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasTimestampGps.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 72) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearStartTimeDeprecated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 72) = 1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 73) == 72)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 73);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawType.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 73) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.rawType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 73);
  if (v6 == 72)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.rawType.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.rawType.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 73);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasRawType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 73) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearRawType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 73) = 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 74) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 74);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v1 + v3) = v4;
    swift_release();
  }
  v6 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(_BYTE *)(v6 + 74) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 74);
  if (v6 == 4)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.rawConfidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v8 = swift_allocObject();
    v9 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v9);
    *(_QWORD *)(v7 + v6) = v8;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 74);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasRawConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 74) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearRawConfidence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_BYTE *)(v4 + 74) = 4;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.timestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.timestamp.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionActivity.timestamp.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearTimestamp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.startTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionActivity.startTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionActivity.startTime.modify;
}

void CLP_LogEntry_PrivateData_MotionActivity.startTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionActivity.startTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MotionActivity.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionActivity.clearStartTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionActivity._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType;
}

void *static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType;
}

void *static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType;
}

uint64_t CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MotionState.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionState.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.activity.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

void (*CLP_LogEntry_PrivateData_MotionState.activity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  }
  return CLP_LogEntry_PrivateData_MotionState.activity.modify;
}

void CLP_LogEntry_PrivateData_MotionState.activity.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

BOOL CLP_LogEntry_PrivateData_MotionState.hasActivity.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionState.clearActivity()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionState._activity@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20));
  if (v1 == 72)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.activityType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasActivityType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearActivityType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 20)) = 72;
}

double CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.startTimeDeprecated.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasStartTimeDeprecated.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearStartTimeDeprecated()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearStartTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32));
  if (v1 == 72)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutUpdate.predictedWorkoutType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 72)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutUpdate.hasPredictedWorkoutType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) != 72;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutUpdate.clearPredictedWorkoutType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0) + 32)) = 72;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  *(_BYTE *)(a1 + v2[5]) = 72;
  v3 = a1 + v2[6];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_BYTE *)(a1 + v2[8]) = 72;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutUpdate._activityType()
{
  return 72;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MotionStateObserver.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionStateObserver.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 72;
  v8 = a1 + v7[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[7];
  v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(a1 + v7[8]) = 72;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

void (*CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 72;
    v11 = &v9[v6[6]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[7]];
    v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v9[v6[8]] = 72;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  }
  return CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify;
}

void CLP_LogEntry_PrivateData_MotionStateObserver.workoutUpdate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

BOOL CLP_LogEntry_PrivateData_MotionStateObserver.hasWorkoutUpdate.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateObserver.clearWorkoutUpdate()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutUpdate?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateObserver.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateObserver, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v6 = (int *)a1(0);
  v7 = a3 + v6[5];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a3 + v6[6];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a3 + v6[7];
  v11 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionStateObserver._workoutUpdate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.sessionID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasSessionID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearSessionID()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 24));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.overviewID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasOverviewID.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 24) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearOverviewID()()
{
  CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)(v1 + *(int *)(a1(0) + 24));
  result = swift_bridgeObjectRelease();
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28));
  if (v1 == 67)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 67)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) != 67;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 28)) = 67;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutLocationType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutLocationType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutSettings.workoutMode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutSettings.hasWorkoutMode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutSettings.clearWorkoutMode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0) + 36)) = 3;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode and conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode();
  return Enum.hash(into:)();
}

int *CLP_LogEntry_PrivateData_WorkoutSettings.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  *(_BYTE *)(a1 + result[7]) = 67;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 3;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutSettings._workoutType()
{
  return 67;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutType.allCases.getter;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutLocationType;
}

void *static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutSettings.WorkoutMode;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.startTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.startTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearStartTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.endTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.endTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.endTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEndTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEndTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28));
  if (v1 == 19)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WorkoutEvent.eventType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 19)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEventType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) != 19;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEventType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 28)) = 19;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasEventTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearEventTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 36), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + v7[5]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  *(_BYTE *)(a1 + v7[7]) = 67;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 3;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *v11 = 0;
    v11[1] = 0;
    v12 = &v9[v6[6]];
    *v12 = 0;
    v12[1] = 0;
    v9[v6[7]] = 67;
    v9[v6[8]] = 5;
    v9[v6[9]] = 3;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
  }
  return CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify;
}

void CLP_LogEntry_PrivateData_WorkoutEvent.workoutSettings.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings);
}

BOOL CLP_LogEntry_PrivateData_WorkoutEvent.hasWorkoutSettings.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 36), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WorkoutEvent.clearWorkoutSettings()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0) + 36);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutSettings?);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WorkoutEvent.EventType and conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_WorkoutEvent.EventType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(a1 + v2[6], 1, 1, v4);
  *(_BYTE *)(a1 + v2[7]) = 19;
  v5(a1 + v2[8], 1, 1, v4);
  v6 = a1 + v2[9];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutEvent._eventType()
{
  return 19;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WorkoutEvent._workoutSettings@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings, a1);
}

void *static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WorkoutEvent.EventType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WorkoutEvent.EventType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionStateMediator.eventReceiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearEventReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_Location.client.setter(int a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a4(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v5 + v10) + *a5;
  result = swift_beginAccess();
  *(_DWORD *)v13 = a1;
  *(_BYTE *)(v13 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.client.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionStateMediator.client.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.client.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearClient()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  v10(a1 + v7[6], 1, 1, v9);
  *(_BYTE *)(a1 + v7[7]) = 19;
  v10(a1 + v7[8], 1, 1, v9);
  v11 = a1 + v7[9];
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v13(v11, 1, 1, v12);
    v13(&v9[v6[6]], 1, 1, v12);
    v9[v6[7]] = 19;
    v13(&v9[v6[8]], 1, 1, v12);
    v14 = &v9[v6[9]];
    v15 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutSettings(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
  }
  return CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify;
}

void CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionStateMediator.workoutEvent.setter, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

BOOL CLP_LogEntry_PrivateData_MotionStateMediator.hasWorkoutEvent.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?, type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionStateMediator.clearWorkoutEvent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutEvent(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf44CLP_LogEntry_PrivateData_MotionStateMediatorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutEvent;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WorkoutEvent?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionStateMediator.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionStateMediator, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionStateMediator._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionStateMediator._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.gender.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.gnssModeOfOperation.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 3)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.gender.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.gender.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasGender.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearGender()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 20)) = 3;
}

float CLP_LogEntry_PrivateData_BodyMetrics.heightM.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.heightM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.heightM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHeightM.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHeightM()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.weightKg.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.weightKg.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.weightKg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasWeightKg.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearWeightKg()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.vo2Max.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasVo2Max.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearVo2Max()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.age.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.age.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.age.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasAge.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearAge()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmin.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 40);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmin.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 40);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hrmin.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHrmin.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHrmin()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hrmax.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHrmax.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHrmax()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.hronset.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

float CLP_LogEntry_PrivateData_BodyMetrics.pal.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.pal.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v4 = v1 + *(int *)(result + 52);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.pal.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasPal.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearPal()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 52);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.condition.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.condition.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.condition.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasCondition.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearCondition()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 56)) = 8;
}

float CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v4 = v1 + *(int *)(result + 60);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_BodyMetrics.runVo2Max.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasRunVo2Max.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_BodyMetrics.clearRunVo2Max()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0) + 60);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType and conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType and conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

int *CLP_LogEntry_PrivateData_BodyMetrics.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  *(_BYTE *)(a1 + result[5]) = 3;
  v3 = a1 + result[6];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[7];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[8];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  v8 = a1 + result[11];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + result[12];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + result[13];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + result[14]) = 8;
  v11 = a1 + result[15];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_BodyMetrics._condition()
{
  return 8;
}

void *static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.NatalimeterGenderType;
}

void *static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_BodyMetrics.UserConditionType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, a1);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Natalimetry.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t (*CLP_LogEntry_PrivateData_Natalimetry.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 3;
  v8 = a1 + v7[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v7[7];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v7[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1 + v7[11];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a1 + v7[12];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  v15 = a1 + v7[13];
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  *(_BYTE *)(a1 + v7[14]) = 8;
  v16 = a1 + v7[15];
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

void (*CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 3;
    v11 = &v9[v6[6]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[7]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[8]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v16 = &v9[v6[11]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v17 = &v9[v6[12]];
    *(_DWORD *)v17 = 0;
    v17[4] = 1;
    v18 = &v9[v6[13]];
    *(_DWORD *)v18 = 0;
    v18[4] = 1;
    v9[v6[14]] = 8;
    v19 = &v9[v6[15]];
    *(_DWORD *)v19 = 0;
    v19[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
  }
  return CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify;
}

void CLP_LogEntry_PrivateData_Natalimetry.bodyMetrics.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

BOOL CLP_LogEntry_PrivateData_Natalimetry.hasBodyMetrics.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Natalimetry.clearBodyMetrics()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_BodyMetrics?, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics);
}

uint64_t CLP_LogEntry_PrivateData_Natalimetry.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_Natalimetry, type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_Natalimetry._bodyMetrics@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_BodyMetrics, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Timer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Timer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Timer.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Timer(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Timer.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Timer.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_Timer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Timer.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_Timer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DigitalElevationModel.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84M.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasGroundAltitudeAboveWgs84M.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearGroundAltitudeAboveWgs84M()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

double CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.groundAltitudeAboveWgs84UncM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasGroundAltitudeAboveWgs84UncM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearGroundAltitudeAboveWgs84UncM()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.undulationM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasUndulationM.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearUndulationM()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverToGpsTimeConversion.driftUncertaintyPpb.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.slopeInDirectionOfTravel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 36);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasSlopeInDirectionOfTravel.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearSlopeInDirectionOfTravel()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

float CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.maxAbsSlope.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasMaxAbsSlope.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearMaxAbsSlope()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t (*CLP_LogEntry_PrivateData_DigitalElevationModel.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DigitalElevationModel.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DigitalElevationModel.clearClient()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DigitalElevationModel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[9];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1 + v2[10];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DirectionOfTravel.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.latitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearLatitudeDeg()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.longitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.courseDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearCourseDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.courseUncDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasCourseUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearCourseUncDeg()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v4 = v1 + *(int *)(result + 52);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.roadLengthM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadLengthM.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadLengthM()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 52);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v4 = v1 + *(int *)(result + 56);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.speedMps.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasSpeedMps.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearSpeedMps()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 56);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isOneWay.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsOneWay.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsOneWay()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 60)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isRailWay.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsRailWay.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsRailWay()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 64)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isTunnel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsTunnel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsTunnel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 68)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DirectionOfTravel.isBridge.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasIsBridge.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DirectionOfTravel.clearIsBridge()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0) + 72)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v2[9];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v2[10];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v2[11];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v2[12];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v2[13];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v2[14];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  *(_BYTE *)(a1 + v2[15]) = 2;
  *(_BYTE *)(a1 + v2[16]) = 2;
  *(_BYTE *)(a1 + v2[17]) = 2;
  *(_BYTE *)(a1 + v2[18]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MapVector.eventReceiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearEventReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_MapVector.client.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MapVector.client.modify;
}

void CLP_LogEntry_PrivateData_MapVector.client.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearClient()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.dotData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[7];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[8];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[9];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v7[10];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a1 + v7[11];
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = a1 + v7[12];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a1 + v7[13];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a1 + v7[14];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  *(_BYTE *)(a1 + v7[15]) = 2;
  *(_BYTE *)(a1 + v7[16]) = 2;
  *(_BYTE *)(a1 + v7[17]) = 2;
  *(_BYTE *)(a1 + v7[18]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
}

uint64_t CLP_LogEntry_PrivateData_MapVector.dotData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MapVector.dotData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[7]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[8]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[9]];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    v17 = &v9[v6[10]];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v9[v6[11]];
    *(_QWORD *)v18 = 0;
    v18[8] = 1;
    v19 = &v9[v6[12]];
    *(_QWORD *)v19 = 0;
    v19[8] = 1;
    v20 = &v9[v6[13]];
    *(_QWORD *)v20 = 0;
    v20[8] = 1;
    v21 = &v9[v6[14]];
    *(_QWORD *)v21 = 0;
    v21[8] = 1;
    v9[v6[15]] = 2;
    v9[v6[16]] = 2;
    v9[v6[17]] = 2;
    v9[v6[18]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
  }
  return CLP_LogEntry_PrivateData_MapVector.dotData.modify;
}

void CLP_LogEntry_PrivateData_MapVector.dotData.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MapVector.dotData.setter, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

BOOL CLP_LogEntry_PrivateData_MapVector.hasDotData.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?, type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData, type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapVector.clearDotData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapVector(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MapVector._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MapVector._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DirectionOfTravel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf34CLP_LogEntry_PrivateData_MapVectorP33_993346AF53650622B255AB1E3C41340D13_StorageClass__dotData;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DirectionOfTravel?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MapVector.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MapVector, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MapVector._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MapVector._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchPointLatitudeDeg.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchPointLatitudeDeg()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchPointLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchPointLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchPointLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

double CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.searchRadiusM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasSearchRadiusM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearSearchRadiusM()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToTunnel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsCloseToTunnel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsCloseToTunnel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsCloseToBridge.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsCloseToBridge()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 44)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isTunnel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsTunnel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsTunnel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 48)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isBridge.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeAssistance.hasIsBridge.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeAssistance.clearIsBridge()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  *(_BYTE *)(a1 + v2[12]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = a1 + v7[6];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[7];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[8];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

void (*CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = &v9[v6[6]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[7]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[8]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
  }
  return CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify;
}

void CLP_LogEntry_PrivateData_TunnelBridgeNotification.tunnelBridgeData.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

BOOL CLP_LogEntry_PrivateData_TunnelBridgeNotification.hasTunnelBridgeData.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelBridgeNotification.clearTunnelBridgeData()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelBridgeAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeNotification.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeNotification, type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelBridgeNotification._tunnelBridgeData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_TunnelBridgeAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_TunnelEndPointAssistance.applicableTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearApplicableTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__applicableTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.latitudeDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__latitudeDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.longitudeDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__longitudeDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.horizontalUncM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasHorizontalUncM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearHorizontalUncM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalUncM);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.altitudeM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasAltitudeM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearAltitudeM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitudeM);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.verticalUncM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasVerticalUncM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearVerticalUncM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalUncM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.referenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.referenceFrame.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasReferenceFrame.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasReferenceFrame.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearReferenceFrame()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  *v5 = 3;
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasCourseAtExitDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearCourseAtExitDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.courseAtExitUncDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasCourseAtExitUncDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearCourseAtExitUncDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAtExitUncDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelWidthAtExitM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasTunnelWidthAtExitM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearTunnelWidthAtExitM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelWidthAtExitM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.isTunnelCurved.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasIsTunnelCurved.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearIsTunnelCurved()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isTunnelCurved);
  swift_beginAccess();
  *v5 = 2;
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLatitudeDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearStartLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLatitudeDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.startLongitudeDeg.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearStartLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startLongitudeDeg);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.tunnelLengthM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasTunnelLengthM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearTunnelLengthM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__tunnelLengthM);
}

double CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM, a1);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPointAssistance.endPointDistanceFromCurrentSolutionM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPointAssistance.hasEndPointDistanceFromCurrentSolutionM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPointAssistance.clearEndPointDistanceFromCurrentSolutionM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf49CLP_LogEntry_PrivateData_TunnelEndPointAssistanceP33_993346AF53650622B255AB1E3C41340D13_StorageClass__endPointDistanceFromCurrentSolutionM);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPointAssistance.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelEndPointAssistance._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, a1);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPoint.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_TunnelEndPoint.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

void (*CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_TunnelEndPointAssistance._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
  }
  return CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify;
}

void CLP_LogEntry_PrivateData_TunnelEndPoint.tunnelEndPointData.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

BOOL CLP_LogEntry_PrivateData_TunnelEndPoint.hasTunnelEndPointData.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_TunnelEndPoint.clearTunnelEndPointData()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TunnelEndPointAssistance?, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance);
}

uint64_t CLP_LogEntry_PrivateData_TunnelEndPoint.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPoint, type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_TunnelEndPoint._tunnelEndPointData@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_TunnelEndPointAssistance, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.roadID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasRoadID.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearRoadID()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.startLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasStartLatitudeDeg.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearStartLatitudeDeg()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.startLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasStartLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearStartLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.endLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasEndLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearEndLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

double CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

uint64_t CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MapsRouteHintData.endLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MapsRouteHintData.hasEndLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapsRouteHintData.clearEndLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData);
}

int *CLP_LogEntry_PrivateData_MapsRouteHintData.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapsRouteHintData(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + result[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.routeType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasRouteType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearRouteType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 32)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36));
  if (v1 == 7)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.stepType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 7)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_MapMatchingRouteHint.hasStepType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) != 7;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MapMatchingRouteHint.clearStepType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0) + 36)) = 7;
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint);
}

uint64_t (*CLP_LogEntry_PrivateData_MapMatchingRouteHint.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType and conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_MapMatchingRouteHint.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MapMatchingRouteHint(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v5)((char *)a1 + v2[7], 1, 1, v4);
  *((_BYTE *)a1 + v2[8]) = 7;
  *((_BYTE *)a1 + v2[9]) = 7;
  return result;
}

void *static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_MapMatchingRouteHint.RoutingType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutEvent.eventTime.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 32), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearClient()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                                   + 40));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.transmissionState.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasTransmissionState.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 40)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearTransmissionState()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 40)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.getter()
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 44));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_DigitalElevationModel.client.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 44);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sampleCount.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 44);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSampleCount.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSampleCount()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.slipDetected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSlipDetected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSlipDetected()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.setter(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = a1 & 1;
  result = type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = v2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.sensorType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.hasSensorType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0)
                           + 52)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.clearSensorType()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0) + 52)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType();
  return Enum.hash(into:)();
}

ALProtobuf::CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification::SensorType_optional __swiftcall CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.init(rawValue:)(Swift::Int rawValue)
{
  ALProtobuf::CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification::SensorType_optional v1;

  if (rawValue == 1)
    v1.value = ALProtobuf_CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification_SensorType_stCombined;
  else
    v1.value = ALProtobuf_CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification_SensorType_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType and conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char *v8;
  char *v9;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  v3 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + v3[7];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v6)((char *)a1 + v3[8], 1, 1, v5);
  v8 = (char *)a1 + v3[9];
  *(_DWORD *)v8 = 0;
  v8[4] = 1;
  *((_BYTE *)a1 + v3[10]) = 5;
  v9 = (char *)a1 + v3[11];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  *((_BYTE *)a1 + v3[12]) = 2;
  *((_BYTE *)a1 + v3[13]) = 2;
  return result;
}

void *static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.TransmissionStateType;
}

void *static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.SensorType;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.getter()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.previous.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasPrevious.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearPrevious()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.current.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.current.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.current.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasCurrent.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearCurrent()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 24)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.aboutToSleep.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasAboutToSleep.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearAboutToSleep()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

uint64_t (*CLP_LogEntry_PrivateData_ReachabilityState.recentlyWoke.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_ReachabilityState.hasRecentlyWoke.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_ReachabilityState.clearRecentlyWoke()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0) + 32)) = 2;
}

int *CLP_LogEntry_PrivateData_ReachabilityState.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 5;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  return result;
}

double CLP_LogEntry_PrivateData_Battery.level.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return -1.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_Battery.level.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_Battery, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.level.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = -1.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasLevel.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearLevel()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.charged.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.charged.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.charged.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasCharged.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearCharged()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.connected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.connected.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.connected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasConnected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearConnected()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerType.getter()
{
  return CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutSettings.workoutLocationType.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.chargerType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasChargerType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearChargerType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 32)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_Battery.wasConnected.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t CLP_LogEntry_PrivateData_Battery.wasConnected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.wasConnected.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasWasConnected.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearWasConnected()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerFamily.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_Battery.chargerFamily.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v4 = v1 + *(int *)(result + 40);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_Battery.chargerFamily.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Battery(0) + 40);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_Battery.hasChargerFamily.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Battery.clearChargerFamily()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

int *CLP_LogEntry_PrivateData_Battery.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 5;
  *(_BYTE *)(a1 + result[9]) = 2;
  v4 = a1 + result[10];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DeviceStatus.eventReceiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearEventReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.client.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.client.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.client.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearClient()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.notificationData.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  if (*v1 == 20)
    return 0;
  else
    return *v1;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.notificationData.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 20)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.notificationData.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasNotificationData.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  return *v1 != 20;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearNotificationData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__notificationData);
  swift_beginAccess();
  *v5 = 20;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.reachability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 5;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.reachability.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 5;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.reachability.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DeviceStatus.reachability.setter, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasReachability.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability, type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearReachability()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ReachabilityState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__reachability;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ReachabilityState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.battery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 5;
  *(_BYTE *)(a1 + v7[9]) = 2;
  v9 = a1 + v7[10];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.battery.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.battery.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 5;
    v9[v6[9]] = 2;
    v12 = &v9[v6[10]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
  }
  return CLP_LogEntry_PrivateData_DeviceStatus.battery.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.battery.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_DeviceStatus.battery.setter, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasBattery.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery, type metadata accessor for CLP_LogEntry_PrivateData_Battery);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearBattery()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_Battery(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__battery;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_Battery?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.airplaneMode.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasAirplaneMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearAirplaneMode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__airplaneMode);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.displayOn.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.displayOn.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.displayOn.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasDisplayOn.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearDisplayOn()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__displayOn);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.lockScreen.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasLockScreen.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearLockScreen()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lockScreen);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.isBatterySaverModeEnabled.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasIsBatterySaverModeEnabled.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearIsBatterySaverModeEnabled()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isBatterySaverModeEnabled);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.pushServiceConnected.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasPushServiceConnected.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearPushServiceConnected()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushServiceConnected);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.wirelessModemClients.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasWirelessModemClients.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearWirelessModemClients()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__wirelessModemClients);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.thermalLevel.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasThermalLevel.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearThermalLevel()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__thermalLevel);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

void (*CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify;
}

void CLP_LogEntry_PrivateData_DeviceStatus.restrictedMode.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

BOOL CLP_LogEntry_PrivateData_DeviceStatus.hasRestrictedMode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceStatus.clearRestrictedMode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_DeviceStatusP33_993346AF53650622B255AB1E3C41340D13_StorageClass__restrictedMode);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DeviceStatus.NotificationType and conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType();
  return Enum.hash(into:)();
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceStatus.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceStatus, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DeviceStatus._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceStatus._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_DeviceStatus.NotificationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_DeviceStatus.NotificationType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_SignalEnvironment.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.coarseSignalEnvironment.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasCoarseSignalEnvironment.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearCoarseSignalEnvironment()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 24)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.highResolutionSignalEnvironment.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasHighResolutionSignalEnvironment.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearHighResolutionSignalEnvironment()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 28)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.client.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 32));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironment.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironment.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironment.clearClient()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = specialized CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironment.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironment(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 8;
  *(_BYTE *)(a1 + v2[7]) = 8;
  v6 = a1 + v2[8];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

void *static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20));
  if (v1 == 8)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironmentInfo.type.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 8)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hasType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironmentInfo.clearType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 20)) = 8;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_SignalEnvironmentInfo.hasFidelityLevel.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SignalEnvironmentInfo.clearFidelityLevel()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_SignalEnvironmentInfo, 8, 4, a1);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;

  UnknownStorage.init()();
  result = a1(0);
  *(_BYTE *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MagSample.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_MagSample.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_MagSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

float CLP_LogEntry_PrivateData_MagSample.xUT.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.xUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.xUT.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasXUT.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearXUT()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float CLP_LogEntry_PrivateData_MagSample.yUT.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.yUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.yUT.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasYUT.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearYUT()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

float CLP_LogEntry_PrivateData_MagSample.zUT.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.zUT.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MagSample.zUT.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MagSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MagSample.hasZUT.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MagSample.clearZUT()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample);
}

uint64_t CLP_LogEntry_PrivateData_MagSample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.init()(type metadata accessor for CLP_LogEntry_PrivateData_MagSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Magnetometer.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Magnetometer.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Magnetometer.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer);
}

uint64_t (*CLP_LogEntry_PrivateData_Magnetometer.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Magnetometer.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Magnetometer, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Reset, a1);
}

uint64_t CLP_LogEntry_PrivateData_Reset.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Reset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Reset.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Reset(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Reset.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Reset.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_Reset, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Reset.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_Reset, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_Timer.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  v6 = a3 + *(int *)(a1(0) + 20);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

double CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.calibrated.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasCalibrated.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearCalibrated()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.lowerBound.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasLowerBound.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearLowerBound()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

double CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

uint64_t CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_AccelerometerPace.upperBound.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_AccelerometerPace.hasUpperBound.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_AccelerometerPace.clearUpperBound()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

int *CLP_LogEntry_PrivateData_AccelerometerPace.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.init()(type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.accelPoseXHigh.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasAccelPoseXHigh.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearAccelPoseXHigh()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.accelVarXyzLow.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasAccelVarXyzLow.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearAccelVarXyzLow()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroNumSamplesSufficient.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasGyroNumSamplesSufficient.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearGyroNumSamplesSufficient()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.gyroVarXHigh.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasGyroVarXHigh.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearGyroVarXHigh()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 32)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.consecutiveRequirement.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasConsecutiveRequirement.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearConsecutiveRequirement()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1(0) + 40)) & 1;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularLowConfidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasIsVehicularLowConfidence.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearIsVehicularLowConfidence()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.isVehicularHighConfidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasIsVehicularHighConfidence.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearIsVehicularHighConfidence()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

uint64_t (*CLP_LogEntry_PrivateData_FalseStepDetectorState.consistentStepsProtection.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_FalseStepDetectorState.hasConsistentStepsProtection.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_FalseStepDetectorState.clearConsistentStepsProtection()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0) + 48)) = 2;
}

int *CLP_LogEntry_PrivateData_FalseStepDetectorState.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  *(_BYTE *)(a1 + result[5]) = 2;
  *(_BYTE *)(a1 + result[6]) = 2;
  *(_BYTE *)(a1 + result[7]) = 2;
  *(_BYTE *)(a1 + result[8]) = 2;
  *(_BYTE *)(a1 + result[9]) = 2;
  *(_BYTE *)(a1 + result[10]) = 2;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.timestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.timestamp.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_StepCountEntry.timestamp.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearTimestamp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.startTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.startTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.startTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_StepCountEntry.startTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasStartTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearStartTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_StepCountEntry.firstStepTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFirstStepTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFirstStepTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__firstStepTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.count.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.count.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.count.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.count.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.count.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCount()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__count);
}

double CLP_LogEntry_PrivateData_StepCountEntry.distanceM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.odometer.setter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v10 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a3(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v5 + v10) + *a4;
  result = swift_beginAccess();
  *(double *)v13 = a5;
  *(_BYTE *)(v13 + 8) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.distanceM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

void CLP_LogEntry_PrivateData_Location.odometer.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 88);
    v13 = *(_QWORD *)(v9 + 80);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + *(int *)(v9 + 88)) + *a5;
  swift_beginAccess();
  *(_QWORD *)v16 = v10;
  *(_BYTE *)(v16 + 8) = 0;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearDistanceM()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceM);
}

double CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.rawDistanceM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasRawDistanceM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearRawDistanceM()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawDistanceM);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.floorsAscended.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFloorsAscended.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFloorsAscended()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsAscended);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.floorsDescended.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFloorsDescended.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFloorsDescended()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floorsDescended);
}

double CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.currentPaceSpm.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCurrentPaceSpm.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCurrentPaceSpm()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentPaceSpm);
}

double CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.currentCadence.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasCurrentCadence.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearCurrentCadence()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__currentCadence);
}

double CLP_LogEntry_PrivateData_StepCountEntry.activeTime.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.activeTime.setter(double a1)
{
  return CLP_LogEntry_PrivateData_Location.odometer.setter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime, a1);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.activeTime.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.odometer.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasActiveTime.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearActiveTime()()
{
  CLP_LogEntry_PrivateData_Measurement.clearStartTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__activeTime);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.recordID.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.recordID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.recordID.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasRecordID.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearRecordID()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__recordID);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.sourceID.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*(_QWORD *)(v0
                             + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.sourceID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = (_QWORD *)(*(_QWORD *)(v2 + v5)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *v8 = a1;
  v8[1] = a2;
  return swift_bridgeObjectRelease();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  v5 = (uint64_t *)(*(_QWORD *)(v1 + v4)
                 + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  if (v5[1])
  {
    v6 = *v5;
    v7 = v5[1];
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  v3[9] = v6;
  v3[10] = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.sourceID.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  v4 = *(_QWORD *)(*a1 + 80);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *(int *)(v2 + 96);
      v6 = *(_QWORD *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      v7 = swift_allocObject();
      v8 = swift_retain();
      CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v8);
      *(_QWORD *)(v6 + v5) = v7;
      swift_release();
    }
    v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                  + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    *v9 = v3;
    v9[1] = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v10 = *(int *)(v2 + 96);
      v11 = *(_QWORD *)(v2 + 88);
      type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
      v12 = swift_allocObject();
      v13 = swift_retain();
      CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v13);
      *(_QWORD *)(v11 + v10) = v12;
      swift_release();
    }
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + *(int *)(v2 + 96))
                   + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
    swift_beginAccess();
    *v14 = v3;
    v14[1] = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasSourceID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID;
  swift_beginAccess();
  return *(_QWORD *)(v1 + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearSourceID()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_QWORD *)(*(_QWORD *)(v0 + v1)
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__sourceID);
  swift_beginAccess();
  *v4 = 0;
  v4[1] = 0;
  swift_bridgeObjectRelease();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

uint64_t CLP_LogEntry_PrivateData_Location.active.setter(char a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;

  v10 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    a4(v12);
    *(_QWORD *)(v5 + v10) = v11;
    swift_release();
  }
  v13 = (_BYTE *)(*(_QWORD *)(v5 + v10) + *a5);
  result = swift_beginAccess();
  *v13 = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.isOdometerDistance.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.active.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

void CLP_LogEntry_PrivateData_Location.active.modify(uint64_t *a1, char a2, void (*a3)(_QWORD), void (*a4)(uint64_t), _QWORD *a5)
{
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v9 = *a1;
  v10 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v12 = *(int *)(v9 + 80);
    v13 = *(_QWORD *)(v9 + 72);
    a3(0);
    v14 = swift_allocObject();
    v15 = swift_retain();
    a4(v15);
    *(_QWORD *)(v13 + v12) = v14;
    swift_release();
  }
LABEL_4:
  v16 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + *(int *)(v9 + 80)) + *a5);
  swift_beginAccess();
  *v16 = v10;
  free((void *)v9);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasIsOdometerDistance.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearIsOdometerDistance()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerDistance);
  swift_beginAccess();
  *v4 = 2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.isOdometerPace.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.active.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasIsOdometerPace.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearIsOdometerPace()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isOdometerPace);
  swift_beginAccess();
  *v4 = 2;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_StepCountEntry.accelerometerPace.setter, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasAccelerometerPace.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace, type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearAccelerometerPace()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_AccelerometerPace(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accelerometerPace;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_AccelerometerPace?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pushCount.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pushCount.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.pushCount.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasPushCount.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearPushCount()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pushCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.workoutType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.workoutType.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.workoutType.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasWorkoutType.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearWorkoutType()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__workoutType);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.pedometerArmConstraintedState.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasPedometerArmConstraintedState.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearPedometerArmConstraintedState()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pedometerArmConstraintedState);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.elevationAscendedCm.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasElevationAscendedCm.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearElevationAscendedCm()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationAscendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.elevationDescendedCm.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasElevationDescendedCm.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearElevationDescendedCm()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__elevationDescendedCm);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.setter(int a1)
{
  return CLP_LogEntry_PrivateData_Location.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.falseStepsSuppressed.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFalseStepsSuppressed.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFalseStepsSuppressed()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepsSuppressed);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  if (*v1 == 6)
    return 0;
  else
    return *v1;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 6)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.distanceSource.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasDistanceSource.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*(_QWORD *)(v0
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0)
                                              + 20))
                         + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  return *v1 != 6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearDistanceSource()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__distanceSource);
  swift_beginAccess();
  *v4 = 6;
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 2;
  *(_BYTE *)(a1 + v7[6]) = 2;
  *(_BYTE *)(a1 + v7[7]) = 2;
  *(_BYTE *)(a1 + v7[8]) = 2;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 2;
    v9[v6[6]] = 2;
    v9[v6[7]] = 2;
    v9[v6[8]] = 2;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
  }
  return CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify;
}

void CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_StepCountEntry.falseStepDetectorState.setter, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

BOOL CLP_LogEntry_PrivateData_StepCountEntry.hasFalseStepDetectorState.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState, type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCountEntry.clearFalseStepDetectorState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_FalseStepDetectorState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_StepCountEntryP33_993346AF53650622B255AB1E3C41340D13_StorageClass__falseStepDetectorState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_FalseStepDetectorState?);
  swift_endAccess();
  swift_release();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType and conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_StepCountEntry.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_StepCountEntry._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static CLP_LogEntry_PrivateData_StepCountEntry.DistanceSourceType.allCases.getter;
}

uint64_t CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, a1);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_StepCount.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t (*CLP_LogEntry_PrivateData_StepCount.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_StepCount);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.stepCountEntry.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.stepCountEntry.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

void (*CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_StepCount(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_StepCountEntry._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
  }
  return CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify;
}

void CLP_LogEntry_PrivateData_StepCount.stepCountEntry.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

BOOL CLP_LogEntry_PrivateData_StepCount.hasStepCountEntry.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_StepCount.clearStepCountEntry()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_StepCountEntry?, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry);
}

uint64_t CLP_LogEntry_PrivateData_StepCount.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionState.init()(type metadata accessor for CLP_LogEntry_PrivateData_StepCount, type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_StepCount._stepCountEntry@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_StepCountEntry, a1);
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.x.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.x.setter(float a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v4 = v1 + *(int *)(result + 20);
  *(float *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.x.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 20);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasX.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearX()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.y.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.y.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.residual.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.y.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 24);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasY.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearY()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

float CLP_LogEntry_PrivateData_MotionTypeVector3.z.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeVector3.z.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeVector3.z.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeVector3.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeVector3.clearZ()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

int *CLP_LogEntry_PrivateData_MotionTypeVector3.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v3 = a1 + result[5];
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  v4 = a1 + result[6];
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.w.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasW.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearW()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.x.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasX.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearX()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.y.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasY.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearY()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

double CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.z.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.clearZ()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

int *CLP_LogEntry_PrivateData_MotionTypeDoubleVector4.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

int *CLP_LogEntry_PrivateData_VehicleSpeed.init()@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)a1(0);
  v5 = a2 + result[5];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + result[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + result[7];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a2 + result[8];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagneticField()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeCompass.unassistedMagneticField.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasUnassistedMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearUnassistedMagneticField()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__unassistedMagneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagneticHeading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagneticHeading()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticHeading);
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(_QWORD *a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v7);
    *(_QWORD *)(v2 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v2 + v5) + *a1;
  result = swift_beginAccess();
  *(float *)v8 = a2;
  *(_BYTE *)(v8 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.trueHeading.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(uint64_t *a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v8 = *(int *)(v5 + 84);
    v9 = *(_QWORD *)(v5 + 72);
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v9 + v8) = v10;
    swift_release();
  }
LABEL_4:
  v12 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + *(int *)(v5 + 84)) + *a3;
  swift_beginAccess();
  *(_DWORD *)v12 = v6;
  *(_BYTE *)(v12 + 4) = 0;
  free((void *)v5);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasTrueHeading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearTrueHeading()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__trueHeading);
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.accuracy.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearAccuracy()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__accuracy);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  if (*v3 == 8)
    return 0;
  else
    return *v3;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.calibrationLevel.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MeasurementExtension.svTimeDetectionMethod.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(uint64_t (*a1)(_QWORD), _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)(*(_QWORD *)(v2 + *(int *)(a1(0) + 20)) + *a2);
  swift_beginAccess();
  return *v3 != 8;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearCalibrationLevel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__calibrationLevel);
  swift_beginAccess();
  *v4 = 8;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.setter(char a1)
{
  return CLP_LogEntry_PrivateData_Location.active.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.usingDatabaseBias.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_Location.active.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasUsingDatabaseBias.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearUsingDatabaseBias()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v2 = swift_allocObject();
    v3 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v0 + v1) = v2;
    swift_release();
  }
  v4 = (_BYTE *)(*(_QWORD *)(v0 + v1)
               + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__usingDatabaseBias);
  swift_beginAccess();
  *v4 = 2;
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.magnitude.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearMagnitude()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magnitude);
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.inclination.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasInclination.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearInclination()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__inclination);
}

float CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.setter(float a1)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.setter(&OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal, a1);
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.horizontal.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_MotionTypeCompass.magneticHeading.modify(a1, a2, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasHorizontal.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearHorizontal()()
{
  CLP_LogEntry_PrivateData_MeasurementExtension.clearNoncoherentIntervalCount()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass, (void (*)(uint64_t))CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontal);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v10 = swift_allocObject();
    v11 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v11);
    *(_QWORD *)(v1 + v9) = v10;
    swift_release();
  }
  v12 = *(_QWORD *)(v1 + v9);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v8, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v13 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v14 = v12
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v6, v14, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeCompass.quaternion.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeCompass.hasQuaternion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeCompass.clearQuaternion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.init(copying:)(v6);
    *(_QWORD *)(v0 + v4) = v5;
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + v4);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
  v9 = v7
     + OBJC_IVAR____TtCV10ALProtobuf42CLP_LogEntry_PrivateData_MotionTypeCompassP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v3, v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionTypeCompass._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_CompassTypeSample.timestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compass.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compass.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

void (*CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_MotionTypeCompass._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
  }
  return CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify;
}

void CLP_LogEntry_PrivateData_CompassTypeSample.compass.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasCompass.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearCompass()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeCompass?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass);
}

float CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.setter(float a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.cn0Dbhz.setter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.compassCalQuality.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 28);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasCompassCalQuality.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearCompassCalQuality()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

float CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockModel.phaseVarianceNanoseconds2.setter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.gyroMagnitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 32);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasGyroMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearGyroMagnitude()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample);
}

uint64_t (*CLP_LogEntry_PrivateData_CompassTypeSample.isLocationAvailable.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_CompassTypeSample.hasIsLocationAvailable.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_CompassTypeSample.clearIsLocationAvailable()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_CompassTypeSample.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_CompassTypeSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = a1 + v2[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a1 + v2[8];
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 2;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_CompassTypeSample._compass@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeCompass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_Compass.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Compass(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_Compass.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_Compass, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_Compass.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_Compass, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_Compass.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_Compass.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_Compass);
}

uint64_t (*CLP_LogEntry_PrivateData_Compass.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_Compass(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_Compass.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_Compass, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.vehicleSpeed.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  v15 = (int *)a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v13, 1, v15) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + v15[5];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + v15[6];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = a5 + v15[7];
  *(_QWORD *)v18 = 0;
  *(_BYTE *)(v18 + 8) = 1;
  v19 = a5 + v15[8];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.quaternion.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasQuaternion.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearQuaternion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__quaternion;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDoubleVector4?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.userAcceleration.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasUserAcceleration.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearUserAcceleration()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__userAcceleration;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.rotationRate.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasRotationRate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearRotationRate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rotationRate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompass.magneticField.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v11 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v9, 1, v11) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v9, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  UnknownStorage.init()();
  v12 = a3 + v11[5];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a3 + v11[6];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  v14 = a3 + v11[7];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    v12 = &v9[v6[6]];
    *(_DWORD *)v12 = 0;
    v12[4] = 1;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
  }
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticField.setter, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasMagneticField.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearMagneticField()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeVector3(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticField;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeVector3?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.signalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 8)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.magneticFieldCalibrationLevel.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasMagneticFieldCalibrationLevel.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasSignalEnvironmentType.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearMagneticFieldCalibrationLevel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__magneticFieldCalibrationLevel);
  swift_beginAccess();
  *v5 = 8;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingYawCorrection.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasDoingYawCorrection.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearDoingYawCorrection()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingYawCorrection);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.doingBiasEstimation.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasDoingBiasEstimation.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearDoingBiasEstimation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__doingBiasEstimation);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.isInitialized_p.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasIsInitialized_p.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearIsInitialized_p()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInitialized_p);
  swift_beginAccess();
  *v5 = 2;
}

float CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.codeLockDurationSeconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.setter(float a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.undulation.setter(uint64_t (*a1)(_QWORD), void (*a2)(_QWORD), void (*a3)(uint64_t), _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v9 = v5;
  v11 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    v12 = swift_allocObject();
    v13 = swift_retain();
    a3(v13);
    swift_release();
    *(_QWORD *)(v9 + v11) = v12;
    swift_release();
  }
  v14 = *(_QWORD *)(v9 + v11) + *a4;
  result = swift_beginAccess();
  *(float *)v14 = a5;
  *(_BYTE *)(v14 + 4) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading;
  swift_beginAccess();
  v6 = *(float *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify;
}

void CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.heading.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

BOOL CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.hasHeading.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.clearHeading()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf47CLP_LogEntry_PrivateData_MotionTypeDeviceMotionP33_993346AF53650622B255AB1E3C41340D13_StorageClass__heading);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeDeviceMotion.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.bits.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.bits.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v4 = v1 + *(int *)(result + 20);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_SensorFusionStatus.bits.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0) + 20);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_SensorFusionStatus.hasBits.getter()
{
  return CLP_LogEntry_PrivateData_GlonassSlotInfo.hasSlotNum.getter(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_SensorFusionStatus.clearBits()()
{
  CLP_LogEntry_PrivateData_GlonassSlotInfo.clearSlotNum()(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionStatus.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  UnknownStorage.init()();
  result = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3 = a1 + *(int *)(result + 20);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.timestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearTimestamp()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static CLP_LogEntry_PrivateData_MotionTypeDeviceMotion._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
  }
  return CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify;
}

void CLP_LogEntry_PrivateData_DeviceMotionSample.deviceMotion.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasDeviceMotion.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearDeviceMotion()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.fsync.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasFsync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearFsync()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.clientID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasClientID.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearClientID()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.mode.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0
                          + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36));
  if (v1 == 5)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.mode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.mode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasMode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearMode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 36)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

void (*CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_DWORD *)v11 = 0;
    v11[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
  }
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify;
}

void CLP_LogEntry_PrivateData_DeviceMotionSample.status.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()()
{
  CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_SensorFusionStatus?, type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus);
}

float CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hrmax.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 44);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hrmax.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 44);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.accuracy.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 44);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasAccuracy.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasNavicPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearAccuracy()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearNavicPrn()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

float CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = v1 + *(int *)(a1(0) + 48);
  result = *(float *)v2;
  if (*(_BYTE *)(v2 + 4))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample, a1);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(uint64_t (*a1)(_QWORD), float a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 48);
  *(float *)v5 = a2;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotionSample.visionCompassBias.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasVisionCompassBias.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

BOOL CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 48) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotionSample.clearVisionCompassBias()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample);
}

uint64_t CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 48);
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotionSample(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_BYTE *)(a1 + v2[7]) = 2;
  v7 = a1 + v2[8];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + v2[9]) = 5;
  v8 = a1 + v2[10];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v11 = a1 + v2[11];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v2[12];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceMotionSample._deviceMotion@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeDeviceMotion, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_DeviceMotionSample._status@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_SensorFusionStatus, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_DeviceMotion.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_DeviceMotion.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_DeviceMotion.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion);
}

uint64_t (*CLP_LogEntry_PrivateData_DeviceMotion.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotion.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_DeviceMotion, a1);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.x.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasX.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearX()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.y.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasY.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearY()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.z.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasZ.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearZ()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.magnitude.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasMagnitude.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearMagnitude()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.horizontal.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasHorizontal.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearHorizontal()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 40);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 40);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.declination.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasDeclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 40) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearDeclination()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 40);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 44);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 44);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.inclination.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasInclination.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 44) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearInclination()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 44);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 48), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.timestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.hasTimestamp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0 + *(int *)(v4 + 48), (uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v3, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  return v6;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.clearTimestamp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0) + 48);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3 = a1 + v2[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + v2[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  v5 = a1 + v2[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + v2[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v2[9];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1 + v2[10];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v2[11];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v2[12];
  v11 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.data.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + v7[6];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a1 + v7[7];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a1 + v7[8];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a1 + v7[9];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = a1 + v7[10];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  v14 = a1 + v7[11];
  *(_QWORD *)v14 = 0;
  *(_BYTE *)(v14 + 8) = 1;
  v15 = a1 + v7[12];
  v16 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.data.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

void (*CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = &v9[v6[8]];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    v15 = &v9[v6[9]];
    *(_QWORD *)v15 = 0;
    v15[8] = 1;
    v16 = &v9[v6[10]];
    *(_QWORD *)v16 = 0;
    v16[8] = 1;
    v17 = &v9[v6[11]];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = &v9[v6[12]];
    v19 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
  }
  return CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify;
}

void CLP_LogEntry_PrivateData_GeomagneticModelData.data.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

BOOL CLP_LogEntry_PrivateData_GeomagneticModelData.hasData.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GeomagneticModelData.clearData()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData?, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData);
}

uint64_t CLP_LogEntry_PrivateData_GeomagneticModelData.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Timer.init()(type metadata accessor for CLP_LogEntry_PrivateData_GeomagneticModelData, type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GeomagneticModelData._data@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_MotionTypeGeomagneticModelData, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mac.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mac.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.phaseStartTimeNanoseconds.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.mac.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasMac.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearMac()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.setter(uint64_t a1, uint64_t a2)
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.setter(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.ssid.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasSsid.getter()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.hasWhere.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearSsid()()
{
  CLP_LogEntry_PrivateData_XtraFileAvailable.clearWhere()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasRssiDb.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearRssiDb()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mode.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 32));
  if (v2 == 4)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.mode.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.mode.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasMode.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearMode()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.channel.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 36));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.channel.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 36);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.channel.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasChannel.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearChannel()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

float CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.setter(float a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.l5Cn0.setter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.ageS.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 40);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasAgeS.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasSbasPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearAgeS()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearSbasPrn()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.isApplePersonalHotspot.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsApplePersonalHotspot.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearIsApplePersonalHotspot()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 44)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isPhaseTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.isMoving.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasIsMoving.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearIsMoving()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 48)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.band.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.band.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.band.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasBand.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearBand()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 52)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56));
  if (v1[4])
    return 0;
  else
    return *(unsigned int *)v1;
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.setter(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAccessPoint.frequencyKhz.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAccessPoint.hasFrequencyKhz.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56) + 4) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAccessPoint.clearFrequencyKhz()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0) + 56);
  *(_DWORD *)v1 = 0;
  *(_BYTE *)(v1 + 4) = 1;
}

int *CLP_LogEntry_PrivateData_WifiAccessPoint.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + result[7];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  *(_BYTE *)(a1 + result[8]) = 4;
  v6 = a1 + result[9];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1 + result[10];
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a1 + result[11]) = 2;
  *(_BYTE *)(a1 + result[12]) = 2;
  *(_BYTE *)(a1 + result[13]) = 4;
  v8 = a1 + result[14];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiAssociationState.isAssociated.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiAssociationState.hasIsAssociated.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAssociationState.clearIsAssociated()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.ap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = (_QWORD *)(a1 + v7[6]);
  *v9 = 0;
  v9[1] = 0;
  v10 = a1 + v7[7];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_BYTE *)(a1 + v7[8]) = 4;
  v11 = a1 + v7[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a1 + v7[10];
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  *(_BYTE *)(a1 + v7[11]) = 2;
  *(_BYTE *)(a1 + v7[12]) = 2;
  *(_BYTE *)(a1 + v7[13]) = 4;
  v13 = a1 + v7[14];
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.ap.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

void (*CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *v12 = 0;
    v12[1] = 0;
    v13 = &v9[v6[7]];
    *(_DWORD *)v13 = 0;
    v13[4] = 1;
    v9[v6[8]] = 4;
    v14 = &v9[v6[9]];
    *(_DWORD *)v14 = 0;
    v14[4] = 1;
    v15 = &v9[v6[10]];
    *(_DWORD *)v15 = 0;
    v15[4] = 1;
    v9[v6[11]] = 2;
    v9[v6[12]] = 2;
    v9[v6[13]] = 4;
    v16 = &v9[v6[14]];
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
  }
  return CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify;
}

void CLP_LogEntry_PrivateData_WifiAssociationState.ap.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

BOOL CLP_LogEntry_PrivateData_WifiAssociationState.hasAp.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiAssociationState.clearAp()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAccessPoint?, type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint);
}

uint64_t CLP_LogEntry_PrivateData_WifiAssociationState.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  UnknownStorage.init()();
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  *(_BYTE *)(a1 + *(int *)(v2 + 20)) = 2;
  v3 = a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WifiAssociationState._ap@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WifiScanResult.scanTimestamp.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WifiScanResult.hasScanTimestamp.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiScanResult.clearScanTimestamp()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

uint64_t (*CLP_LogEntry_PrivateData_WifiScanResult.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanResult.init()@<X0>(_QWORD *a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.init()(type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_WifiNotification.eventReceiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearEventReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.client.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.confidence.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.client.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  v6 = *(_DWORD *)v5;
  if (*(_BYTE *)(v5 + 4))
    v6 = 0;
  *((_DWORD *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.client.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.client.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.confidence.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_MeasurementExtension.hasNoncoherentIntervalCount.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearClient()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearConfidence()(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.type.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.type.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 15)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.type.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.type.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  *v5 = 15;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scanType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.type.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.type.getter(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  if (*v2 == 15)
    return 0;
  else
    return *v2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scanType.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.type.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.scanType.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(v1 + v4)
                         + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  v6 = *v5;
  if (v6 == 15)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_WifiNotification.scanType.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.scanType.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.type.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasScanType.getter()
{
  return CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(&OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasType.getter(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)(*(_QWORD *)(v1
                                     + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0)
                                              + 20))
                         + *a1);
  swift_beginAccess();
  return *v2 != 15;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearScanType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scanType);
  swift_beginAccess();
  *v5 = 15;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.power.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.power.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.power.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.power.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.power.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasPower.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearPower()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__power);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.associatedState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.associatedState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v11 = &v9[*(int *)(v6 + 24)];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAccessPoint(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.associatedState.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_WifiNotification.associatedState.setter, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasAssociatedState.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState, type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearAssociatedState()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiAssociationState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__associatedState;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiAssociationState?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scan.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.scan.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_WifiNotification.scan.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + *(int *)(v6 + 24);
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
  }
  return CLP_LogEntry_PrivateData_WifiNotification.scan.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.scan.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_WifiNotification.scan.setter, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasScan.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan, type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearScan()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WifiScanResult(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__scan;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WifiScanResult?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.simulated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.simulated.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.simulated.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.simulated.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.simulated.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasSimulated.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearSimulated()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__simulated);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.available.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.available.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.available.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.available.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.available.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasAvailable.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearAvailable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__available);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.isInvoluntaryLinkDown.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasIsInvoluntaryLinkDown.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearIsInvoluntaryLinkDown()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isInvoluntaryLinkDown);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isApAwake.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.isApAwake.setter(char a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

void (*CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v4)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *v5 & 1;
  return CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify;
}

void CLP_LogEntry_PrivateData_WifiNotification.isApAwake.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.fromSimulationController.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

BOOL CLP_LogEntry_PrivateData_WifiNotification.hasIsApAwake.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.hasFromSimulationController.getter(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WifiNotification.clearIsApAwake()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification._StorageClass(0);
    v3 = swift_allocObject();
    v4 = swift_retain();
    specialized CLP_LogEntry_PrivateData_WifiNotification._StorageClass.init(copying:)(v4);
    swift_release();
    *(_QWORD *)(v1 + v2) = v3;
    swift_release();
  }
  v5 = (_BYTE *)(*(_QWORD *)(v1 + v2)
               + OBJC_IVAR____TtCV10ALProtobuf41CLP_LogEntry_PrivateData_WifiNotificationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isApAwake);
  swift_beginAccess();
  *v5 = 2;
}

uint64_t CLP_LogEntry_PrivateData_WifiNotification.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_WifiNotification, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_WifiNotification._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WifiNotification._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 24));
  if (v2 == 4)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.state.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasState.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearState()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 24)) = 4;
}

double CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.stateProbability.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasStateProbability.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearStateProbability()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction);
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.measurementSource.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.hasMeasurementSource.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.clearMeasurementSource()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0) + 32)) = 4;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource and conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GnssAvailabilityPrediction(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  v6 = a1 + v2[7];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + v2[8]) = 4;
  return result;
}

void *static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.GnssAvailability;
}

void *static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GnssAvailabilityPrediction.MeasurementSource;
}

double CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.latitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hasLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.clearLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

double CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.longitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.hasLongitudeDeg.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.clearLongitudeDeg()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.init()(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.baseHeightAboveGroundM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasBaseHeightAboveGroundM.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearBaseHeightAboveGroundM()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.heightAboveBaseM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasHeightAboveBaseM.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearHeightAboveBaseM()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevation_p.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasHasTerrainElevation_p.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearHasTerrainElevation_p()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 32)) = 2;
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.terrainElevationM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTerrainElevationM.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearTerrainElevationM()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.roadWidthM.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.minBaseHeightM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 40);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasMinBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasRoadWidthM.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearMinBaseHeightM()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearRoadWidthM()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLatitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.maxBaseHeightM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasMaxBaseHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearMaxBaseHeightM()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

double CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = v1 + *(int *)(a1(0) + 48);
  result = *(double *)v2;
  if (*(_BYTE *)(v2 + 8))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.startLongitudeDeg.setter(uint64_t (*a1)(_QWORD), double a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1(0);
  v5 = v2 + *(int *)(result + 48);
  *(double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.topHeightM.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0) + 48);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.hasTopHeightM.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

BOOL CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLongitudeDeg.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return (*(_BYTE *)(v1 + *(int *)(a1(0) + 48) + 8) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.clearTopHeightM()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLongitudeDeg()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = a1(0);
  v3 = v1 + *(int *)(result + 48);
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuildingSection(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 2;
  v6 = (char *)a1 + v2[9];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a1 + v2[10];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = (char *)a1 + v2[11];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + v2[12];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingHash.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hasBuildingHash.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.clearBuildingHash()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.hasBuildingID.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.clearBuildingID()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  char *v5;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureBuilding(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v2 + 24);
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + *(int *)(v2 + 28);
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.startTime.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GEOMapBuildingData.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapBuildingData.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapBuildingData.clearReceiptTime()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  UnknownStorage.init()();
  v8 = a1 + *(int *)(v7 + 20);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a1 + *(int *)(v7 + 24);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

void (*CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
  }
  return CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify;
}

void CLP_LogEntry_PrivateData_GEOMapBuildingData.queryLocationCoordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

BOOL CLP_LogEntry_PrivateData_GEOMapBuildingData.hasQueryLocationCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapBuildingData.clearQueryLocationCoordinate()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D?, type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_BatchedLocations.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapBuildingData.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapBuildingData.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  v3 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapBuildingData(0);
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 28);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a1 + *(int *)(v3 + 32);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapBuildingData._queryLocationCoordinate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GEOLocationCoordinate2D, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0)
                           + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchType()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.getter()
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 28));
  if (v2[4])
    return 0;
  else
    return *(unsigned int *)v2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.setter(int a1)
{
  return CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPoint.rssiDb.setter(int a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchNumber.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 28);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchNumber.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasBeidouRangingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchNumber()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearBeidouRangingCode()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.getter()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.currentModesOfOperation.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchWidthMm.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 32);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchWidthMm.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasGalileoSpreadingCode.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchWidthMm()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearGalileoSpreadingCode()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.branchLengthMm.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.hasBranchLengthMm.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.clearBranchLengthMm()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch(0);
  result = UnknownStorage.init()();
  *((_BYTE *)a1 + v2[6]) = 4;
  v4 = (char *)a1 + v2[7];
  *(_DWORD *)v4 = 0;
  v4[4] = 1;
  v5 = (char *)a1 + v2[8];
  *(_DWORD *)v5 = 0;
  v5[4] = 1;
  v6 = (char *)a1 + v2[9];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  return result;
}

void *static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBranch.BranchType;
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.northLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasNorthLatitudeDeg.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearNorthLatitudeDeg()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.westLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasWestLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearWestLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_PhaseTracking.accumulatedPhaseUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.southLatitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasSouthLatitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearSouthLatitudeDeg()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseUncNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

double CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.eastLongitudeDeg.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.hasEastLongitudeDeg.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.clearEastLongitudeDeg()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  result = UnknownStorage.init()();
  v4 = (char *)a1 + v2[6];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = (char *)a1 + v2[8];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = (char *)a1 + v2[9];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 24), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  *a1 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v8 = (char *)a1 + v7[6];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (char *)a1 + v7[7];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = (char *)a1 + v7[8];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = (char *)a1 + v7[9];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

void (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = MEMORY[0x24BEE4AF8];
    UnknownStorage.init()();
    v11 = (char *)v9 + v6[6];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = (char *)v9 + v6[7];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = (char *)v9 + v6[8];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    v14 = (char *)v9 + v6[9];
    *(_QWORD *)v14 = 0;
    v14[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
  }
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify;
}

void CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.boundingBox.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasBoundingBox.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearBoundingBox()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.getter()
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  _BYTE *v2;

  v2 = (_BYTE *)(v1 + *(int *)(a1(0) + 28));
  if (v2[8])
    return 0;
  else
    return *(_QWORD *)v2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureBuilding.buildingID.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 28);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeID.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeID.getter()
{
  return CLP_LogEntry_PrivateData_PhaseTracking.hasAccumulatedPhaseNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeID()()
{
  CLP_LogEntry_PrivateData_PhaseTracking.clearAccumulatedPhaseNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.setter(int a1)
{
  return CLP_LogEntry_PrivateData_AccessoryVehicleSpeedNotification.client.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.reliabilityScoreDeprecated.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 36);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasReliabilityScoreDeprecated.getter()
{
  return CLP_LogEntry_PrivateData_ConstellationId.hasQzssPrn.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearReliabilityScoreDeprecated()()
{
  CLP_LogEntry_PrivateData_ConstellationId.clearQzssPrn()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 40), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 2;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, 2, 2, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.status.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = v4 + *(int *)(a2(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v8, a3);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, v8, a4);
  v9 = a4(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
}

void (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 40);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 2;
    v9[*(int *)(v6 + 24)] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
  }
  return CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify;
}

void CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.treeFeatures.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasTreeFeatures.getter()
{
  return CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

BOOL CLP_LogEntry_PrivateData_DeviceMotionSample.hasStatus.getter(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v3 + *(int *)(v10 + 40), (uint64_t)v9, a1);
  v11 = a3(0);
  v12 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v9, a1);
  return v12;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearTreeFeatures()()
{
  CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_DeviceMotionSample.clearStatus()(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = v3 + *(int *)(a1(0) + 40);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, a2);
  v7 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0
               + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  v4 = v1 + *(int *)(result + 44);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.branchCount.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0) + 44);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.hasBranchCount.getter()
{
  return CLP_LogEntry_PrivateData_DirectionOfTravel.hasStartLatitudeDeg.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.clearBranchCount()()
{
  CLP_LogEntry_PrivateData_DirectionOfTravel.clearStartLatitudeDeg()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType and conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.codeLock.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchWidths_p.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 20);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasHasBranchWidths_p.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 20)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.clearHasBranchWidths_p()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                    + 20)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.navBit.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasBranchLengths_p.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0) + 24);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.hasHasBranchLengths_p.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                           + 24)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures.clearHasBranchLengths_p()()
{
  uint64_t v0;

  *(_BYTE *)(v0
           + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0)
                    + 24)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.init()@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  char *v10;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + v2[6];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = (char *)a1 + v2[7];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *((_BYTE *)a1 + v2[8]) = 4;
  v6 = (char *)a1 + v2[9];
  *(_DWORD *)v6 = 0;
  v6[4] = 1;
  v7 = (char *)a1 + v2[10];
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = (char *)a1 + v2[11];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  return result;
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._boundingBox@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavannaBoundingBox, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna._treeFeatures@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeFeatures, a1);
}

void *static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_GEOMapFeatureTropicalSavanna.TreeType;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.eventReceiptTime.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_GlonassId.slotInfo.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_GlonassId.hasSlotInfo.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.clearReceiptTime()()
{
  CLP_LogEntry_PrivateData_GlonassId.clearSlotInfo()(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.getter()
{
  return CLP_LogEntry_PrivateData_GpsL1SyncState.subframe.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.setter(char a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.isLastBatch.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.containsBranchGeometry.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.hasContainsBranchGeometry.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0
                  + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.clearContainsBranchGeometry()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0) + 28)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.getter(type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData, a1);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.setter(uint64_t a1)
{
  return CLP_LogEntry_AONLoc_WiFiIndication.unknownFields.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData);
}

uint64_t (*CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.unknownFields.modify())(_QWORD, _QWORD, _QWORD)
{
  type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for CLP_LogEntry_PrivateData_GEOMapTropicalSavannaData(0);
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *((_BYTE *)a1 + *(int *)(v2 + 28)) = 2;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WatchOrientation.wristOrientation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchOrientation.hasWristOrientation.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchOrientation.clearWristOrientation()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 20)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WatchOrientation.crownOrientation.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchOrientation.hasCrownOrientation.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchOrientation.clearCrownOrientation()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0) + 24)) = 4;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType and conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WatchOrientation.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.init()(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, 4, 4, a1);
}

void *static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WatchOrientation.WatchOrientationType;
}

uint64_t CLP_LogEntry_PrivateData_WristState.applicableTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t CLP_LogEntry_PrivateData_WristState.applicableTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WristState.applicableTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasApplicableTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WristState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearApplicableTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_WristState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWrist.getter()
{
  return CLP_LogEntry_PrivateData_SignalEnvironmentInfo.fidelityLevel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWrist.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWrist.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWrist.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWrist()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 24)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristSensor.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristSensor.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWristSensor.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWristSensor.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWristSensor()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 28)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristConfidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.onWristConfidence.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.onWristConfidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasOnWristConfidence.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearOnWristConfidence()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 32)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isOnCharger.getter()
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isOnCharger.setter(char a1)
{
  return CLP_LogEntry_PrivateData_GpsL2CSyncState.towDecoded.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isOnCharger.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsOnCharger.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsOnCharger()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 36)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.getter()
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_TunnelBridgeAssistance.isCloseToBridge.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isForcedOnWristEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsForcedOnWristEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsForcedOnWristEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 40)) = 2;
}

uint64_t CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t (*CLP_LogEntry_PrivateData_WristState.isWristDetectionEnabled.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_WristState.hasIsWristDetectionEnabled.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WristState.clearIsWristDetectionEnabled()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WristState(0) + 44)) = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState.WristStateType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateType and conformance CLP_LogEntry_PrivateData_WristState.WristStateType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType and conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_WristState.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_BYTE *)(a1 + v2[6]) = 4;
  *(_BYTE *)(a1 + v2[7]) = 4;
  *(_BYTE *)(a1 + v2[8]) = 4;
  *(_BYTE *)(a1 + v2[9]) = 2;
  *(_BYTE *)(a1 + v2[10]) = 2;
  *(_BYTE *)(a1 + v2[11]) = 2;
  return result;
}

void *static CLP_LogEntry_PrivateData_WristState.WristStateType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WristState.WristStateType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateType;
}

void *static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_WristState.WristStateConfidenceType;
}

uint64_t CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.applicableTime.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v2 + *(int *)(v8 + 20), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v9 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v9 - 1) + 48))(v7, 1, v9) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  UnknownStorage.init()();
  v10 = a2 + v9[5];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = a2 + v9[6];
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  v12 = a2 + v9[7];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.svTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

void (*CLP_LogEntry_PrivateData_WatchState.eventReceiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_AccelSample.applicableTime.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasEventReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SignalCorrelationPeak.hasSvTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearEventReceiptTime()()
{
  CLP_LogEntry_PrivateData_SignalCorrelationPeak.clearSvTime()(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.client.getter()
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.client.setter(int a1)
{
  return CLP_LogEntry_PrivateData_LeapSecondChange.newLeapSecond.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t (*CLP_LogEntry_PrivateData_WatchState.client.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 24);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0;
  else
    v4 = *(_DWORD *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasClient.getter()
{
  return CLP_LogEntry_PrivateData_SvMeasurementUsage.hasResidual.getter(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearClient()()
{
  CLP_LogEntry_PrivateData_SvMeasurementUsage.clearResidual()(type metadata accessor for CLP_LogEntry_PrivateData_WatchState);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.watchOrientation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 28), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + *(int *)(v7 + 20)) = 4;
  *(_BYTE *)(a1 + *(int *)(v7 + 24)) = 4;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.watchOrientation.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.corrections.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

void (*CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[*(int *)(v6 + 20)] = 4;
    v9[*(int *)(v6 + 24)] = 4;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
  }
  return CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify;
}

void CLP_LogEntry_PrivateData_WatchState.watchOrientation.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasWatchOrientation.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasCorrections.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearWatchOrientation()()
{
  CLP_LogEntry_PrivateData_Clock.clearCorrections()(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WatchOrientation?, type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.wristState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + *(int *)(v6 + 32), (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  UnknownStorage.init()();
  v8 = a1 + v7[5];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(a1 + v7[6]) = 4;
  *(_BYTE *)(a1 + v7[7]) = 4;
  *(_BYTE *)(a1 + v7[8]) = 4;
  *(_BYTE *)(a1 + v7[9]) = 2;
  *(_BYTE *)(a1 + v7[10]) = 2;
  *(_BYTE *)(a1 + v7[11]) = 2;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.wristState.setter(uint64_t a1)
{
  return CLP_LogEntry_PrivateData_Clock.receiverToGpsTime.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

void (*CLP_LogEntry_PrivateData_WatchState.wristState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  v3[2] = v6;
  v7 = *((_QWORD *)v6 - 1);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0) + 32);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v1 + v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    v12 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v9[v6[6]] = 4;
    v9[v6[7]] = 4;
    v9[v6[8]] = 4;
    v9[v6[9]] = 2;
    v9[v6[10]] = 2;
    v9[v6[11]] = 2;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
  }
  return CLP_LogEntry_PrivateData_WatchState.wristState.modify;
}

void CLP_LogEntry_PrivateData_WatchState.wristState.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_AONLoc_Request.resultOptions.modify(a1, a2, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

BOOL CLP_LogEntry_PrivateData_WatchState.hasWristState.getter()
{
  return CLP_LogEntry_PrivateData_Clock.hasReceiverToGpsTime.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WatchState, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_WatchState.clearWristState()()
{
  CLP_LogEntry_PrivateData_Clock.clearReceiverToGpsTime()(type metadata accessor for CLP_LogEntry_PrivateData_WatchState, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_WristState?, type metadata accessor for CLP_LogEntry_PrivateData_WristState);
}

uint64_t CLP_LogEntry_PrivateData_WatchState.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_WatchState(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = a1 + v2[6];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  v6 = a1 + v2[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a1 + v2[8];
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_WristState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WatchState._watchOrientation@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_WatchOrientation, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_WatchState._wristState@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of CLP_LogEntry_AONLoc_Request._resultOptions(type metadata accessor for CLP_LogEntry_PrivateData_WristState, a1);
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.getter()
{
  return CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityState.previous.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int v2;

  v2 = *(unsigned __int8 *)(v1 + *(int *)(a1(0) + 20));
  if (v2 == 5)
    return 0;
  else
    return v2;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.userSpecificPlaceType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 5)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasUserSpecificPlaceType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) != 5;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearUserSpecificPlaceType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 20)) = 5;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.placeType.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.placeType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.placeType.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasPlaceType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearPlaceType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 24)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.preferredName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.preferredName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.preferredName.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasPreferredName.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearPreferredName()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 28));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_PlaceInference.loiUuidIdentifier.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.where.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = (_QWORD *)(a1[2] + *((int *)a1 + 6));
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *v3 = v4;
    v3[1] = v2;
  }
  return result;
}

BOOL CLP_LogEntry_PrivateData_PlaceInference.hasLoiUuidIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32) + 8) != 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_PlaceInference.clearLoiUuidIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0) + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType();
  return Enum.hash(into:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType and conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType();
  return Enum.hash(into:)();
}

int *CLP_LogEntry_PrivateData_PlaceInference.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  *(_BYTE *)(a1 + result[5]) = 5;
  *(_BYTE *)(a1 + result[6]) = 3;
  v3 = (_QWORD *)(a1 + result[7]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[8]);
  *v4 = 0;
  v4[1] = 0;
  return result;
}

void *static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.UserSpecificPlaceType;
}

void *static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_PlaceInference.PlaceInferencePlaceType;
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.receiptTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasReceiptTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearReceiptTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__receiptTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.arrivalTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasArrivalTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearArrivalTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__arrivalTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.departureTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.departureTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.departureTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.departureTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasDepartureTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearDepartureTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__departureTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_BeidouTimeInfo.gpsTimeConversion.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[v6[5]];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[v6[6]];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    v13 = &v9[v6[7]];
    *(_QWORD *)v13 = 0;
    v13[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.detectionTime.setter, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasDetectionTime.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearDetectionTime()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__detectionTime;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.placeInference.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v6, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v7 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v7 - 1) + 48))(v5, 1, v7) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, a1, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  UnknownStorage.init()();
  *(_BYTE *)(a1 + v7[5]) = 5;
  *(_BYTE *)(a1 + v7[6]) = 3;
  v8 = (_QWORD *)(a1 + v7[7]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v7[8]);
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.placeInference.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  int *v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = (int *)type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v9[v6[5]] = 5;
    v9[v6[6]] = 3;
    v11 = &v9[v6[7]];
    *v11 = 0;
    v11[1] = 0;
    v12 = &v9[v6[8]];
    *v12 = 0;
    v12[1] = 0;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.placeInference.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.placeInference.setter, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasPlaceInference.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference, type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearPlaceInference()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_PlaceInference(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__placeInference;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PlaceInference?);
  swift_endAccess();
  swift_release();
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.coordinate.getter@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.coordinate.getter@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v5 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v14, (uint64_t)v13, a1);
  v15 = a4(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15) != 1)
    return outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v13, a5, a4);
  UnknownStorage.init()();
  v16 = a5 + *(int *)(v15 + 20);
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  v17 = a5 + *(int *)(v15 + 24);
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v13, a1);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.coordinate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  v10 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v11 = swift_allocObject();
    v12 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v12);
    swift_release();
    *(_QWORD *)(v2 + v10) = v11;
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v10);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(a1, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v14 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 0, 1, v14);
  outlined init with take of Proto_Gpsd_Response?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v15 = v13
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v7, v15, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  return swift_release();
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[4] = v5;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v3[5] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[6] = v9;
  v10 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20))
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v10, (uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    v12 = &v9[*(int *)(v6 + 24)];
    *(_QWORD *)v12 = 0;
    v12[8] = 1;
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v5, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  }
  else
  {
    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v5, (uint64_t)v9, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  }
  return CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.coordinate.modify(uint64_t a1, char a2)
{
  CLP_LogEntry_PrivateData_SyncState.gpsL1.modify(a1, a2, (void (*)(void *))CLP_LogEntry_PrivateData_RoutineVisit.coordinate.setter, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasCoordinate.getter()
{
  return CLP_LogEntry_PrivateData_SyncState.hasGpsL1.getter(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearCoordinate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass(0);
    v6 = swift_allocObject();
    v7 = swift_retain();
    specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:)(v7);
    swift_release();
    *(_QWORD *)(v1 + v5) = v6;
    swift_release();
  }
  v8 = *(_QWORD *)(v1 + v5);
  v9 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = v8
      + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v4, v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_endAccess();
  swift_release();
}

double CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.getter()
{
  return CLP_LogEntry_PrivateData_SvInfo.referenceTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.setter(double a1)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.setter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM, a1);
}

void (*CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4)
     + OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM;
  swift_beginAccess();
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify;
}

void CLP_LogEntry_PrivateData_RoutineVisit.horizontalAccuracyM.modify(uint64_t *a1, char a2)
{
  CLP_LogEntry_PrivateData_DaemonLocation.horizontalAccuracy.modify(a1, a2, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

BOOL CLP_LogEntry_PrivateData_RoutineVisit.hasHorizontalAccuracyM.getter()
{
  return CLP_LogEntry_PrivateData_Measurement.hasStartTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_RoutineVisit.clearHorizontalAccuracyM()()
{
  CLP_LogEntry_PrivateData_DaemonLocation.clearHorizontalAccuracy()(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit._StorageClass, (void (*)(uint64_t))specialized CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.init(copying:), &OBJC_IVAR____TtCV10ALProtobuf37CLP_LogEntry_PrivateData_RoutineVisitP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracyM);
}

uint64_t CLP_LogEntry_PrivateData_RoutineVisit.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_RoutineVisit, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_RoutineVisit._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_RoutineVisit._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.startTimeCfatSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasStartTimeCfatSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.hasTimeNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearStartTimeCfatSec()()
{
  CLP_LogEntry_PrivateData_SvTime.clearTimeNanoseconds()(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.setter(double a1)
{
  return CLP_LogEntry_PrivateData_SvTime.timeUncNanoseconds.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.mctTimestampSec.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasMctTimestampSec.getter()
{
  return CLP_LogEntry_AONLoc_Response.hasMachContinuousTimeNs.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearMctTimestampSec()()
{
  CLP_LogEntry_AONLoc_Response.clearMachContinuousTimeNs()(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.type.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28));
  if (v1 == 3)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.type.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.type.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 3)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearType()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 28)) = 3;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.undulationModel.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.confidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasConfidence.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearConfidence()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 32)) = 4;
}

double CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.setter(double a1)
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.avgTemperatureOverLastEpochDegreesCelsius.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.estimatedStateProbabilityOutdoor.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 36);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return CLP_LogEntry_AONLoc_Request.machContinuousTimeNs.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasEstimatedStateProbabilityOutdoor.getter()
{
  return CLP_LogEntry_PrivateData_ReceiverClockCorrections.hasAvgTemperatureOverLastEpochDegreesCelsius.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearEstimatedStateProbabilityOutdoor()()
{
  CLP_LogEntry_PrivateData_ReceiverClockCorrections.clearAvgTemperatureOverLastEpochDegreesCelsius()(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40));
  if (v1 == 4)
    return 0;
  else
    return v1;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.daylightConfidence.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40);
  v4 = *(unsigned __int8 *)(v1 + v3);
  if (v4 == 4)
    LOBYTE(v4) = 0;
  *(_BYTE *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasDaylightConfidence.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) != 4;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearDaylightConfidence()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 40)) = 4;
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.getter()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.setter(char a1)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.isTracked.setter(a1, type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.isAstronomicalDaytime.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return CLP_LogEntry_AONLoc_Request.ResultOptions.repeat.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasIsAstronomicalDaytime.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearIsAstronomicalDaytime()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 44)) = 2;
}

float CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

uint64_t CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.setter(float a1)
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hronset.setter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate, a1);
}

uint64_t (*CLP_LogEntry_PrivateData_OutdoorUpdate.currentLux.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0) + 48);
  v4 = *(float *)(v1 + v3);
  if (*(_BYTE *)(v1 + v3 + 4))
    v4 = 0.0;
  *(float *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  return CLP_LogEntry_AONLoc_Request.processID.modify;
}

BOOL CLP_LogEntry_PrivateData_OutdoorUpdate.hasCurrentLux.getter()
{
  return CLP_LogEntry_PrivateData_BodyMetrics.hasHronset.getter(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_OutdoorUpdate.clearCurrentLux()()
{
  CLP_LogEntry_PrivateData_BodyMetrics.clearHronset()(type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate);
}

int *CLP_LogEntry_PrivateData_OutdoorUpdate.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for CLP_LogEntry_PrivateData_OutdoorUpdate(0);
  v3 = a1 + result[5];
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = 1;
  v4 = a1 + result[6];
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  *(_BYTE *)(a1 + result[7]) = 3;
  *(_BYTE *)(a1 + result[8]) = 4;
  v5 = a1 + result[9];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  *(_BYTE *)(a1 + result[10]) = 4;
  *(_BYTE *)(a1 + result[11]) = 2;
  v6 = a1 + result[12];
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  return result;
}

double CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

double CLP_LogEntry_PrivateData_DaemonLocationPrivate.odometer.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(double *)(v2 + 16);
  if (*(_BYTE *)(v2 + 24))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 24) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.cfAbsoluteTimestampSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasCfAbsoluteTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasOdometer.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 24) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearCfAbsoluteTimestampSec()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 1;
}

double CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.deltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(double *)(v7 + 32) = a1;
  *(_BYTE *)(v7 + 40) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.machContinuousTimestampSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v10 + 32) = v4;
  *(_BYTE *)(v10 + 40) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasMachContinuousTimestampSec.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasDeltaDistance.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearMachContinuousTimestampSec()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 40) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 44);
  if (*(_BYTE *)(v1 + 48))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 44) = a1;
  *(_BYTE *)(v7 + 48) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 44);
  if (*(_BYTE *)(v5 + 48))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.sampleIntervalSec.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 44) = v4;
  *(_BYTE *)(v10 + 48) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasSampleIntervalSec.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 48) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearSampleIntervalSec()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 44) = 0;
  *(_BYTE *)(v5 + 48) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 52);
  if (*(_BYTE *)(v1 + 56))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 52) = a1;
  *(_BYTE *)(v7 + 56) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 52);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosXM.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 52) = v4;
  *(_BYTE *)(v10 + 56) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosXM.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosXM()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 52) = 0;
  *(_BYTE *)(v5 + 56) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 60);
  if (*(_BYTE *)(v1 + 64))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 60) = a1;
  *(_BYTE *)(v7 + 64) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 60);
  if (*(_BYTE *)(v5 + 64))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosYM.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 60) = v4;
  *(_BYTE *)(v10 + 64) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosYM.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 64) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosYM()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 60) = 0;
  *(_BYTE *)(v5 + 64) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 68);
  if (*(_BYTE *)(v1 + 72))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 68) = a1;
  *(_BYTE *)(v7 + 72) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 68);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dPosZM.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 68) = v4;
  *(_BYTE *)(v10 + 72) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDPosZM.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDPosZM()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 68) = 0;
  *(_BYTE *)(v5 + 72) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 76);
  if (*(_BYTE *)(v1 + 80))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 76) = a1;
  *(_BYTE *)(v7 + 80) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 76);
  if (*(_BYTE *)(v5 + 80))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelXMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 76) = v4;
  *(_BYTE *)(v10 + 80) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelXMps.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 80) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelXMps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 76) = 0;
  *(_BYTE *)(v5 + 80) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 84);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 84) = a1;
  *(_BYTE *)(v7 + 88) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 84);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelYMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 84) = v4;
  *(_BYTE *)(v10 + 88) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelYMps.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelYMps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 84) = 0;
  *(_BYTE *)(v5 + 88) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMaj.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(float *)(v2 + 92);
  if (*(_BYTE *)(v2 + 96))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 92) = a1;
  *(_BYTE *)(v7 + 96) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 92);
  if (*(_BYTE *)(v5 + 96))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.dVelZMps.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 92) = v4;
  *(_BYTE *)(v10 + 96) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasDVelZMps.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMaj.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 96) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearDVelZMps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 92) = 0;
  *(_BYTE *)(v5 + 96) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qX.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMin.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(float *)(v2 + 100);
  if (*(_BYTE *)(v2 + 104))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qX.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 100) = a1;
  *(_BYTE *)(v7 + 104) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 100);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qX.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 100) = v4;
  *(_BYTE *)(v10 + 104) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQX.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMin.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 104) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQX()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 100) = 0;
  *(_BYTE *)(v5 + 104) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qY.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

float CLP_LogEntry_PrivateData_DaemonLocationPrivate.horzUncSemiMajAz.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  result = *(float *)(v2 + 108);
  if (*(_BYTE *)(v2 + 112))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qY.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 108) = a1;
  *(_BYTE *)(v7 + 112) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 108);
  if (*(_BYTE *)(v5 + 112))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qY.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 108) = v4;
  *(_BYTE *)(v10 + 112) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQY.getter()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample);
}

BOOL CLP_LogEntry_PrivateData_DaemonLocationPrivate.hasHorzUncSemiMajAz.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v2 + 112) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQY()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 108) = 0;
  *(_BYTE *)(v5 + 112) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 116);
  if (*(_BYTE *)(v1 + 120))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 116) = a1;
  *(_BYTE *)(v7 + 120) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 116);
  if (*(_BYTE *)(v5 + 120))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qZ.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 116) = v4;
  *(_BYTE *)(v10 + 120) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQZ.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 120) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQZ()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 116) = 0;
  *(_BYTE *)(v5 + 120) = 1;
}

float CLP_LogEntry_PrivateData_InertialOdometrySample.qW.getter()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  result = *(float *)(v1 + 124);
  if (*(_BYTE *)(v1 + 128))
    return 0.0;
  return result;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.qW.setter(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(float *)(v7 + 124) = a1;
  *(_BYTE *)(v7 + 128) = 0;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(float *)(v5 + 124);
  if (*(_BYTE *)(v5 + 128))
    v6 = 0.0;
  *((float *)v3 + 20) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.qW.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  int v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 84);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(_DWORD *)(v10 + 124) = v4;
  *(_BYTE *)(v10 + 128) = 0;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasQW.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 128) & 1) == 0;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearQW()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_DWORD *)(v5 + 124) = 0;
  *(_BYTE *)(v5 + 128) = 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 129) == 3)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 129);
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 129) = a1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(unsigned __int8 *)(v5 + 129);
  if (v6 == 3)
    LOBYTE(v6) = 0;
  *((_BYTE *)v3 + 84) = v6;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.referenceFrame.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80)) + 129);
  swift_beginAccess();
  *v10 = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasReferenceFrame.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 129) != 3;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearReferenceFrame()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 129) = 3;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 130) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 130) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 130) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaPositionValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 130) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsDeltaPositionValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 130) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsDeltaPositionValid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 130) = 2;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 131) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 131) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 131) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isDeltaVelocityValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 131) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsDeltaVelocityValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 131) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsDeltaVelocityValid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 131) = 2;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 132) & 1;
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v4);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v6 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v2 + v4) = v6;
    swift_release();
  }
  v7 = *(_QWORD *)(v2 + v4);
  result = swift_beginAccess();
  *(_BYTE *)(v7 + 132) = a1 & 1;
  return result;
}

void (*CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  *((_DWORD *)v3 + 20) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 84) = *(_BYTE *)(v5 + 132) & 1;
  return CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify;
}

void CLP_LogEntry_PrivateData_InertialOdometrySample.isAttitudeValid.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = *(_BYTE *)(*a1 + 84);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 80);
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(_QWORD *)(v7 + v6);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v9 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v8);
    *(_QWORD *)(v7 + v6) = v9;
    swift_release();
  }
LABEL_4:
  v10 = *(_QWORD *)(*(_QWORD *)(v3 + 72) + *(int *)(v3 + 80));
  swift_beginAccess();
  *(_BYTE *)(v10 + 132) = v4;
  free((void *)v3);
}

BOOL CLP_LogEntry_PrivateData_InertialOdometrySample.hasIsAttitudeValid.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20));
  swift_beginAccess();
  return *(_BYTE *)(v1 + 132) != 2;
}

Swift::Void __swiftcall CLP_LogEntry_PrivateData_InertialOdometrySample.clearIsAttitudeValid()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + v2);
    type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass();
    v4 = swift_allocObject();
    specialized CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.init(copying:)(v3);
    *(_QWORD *)(v1 + v2) = v4;
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v2);
  swift_beginAccess();
  *(_BYTE *)(v5 + 132) = 2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame()
{
  lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame and conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame();
  return Enum.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_InertialOdometrySample.init()@<X0>(uint64_t a1@<X8>)
{
  return CLP_LogEntry_PrivateData_SyncState.init()(type metadata accessor for CLP_LogEntry_PrivateData_InertialOdometrySample, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_InertialOdometrySample._StorageClass.defaultInstance, a1);
}

uint64_t variable initialization expression of CLP_LogEntry_PrivateData_InertialOdometrySample._storage()
{
  return variable initialization expression of CLP_LogEntry_PrivateData_SyncState._storage(&one-time initialization token for defaultInstance);
}

void *static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame.allCases.getter()
{
  return &outlined read-only object #0 of static CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CLP_LogEntry_PrivateData_InertialOdometrySample.ReferenceFrame;
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteConstellation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchedLocationFixType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocationFixType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GnssModeOfOperation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GnssModeOfOperation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssWakeMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_OperatingMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_OperatingMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PipelineOperatingMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PipelineOperatingMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DominantMotionModeType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DominantMotionModeType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ReachabilityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ReachabilityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatteryChargerType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatteryChargerType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SignalEnvironmentFidelityLevel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionTypeCompassCalibrationLevel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_SensorFusionMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_SensorFusionMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiAccessPointMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiAccessPointMode._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiRfBand@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiRfBand._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiScanType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiScanType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WifiNotificationType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WifiNotificationType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationServicesEnabled@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationServicesEnabled._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DataAvailability@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DataAvailability._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_IndoorOutdoorConfidence@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_IndoorOutdoorConfidence._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_TimeStamp.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TimeStamp.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TimeStamp.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_TimeStamp.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_TimeStamp.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TimeStamp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TimeStamp._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TimeStamp()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_AccelSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_AccelSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_AccelSample.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t static CLP_LogEntry_PrivateData_AccelSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_AccelSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_AccelSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_AccelSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_AccelSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_AccelSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_AccelSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Accel.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Accel.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Accel.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t CLP_LogEntry_PrivateData_Accel._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
}

uint64_t CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_AccelSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_AccelSample and conformance CLP_LogEntry_PrivateData_AccelSample, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_AccelSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Accel(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_Accel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_AccelSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Accel.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Accel, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Accel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Accel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Accel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Accel._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Accel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Accel()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Accel and conformance CLP_LogEntry_PrivateData_Accel, type metadata accessor for CLP_LogEntry_PrivateData_Accel, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Accel);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_GyroSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_GyroSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_GyroSample.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_GyroSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v8;

  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5)
  {
    v8 = (int *)a4(0);
    if ((*(_BYTE *)(v4 + v8[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v4 + v8[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v4 + v8[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_GyroSample.== infix(_:_:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  return specialized static CLP_LogEntry_PrivateData_MagSample.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_GyroSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_AccelSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a2 + a1[8];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_GyroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_GyroSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_GyroSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_GyroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_GyroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Gyro.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Gyro.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Gyro.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
}

uint64_t CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_GyroSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_GyroSample and conformance CLP_LogEntry_PrivateData_GyroSample, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_GyroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Gyro(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_Gyro.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_GyroSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Gyro.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Gyro, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Accel@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Gyro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Gyro.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Gyro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Gyro@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Gyro._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Gyro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Gyro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Gyro and conformance CLP_LogEntry_PrivateData_Gyro, type metadata accessor for CLP_LogEntry_PrivateData_Gyro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Gyro);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_BaroSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BaroSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BaroSample.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        dispatch thunk of Decoder.decodeSingularFloatField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
        type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BaroSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = closure #1 in CLP_LogEntry_PrivateData_AccelSample.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample);
  if (!v4)
  {
    v6 = type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
    if ((*(_BYTE *)(v3 + *(int *)(v6 + 24) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v3 + *(int *)(v6 + 28) + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BaroSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BaroSample@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BaroSample()
{
  return CLP_LogEntry_PrivateData_BaroSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BaroSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_BaroSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BaroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BaroSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BaroSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BaroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BaroSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Baro.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Baro.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Baro.protoMessageName.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t CLP_LogEntry_PrivateData_Baro._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Baro.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Accel.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
}

uint64_t CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(v3, a1, a2, a3);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BaroSample(0);
      lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BaroSample and conformance CLP_LogEntry_PrivateData_BaroSample, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BaroSample);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_Baro(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 24), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_Baro.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static CLP_LogEntry_PrivateData_WifiScanResult.== infix(_:_:)(a1, a2, (uint64_t *)type metadata accessor for CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_BaroSample, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_BaroSample.== infix(_:_:)) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_Baro.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Baro, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Baro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Baro.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Baro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Baro@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Baro._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Baro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Baro()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Baro and conformance CLP_LogEntry_PrivateData_Baro, type metadata accessor for CLP_LogEntry_PrivateData_Baro, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Baro);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_ClientLocationCoordinate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_ClientLocationCoordinate.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientLocationCoordinate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DaemonLocation.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;

  v2 = v1;
  v3 = v0;
  v4 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation._StorageClass(0);
    v5 = swift_allocObject();
    v6 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.init(copying:)(v6);
    swift_release();
    *(_QWORD *)(v3 + v4) = v5;
    swift_release();
  }
  swift_retain();
  v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
          goto LABEL_15;
        case 2:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_17;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 12:
        case 15:
        case 21:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_17;
        case 11:
        case 16:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_17;
        case 13:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
          goto LABEL_15;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        case 17:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
          goto LABEL_15;
        case 18:
        case 19:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          goto LABEL_15;
        case 20:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
LABEL_15:
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_17;
        case 22:
          swift_beginAccess();
          v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_17:
          v2 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (*(_BYTE *)(v9 + 16) != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4)
    return swift_release();
  closure #2 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(v9, a1, a2, a3);
  v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  if ((*(_BYTE *)(v11 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v12 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if ((*(_BYTE *)(v12 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v13 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if ((*(_BYTE *)(v13 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v15 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if ((*(_BYTE *)(v15 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v16 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if ((*(_BYTE *)(v16 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v17 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if ((*(_BYTE *)(v17 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v18 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if ((*(_BYTE *)(v18 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v19 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if ((*(_BYTE *)(v19 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v20 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if ((*(_BYTE *)(v20 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v21 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  if (*v21 != 14)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(v9, a1, a2, a3);
  v22 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if ((*(_BYTE *)(v22 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v23 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if ((*(_BYTE *)(v23 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v24 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  if (*v24 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType and conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v25 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  if (*v25 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v26 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  if (*v26 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v27 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  if (*v27 != 8)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType and conformance CLP_LogEntry_PrivateData_SignalEnvironment.SignalEnvironmentType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v28 = v9
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if ((*(_BYTE *)(v28 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v29 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  if (*v29 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #2 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  double v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned __int8 *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  uint64_t v103;
  double v104;
  uint64_t v105;
  unsigned __int8 *v106;
  int v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v116 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v4 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v6 = (char *)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  v7 = MEMORY[0x24BDAC7A8](v115);
  v9 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v110 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v113 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v114 = (uint64_t)&v110 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v110 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v110 - v20;
  swift_beginAccess();
  v22 = *(char *)(a1 + 16);
  swift_beginAccess();
  v23 = *(char *)(a2 + 16);
  if (v22 == 4)
  {
    if ((_DWORD)v23 != 4)
      return 0;
  }
  else if ((_DWORD)v23 == 4 || qword_235BCBD28[v22] != qword_235BCBD28[v23])
  {
    return 0;
  }
  v111 = v9;
  v112 = v6;
  v24 = a2;
  v25 = a1;
  v26 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v26, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v27 = a2
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__coordinate;
  swift_beginAccess();
  v28 = (uint64_t)&v11[*(int *)(v115 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v27, v28, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v30 = v116;
  if (v29((uint64_t)v11, 1, v116) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    if (v29(v28, 1, v30) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_14;
    }
LABEL_11:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_56;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v29(v28, 1, v30) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_11;
  }
  v31 = v28;
  v32 = (uint64_t)v112;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v31, (uint64_t)v112, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  swift_retain();
  swift_retain();
  v33 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v19, v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v32, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v11, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((v33 & 1) == 0)
    goto LABEL_56;
LABEL_14:
  v34 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  v35 = *(double *)v34;
  LOBYTE(v34) = *(_BYTE *)(v34 + 8);
  v36 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__horizontalAccuracy;
  swift_beginAccess();
  v37 = v24;
  if ((v34 & 1) != 0)
  {
    if ((*(_BYTE *)(v36 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v36 + 8) & 1) != 0 || v35 != *(double *)v36)
  {
    goto LABEL_56;
  }
  v38 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  v39 = *(double *)v38;
  LOBYTE(v38) = *(_BYTE *)(v38 + 8);
  v40 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__altitude;
  swift_beginAccess();
  if ((v38 & 1) != 0)
  {
    if ((*(_BYTE *)(v40 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v40 + 8) & 1) != 0 || v39 != *(double *)v40)
  {
    goto LABEL_56;
  }
  v41 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  v42 = *(double *)v41;
  LOBYTE(v41) = *(_BYTE *)(v41 + 8);
  v43 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__verticalAccuracy;
  swift_beginAccess();
  if ((v41 & 1) != 0)
  {
    if ((*(_BYTE *)(v43 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v43 + 8) & 1) != 0 || v42 != *(double *)v43)
  {
    goto LABEL_56;
  }
  v44 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  v45 = *(double *)v44;
  LOBYTE(v44) = *(_BYTE *)(v44 + 8);
  v46 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speed;
  swift_beginAccess();
  if ((v44 & 1) != 0)
  {
    if ((*(_BYTE *)(v46 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v46 + 8) & 1) != 0 || v45 != *(double *)v46)
  {
    goto LABEL_56;
  }
  v47 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  v48 = *(double *)v47;
  LOBYTE(v47) = *(_BYTE *)(v47 + 8);
  v49 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__speedAccuracy;
  swift_beginAccess();
  if ((v47 & 1) != 0)
  {
    if ((*(_BYTE *)(v49 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v49 + 8) & 1) != 0 || v48 != *(double *)v49)
  {
    goto LABEL_56;
  }
  v50 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  v51 = *(double *)v50;
  LOBYTE(v50) = *(_BYTE *)(v50 + 8);
  v52 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__course;
  swift_beginAccess();
  if ((v50 & 1) != 0)
  {
    if ((*(_BYTE *)(v52 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v52 + 8) & 1) != 0 || v51 != *(double *)v52)
  {
    goto LABEL_56;
  }
  v53 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  v54 = *(double *)v53;
  LOBYTE(v53) = *(_BYTE *)(v53 + 8);
  v55 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__courseAccuracy;
  swift_beginAccess();
  if ((v53 & 1) != 0)
  {
    if ((*(_BYTE *)(v55 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v55 + 8) & 1) != 0 || v54 != *(double *)v55)
  {
    goto LABEL_56;
  }
  v56 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  v57 = *(double *)v56;
  LOBYTE(v56) = *(_BYTE *)(v56 + 8);
  v58 = v24
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  if ((v56 & 1) != 0)
  {
    if ((*(_BYTE *)(v58 + 8) & 1) != 0)
      goto LABEL_54;
LABEL_56:
    swift_release();
    swift_release();
    return 0;
  }
  if ((*(_BYTE *)(v58 + 8) & 1) != 0 || v57 != *(double *)v58)
    goto LABEL_56;
LABEL_54:
  v59 = v25;
  v60 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  v61 = v37;
  v62 = *(_DWORD *)v60;
  LOBYTE(v60) = *(_BYTE *)(v60 + 4);
  v63 = v61;
  v64 = v61
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__confidence;
  swift_beginAccess();
  if ((v60 & 1) != 0)
  {
    if ((*(_BYTE *)(v64 + 4) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v64 + 4) & 1) != 0 || v62 != *(_DWORD *)v64)
  {
    goto LABEL_56;
  }
  v66 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  v67 = *(double *)v66;
  LOBYTE(v66) = *(_BYTE *)(v66 + 8);
  v68 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__lifespan;
  swift_beginAccess();
  if ((v66 & 1) != 0)
  {
    if ((*(_BYTE *)(v68 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v68 + 8) & 1) != 0 || v67 != *(double *)v68)
  {
    goto LABEL_56;
  }
  v69 = (unsigned __int8 *)(v25
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v70 = *v69;
  v71 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__type);
  swift_beginAccess();
  v72 = *v71;
  if (v70 == 14)
  {
    if (v72 != 14)
      goto LABEL_56;
  }
  else if (v72 == 14 || v70 != v72)
  {
    goto LABEL_56;
  }
  v73 = v25
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  v74 = v114;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v73, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v75 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCoordinate;
  swift_beginAccess();
  v76 = (uint64_t)v111;
  v77 = (uint64_t)&v111[*(int *)(v115 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v74, (uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v75, v77, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v29(v76, 1, v116) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    if (v29(v77, 1, v116) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      goto LABEL_78;
    }
LABEL_75:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_56;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, v113, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if (v29(v77, 1, v116) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v113, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    goto LABEL_75;
  }
  v78 = (uint64_t)v112;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v77, (uint64_t)v112, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  v79 = v113;
  v80 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v113, v78, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v78, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v79, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((v80 & 1) == 0)
    goto LABEL_56;
LABEL_78:
  v81 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  v82 = *(double *)v81;
  LOBYTE(v81) = *(_BYTE *)(v81 + 8);
  v83 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourse;
  swift_beginAccess();
  if ((v81 & 1) != 0)
  {
    if ((*(_BYTE *)(v83 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v83 + 8) & 1) != 0 || v82 != *(double *)v83)
  {
    goto LABEL_56;
  }
  v84 = v59
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  v85 = *(_DWORD *)v84;
  LOBYTE(v84) = *(_BYTE *)(v84 + 4);
  v86 = v63
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__floor;
  swift_beginAccess();
  if ((v84 & 1) != 0)
  {
    if ((*(_BYTE *)(v86 + 4) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v86 + 4) & 1) != 0 || v85 != *(_DWORD *)v86)
  {
    goto LABEL_56;
  }
  v87 = (char *)(v59
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  v88 = *v87;
  v89 = (char *)(v63
               + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__integrity);
  swift_beginAccess();
  v90 = *v89;
  if (v88 == 5)
  {
    if ((_DWORD)v90 != 5)
      goto LABEL_56;
  }
  else if ((_DWORD)v90 == 5 || qword_235BCBD48[v88] != qword_235BCBD48[v90])
  {
    goto LABEL_56;
  }
  v91 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v92 = *v91;
  v93 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__referenceFrame);
  swift_beginAccess();
  v94 = *v93;
  if (v92 == 3)
  {
    if (v94 != 3)
      goto LABEL_56;
  }
  else if (v94 == 3 || v92 != v94)
  {
    goto LABEL_56;
  }
  v95 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  v96 = *v95;
  v97 = (unsigned __int8 *)(v63
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawReferenceFrame);
  swift_beginAccess();
  v98 = *v97;
  if (v96 == 3)
  {
    if (v98 != 3)
      goto LABEL_56;
  }
  else if (v98 == 3 || v96 != v98)
  {
    goto LABEL_56;
  }
  v99 = (unsigned __int8 *)(v59
                          + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  v100 = *v99;
  v101 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalEnvironmentType);
  swift_beginAccess();
  v102 = *v101;
  if (v100 == 8)
  {
    if (v102 != 8)
      goto LABEL_56;
  }
  else if (v102 == 8 || v100 != v102)
  {
    goto LABEL_56;
  }
  v103 = v59
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  v104 = *(double *)v103;
  LOBYTE(v103) = *(_BYTE *)(v103 + 8);
  v105 = v63
       + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__ellipsoidalAltitude;
  swift_beginAccess();
  if ((v103 & 1) != 0)
  {
    if ((*(_BYTE *)(v105 + 8) & 1) == 0)
      goto LABEL_56;
  }
  else if ((*(_BYTE *)(v105 + 8) & 1) != 0 || v104 != *(double *)v105)
  {
    goto LABEL_56;
  }
  v106 = (unsigned __int8 *)(v59
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  v107 = *v106;
  swift_release();
  v108 = (unsigned __int8 *)(v63
                           + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_DaemonLocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fromSimulationController);
  swift_beginAccess();
  v109 = *v108;
  swift_release();
  if (v107 == 2)
  {
    if (v109 != 2)
      return 0;
  }
  else if (v109 == 2 || ((((v109 & 1) == 0) ^ v107) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int CLP_LogEntry_PrivateData_DaemonLocation.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocation()
{
  return CLP_LogEntry_PrivateData_DaemonLocation.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DaemonLocation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocation()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.ClientLocationSuitabilityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocation.LocationIntegrityType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MapMatcherData.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_MapMatcherData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[7]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[8]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MapMatcherData.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  return CLP_LogEntry_PrivateData_MapMatcherData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MapMatcherData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MapMatcherData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MapMatcherData()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_PressureSample.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_PressureSample.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_PressureSample.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    v4 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_PressureSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  result = a4(0);
  v7 = result;
  if ((*(_BYTE *)(v4 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v5)
  {
    if ((*(_BYTE *)(v4 + *(int *)(v7 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static CLP_LogEntry_PrivateData_PressureSample.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_PressureSample.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_PressureSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_PressureSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_PressureSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_PressureSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_PressureSample()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_ClientSatelliteInfo.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          break;
        case 7:
        case 8:
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int *v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
  v10 = (int *)result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 7)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientSatelliteConstellation and conformance CLP_LogEntry_PrivateData_ClientSatelliteConstellation();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + v10[6] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[7] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    if ((*(_BYTE *)(v5 + v10[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
    closure #5 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #6 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #7 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    closure #8 in CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(v5, a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_ClientSatelliteInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 7;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  v7 = a1[8];
  v8 = a2 + a1[7];
  *(_DWORD *)v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  v9 = a2 + v7;
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  v10 = a1[10];
  v11 = a2 + a1[9];
  *(_DWORD *)v11 = 0;
  *(_BYTE *)(v11 + 4) = 1;
  v12 = a2 + v10;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  v13 = a1[12];
  *(_BYTE *)(a2 + a1[11]) = 2;
  *(_BYTE *)(a2 + v13) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientSatelliteInfo.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_ClientSatelliteInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  swift_bridgeObjectRelease();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  unint64_t *v12;
  void *v13;

  v2 = v0;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    specialized CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.init(copying:)(v5);
    swift_release();
    *(_QWORD *)(v2 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  v8 = v1;
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 12:
        case 20:
        case 21:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 32:
        case 33:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 44:
        case 45:
        case 50:
        case 51:
          swift_beginAccess();
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_27;
        case 6:
        case 7:
        case 8:
        case 18:
          swift_beginAccess();
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_27;
        case 9:
        case 15:
        case 23:
        case 31:
        case 34:
        case 43:
        case 53:
        case 56:
          swift_beginAccess();
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_27;
        case 10:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
          goto LABEL_25;
        case 11:
        case 19:
        case 35:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          v13 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate;
          goto LABEL_19;
        case 13:
        case 14:
          swift_beginAccess();
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_27;
        case 16:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample;
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample;
          v13 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample;
          goto LABEL_19;
        case 17:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
          goto LABEL_25;
        case 22:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
          goto LABEL_25;
        case 24:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData;
          v12 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData;
          v13 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData;
          goto LABEL_19;
        case 37:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
          goto LABEL_25;
        case 46:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
          v10 = v8;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_27;
        case 47:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
          goto LABEL_25;
        case 48:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          v11 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
          v12 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
          v13 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo;
LABEL_19:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v12, v11, (uint64_t)v13);
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_27;
        case 49:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
          goto LABEL_25;
        case 52:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
          goto LABEL_25;
        case 54:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
          goto LABEL_25;
        case 55:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
LABEL_25:
          v10 = v8;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_27:
          v8 = v10;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;

  v5 = v3;
  v9 = *(_BYTE **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0) + 20));
  swift_retain();
  swift_beginAccess();
  if ((v9[24] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (v4)
    return swift_release();
  swift_beginAccess();
  if ((v9[40] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[56] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[72] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[88] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[96] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[104] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[112] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[113] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[114] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v10 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse];
  swift_beginAccess();
  if ((v10[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v11 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay];
  swift_beginAccess();
  if ((v11[4] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v12 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass];
  swift_beginAccess();
  if ((v12[4] & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  v13 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted];
  swift_beginAccess();
  if (*v13 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #16 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v14 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel];
  swift_beginAccess();
  if (*v14 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v15 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation];
  swift_beginAccess();
  if ((v15[4] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  closure #19 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v16 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy];
  swift_beginAccess();
  if ((v16[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v17 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime];
  swift_beginAccess();
  if ((v17[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v18 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice];
  swift_beginAccess();
  if (*v18 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v19 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates];
  swift_beginAccess();
  if (*v19 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #24 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v20 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope];
  swift_beginAccess();
  if ((v20[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v21 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope];
  swift_beginAccess();
  if ((v21[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v22 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude];
  swift_beginAccess();
  if ((v22[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v23 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty];
  swift_beginAccess();
  if ((v23[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v24 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude];
  swift_beginAccess();
  if ((v24[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v25 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty];
  swift_beginAccess();
  if ((v25[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v26 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed];
  swift_beginAccess();
  if (*v26 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v27 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy];
  swift_beginAccess();
  if ((v27[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v28 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy];
  swift_beginAccess();
  if ((v28[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v29 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused];
  swift_beginAccess();
  if (*v29 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  closure #35 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v30 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy];
  swift_beginAccess();
  if ((v30[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v31 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame];
  swift_beginAccess();
  if (*v31 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType and conformance CLP_LogEntry_PrivateData_ClientLocationReferenceFrameType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v32 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse];
  swift_beginAccess();
  if ((v32[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v33 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy];
  swift_beginAccess();
  if ((v33[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v34 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError];
  swift_beginAccess();
  if ((v34[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v35 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude];
  swift_beginAccess();
  if ((v35[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v36 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy];
  swift_beginAccess();
  if ((v36[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v37 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl];
  swift_beginAccess();
  if (*v37 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v38 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude];
  swift_beginAccess();
  if ((v38[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v39 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy];
  swift_beginAccess();
  if ((v39[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v40 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport];
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v40 + 16))
  {
    type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientSatelliteInfo and conformance CLP_LogEntry_PrivateData_ClientSatelliteInfo, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientSatelliteInfo);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
  }
  v41 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent];
  swift_beginAccess();
  if (*v41 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #47 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  v42 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState];
  swift_beginAccess();
  if (*v42 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v43 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor];
  swift_beginAccess();
  if ((v43[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v44 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor];
  swift_beginAccess();
  if ((v44[8] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v45 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType];
  swift_beginAccess();
  if (*v45 != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v46 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching];
  swift_beginAccess();
  if (*v46 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v47 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy];
  swift_beginAccess();
  if (*v47 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v48 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType];
  swift_beginAccess();
  if (*v48 != 5)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_BatchedLocationFixType and conformance CLP_LogEntry_PrivateData_BatchedLocationFixType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  v49 = &v9[OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp];
  swift_beginAccess();
  if (*v49 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #16 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_PressureSample and conformance CLP_LogEntry_PrivateData_PressureSample, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_PressureSample);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
}

uint64_t closure #19 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #24 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MapMatcherData and conformance CLP_LogEntry_PrivateData_MapMatcherData, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MapMatcherData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
}

uint64_t closure #35 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_ClientLocationCoordinate and conformance CLP_LogEntry_PrivateData_ClientLocationCoordinate, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
}

uint64_t closure #47 in closure #1 in CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)) & 1;
}

uint64_t closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  double v46;
  char v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double *v51;
  char v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double *v56;
  char v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double *v61;
  char v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  double *v66;
  char v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  float *v71;
  char v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  float *v76;
  char v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float *v81;
  char v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  char v103;
  uint64_t v104;
  int *v105;
  int v106;
  char v107;
  uint64_t v108;
  int *v109;
  int v110;
  char v111;
  uint64_t v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  unsigned __int8 *v128;
  int v129;
  unsigned __int8 *v130;
  int v131;
  uint64_t v132;
  float v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  double v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  char v150;
  uint64_t v151;
  unsigned __int8 *v152;
  int v153;
  unsigned __int8 *v154;
  int v155;
  unsigned __int8 *v156;
  int v157;
  unsigned __int8 *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  double v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  char v191;
  uint64_t v192;
  unsigned __int8 *v193;
  int v194;
  unsigned __int8 *v195;
  int v196;
  uint64_t v197;
  double v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  double v202;
  char v203;
  uint64_t v204;
  unsigned __int8 *v205;
  int v206;
  unsigned __int8 *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  double v218;
  char v219;
  uint64_t v220;
  unsigned __int8 *v221;
  int v222;
  unsigned __int8 *v223;
  int v224;
  uint64_t v225;
  double v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  char v243;
  uint64_t v244;
  unsigned __int8 *v245;
  int v246;
  unsigned __int8 *v247;
  int v248;
  uint64_t v249;
  double v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  char v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  char v261;
  unsigned __int8 *v262;
  int v263;
  unsigned __int8 *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int (*v271)(uint64_t, uint64_t, uint64_t);
  uint64_t v272;
  uint64_t v273;
  char v274;
  unsigned __int8 *v275;
  int v276;
  unsigned __int8 *v277;
  int v278;
  uint64_t v279;
  double v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  double v284;
  char v285;
  uint64_t v286;
  unsigned __int8 *v287;
  int v288;
  unsigned __int8 *v289;
  int v290;
  unsigned __int8 *v291;
  int v292;
  unsigned __int8 *v293;
  int v294;
  unsigned __int8 *v295;
  int v296;
  unsigned __int8 *v297;
  int v298;
  unsigned __int8 *v299;
  int v300;
  unsigned __int8 *v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  unsigned __int8 *v305;
  int v306;
  uint64_t v307;
  unsigned int (*v308)(uint64_t, uint64_t, uint64_t);
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;

  v324 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v321 = *(_QWORD *)(v324 - 8);
  MEMORY[0x24BDAC7A8](v324);
  v325 = (uint64_t)&v307 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?));
  MEMORY[0x24BDAC7A8](v320);
  v326 = (uint64_t)&v307 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v323 = (uint64_t)&v307 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v322 = (uint64_t)&v307 - v9;
  v314 = type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData(0);
  v311 = *(_QWORD *)(v314 - 8);
  MEMORY[0x24BDAC7A8](v314);
  v315 = (uint64_t)&v307 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MapMatcherData?, CLP_LogEntry_PrivateData_MapMatcherData?));
  MEMORY[0x24BDAC7A8](v310);
  v316 = (uint64_t)&v307 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v313 = (uint64_t)&v307 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v312 = (uint64_t)&v307 - v15;
  v333 = type metadata accessor for CLP_LogEntry_PrivateData_PressureSample(0);
  v16 = *(_QWORD *)(v333 - 8);
  MEMORY[0x24BDAC7A8](v333);
  v330 = (uint64_t)&v307 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PressureSample?, CLP_LogEntry_PrivateData_PressureSample?));
  MEMORY[0x24BDAC7A8](v18);
  v334 = (uint64_t)&v307 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v331 = (uint64_t)&v307 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v332 = (uint64_t)&v307 - v23;
  v337 = type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate(0);
  v24 = *(_QWORD *)(v337 - 8);
  MEMORY[0x24BDAC7A8](v337);
  v335 = (uint64_t)&v307 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
  v26 = MEMORY[0x24BDAC7A8](v336);
  v319 = (uint64_t)&v307 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v329 = (uint64_t)&v307 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v307 - v30;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v318 = (uint64_t)&v307 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v317 = (uint64_t)&v307 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v327 = (uint64_t)&v307 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v328 = (uint64_t)&v307 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v307 - v42;
  MEMORY[0x24BDAC7A8](v41);
  v45 = (char *)&v307 - v44;
  swift_beginAccess();
  v46 = *(double *)(a1 + 16);
  v339 = a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  v338 = a2;
  v47 = *(_BYTE *)(a2 + 24);
  if ((a1 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v46 != *(double *)(a2 + 16))
      v47 = 1;
    if ((v47 & 1) != 0)
      return 0;
  }
  v48 = v339;
  swift_beginAccess();
  v49 = *(double *)(v48 + 32);
  LOBYTE(v48) = *(_BYTE *)(v48 + 40);
  v50 = v338;
  v51 = (double *)(v338 + 32);
  swift_beginAccess();
  v52 = *(_BYTE *)(v50 + 40);
  if ((v48 & 1) != 0)
  {
    if (!*(_BYTE *)(v50 + 40))
      return 0;
  }
  else
  {
    if (v49 != *v51)
      v52 = 1;
    if ((v52 & 1) != 0)
      return 0;
  }
  v53 = v339;
  swift_beginAccess();
  v54 = *(double *)(v53 + 48);
  LOBYTE(v53) = *(_BYTE *)(v53 + 56);
  v55 = v338;
  v56 = (double *)(v338 + 48);
  swift_beginAccess();
  v57 = *(_BYTE *)(v55 + 56);
  if ((v53 & 1) != 0)
  {
    if (!*(_BYTE *)(v55 + 56))
      return 0;
  }
  else
  {
    if (v54 != *v56)
      v57 = 1;
    if ((v57 & 1) != 0)
      return 0;
  }
  v58 = v339;
  swift_beginAccess();
  v59 = *(double *)(v58 + 64);
  LOBYTE(v58) = *(_BYTE *)(v58 + 72);
  v60 = v338;
  v61 = (double *)(v338 + 64);
  swift_beginAccess();
  v62 = *(_BYTE *)(v60 + 72);
  if ((v58 & 1) != 0)
  {
    if (!*(_BYTE *)(v60 + 72))
      return 0;
  }
  else
  {
    if (v59 != *v61)
      v62 = 1;
    if ((v62 & 1) != 0)
      return 0;
  }
  v63 = v339;
  swift_beginAccess();
  v64 = *(double *)(v63 + 80);
  LOBYTE(v63) = *(_BYTE *)(v63 + 88);
  v65 = v338;
  v66 = (double *)(v338 + 80);
  swift_beginAccess();
  v67 = *(_BYTE *)(v65 + 88);
  if ((v63 & 1) != 0)
  {
    if (!*(_BYTE *)(v65 + 88))
      return 0;
  }
  else
  {
    if (v64 != *v66)
      v67 = 1;
    if ((v67 & 1) != 0)
      return 0;
  }
  v68 = v339;
  swift_beginAccess();
  v69 = *(float *)(v68 + 92);
  LOBYTE(v68) = *(_BYTE *)(v68 + 96);
  v70 = v338;
  v71 = (float *)(v338 + 92);
  swift_beginAccess();
  v72 = *(_BYTE *)(v70 + 96);
  if ((v68 & 1) != 0)
  {
    if (!*(_BYTE *)(v70 + 96))
      return 0;
  }
  else
  {
    if (v69 != *v71)
      v72 = 1;
    if ((v72 & 1) != 0)
      return 0;
  }
  v73 = v339;
  swift_beginAccess();
  v74 = *(float *)(v73 + 100);
  LOBYTE(v73) = *(_BYTE *)(v73 + 104);
  v75 = v338;
  v76 = (float *)(v338 + 100);
  swift_beginAccess();
  v77 = *(_BYTE *)(v75 + 104);
  if ((v73 & 1) != 0)
  {
    if (!*(_BYTE *)(v75 + 104))
      return 0;
  }
  else
  {
    if (v74 != *v76)
      v77 = 1;
    if ((v77 & 1) != 0)
      return 0;
  }
  v78 = v339;
  swift_beginAccess();
  v79 = *(float *)(v78 + 108);
  LOBYTE(v78) = *(_BYTE *)(v78 + 112);
  v80 = v338;
  v81 = (float *)(v338 + 108);
  swift_beginAccess();
  v82 = *(_BYTE *)(v80 + 112);
  if ((v78 & 1) != 0)
  {
    if (!*(_BYTE *)(v80 + 112))
      return 0;
  }
  else
  {
    if (v79 != *v81)
      v82 = 1;
    if ((v82 & 1) != 0)
      return 0;
  }
  v83 = v339;
  swift_beginAccess();
  v84 = *(unsigned __int8 *)(v83 + 113);
  v85 = v338;
  swift_beginAccess();
  v86 = *(unsigned __int8 *)(v85 + 113);
  if (v84 == 2)
  {
    if (v86 != 2)
      return 0;
  }
  else if (v86 == 2 || ((((v86 & 1) == 0) ^ v84) & 1) == 0)
  {
    return 0;
  }
  v87 = v339;
  swift_beginAccess();
  v88 = *(unsigned __int8 *)(v87 + 114);
  v89 = v338;
  swift_beginAccess();
  v90 = *(unsigned __int8 *)(v89 + 114);
  if (v88 == 4)
  {
    if (v90 != 4)
      return 0;
LABEL_59:
    v92 = v339
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v92, (uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    v93 = v338;
    v94 = v338
        + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCoordinate;
    swift_beginAccess();
    v95 = (uint64_t)&v31[*(int *)(v336 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, (uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    v309 = v95;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v94, v95, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
    v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    v97 = v337;
    if (v96((uint64_t)v31, 1, v337) == 1)
    {
      v98 = v339;
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      if (v96(v309, 1, v97) == 1)
      {
        v308 = v96;
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        goto LABEL_67;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, (uint64_t)v43, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      v99 = v309;
      if (v96(v309, 1, v97) != 1)
      {
        v308 = v96;
        v100 = v335;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v99, v335, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        v98 = v339;
        swift_retain();
        v93 = v338;
        swift_retain();
        LODWORD(v309) = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)((uint64_t)v43, v100, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v100, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
        if ((v309 & 1) == 0)
          goto LABEL_94;
LABEL_67:
        v101 = v98
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        v102 = *(double *)v101;
        v103 = *(_BYTE *)(v101 + 8);
        v104 = v93
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchCourse;
        swift_beginAccess();
        if ((v103 & 1) != 0)
        {
          if ((*(_BYTE *)(v104 + 8) & 1) == 0)
            goto LABEL_94;
        }
        else if ((*(_BYTE *)(v104 + 8) & 1) != 0 || v102 != *(double *)v104)
        {
          goto LABEL_94;
        }
        v105 = (int *)(v339
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay);
        swift_beginAccess();
        v106 = *v105;
        v107 = *((_BYTE *)v105 + 4);
        v108 = v338
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchFormOfWay;
        swift_beginAccess();
        if ((v107 & 1) != 0)
        {
          if ((*(_BYTE *)(v108 + 4) & 1) == 0)
            goto LABEL_94;
        }
        else if ((*(_BYTE *)(v108 + 4) & 1) != 0 || v106 != *(_DWORD *)v108)
        {
          goto LABEL_94;
        }
        v109 = (int *)(v339
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass);
        swift_beginAccess();
        v110 = *v109;
        v111 = *((_BYTE *)v109 + 4);
        v112 = v338
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchRoadClass;
        swift_beginAccess();
        if ((v111 & 1) != 0)
        {
          if ((*(_BYTE *)(v112 + 4) & 1) == 0)
            goto LABEL_94;
        }
        else if ((*(_BYTE *)(v112 + 4) & 1) != 0 || v110 != *(_DWORD *)v112)
        {
          goto LABEL_94;
        }
        v113 = (unsigned __int8 *)(v339
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        v114 = *v113;
        v115 = (unsigned __int8 *)(v338
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__matchShifted);
        swift_beginAccess();
        v116 = *v115;
        if (v114 == 2)
        {
          if (v116 != 2)
            goto LABEL_94;
        }
        else if (v116 == 2 || ((((v116 & 1) == 0) ^ v114) & 1) == 0)
        {
          goto LABEL_94;
        }
        v117 = v339
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        v118 = v332;
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v117, v332, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        v119 = v338
             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__pressure;
        swift_beginAccess();
        v120 = v334;
        v121 = v334 + *(int *)(v18 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v118, v334, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v119, v121, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
        v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
        if (v122(v120, 1, v333) == 1)
        {
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v332, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          if (v122(v121, 1, v333) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v334, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            goto LABEL_98;
          }
        }
        else
        {
          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v334, v331, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          if (v122(v121, 1, v333) != 1)
          {
            v125 = v330;
            outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v121, v330, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            v126 = v331;
            v127 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v331, v125, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v125, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v332, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v126, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v334, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
            if ((v127 & 1) == 0)
              goto LABEL_94;
LABEL_98:
            v128 = (unsigned __int8 *)(v339
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            v129 = *v128;
            v130 = (unsigned __int8 *)(v338
                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulationModel);
            swift_beginAccess();
            v131 = *v130;
            if (v129 == 4)
            {
              if (v131 != 4)
                goto LABEL_94;
            }
            else if (v131 == 4 || v129 != v131)
            {
              goto LABEL_94;
            }
            v132 = v339
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            v133 = *(float *)v132;
            v134 = *(_BYTE *)(v132 + 4);
            v135 = v338
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__undulation;
            swift_beginAccess();
            if ((v134 & 1) != 0)
            {
              if ((*(_BYTE *)(v135 + 4) & 1) == 0)
                goto LABEL_94;
            }
            else if ((*(_BYTE *)(v135 + 4) & 1) != 0 || v133 != *(float *)v135)
            {
              goto LABEL_94;
            }
            v136 = v339
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            v137 = v328;
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v136, v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            v138 = v338
                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialCoordinate;
            swift_beginAccess();
            v139 = v329;
            v140 = v329 + *(int *)(v336 + 48);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v137, v329, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v138, v140, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            if (v308(v139, 1, v337) == 1)
            {
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              if (v308(v140, 1, v337) == 1)
              {
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v329, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                goto LABEL_115;
              }
            }
            else
            {
              outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v329, v327, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              if (v308(v140, 1, v337) != 1)
              {
                v141 = v335;
                outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v140, v335, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                v142 = v327;
                v143 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v327, v141, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v141, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v142, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v329, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                if ((v143 & 1) == 0)
                  goto LABEL_94;
LABEL_115:
                v144 = v339
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                v145 = *(double *)v144;
                v146 = *(_BYTE *)(v144 + 8);
                v147 = v338
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__specialHorizontalAccuracy;
                swift_beginAccess();
                if ((v146 & 1) != 0)
                {
                  if ((*(_BYTE *)(v147 + 8) & 1) == 0)
                    goto LABEL_94;
                }
                else if ((*(_BYTE *)(v147 + 8) & 1) != 0 || v145 != *(double *)v147)
                {
                  goto LABEL_94;
                }
                v148 = v339
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                v149 = *(double *)v148;
                v150 = *(_BYTE *)(v148 + 8);
                v151 = v338
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__machContinuousTime;
                swift_beginAccess();
                if ((v150 & 1) != 0)
                {
                  if ((*(_BYTE *)(v151 + 8) & 1) == 0)
                    goto LABEL_94;
                }
                else if ((*(_BYTE *)(v151 + 8) & 1) != 0 || v149 != *(double *)v151)
                {
                  goto LABEL_94;
                }
                v152 = (unsigned __int8 *)(v339
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                v153 = *v152;
                v154 = (unsigned __int8 *)(v338
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__originDevice);
                swift_beginAccess();
                v155 = *v154;
                if (v153 == 3)
                {
                  if (v155 != 3)
                    goto LABEL_94;
                }
                else if (v155 == 3 || v153 != v155)
                {
                  goto LABEL_94;
                }
                v156 = (unsigned __int8 *)(v339
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                v157 = *v156;
                v158 = (unsigned __int8 *)(v338
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isMatcherPropagatedCoordinates);
                swift_beginAccess();
                v159 = *v158;
                if (v157 == 2)
                {
                  if (v159 != 2)
                    goto LABEL_94;
                }
                else if (v159 == 2 || ((((v159 & 1) == 0) ^ v157) & 1) == 0)
                {
                  goto LABEL_94;
                }
                v160 = v339
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                v161 = v312;
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v160, v312, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                v162 = v338
                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherData;
                swift_beginAccess();
                v163 = v316;
                v164 = v316 + *(int *)(v310 + 48);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v161, v316, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v162, v164, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                v165 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48);
                if (v165(v163, 1, v314) == 1)
                {
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v312, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  if (v165(v164, 1, v314) == 1)
                  {
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v316, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    goto LABEL_142;
                  }
                }
                else
                {
                  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v316, v313, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  if (v165(v164, 1, v314) != 1)
                  {
                    v166 = v315;
                    outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v164, v315, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    v167 = v313;
                    v168 = specialized static CLP_LogEntry_PrivateData_MapMatcherData.== infix(_:_:)(v313, v166);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v166, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v312, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v167, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v316, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                    if ((v168 & 1) == 0)
                      goto LABEL_94;
LABEL_142:
                    v169 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    v170 = *(double *)v169;
                    v171 = *(_BYTE *)(v169 + 8);
                    v172 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__slope;
                    swift_beginAccess();
                    if ((v171 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v172 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v172 + 8) & 1) != 0 || v170 != *(double *)v172)
                    {
                      goto LABEL_94;
                    }
                    v173 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    v174 = *(double *)v173;
                    v175 = *(_BYTE *)(v173 + 8);
                    v176 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__maxAbsSlope;
                    swift_beginAccess();
                    if ((v175 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v176 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v176 + 8) & 1) != 0 || v174 != *(double *)v176)
                    {
                      goto LABEL_94;
                    }
                    v177 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    v178 = *(double *)v177;
                    v179 = *(_BYTE *)(v177 + 8);
                    v180 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitude;
                    swift_beginAccess();
                    if ((v179 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v180 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v180 + 8) & 1) != 0 || v178 != *(double *)v180)
                    {
                      goto LABEL_94;
                    }
                    v181 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    v182 = *(double *)v181;
                    v183 = *(_BYTE *)(v181 + 8);
                    v184 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__groundAltitudeUncertainty;
                    swift_beginAccess();
                    if ((v183 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v184 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v184 + 8) & 1) != 0 || v182 != *(double *)v184)
                    {
                      goto LABEL_94;
                    }
                    v185 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    v186 = *(double *)v185;
                    v187 = *(_BYTE *)(v185 + 8);
                    v188 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitude;
                    swift_beginAccess();
                    if ((v187 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v188 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v188 + 8) & 1) != 0 || v186 != *(double *)v188)
                    {
                      goto LABEL_94;
                    }
                    v189 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    v190 = *(double *)v189;
                    v191 = *(_BYTE *)(v189 + 8);
                    v192 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__smoothedGpsAltitudeUncertainty;
                    swift_beginAccess();
                    if ((v191 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v192 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v192 + 8) & 1) != 0 || v190 != *(double *)v192)
                    {
                      goto LABEL_94;
                    }
                    v193 = (unsigned __int8 *)(v339
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    v194 = *v193;
                    v195 = (unsigned __int8 *)(v338
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isSimulatedOrSpoofed);
                    swift_beginAccess();
                    v196 = *v195;
                    if (v194 == 2)
                    {
                      if (v196 != 2)
                        goto LABEL_94;
                    }
                    else if (v196 == 2 || ((((v196 & 1) == 0) ^ v194) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    v197 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    v198 = *(double *)v197;
                    v199 = *(_BYTE *)(v197 + 8);
                    v200 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawHorizontalAccuracy;
                    swift_beginAccess();
                    if ((v199 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v200 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v200 + 8) & 1) != 0 || v198 != *(double *)v200)
                    {
                      goto LABEL_94;
                    }
                    v201 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    v202 = *(double *)v201;
                    v203 = *(_BYTE *)(v201 + 8);
                    v204 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawCourseAccuracy;
                    swift_beginAccess();
                    if ((v203 & 1) != 0)
                    {
                      if ((*(_BYTE *)(v204 + 8) & 1) == 0)
                        goto LABEL_94;
                    }
                    else if ((*(_BYTE *)(v204 + 8) & 1) != 0 || v202 != *(double *)v204)
                    {
                      goto LABEL_94;
                    }
                    v205 = (unsigned __int8 *)(v339
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    v206 = *v205;
                    v207 = (unsigned __int8 *)(v338
                                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFused);
                    swift_beginAccess();
                    v208 = *v207;
                    if (v206 == 2)
                    {
                      if (v208 != 2)
                        goto LABEL_94;
                    }
                    else if (v208 == 2 || ((((v208 & 1) == 0) ^ v206) & 1) == 0)
                    {
                      goto LABEL_94;
                    }
                    v209 = v339
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    v210 = v317;
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v209, v317, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    v211 = v338
                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCoordinate;
                    swift_beginAccess();
                    v212 = v319;
                    v213 = v319 + *(int *)(v336 + 48);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v210, v319, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v211, v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    if (v308(v212, 1, v337) == 1)
                    {
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v317, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      if (v308(v213, 1, v337) == 1)
                      {
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v319, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
LABEL_199:
                        v217 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        v218 = *(double *)v217;
                        v219 = *(_BYTE *)(v217 + 8);
                        v220 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedHorizontalAccuracy;
                        swift_beginAccess();
                        if ((v219 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v220 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v220 + 8) & 1) != 0 || v218 != *(double *)v220)
                        {
                          goto LABEL_94;
                        }
                        v221 = (unsigned __int8 *)(v339
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        v222 = *v221;
                        v223 = (unsigned __int8 *)(v338
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedReferenceFrame);
                        swift_beginAccess();
                        v224 = *v223;
                        if (v222 == 3)
                        {
                          if (v224 != 3)
                            goto LABEL_94;
                        }
                        else if (v224 == 3 || v222 != v224)
                        {
                          goto LABEL_94;
                        }
                        v225 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        v226 = *(double *)v225;
                        v227 = *(_BYTE *)(v225 + 8);
                        v228 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourse;
                        swift_beginAccess();
                        if ((v227 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v228 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v228 + 8) & 1) != 0 || v226 != *(double *)v228)
                        {
                          goto LABEL_94;
                        }
                        v229 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        v230 = *(double *)v229;
                        v231 = *(_BYTE *)(v229 + 8);
                        v232 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedCourseAccuracy;
                        swift_beginAccess();
                        if ((v231 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v232 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v232 + 8) & 1) != 0 || v230 != *(double *)v232)
                        {
                          goto LABEL_94;
                        }
                        v233 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        v234 = *(double *)v233;
                        v235 = *(_BYTE *)(v233 + 8);
                        v236 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedWorstCaseError;
                        swift_beginAccess();
                        if ((v235 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v236 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v236 + 8) & 1) != 0 || v234 != *(double *)v236)
                        {
                          goto LABEL_94;
                        }
                        v237 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        v238 = *(double *)v237;
                        v239 = *(_BYTE *)(v237 + 8);
                        v240 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingAltitude;
                        swift_beginAccess();
                        if ((v239 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v240 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v240 + 8) & 1) != 0 || v238 != *(double *)v240)
                        {
                          goto LABEL_94;
                        }
                        v241 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        v242 = *(double *)v241;
                        v243 = *(_BYTE *)(v241 + 8);
                        v244 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__preFusingVerticalAccuracy;
                        swift_beginAccess();
                        if ((v243 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v244 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v244 + 8) & 1) != 0 || v242 != *(double *)v244)
                        {
                          goto LABEL_94;
                        }
                        v245 = (unsigned __int8 *)(v339
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        v246 = *v245;
                        v247 = (unsigned __int8 *)(v338
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isCoordinateFusedWithVl);
                        swift_beginAccess();
                        v248 = *v247;
                        if (v246 == 2)
                        {
                          if (v248 != 2)
                            goto LABEL_94;
                        }
                        else if (v248 == 2 || ((((v248 & 1) == 0) ^ v246) & 1) == 0)
                        {
                          goto LABEL_94;
                        }
                        v249 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        v250 = *(double *)v249;
                        v251 = *(_BYTE *)(v249 + 8);
                        v252 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedAltitude;
                        swift_beginAccess();
                        if ((v251 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v252 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v252 + 8) & 1) != 0 || v250 != *(double *)v252)
                        {
                          goto LABEL_94;
                        }
                        v253 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        v254 = *(double *)v253;
                        v255 = *(_BYTE *)(v253 + 8);
                        v256 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__fusedVerticalAccuracy;
                        swift_beginAccess();
                        if ((v255 & 1) != 0)
                        {
                          if ((*(_BYTE *)(v256 + 8) & 1) == 0)
                            goto LABEL_94;
                        }
                        else if ((*(_BYTE *)(v256 + 8) & 1) != 0 || v254 != *(double *)v256)
                        {
                          goto LABEL_94;
                        }
                        v257 = (uint64_t *)(v339
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        v258 = *v257;
                        v259 = (uint64_t *)(v338
                                         + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__satelliteVisibilityReport);
                        swift_beginAccess();
                        v260 = *v259;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v261 = specialized static Array<A>.== infix(_:_:)(v258, v260, type metadata accessor for CLP_LogEntry_PrivateData_ClientSatelliteInfo, (uint64_t (*)(char *, char *))specialized static CLP_LogEntry_PrivateData_ClientSatelliteInfo.== infix(_:_:));
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v261 & 1) == 0)
                          goto LABEL_94;
                        v262 = (unsigned __int8 *)(v339
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        v263 = *v262;
                        v264 = (unsigned __int8 *)(v338
                                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__gnssContent);
                        swift_beginAccess();
                        v265 = *v264;
                        if (v263 == 3)
                        {
                          if (v265 != 3)
                            goto LABEL_94;
                        }
                        else if (v265 == 3 || v263 != v265)
                        {
                          goto LABEL_94;
                        }
                        v266 = v339
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        v267 = v322;
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v266, v322, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        v268 = v338
                             + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__rawAltitude;
                        swift_beginAccess();
                        v269 = v326;
                        v270 = v326 + *(int *)(v320 + 48);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v267, v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v268, v270, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        v271 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v321 + 48);
                        if (v271(v269, 1, v324) == 1)
                        {
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v322, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          if (v271(v270, 1, v324) == 1)
                          {
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
LABEL_262:
                            v275 = (unsigned __int8 *)(v339
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            v276 = *v275;
                            v277 = (unsigned __int8 *)(v338
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextState);
                            swift_beginAccess();
                            v278 = *v277;
                            if (v276 == 3)
                            {
                              if (v278 != 3)
                                goto LABEL_94;
                            }
                            else if (v278 == 3 || v276 != v278)
                            {
                              goto LABEL_94;
                            }
                            v279 = v339
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            v280 = *(double *)v279;
                            v281 = *(_BYTE *)(v279 + 8);
                            v282 = v338
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityIndoor;
                            swift_beginAccess();
                            if ((v281 & 1) != 0)
                            {
                              if ((*(_BYTE *)(v282 + 8) & 1) == 0)
                                goto LABEL_94;
                            }
                            else if ((*(_BYTE *)(v282 + 8) & 1) != 0 || v280 != *(double *)v282)
                            {
                              goto LABEL_94;
                            }
                            v283 = v339
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            v284 = *(double *)v283;
                            v285 = *(_BYTE *)(v283 + 8);
                            v286 = v338
                                 + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__estimatedPositionContextStateProbabilityOutdoor;
                            swift_beginAccess();
                            if ((v285 & 1) != 0)
                            {
                              if ((*(_BYTE *)(v286 + 8) & 1) == 0)
                                goto LABEL_94;
                            }
                            else if ((*(_BYTE *)(v286 + 8) & 1) != 0 || v284 != *(double *)v286)
                            {
                              goto LABEL_94;
                            }
                            v287 = (unsigned __int8 *)(v339
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            v288 = *v287;
                            v289 = (unsigned __int8 *)(v338
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__mapMatcherType);
                            swift_beginAccess();
                            v290 = *v289;
                            if (v288 == 4)
                            {
                              if (v290 != 4)
                                goto LABEL_94;
                            }
                            else if (v290 == 4 || v288 != v290)
                            {
                              goto LABEL_94;
                            }
                            v291 = (unsigned __int8 *)(v339
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            v292 = *v291;
                            v293 = (unsigned __int8 *)(v338
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isRouteHintsTriggeredMapMatching);
                            swift_beginAccess();
                            v294 = *v293;
                            if (v292 == 2)
                            {
                              if (v294 != 2)
                                goto LABEL_94;
                            }
                            else if (v294 == 2 || ((((v294 & 1) == 0) ^ v292) & 1) == 0)
                            {
                              goto LABEL_94;
                            }
                            v295 = (unsigned __int8 *)(v339
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            v296 = *v295;
                            v297 = (unsigned __int8 *)(v338
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__loiLocationSourceAccuracy);
                            swift_beginAccess();
                            v298 = *v297;
                            if (v296 == 3)
                            {
                              if (v298 != 3)
                                goto LABEL_94;
                            }
                            else if (v298 == 3 || v296 != v298)
                            {
                              goto LABEL_94;
                            }
                            v299 = (unsigned __int8 *)(v339
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            v300 = *v299;
                            v301 = (unsigned __int8 *)(v338
                                                     + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__batchedLocationFixType);
                            swift_beginAccess();
                            v302 = *v301;
                            if (v300 != 5)
                            {
                              if (v302 == 5 || v300 != v302)
                                goto LABEL_94;
LABEL_297:
                              v303 = (unsigned __int8 *)(v339
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              v304 = *v303;
                              swift_release();
                              v305 = (unsigned __int8 *)(v338
                                                       + OBJC_IVAR____TtCV10ALProtobuf46CLP_LogEntry_PrivateData_DaemonLocationPrivateP33_993346AF53650622B255AB1E3C41340D13_StorageClass__isWifiFixWithAssociatedAp);
                              swift_beginAccess();
                              v306 = *v305;
                              swift_release();
                              if (v304 == 2)
                              {
                                if (v306 != 2)
                                  return 0;
                              }
                              else if (v306 == 2 || ((((v306 & 1) == 0) ^ v304) & 1) == 0)
                              {
                                return 0;
                              }
                              return 1;
                            }
                            if (v302 == 5)
                              goto LABEL_297;
LABEL_94:
                            swift_release();
                            swift_release();
                            return 0;
                          }
                        }
                        else
                        {
                          outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, v323, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          if (v271(v270, 1, v324) != 1)
                          {
                            v272 = v325;
                            outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v270, v325, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            v273 = v323;
                            v274 = specialized static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.== infix(_:_:)(v323, v272);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v272, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v322, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v273, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v326, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                            if ((v274 & 1) == 0)
                              goto LABEL_94;
                            goto LABEL_262;
                          }
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v322, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v323, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
                        }
                        v123 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?, CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo?);
                        v124 = v326;
LABEL_93:
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v124, v123);
                        goto LABEL_94;
                      }
                    }
                    else
                    {
                      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v319, v318, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      if (v308(v213, 1, v337) != 1)
                      {
                        v214 = v335;
                        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v213, v335, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        v215 = v318;
                        v216 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v318, v214, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v214, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v317, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v215, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v319, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                        if ((v216 & 1) == 0)
                          goto LABEL_94;
                        goto LABEL_199;
                      }
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v317, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v318, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
                    }
                    v123 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
                    v124 = v319;
                    goto LABEL_93;
                  }
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v312, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MapMatcherData?);
                  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v313, type metadata accessor for CLP_LogEntry_PrivateData_MapMatcherData);
                }
                v123 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_MapMatcherData?, CLP_LogEntry_PrivateData_MapMatcherData?);
                v124 = v316;
                goto LABEL_93;
              }
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v328, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
              outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v327, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
            }
            v123 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
            v124 = v329;
            goto LABEL_93;
          }
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v332, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_PressureSample?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v331, type metadata accessor for CLP_LogEntry_PrivateData_PressureSample);
        }
        v123 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_PressureSample?, CLP_LogEntry_PrivateData_PressureSample?);
        v124 = v334;
        goto LABEL_93;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_ClientLocationCoordinate?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v43, type metadata accessor for CLP_LogEntry_PrivateData_ClientLocationCoordinate);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v31, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_ClientLocationCoordinate?, CLP_LogEntry_PrivateData_ClientLocationCoordinate?));
    goto LABEL_94;
  }
  result = 0;
  if (v90 != 4 && v88 == v90)
    goto LABEL_59;
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DaemonLocationPrivate.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MatchQualityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.ClientLocationOriginDeviceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.GnssContent._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.PositionContextStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.MapMatcherType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.LoiLocationSourceAccuracy._protobuf_nameMap, a1);
}

uint64_t *CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.unsafeMutableAddressor()
{
  if (one-time initialization token for protoMessageName != -1)
    swift_once();
  return &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName;
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter()
{
  return static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName.getter(&one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(0);
  v3 = (int *)result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + v3[6] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if ((*(_BYTE *)(v0 + v3[7] + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[8]) != 4)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.UndulationModelType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = a2 + a1[5];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a2 + v5;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  *(_BYTE *)(a2 + v8) = 4;
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(uint64_t a1, uint64_t a2)
{
  return protocol witness for static Message.protoMessageName.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo(a1, a2, &one-time initialization token for protoMessageName, &static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.protoMessageName);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  return CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate.AltitudeInfo);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_TechnologyStatus.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
        lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_TechnologyStatus.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v3 = result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 14)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_LocationType and conformance CLP_LogEntry_PrivateData_LocationType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 24)) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_TechnologyStatus.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_TechnologyStatus(a1, 14, 2, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  return CLP_LogEntry_PrivateData_TechnologyStatus.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_TechnologyStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_TechnologyStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_TechnologyStatus()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_VehicleSpeed.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_VehicleSpeed.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_VehicleSpeed.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_VehicleSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_VehicleSpeed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleSpeed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_VehicleSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_VehicleSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_VehicleHeading.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t CLP_LogEntry_PrivateData_VehicleHeading.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_ClientLocationCoordinate.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t static CLP_LogEntry_PrivateData_VehicleHeading.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_VehicleHeading.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_VehicleHeading()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_VehicleHeading@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_VehicleHeading._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_VehicleHeading()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_VehicleHeading()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_XtraFileAvailable.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_XtraFileAvailable.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v3 = result;
  if ((*(_BYTE *)(v0 + *(int *)(result + 20) + 8) & 1) == 0)
    result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  if (!v1)
  {
    if (*(_QWORD *)(v0 + *(int *)(v3 + 24) + 8))
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_XtraFileAvailable.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_XtraFileAvailable@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  result = UnknownStorage.init()();
  v5 = *(int *)(a1 + 24);
  v6 = a2 + *(int *)(a1 + 20);
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  return CLP_LogEntry_PrivateData_XtraFileAvailable.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_XtraFileAvailable@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_XtraFileAvailable._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_XtraFileAvailable()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed.protoMessageName.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t CLP_LogEntry_PrivateData_TimeStamp.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    v4 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_LocationDerivedSpeed.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Wgs84Ecef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t static CLP_LogEntry_PrivateData_LocationDerivedSpeed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed) & 1;
}

Swift::Int CLP_LogEntry_PrivateData_LocationDerivedSpeed.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_LocationDerivedSpeed._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_Location.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_Location.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_Location.protoMessageName.getter()
{
  return 0xD000000000000021;
}

uint64_t CLP_LogEntry_PrivateData_Location._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x24BDAC7A8](v3);
  v85 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x24BDAC7A8](v5);
  v84 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x24BDAC7A8](v9);
  v82 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x24BDAC7A8](v11);
  v79 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x24BDAC7A8](v13);
  v76 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x24BDAC7A8](v15);
  v72 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  v21 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  *(_DWORD *)v22 = 0;
  *(_BYTE *)(v22 + 4) = 1;
  v23 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  v24 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v70 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  v26 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v71 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  *v29 = 2;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  *(_QWORD *)v30 = 0;
  *(_BYTE *)(v30 + 8) = 1;
  v73 = v29;
  v74 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  *v74 = 3;
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v75 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  v32 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v77 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  v34 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v78 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  v36 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
  v80 = (_BYTE *)(v1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected) = 3;
  v37 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v81 = v1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  v38 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  v39 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v39, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?((uint64_t)v19, v20, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v40 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  LODWORD(v39) = *(_DWORD *)v40;
  LOBYTE(v40) = *(_BYTE *)(v40 + 4);
  swift_beginAccess();
  *(_DWORD *)v22 = v39;
  *(_BYTE *)(v22 + 4) = v40;
  v41 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  v42 = v72;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v41, v72, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v42, v23, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  swift_endAccess();
  v43 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  v44 = v76;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v43, v76, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v45 = v70;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v44, v45, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  swift_endAccess();
  v46 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  v47 = v79;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v46, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v48 = v71;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v47, v48, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  swift_endAccess();
  v49 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  LOBYTE(v49) = *v49;
  v50 = v73;
  swift_beginAccess();
  *v50 = (_BYTE)v49;
  v51 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer);
  swift_beginAccess();
  v52 = *v51;
  LOBYTE(v51) = *((_BYTE *)v51 + 8);
  swift_beginAccess();
  *(_QWORD *)v30 = v52;
  *(_BYTE *)(v30 + 8) = (_BYTE)v51;
  v53 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  LOBYTE(v53) = *v53;
  v54 = v74;
  swift_beginAccess();
  *v54 = (_BYTE)v53;
  v55 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  v56 = v82;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v82, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v57 = v75;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v56, v57, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  swift_endAccess();
  v58 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  v59 = v83;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, v83, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v60 = v77;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v59, v60, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  swift_endAccess();
  v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  v62 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, v84, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v63 = v78;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v62, v63, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  swift_endAccess();
  v64 = (_BYTE *)(a1
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  LOBYTE(v64) = *v64;
  v65 = v80;
  swift_beginAccess();
  *v65 = (_BYTE)v64;
  v66 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  v67 = v85;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v66, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_release();
  v68 = v81;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v67, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_Location._StorageClass.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v0+ OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_Location.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t *v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_Location._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_Location._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          v9 = (unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp;
          goto LABEL_21;
        case 2:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_22;
        case 3:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation;
          goto LABEL_21;
        case 4:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate;
          goto LABEL_21;
        case 5:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus;
          goto LABEL_21;
        case 6:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_22;
        case 7:
          swift_beginAccess();
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_22;
        case 8:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
          goto LABEL_19;
        case 9:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed;
          goto LABEL_21;
        case 10:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading;
          goto LABEL_21;
        case 11:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable;
          goto LABEL_21;
        case 12:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
LABEL_19:
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_22;
        case 13:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
          v9 = &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          v10 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
          v11 = &protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed;
LABEL_21:
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(v9, v10, (uint64_t)v11);
          v12 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_22:
          v2 = v12;
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_Location(0) + 20));
  v10 = swift_retain();
  closure #1 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v10, a1, a2, a3);
  if (v4)
    return swift_release();
  v11 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
  closure #3 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #4 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #5 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  v13 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  if (*v13 != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  v14 = v9
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if ((*(_BYTE *)(v14 + 8) & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  v15 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  if (*v15 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.SignalQualityType and conformance CLP_LogEntry_PrivateData_Location.SignalQualityType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #9 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #10 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  closure #11 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  v16 = (_BYTE *)(v9
                + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  if (*v16 != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_Location.MotionDetectedType and conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #13 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #1 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #3 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
}

uint64_t closure #4 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
}

uint64_t closure #5 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TechnologyStatus and conformance CLP_LogEntry_PrivateData_TechnologyStatus, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TechnologyStatus);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
}

uint64_t closure #9 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleSpeed and conformance CLP_LogEntry_PrivateData_VehicleSpeed, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
}

uint64_t closure #10 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_VehicleHeading and conformance CLP_LogEntry_PrivateData_VehicleHeading, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_VehicleHeading);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
}

uint64_t closure #11 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_XtraFileAvailable and conformance CLP_LogEntry_PrivateData_XtraFileAvailable, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
}

uint64_t closure #13 in closure #1 in CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_LocationDerivedSpeed and conformance CLP_LogEntry_PrivateData_LocationDerivedSpeed, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
}

uint64_t static CLP_LogEntry_PrivateData_Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_Location.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  char v74;
  int *v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unsigned __int8 *v121;
  int v122;
  unsigned __int8 *v123;
  int v124;
  uint64_t v125;
  double v126;
  char v127;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int (*v160)(uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  char v163;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;

  v229 = a2;
  v184 = type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed(0);
  v181 = *(_QWORD *)(v184 - 8);
  MEMORY[0x24BDAC7A8](v184);
  v178 = (uint64_t)&v177 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LocationDerivedSpeed?, CLP_LogEntry_PrivateData_LocationDerivedSpeed?));
  MEMORY[0x24BDAC7A8](v180);
  v185 = (uint64_t)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v179 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v183 = (uint64_t)&v177 - v8;
  v193 = type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable(0);
  v189 = *(_QWORD *)(v193 - 8);
  MEMORY[0x24BDAC7A8](v193);
  v182 = (uint64_t)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_XtraFileAvailable?, CLP_LogEntry_PrivateData_XtraFileAvailable?));
  MEMORY[0x24BDAC7A8](v188);
  v194 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v187 = (uint64_t)&v177 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v192 = (uint64_t)&v177 - v14;
  v15 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading(0);
  v196 = *(_QWORD *)(v15 - 8);
  v197 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v186 = (uint64_t)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleHeading?, CLP_LogEntry_PrivateData_VehicleHeading?));
  MEMORY[0x24BDAC7A8](v195);
  v199 = (char *)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v190 = (uint64_t)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v198 = (char *)&v177 - v21;
  v203 = type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed(0);
  v201 = *(_QWORD *)(v203 - 8);
  MEMORY[0x24BDAC7A8](v203);
  v191 = (uint64_t)&v177 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleSpeed?, CLP_LogEntry_PrivateData_VehicleSpeed?));
  MEMORY[0x24BDAC7A8](v200);
  v204 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v202 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v205 = (uint64_t)&v177 - v27;
  v28 = type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus(0);
  v209 = *(_QWORD *)(v28 - 8);
  v210 = v28;
  MEMORY[0x24BDAC7A8](v28);
  v206 = (uint64_t)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TechnologyStatus?, CLP_LogEntry_PrivateData_TechnologyStatus?));
  MEMORY[0x24BDAC7A8](v208);
  v211 = (uint64_t)&v177 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v227 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v213 = (uint64_t)&v177 - v34;
  v35 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
  v216 = *(_QWORD *)(v35 - 8);
  v217 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v207 = (uint64_t)&v177 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate?, CLP_LogEntry_PrivateData_DaemonLocationPrivate?));
  MEMORY[0x24BDAC7A8](v215);
  v218 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v212 = (uint64_t)&v177 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v223 = (uint64_t)&v177 - v41;
  v42 = type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
  v220 = *(_QWORD *)(v42 - 8);
  v221 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v214 = (uint64_t)&v177 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocation?, CLP_LogEntry_PrivateData_DaemonLocation?));
  MEMORY[0x24BDAC7A8](v219);
  v222 = (uint64_t)&v177 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v226 = (char *)&v177 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v46);
  v225 = (char *)&v177 - v48;
  v49 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v224 = (uint64_t)&v177 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)&v177 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v56 = MEMORY[0x24BDAC7A8](v55);
  v228 = (uint64_t)&v177 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v56);
  v59 = (char *)&v177 - v58;
  v60 = a1;
  v61 = a1
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v61, (uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v62 = v229;
  v63 = v229
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__eventReceiptTime;
  swift_beginAccess();
  v64 = (uint64_t)&v54[*(int *)(v52 + 48)];
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, (uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v63, v64, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v65 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v65((uint64_t)v54, 1, v49) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v66 = v65(v64, 1, v49);
    v67 = v60;
    if (v66 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      goto LABEL_11;
    }
LABEL_6:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?);
    v70 = (uint64_t)v54;
LABEL_7:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v70, v69);
    goto LABEL_8;
  }
  v68 = v60;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, v228, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if (v65(v64, 1, v49) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v228, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    goto LABEL_6;
  }
  v72 = v224;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v64, v224, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  v67 = v68;
  swift_retain();
  swift_retain();
  v73 = v228;
  v74 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v228, v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v72, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v59, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v73, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((v74 & 1) == 0)
    goto LABEL_8;
LABEL_11:
  v75 = (int *)(v67
              + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client);
  swift_beginAccess();
  v76 = *v75;
  v77 = *((_BYTE *)v75 + 4);
  v78 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__client;
  swift_beginAccess();
  if ((v77 & 1) != 0)
  {
    v79 = (uint64_t)v226;
    v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    v79 = (uint64_t)v226;
    v80 = (uint64_t)v227;
    v81 = (uint64_t)v225;
    if ((*(_BYTE *)(v78 + 4) & 1) != 0 || v76 != *(_DWORD *)v78)
      goto LABEL_8;
  }
  v82 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v82, v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v83 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__location;
  swift_beginAccess();
  v84 = v222;
  v85 = v222 + *(int *)(v219 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, v222, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v86 = v83;
  v87 = v84;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v86, v85, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v220 + 48);
  v89 = v84;
  v90 = v221;
  if (v88(v89, 1, v221) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
    v91 = v88(v85, 1, v90);
    v92 = v223;
    if (v91 == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
      goto LABEL_23;
    }
LABEL_21:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocation?, CLP_LogEntry_PrivateData_DaemonLocation?);
LABEL_36:
    v70 = v87;
    goto LABEL_7;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v79, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v93 = v88(v85, 1, v90);
  v92 = v223;
  if (v93 == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v79, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
    goto LABEL_21;
  }
  v94 = v79;
  v95 = v214;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v85, v214, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  v96 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v94, v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocation.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v95, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v81, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  v97 = v94;
  v80 = (uint64_t)v227;
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v97, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocation?);
  if ((v96 & 1) == 0)
    goto LABEL_8;
LABEL_23:
  v98 = v67
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v98, v92, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v99 = v62
      + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationPrivate;
  swift_beginAccess();
  v100 = v92;
  v101 = v218;
  v102 = v218 + *(int *)(v215 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, v218, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v103 = v99;
  v87 = v101;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v103, v102, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
  v105 = v101;
  v106 = v217;
  if (v104(v105, 1, v217) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v100, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    if (v104(v102, 1, v106) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  v107 = v212;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v212, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if (v104(v102, 1, v106) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v223, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_28:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_DaemonLocationPrivate?, CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
    goto LABEL_36;
  }
  v108 = v207;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v102, v207, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  v109 = specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(v107, v108, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, closure #1 in static CLP_LogEntry_PrivateData_DaemonLocationPrivate.== infix(_:_:));
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v108, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v223, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v107, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_DaemonLocationPrivate?);
  if ((v109 & 1) == 0)
    goto LABEL_8;
LABEL_30:
  v110 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  v111 = v213;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v110, v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v112 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__status;
  swift_beginAccess();
  v113 = v211;
  v114 = v211 + *(int *)(v208 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, v211, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v115 = v112;
  v87 = v113;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v115, v114, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
  v117 = v113;
  v118 = v210;
  if (v116(v117, 1, v210) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v111, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
    if (v116(v114, 1, v118) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v80, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if (v116(v114, 1, v118) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
LABEL_35:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TechnologyStatus?, CLP_LogEntry_PrivateData_TechnologyStatus?);
    goto LABEL_36;
  }
  v119 = v206;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v114, v206, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  v120 = specialized static CLP_LogEntry_PrivateData_TechnologyStatus.== infix(_:_:)(v80, v119);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v119, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v213, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v80, type metadata accessor for CLP_LogEntry_PrivateData_TechnologyStatus);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TechnologyStatus?);
  if ((v120 & 1) == 0)
    goto LABEL_8;
LABEL_38:
  v121 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  v122 = *v121;
  v123 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__active);
  swift_beginAccess();
  v124 = *v123;
  if (v122 == 2)
  {
    if (v124 != 2)
      goto LABEL_8;
  }
  else if (v124 == 2 || ((((v124 & 1) == 0) ^ v122) & 1) == 0)
  {
    goto LABEL_8;
  }
  v125 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  v126 = *(double *)v125;
  v127 = *(_BYTE *)(v125 + 8);
  v128 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__odometer;
  swift_beginAccess();
  if ((v127 & 1) != 0)
  {
    if ((*(_BYTE *)(v128 + 8) & 1) == 0)
      goto LABEL_8;
  }
  else if ((*(_BYTE *)(v128 + 8) & 1) != 0 || v126 != *(double *)v128)
  {
    goto LABEL_8;
  }
  v129 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  v130 = *v129;
  v131 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__signalQuality);
  swift_beginAccess();
  v132 = *v131;
  if (v130 == 3)
  {
    if (v132 != 3)
      goto LABEL_8;
  }
  else if (v132 == 3 || v130 != v132)
  {
    goto LABEL_8;
  }
  v133 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  v134 = v205;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v133, v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v135 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleSpeed;
  swift_beginAccess();
  v136 = v204;
  v137 = v204 + *(int *)(v200 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, v204, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v138 = v135;
  v87 = v136;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v138, v137, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v139 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48);
  v140 = v136;
  v141 = v203;
  if (v139(v140, 1, v203) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v134, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
    if (v139(v137, 1, v141) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
      v143 = (uint64_t)v198;
      v142 = (uint64_t)v199;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, v202, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  if (v139(v137, 1, v141) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v202, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
LABEL_58:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleSpeed?, CLP_LogEntry_PrivateData_VehicleSpeed?);
    goto LABEL_36;
  }
  v144 = v191;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v137, v191, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  v145 = v202;
  v146 = specialized static CLP_LogEntry_PrivateData_VehicleSpeed.== infix(_:_:)(v202, v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v144, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v205, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v145, type metadata accessor for CLP_LogEntry_PrivateData_VehicleSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v87, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleSpeed?);
  v143 = (uint64_t)v198;
  v142 = (uint64_t)v199;
  if ((v146 & 1) == 0)
    goto LABEL_8;
LABEL_60:
  v147 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v147, v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v148 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__vehicleHeading;
  swift_beginAccess();
  v149 = v142 + *(int *)(v195 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v148, v149, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  v150 = v197;
  v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
  if (v151(v142, 1, v197) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
    if (v151(v149, 1, v150) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
      goto LABEL_67;
    }
    goto LABEL_65;
  }
  v152 = v190;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v142, v190, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if (v151(v149, 1, v150) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
LABEL_65:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_VehicleHeading?, CLP_LogEntry_PrivateData_VehicleHeading?);
    v70 = v142;
    goto LABEL_7;
  }
  v153 = v186;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v149, v186, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  v154 = specialized static CLP_LogEntry_PrivateData_GEOLocationCoordinate2D.== infix(_:_:)(v152, v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v153, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v143, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v152, type metadata accessor for CLP_LogEntry_PrivateData_VehicleHeading);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v142, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_VehicleHeading?);
  if ((v154 & 1) == 0)
    goto LABEL_8;
LABEL_67:
  v155 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  v156 = v192;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v155, v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v157 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__xtraFileAvailable;
  swift_beginAccess();
  v158 = v194;
  v159 = v194 + *(int *)(v188 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v156, v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v157, v159, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  if (v160(v158, 1, v193) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
    if (v160(v159, 1, v193) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
      goto LABEL_74;
    }
    goto LABEL_72;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, v187, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if (v160(v159, 1, v193) == 1)
  {
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v187, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
LABEL_72:
    v69 = &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_XtraFileAvailable?, CLP_LogEntry_PrivateData_XtraFileAvailable?);
    v70 = v194;
    goto LABEL_7;
  }
  v161 = v182;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v159, v182, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  v162 = v187;
  v163 = specialized static CLP_LogEntry_PrivateData_XtraFileAvailable.== infix(_:_:)(v187, v161);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v161, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v192, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v162, type metadata accessor for CLP_LogEntry_PrivateData_XtraFileAvailable);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v194, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_XtraFileAvailable?);
  if ((v163 & 1) == 0)
    goto LABEL_8;
LABEL_74:
  v164 = (unsigned __int8 *)(v67
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  v165 = *v164;
  v166 = (unsigned __int8 *)(v62
                           + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__motionDetected);
  swift_beginAccess();
  v167 = *v166;
  if (v165 == 3)
  {
    if (v167 == 3)
      goto LABEL_79;
LABEL_8:
    swift_release();
    swift_release();
    return 0;
  }
  if (v167 == 3 || v165 != v167)
    goto LABEL_8;
LABEL_79:
  v168 = v67
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  v169 = v183;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v168, v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v170 = v62
       + OBJC_IVAR____TtCV10ALProtobuf33CLP_LogEntry_PrivateData_LocationP33_993346AF53650622B255AB1E3C41340D13_StorageClass__locationDerivedSpeed;
  swift_beginAccess();
  v171 = v185;
  v172 = v185 + *(int *)(v180 + 48);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v169, v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v170, v172, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  v173 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  if (v173(v171, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
    if (v173(v172, 1, v184) == 1)
    {
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
      return 1;
    }
LABEL_84:
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_LocationDerivedSpeed?, CLP_LogEntry_PrivateData_LocationDerivedSpeed?));
    return 0;
  }
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, v179, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  if (v173(v172, 1, v184) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v179, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
    goto LABEL_84;
  }
  v174 = v178;
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v172, v178, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  v175 = v179;
  v176 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v179, v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  swift_release();
  swift_release();
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v174, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v183, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v175, type metadata accessor for CLP_LogEntry_PrivateData_LocationDerivedSpeed);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v185, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_LocationDerivedSpeed?);
  return (v176 & 1) != 0;
}

Swift::Int CLP_LogEntry_PrivateData_Location.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_Location, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_Location@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_Location._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_Location()
{
  return CLP_LogEntry_PrivateData_Location.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_Location.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_Location()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_Location()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_Location()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_Location and conformance CLP_LogEntry_PrivateData_Location, type metadata accessor for CLP_LogEntry_PrivateData_Location, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_Location);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location.SignalQualityType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.SignalQualityType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_Location.MotionDetectedType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_Location.MotionDetectedType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_BatchedLocations.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0);
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation);
        goto LABEL_5;
      }
LABEL_6:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0);
    lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate);
LABEL_5:
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
    goto LABEL_6;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_BatchedLocations.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation(0),
        lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocation and conformance CLP_LogEntry_PrivateData_DaemonLocation, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocation, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocation), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate(0),
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_DaemonLocationPrivate and conformance CLP_LogEntry_PrivateData_DaemonLocationPrivate, type metadata accessor for CLP_LogEntry_PrivateData_DaemonLocationPrivate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_DaemonLocationPrivate), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_BatchedLocations.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v1;
  return UnknownStorage.init()();
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance CLP_LogEntry_PrivateData_BatchedLocations())()
{
  return ALFWiFiScanResultsRequester.query(options:callback:start:end:);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  return CLP_LogEntry_PrivateData_BatchedLocations.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  return CLP_LogEntry_PrivateData_BatchedLocations.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_BatchedLocations._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_BatchedLocations()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_BatchedLocations and conformance CLP_LogEntry_PrivateData_BatchedLocations, type metadata accessor for CLP_LogEntry_PrivateData_BatchedLocations, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_BatchedLocations);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
          goto LABEL_11;
        case 2:
        case 5:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
LABEL_11:
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate(0);
  v3 = (int *)result;
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_GnssModeOfOperation and conformance CLP_LogEntry_PrivateData_GnssModeOfOperation();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v1)
  {
    if (*(_BYTE *)(v0 + v3[6]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[7]) != 5)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_RhythmicGnssWakeMode and conformance CLP_LogEntry_PrivateData_RhythmicGnssWakeMode();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    if ((*(_BYTE *)(v0 + v3[8] + 4) & 1) == 0)
      dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (*(_BYTE *)(v0 + v3[9]) != 2)
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = UnknownStorage.init()();
  v5 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 3;
  *(_BYTE *)(a2 + v5) = 2;
  v6 = a1[8];
  *(_BYTE *)(a2 + a1[7]) = 5;
  v7 = a2 + v6;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a2 + a1[9]) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  return CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate and conformance CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicGnssStatusUpdate);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_RhythmicStreamingControl.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
    {
      type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
      dispatch thunk of Decoder.decodeSingularBoolField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_RhythmicStreamingControl.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl(0);
  if (*(_BYTE *)(v0 + *(int *)(result + 20)) != 2)
    result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v1)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_RhythmicStreamingControl.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = UnknownStorage.init()();
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 2;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  return CLP_LogEntry_PrivateData_RhythmicStreamingControl.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_RhythmicStreamingControl._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_RhythmicStreamingControl and conformance CLP_LogEntry_PrivateData_RhythmicStreamingControl, type metadata accessor for CLP_LogEntry_PrivateData_RhythmicStreamingControl, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_RhythmicStreamingControl);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_MotionActivity.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionActivity.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionActivity.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  int v8;
  uint64_t v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (uint64_t)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[0] = v1 + 17;
  *(_DWORD *)(v1 + 16) = 67306568;
  v23[1] = v1 + 18;
  v23[2] = v1 + 19;
  *(_BYTE *)(v1 + 20) = 2;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 41) = 1026;
  *(_BYTE *)(v1 + 40) = 1;
  v24 = (_BYTE *)(v1 + 41);
  v25 = v1 + 42;
  *(_QWORD *)(v1 + 48) = 0;
  v26 = (_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  v27 = (_QWORD *)(v1 + 64);
  *(_BYTE *)(v1 + 72) = 1;
  *(_WORD *)(v1 + 73) = 1096;
  v28 = (_BYTE *)(v1 + 73);
  v29 = v1 + 74;
  v5 = v1
     + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v30 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  v6 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v7 = *(void (**)(void))(*(_QWORD *)(v6 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, v6);
  v31 = v1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  v7();
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = (_BYTE)v7;
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(a1 + 17);
  swift_beginAccess();
  *(_BYTE *)(v1 + 17) = (_BYTE)v7;
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(a1 + 18);
  swift_beginAccess();
  *(_BYTE *)(v1 + 18) = (_BYTE)v7;
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(a1 + 19);
  swift_beginAccess();
  *(_BYTE *)(v1 + 19) = (_BYTE)v7;
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(a1 + 20);
  swift_beginAccess();
  *(_BYTE *)(v1 + 20) = (_BYTE)v7;
  swift_beginAccess();
  v8 = *(_DWORD *)(a1 + 24);
  LOBYTE(v7) = *(_BYTE *)(a1 + 28);
  swift_beginAccess();
  *(_DWORD *)(v1 + 24) = v8;
  *(_BYTE *)(v1 + 28) = (_BYTE)v7;
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v9;
  *(_BYTE *)(v1 + 40) = v10;
  swift_beginAccess();
  LOBYTE(v9) = *(_BYTE *)(a1 + 41);
  v11 = v24;
  swift_beginAccess();
  *v11 = v9;
  swift_beginAccess();
  LOBYTE(v11) = *(_BYTE *)(a1 + 42);
  swift_beginAccess();
  *(_BYTE *)(v1 + 42) = (_BYTE)v11;
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 48);
  LOBYTE(v9) = *(_BYTE *)(a1 + 56);
  v13 = v26;
  swift_beginAccess();
  *v13 = v12;
  *(_BYTE *)(v1 + 56) = v9;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 64);
  LOBYTE(v9) = *(_BYTE *)(a1 + 72);
  v15 = v27;
  swift_beginAccess();
  *v15 = v14;
  *(_BYTE *)(v1 + 72) = v9;
  swift_beginAccess();
  LOBYTE(v14) = *(_BYTE *)(a1 + 73);
  v16 = v28;
  swift_beginAccess();
  *v16 = v14;
  swift_beginAccess();
  LOBYTE(v14) = *(_BYTE *)(a1 + 74);
  swift_beginAccess();
  *(_BYTE *)(v1 + 74) = v14;
  v17 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  v18 = v32;
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v17, v32, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v19 = v30;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v18, v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  v20 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v20, v18, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_release();
  v21 = v31;
  swift_beginAccess();
  outlined assign with take of Proto_Gpsd_Response?(v18, v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  swift_endAccess();
  return v1;
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity._StorageClass.__deallocating_deinit()
{
  return CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?, &OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
}

uint64_t CLP_LogEntry_PrivateData_DaemonLocation._StorageClass.__deallocating_deinit(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;

  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *a1, a2);
  outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v4 + *a3, a4);
  return swift_deallocClassInstance();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = v1;
  v3 = *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity._StorageClass(0);
    v4 = swift_allocObject();
    v5 = swift_retain();
    CLP_LogEntry_PrivateData_MotionActivity._StorageClass.init(copying:)(v5);
    *(_QWORD *)(v0 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v7 & 1) == 0)
    {
      switch(v6)
      {
        case 1:
        case 12:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
          goto LABEL_14;
        case 2:
        case 4:
        case 13:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
          goto LABEL_14;
        case 3:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
          goto LABEL_14;
        case 5:
        case 8:
          swift_beginAccess();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_15;
        case 6:
          swift_beginAccess();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularFloatField(value:)();
          goto LABEL_15;
        case 7:
        case 10:
        case 11:
          swift_beginAccess();
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_15;
        case 9:
          swift_beginAccess();
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
LABEL_14:
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_15;
        case 14:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v9 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_15:
          v2 = v9;
          swift_endAccess();
          break;
        case 15:
          swift_beginAccess();
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          swift_endAccess();
          break;
        default:
          break;
      }
      v6 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v9;

  v5 = v3;
  v9 = *(_BYTE **)(v5 + *(int *)(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0) + 20));
  swift_retain();
  swift_beginAccess();
  if (v9[16] != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (v4)
    return swift_release();
  swift_beginAccess();
  if (v9[17] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[18] != 3)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.MountedStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[19] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[20] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[28] & 1) == 0)
    dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[40] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[41] != 2)
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[42] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType and conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if ((v9[56] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if ((v9[72] & 1) == 0)
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  swift_beginAccess();
  if (v9[73] != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  swift_beginAccess();
  if (v9[74] != 4)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType and conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  closure #14 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  closure #15 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)((uint64_t)v9, a1, a2, a3);
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t closure #14 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t closure #15 in closure #1 in CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1
      + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
  swift_beginAccess();
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v12, (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static CLP_LogEntry_PrivateData_MeasurementReportCallbackContents.== infix(_:_:)(a1, a2, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)) & 1;
}

BOOL closure #1 in static CLP_LogEntry_PrivateData_MotionActivity.== infix(_:_:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _BOOL8 result;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  char v34;
  char v35;
  double v36;
  char v37;
  char v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  char v44;
  char v45;
  double v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v4 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v66 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
  v7 = MEMORY[0x24BDAC7A8](v6);
  v68 = (uint64_t)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v65 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v67 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v65 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v65 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v65 - v20;
  swift_beginAccess();
  v22 = *(char *)(a1 + 16);
  swift_beginAccess();
  v23 = (char)a2[16];
  if (v22 == 72)
  {
    if ((_DWORD)v23 != 72)
      return 0;
  }
  else if ((_DWORD)v23 == 72 || qword_235BCBD70[v22] != qword_235BCBD70[v23])
  {
    return 0;
  }
  swift_beginAccess();
  v24 = *(unsigned __int8 *)(a1 + 17);
  swift_beginAccess();
  v25 = a2[17];
  if (v24 == 4)
  {
    if (v25 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v25 == 4 || v24 != v25)
      return result;
  }
  swift_beginAccess();
  v27 = *(unsigned __int8 *)(a1 + 18);
  swift_beginAccess();
  v28 = a2[18];
  if (v27 == 3)
  {
    if (v28 != 3)
      return 0;
  }
  else
  {
    result = 0;
    if (v28 == 3 || v27 != v28)
      return result;
  }
  swift_beginAccess();
  v29 = *(unsigned __int8 *)(a1 + 19);
  swift_beginAccess();
  v30 = a2[19];
  if (v29 == 4)
  {
    if (v30 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v30 == 4 || v29 != v30)
      return result;
  }
  swift_beginAccess();
  v31 = *(unsigned __int8 *)(a1 + 20);
  swift_beginAccess();
  v32 = a2[20];
  if (v31 == 2)
  {
    if (v32 != 2)
      return 0;
  }
  else if (v32 == 2 || ((((v32 & 1) == 0) ^ v31) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  v33 = *(float *)(a1 + 24);
  v34 = *(_BYTE *)(a1 + 28);
  v65 = (uint64_t)(a2 + 24);
  swift_beginAccess();
  v35 = a2[28];
  if ((v34 & 1) != 0)
  {
    if (!a2[28])
      return 0;
  }
  else
  {
    if (v33 != *(float *)v65)
      v35 = 1;
    if ((v35 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v36 = *(double *)(a1 + 32);
  v37 = *(_BYTE *)(a1 + 40);
  v65 = (uint64_t)(a2 + 32);
  swift_beginAccess();
  v38 = a2[40];
  if ((v37 & 1) != 0)
  {
    if (!a2[40])
      return 0;
  }
  else
  {
    if (v36 != *(double *)v65)
      v38 = 1;
    if ((v38 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v39 = *(unsigned __int8 *)(a1 + 41);
  swift_beginAccess();
  v40 = a2[41];
  if (v39 == 2)
  {
    if (v40 != 2)
      return 0;
  }
  else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
  {
    return 0;
  }
  swift_beginAccess();
  v41 = *(unsigned __int8 *)(a1 + 42);
  swift_beginAccess();
  v42 = a2[42];
  if (v41 == 4)
  {
    if (v42 != 4)
      return 0;
  }
  else
  {
    result = 0;
    if (v42 == 4 || v41 != v42)
      return result;
  }
  swift_beginAccess();
  v43 = *(double *)(a1 + 48);
  v44 = *(_BYTE *)(a1 + 56);
  v65 = (uint64_t)(a2 + 48);
  swift_beginAccess();
  v45 = a2[56];
  if ((v44 & 1) != 0)
  {
    if (!a2[56])
      return 0;
  }
  else
  {
    if (v43 != *(double *)v65)
      v45 = 1;
    if ((v45 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v46 = *(double *)(a1 + 64);
  v47 = *(_BYTE *)(a1 + 72);
  v65 = (uint64_t)(a2 + 64);
  swift_beginAccess();
  v48 = a2[72];
  if ((v47 & 1) != 0)
  {
    if (!a2[72])
      return 0;
  }
  else
  {
    if (v46 != *(double *)v65)
      v48 = 1;
    if ((v48 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v49 = *(char *)(a1 + 73);
  swift_beginAccess();
  v50 = (char)a2[73];
  if (v49 == 72)
  {
    if ((_DWORD)v50 != 72)
      return 0;
  }
  else if ((_DWORD)v50 == 72 || qword_235BCBD70[v49] != qword_235BCBD70[v50])
  {
    return 0;
  }
  swift_beginAccess();
  v51 = *(unsigned __int8 *)(a1 + 74);
  swift_beginAccess();
  v52 = a2[74];
  if (v51 == 4)
  {
    if (v52 != 4)
      return 0;
LABEL_70:
    v53 = a1
        + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp;
    swift_beginAccess();
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v53, (uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v65 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__timestamp];
    swift_beginAccess();
    v54 = (uint64_t)&v10[*(int *)(v6 + 48)];
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, (uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v55 = v65;
    v65 = v54;
    outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v55, v54, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    if (v56((uint64_t)v10, 1, v69) == 1)
    {
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if (v56(v65, 1, v69) == 1)
      {
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
LABEL_78:
        v58 = a1
            + OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime;
        swift_beginAccess();
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v58, (uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        v59 = (uint64_t)&a2[OBJC_IVAR____TtCV10ALProtobuf39CLP_LogEntry_PrivateData_MotionActivityP33_993346AF53650622B255AB1E3C41340D13_StorageClass__startTime];
        swift_beginAccess();
        v60 = v68;
        v61 = v68 + *(int *)(v6 + 48);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v59, v61, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if (v56(v60, 1, v69) == 1)
        {
          swift_release();
          swift_release();
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
          if (v56(v61, 1, v69) == 1)
          {
            outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
            return 1;
          }
          goto LABEL_83;
        }
        outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, v67, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if (v56(v61, 1, v69) == 1)
        {
          swift_release();
          swift_release();
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v67, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
LABEL_83:
          outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
          return 0;
        }
        v62 = v66;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v61, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        v63 = v67;
        v64 = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)(v67, v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_release();
        swift_release();
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v62, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v16, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v63, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?(v68, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        return (v64 & 1) != 0;
      }
    }
    else
    {
      outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, (uint64_t)v19, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      if (v56(v65, 1, v69) != 1)
      {
        v57 = v66;
        outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions(v65, v66, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        swift_retain();
        swift_retain();
        LODWORD(v65) = specialized static CLP_LogEntry_PrivateData_ReceivedTimeStamp.== infix(_:_:)((uint64_t)v19, v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions(v57, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
        outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
        if ((v65 & 1) != 0)
          goto LABEL_78;
LABEL_76:
        swift_release();
        swift_release();
        return 0;
      }
      swift_retain();
      swift_retain();
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v21, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
      outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v19, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
    }
    outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v10, &demangling cache variable for type metadata for (CLP_LogEntry_PrivateData_TimeStamp?, CLP_LogEntry_PrivateData_TimeStamp?));
    goto LABEL_76;
  }
  result = 0;
  if (v52 != 4 && v51 == v52)
    goto LABEL_70;
  return result;
}

Swift::Int CLP_LogEntry_PrivateData_MotionActivity.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionActivity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_SyncState(a1, &one-time initialization token for defaultInstance, &static CLP_LogEntry_PrivateData_MotionActivity._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_MotionActivity()
{
  return CLP_LogEntry_PrivateData_MotionActivity.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_MotionActivity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionActivity.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionActivity()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionActivity()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionActivity()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
  return Message.hash(into:)();
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.MountedStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.MountedStateType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.ConfidenceType._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionActivity.VehicleExitStateType._protobuf_nameMap, a1);
}

void *CLP_LogEntry_PrivateData_MotionState.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_MotionState.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_MotionState.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
}

uint64_t CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:));
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_MotionState.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_MotionState(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_MotionActivity?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionActivity and conformance CLP_LogEntry_PrivateData_MotionActivity, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionActivity);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity);
}

Swift::Int CLP_LogEntry_PrivateData_MotionState.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_MotionState, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_MotionState(a1, type metadata accessor for CLP_LogEntry_PrivateData_MotionActivity, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_MotionState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_MotionState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_MotionState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_MotionState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_MotionState()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_MotionState and conformance CLP_LogEntry_PrivateData_MotionState, type metadata accessor for CLP_LogEntry_PrivateData_MotionState, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_MotionState);
  return Message.hash(into:)();
}

void *CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName.unsafeMutableAddressor()
{
  return &static CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName;
}

unint64_t static CLP_LogEntry_PrivateData_WorkoutUpdate.protoMessageName.getter()
{
  return 0xD000000000000026;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap.unsafeMutableAddressor()
{
  return CLP_LogEntry_AONLoc_Request._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap);
}

uint64_t static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static CLP_LogEntry_AONLoc_Request._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap, a1);
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
          type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
          lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v10;

  v5 = v3;
  result = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  v10 = result;
  if (*(_BYTE *)(v5 + *(int *)(result + 20)) != 72)
  {
    lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
    result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  if (!v4)
  {
    if ((*(_BYTE *)(v5 + *(int *)(v10 + 24) + 8) & 1) == 0)
      dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    closure #3 in CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(v5, a1, a2, a3);
    if (*(_BYTE *)(v5 + *(int *)(v10 + 32)) != 72)
    {
      lazy protocol witness table accessor for type CLP_LogEntry_PrivateData_DominantMotionModeType and conformance CLP_LogEntry_PrivateData_DominantMotionModeType();
      dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate(0);
  outlined init with copy of CLP_LogEntry_AONLoc_Request.ResultOptions?(a1 + *(int *)(v12 + 28), (uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions?((uint64_t)v7, &demangling cache variable for type metadata for CLP_LogEntry_PrivateData_TimeStamp?);
  outlined init with take of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v7, (uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request((unint64_t *)&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_TimeStamp and conformance CLP_LogEntry_PrivateData_TimeStamp, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_TimeStamp);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of CLP_LogEntry_AONLoc_Request.ResultOptions((uint64_t)v11, type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp);
}

Swift::Int CLP_LogEntry_PrivateData_WorkoutUpdate.hashValue.getter()
{
  return CLP_LogEntry_AONLoc_Request.hashValue.getter(type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, &lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
}

uint64_t protocol witness for Message.init() in conformance CLP_LogEntry_PrivateData_WorkoutUpdate@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  UnknownStorage.init()();
  v4 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 72;
  v5 = a2 + v4;
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a2 + a1[7];
  v7 = type metadata accessor for CLP_LogEntry_PrivateData_TimeStamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_BYTE *)(a2 + a1[8]) = 72;
  return result;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CLP_LogEntry_PrivateData_WorkoutUpdate.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_PrivateData_WorkoutUpdate@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance CLP_LogEntry_AONLoc_Request(&one-time initialization token for _protobuf_nameMap, (uint64_t)static CLP_LogEntry_PrivateData_WorkoutUpdate._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CLP_LogEntry_PrivateData_WorkoutUpdate()
{
  lazy protocol witness table accessor for type CLP_LogEntry_AONLoc_Request and conformance CLP_LogEntry_AONLoc_Request(&lazy protocol witness table cache variable for type CLP_LogEntry_PrivateData_WorkoutUpdate and conformance CLP_LogEntry_PrivateData_WorkoutUpdate, type metadata accessor for CLP_LogEntry_PrivateData_WorkoutUpdate, (uint64_t)&protocol conformance descriptor for CLP_LogEntry_PrivateData_WorkoutUpdate);
  return Message.hash(into:)();
}

